# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 10:05-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. used by: g_newa:
#: galloca.h:101:1
msgid "@struct_type: Type of memory chunks to be allocated"
msgstr ""

#. used by: g_newa:
#: galloca.h:102:1
msgid "@n_structs: Number of chunks to be allocated"
msgstr ""

#. used by: g_newa:
#: galloca.h:104:1
msgid "Wraps g_alloca() in a more typesafe manner."
msgstr ""

#. used by: g_newa:
#: galloca.h:106:1
msgid ""
"Returns: Pointer to stack space for @n_structs chunks of type @struct_type"
msgstr ""

#. used by: g_alloca:
#: galloca.h:62:1
msgid "@size: number of bytes to allocate."
msgstr ""

#. used by: g_alloca:
#: galloca.h:64:31
msgid ""
"Allocates @size bytes on the stack; these bytes will be freed when the "
"current stack frame is cleaned up. This macro essentially just wraps the "
"alloca() function present on most UNIX variants. Thus it provides the same "
"advantages and pitfalls as alloca(): <variablelist> <varlistentry><term></"
"term><listitem><para> + alloca() is very fast, as on most systems it's "
"implemented by just adjusting the stack pointer register. </para></"
"listitem></varlistentry> <varlistentry><term></term><listitem><para> + It "
"doesn't cause any memory fragmentation, within its scope, separate alloca() "
"blocks just build up and are released together at function end. </para></"
"listitem></varlistentry> <varlistentry><term></term><listitem><para> - "
"Allocation sizes have to fit into the current stack frame. For instance in a "
"threaded environment on Linux, the per-thread stack size is limited to 2 "
"Megabytes, so be sparse with alloca() uses. </para></listitem></"
"varlistentry> <varlistentry><term></term><listitem><para> - Allocation "
"failure due to insufficient stack space is not indicated with a %NULL return "
"like e.g. with malloc(). Instead, most systems probably handle it the same "
"way as out of stack space situations from infinite function recursion, i.e. "
"with a segmentation fault. </para></listitem></varlistentry> "
"<varlistentry><term></term><listitem><para> - Special care has to be taken "
"when mixing alloca() with GNU C variable sized arrays. Stack space allocated "
"with alloca() in the same scope as a variable sized array will be freed "
"together with the variable sized array upon exit of that scope, and not upon "
"exit of the enclosing function scope. </para></listitem></varlistentry> </"
"variablelist>"
msgstr ""

#. used by: g_alloca:
#: galloca.h:96:1
msgid "Returns: space for @size bytes, allocated on the stack"
msgstr ""
