# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 10:05-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_access:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_chmod:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_open:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_creat:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_mkdir:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_stat:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_lstat:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_unlink:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_remove:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_rmdir:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_fopen:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_freopen:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_utime:
#: gstdio.c:114:1 gstdio.c:160:1 gstdio.c:218:1 gstdio.c:347:1 gstdio.c:437:1
#: gstdio.c:505:1 gstdio.c:536:1 gstdio.c:580:1 gstdio.c:59:1 gstdio.c:634:1
#: gstdio.c:675:1 gstdio.c:737:1 gstdio.c:793:1
msgid "@filename: a pathname in the GLib file name encoding (UTF-8 on Windows)"
msgstr ""

#. used by: g_chmod:
#: gstdio.c:115:1
msgid "@mode: as in chmod()"
msgstr ""

#. used by: g_chmod:
#: gstdio.c:117:2
msgid ""
"A wrapper for the POSIX chmod() function. The chmod() function is used to "
"set the permissions of a file system object."
msgstr ""

#. used by: g_chmod:
#: gstdio.c:120:5
msgid ""
"On Windows the file protection mechanism is not at all POSIX-like, and the "
"underlying chmod() function in the C library just sets or clears the FAT-"
"style READONLY attribute. It does not touch any ACL. Software that needs to "
"manage file permissions on Windows exactly should use the Win32 API."
msgstr ""

#. used by: g_chmod:
#: gstdio.c:126:1
msgid "See your C library manual for more details about chmod()."
msgstr ""

#. used by: g_chmod:
#: gstdio.c:128:1
msgid "Returns: zero if the operation succeeded, -1 on error."
msgstr ""

#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_access:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_chmod:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_creat:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_chdir:
#: gstdio.c:130:1 gstdio.c:244:1 gstdio.c:399:1 gstdio.c:79:1
msgid "Since: 2.8"
msgstr ""

#. used by: g_open:
#: gstdio.c:161:1
msgid "@flags: as in open()"
msgstr ""

#. used by: g_open:
#: gstdio.c:162:1
msgid "@mode: as in open()"
msgstr ""

#. used by: g_open:
#: gstdio.c:164:2
msgid ""
"A wrapper for the POSIX open() function. The open() function is used to "
"convert a pathname into a file descriptor."
msgstr ""

#. used by: g_open:
#: gstdio.c:167:6
msgid ""
"On POSIX systems file descriptors are implemented by the operating system. "
"On Windows, it's the C library that implements open() and file descriptors. "
"The actual Win32 API for opening files is quite different, see MSDN "
"documentation for CreateFile(). The Win32 API uses file handles, which are "
"more randomish integers, not small integers like file descriptors."
msgstr ""

#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_open:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_creat:
#: gstdio.c:174:6 gstdio.c:232:6
msgid ""
"Because file descriptors are specific to the C library on Windows, the file "
"descriptor returned by this function makes sense only to functions in the "
"same C library. Thus if the GLib-using code uses a different C library than "
"GLib does, the file descriptor returned by this function cannot be passed to "
"C library functions like write() or read()."
msgstr ""

#. used by: g_open:
#: gstdio.c:181:1
msgid "See your C library manual for more details about open()."
msgstr ""

#. used by: g_open:
#: gstdio.c:183:2
msgid ""
"Returns: a new file descriptor, or -1 if an error occurred. The return value "
"can be used exactly like the return value from open()."
msgstr ""

#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_open:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_rename:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_mkdir:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_stat:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_lstat:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_unlink:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_remove:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_rmdir:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_fopen:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_freopen:
#: gstdio.c:186:1 gstdio.c:287:1 gstdio.c:359:1 gstdio.c:466:1 gstdio.c:520:1
#: gstdio.c:550:1 gstdio.c:602:1 gstdio.c:645:1 gstdio.c:695:1 gstdio.c:750:1
msgid "Since: 2.6"
msgstr ""

#. used by: g_creat:
#: gstdio.c:219:1
msgid "@mode: as in creat()"
msgstr ""

#. used by: g_creat:
#: gstdio.c:221:3
msgid ""
"A wrapper for the POSIX creat() function. The creat() function is used to "
"convert a pathname into a file descriptor, creating a file if necessary."
msgstr ""

#. used by: g_creat:
#: gstdio.c:225:6
msgid ""
"On POSIX systems file descriptors are implemented by the operating system. "
"On Windows, it's the C library that implements creat() and file descriptors. "
"The actual Windows API for opening files is different, see MSDN "
"documentation for CreateFile(). The Win32 API uses file handles, which are "
"more randomish integers, not small integers like file descriptors."
msgstr ""

#. used by: g_creat:
#: gstdio.c:239:1
msgid "See your C library manual for more details about creat()."
msgstr ""

#. used by: g_creat:
#: gstdio.c:241:2
msgid ""
"Returns: a new file descriptor, or -1 if an error occurred. The return value "
"can be used exactly like the return value from creat()."
msgstr ""

#. used by: g_rename:
#: gstdio.c:275:1
msgid ""
"@oldfilename: a pathname in the GLib file name encoding (UTF-8 on Windows)"
msgstr ""

#. used by: g_rename:
#: gstdio.c:276:1
msgid "@newfilename: a pathname in the GLib file name encoding"
msgstr ""

#. used by: g_rename:
#: gstdio.c:278:2
msgid ""
"A wrapper for the POSIX rename() function. The rename() function renames a "
"file, moving it between directories if required."
msgstr ""

#. used by: g_rename:
#: gstdio.c:281:3
msgid ""
"See your C library manual for more details about how rename() works on your "
"system. It is not possible in general on Windows to rename a file that is "
"open to some process."
msgstr ""

#. used by: g_rename:
#: gstdio.c:285:1
msgid "Returns: 0 if the renaming succeeded, -1 if an error occurred"
msgstr ""

#. used by: g_mkdir:
#: gstdio.c:348:1
msgid "@mode: permissions to use for the newly created directory"
msgstr ""

#. used by: g_mkdir:
#: gstdio.c:350:3
msgid ""
"A wrapper for the POSIX mkdir() function. The mkdir() function attempts to "
"create a directory with the given name and permissions. The mode argument is "
"ignored on Windows."
msgstr ""

#. used by: g_mkdir:
#: gstdio.c:354:1
msgid "See your C library manual for more details about mkdir()."
msgstr ""

#. used by: g_mkdir:
#: gstdio.c:356:2
msgid ""
"Returns: 0 if the directory was successfully created, -1 if an error occurred"
msgstr ""

#. used by: g_chdir:
#: gstdio.c:390:1
msgid "@path: a pathname in the GLib file name encoding (UTF-8 on Windows)"
msgstr ""

#. used by: g_chdir:
#: gstdio.c:392:2
msgid ""
"A wrapper for the POSIX chdir() function. The function changes the current "
"directory of the process to @path."
msgstr ""

#. used by: g_chdir:
#: gstdio.c:395:1
msgid "See your C library manual for more details about chdir()."
msgstr ""

#. used by: g_chdir:
#: gstdio.c:397:1
msgid "Returns: 0 on success, -1 if an error occurred."
msgstr ""

#. used by: GStatBuf:
#: gstdio.c:430:2
msgid ""
"A type corresponding to the appropriate struct type for the stat system "
"call, depending on the platform and/or compiler being used."
msgstr ""

#. used by: GStatBuf:
#: gstdio.c:433:1
msgid "See g_stat() for more information."
msgstr ""

#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_stat:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_lstat:
#: gstdio.c:438:2 gstdio.c:506:2
msgid ""
"@buf: a pointer to a <structname>stat</structname> struct, which will be "
"filled with the file information"
msgstr ""

#. used by: g_stat:
#: gstdio.c:441:5
msgid ""
"A wrapper for the POSIX stat() function. The stat() function returns "
"information about a file. On Windows the stat() function in the C library "
"checks only the FAT-style READONLY attribute and does not look at the ACL at "
"all. Thus on Windows the protection bits in the st_mode field are a "
"fabrication of little use."
msgstr ""

#. used by: g_stat:
#: gstdio.c:447:5
msgid ""
"On Windows the Microsoft C libraries have several variants of the "
"<structname>stat</structname> struct and stat() function with names like "
"\"_stat\", \"_stat32\", \"_stat32i64\" and \"_stat64i32\". The one used here "
"is for 32-bit code the one with 32-bit size and time fields, specifically "
"called \"_stat32\"."
msgstr ""

#. used by: g_stat:
#: gstdio.c:453:7
msgid ""
"In Microsoft's compiler, by default \"struct stat\" means one with 64-bit "
"time fields while in MinGW \"struct stat\" is the legacy one with 32-bit "
"fields. To hopefully clear up this messs, the gstdio.h header defines a type "
"GStatBuf which is the appropriate struct type depending on the platform and/"
"or compiler being used. On POSIX it is just \"struct stat\", but note that "
"even on POSIX platforms, \"stat\" might be a macro."
msgstr ""

#. used by: g_stat:
#: gstdio.c:461:1
msgid "See your C library manual for more details about stat()."
msgstr ""

#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_stat:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_lstat:
#: gstdio.c:463:2 gstdio.c:517:2
msgid ""
"Returns: 0 if the information was successfully retrieved, -1 if an error "
"occurred"
msgstr ""

#. used by: g_lstat:
#: gstdio.c:509:5
msgid ""
"A wrapper for the POSIX lstat() function. The lstat() function is like stat"
"() except that in the case of symbolic links, it returns information about "
"the symbolic link itself and not the file that it refers to. If the system "
"does not support symbolic links g_lstat() is identical to g_stat()."
msgstr ""

#. used by: g_lstat:
#: gstdio.c:515:1
msgid "See your C library manual for more details about lstat()."
msgstr ""

#. used by: g_unlink:
#: gstdio.c:538:4
msgid ""
"A wrapper for the POSIX unlink() function. The unlink() function deletes a "
"name from the filesystem. If this was the last link to the file and no "
"processes have it opened, the diskspace occupied by the file is freed."
msgstr ""

#. used by: g_unlink:
#: gstdio.c:543:3
msgid ""
"See your C library manual for more details about unlink(). Note that on "
"Windows, it is in general not possible to delete files that are open to some "
"process, or mapped into memory."
msgstr ""

#. used by: g_unlink:
#: gstdio.c:547:2
msgid ""
"Returns: 0 if the name was successfully deleted, -1 if an error occurred"
msgstr ""

#. used by: g_remove:
#: gstdio.c:582:2
msgid ""
"A wrapper for the POSIX remove() function. The remove() function deletes a "
"name from the filesystem."
msgstr ""

#. used by: g_remove:
#: gstdio.c:585:8
msgid ""
"See your C library manual for more details about how remove() works on your "
"system. On Unix, remove() removes also directories, as it calls unlink() for "
"files and rmdir() for directories. On Windows, although remove() in the C "
"library only works for files, this function tries first remove() and then if "
"that fails rmdir(), and thus works for both files and directories. Note "
"however, that on Windows, it is in general not possible to remove a file "
"that is open to some process, or mapped into memory."
msgstr ""

#. used by: g_remove:
#: gstdio.c:594:4
msgid ""
"If this function fails on Windows you can't infer too much from the errno "
"value. rmdir() is tried regardless of what caused remove() to fail. Any "
"errno value set by remove() will be overwritten by that set by rmdir()."
msgstr ""

#. used by: g_remove:
#: gstdio.c:599:2
msgid ""
"Returns: 0 if the file was successfully removed, -1 if an error occurred"
msgstr ""

#. used by: g_access:
#: gstdio.c:60:1
msgid "@mode: as in access()"
msgstr ""

#. used by: g_access:
#: gstdio.c:62:3
msgid ""
"A wrapper for the POSIX access() function. This function is used to test a "
"pathname for one or several of read, write or execute permissions, or just "
"existence."
msgstr ""

#. used by: g_rmdir:
#: gstdio.c:636:2
msgid ""
"A wrapper for the POSIX rmdir() function. The rmdir() function deletes a "
"directory from the filesystem."
msgstr ""

#. used by: g_rmdir:
#: gstdio.c:639:2
msgid ""
"See your C library manual for more details about how rmdir() works on your "
"system."
msgstr ""

#. used by: g_rmdir:
#: gstdio.c:642:2
msgid ""
"Returns: 0 if the directory was successfully removed, -1 if an error occurred"
msgstr ""

#. used by: g_access:
#: gstdio.c:66:6
msgid ""
"On Windows, the file protection mechanism is not at all POSIX-like, and the "
"underlying function in the C library only checks the FAT-style READONLY "
"attribute, and does not look at the ACL of a file at all. This function is "
"this in practise almost useless on Windows. Software that needs to handle "
"file permissions on Windows more exactly should use the Win32 API."
msgstr ""

#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_fopen:
#. #-#-#-#-#  gstdio.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_freopen:
#: gstdio.c:676:2 gstdio.c:738:2
msgid "@mode: a string describing the mode in which the file should be opened"
msgstr ""

#. used by: g_fopen:
#: gstdio.c:679:2
msgid ""
"A wrapper for the stdio fopen() function. The fopen() function opens a file "
"and associates a new stream with it."
msgstr ""

#. used by: g_fopen:
#: gstdio.c:682:7
msgid ""
"Because file descriptors are specific to the C library on Windows, and a "
"file descriptor is partof the <type>FILE</type> struct, the <type>FILE</"
"type> pointer returned by this function makes sense only to functions in the "
"same C library. Thus if the GLib-using code uses a different C library than "
"GLib does, the <type>FILE</type> pointer returned by this function cannot be "
"passed to C library functions like fprintf() or fread()."
msgstr ""

#. used by: g_fopen:
#: gstdio.c:690:1
msgid "See your C library manual for more details about fopen()."
msgstr ""

#. used by: g_fopen:
#: gstdio.c:692:2
msgid ""
"Returns: A <type>FILE</type> pointer if the file was successfully opened, or "
"%NULL if an error occurred"
msgstr ""

#. used by: g_access:
#: gstdio.c:73:1
msgid "See your C library manual for more details about access()."
msgstr ""

#. used by: g_freopen:
#: gstdio.c:740:1
msgid "@stream: an existing stream which will be reused, or %NULL"
msgstr ""

#. used by: g_freopen:
#: gstdio.c:742:2
msgid ""
"A wrapper for the POSIX freopen() function. The freopen() function opens a "
"file and associates it with an existing stream."
msgstr ""

#. used by: g_freopen:
#: gstdio.c:745:1
msgid "See your C library manual for more details about freopen()."
msgstr ""

#. used by: g_freopen:
#: gstdio.c:747:2
msgid ""
"Returns: A <type>FILE</type> pointer if the file was successfully opened, or "
"%NULL if an error occurred."
msgstr ""

#. used by: g_access:
#: gstdio.c:75:3
msgid ""
"Returns: zero if the pathname refers to an existing file system object that "
"has all the tested permissions, or -1 otherwise or on error."
msgstr ""

#. used by: g_utime:
#: gstdio.c:794:1
msgid "@utb: a pointer to a struct utimbuf."
msgstr ""

#. used by: g_utime:
#: gstdio.c:796:2
msgid ""
"A wrapper for the POSIX utime() function. The utime() function sets the "
"access and modification timestamps of a file."
msgstr ""

#. used by: g_utime:
#: gstdio.c:799:2
msgid ""
"See your C library manual for more details about how utime() works on your "
"system."
msgstr ""

#. used by: g_utime:
#: gstdio.c:802:2
msgid "Returns: 0 if the operation was successful, -1 if an error occurred"
msgstr ""

#. used by: g_utime:
#: gstdio.c:805:1
msgid "Since: 2.18"
msgstr ""
