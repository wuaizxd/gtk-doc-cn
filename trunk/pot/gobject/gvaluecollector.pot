# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 21:05-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_COLLECT:
#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_LCOPY:
#: gvaluecollector.h:134:2 gvaluecollector.h:164:2
msgid ""
"@value: a #GValue return location. @value is supposed to be initialized "
"according to the value type to be collected"
msgstr ""

#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_COLLECT_INIT:
#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_COLLECT:
#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_LCOPY:
#: gvaluecollector.h:136:1 gvaluecollector.h:166:1 gvaluecollector.h:79:1
msgid "@var_args: the va_list variable; it may be evaluated multiple times"
msgstr ""

#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_COLLECT_INIT:
#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_COLLECT:
#: gvaluecollector.h:137:2 gvaluecollector.h:80:2
msgid ""
"@flags: flags which are passed on to the collect_value() function of the "
"#GTypeValueTable of @value."
msgstr ""

#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_COLLECT_INIT:
#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_COLLECT:
#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_LCOPY:
#: gvaluecollector.h:139:2 gvaluecollector.h:169:2 gvaluecollector.h:82:2
msgid ""
"@__error: a #gchar** variable that will be modified to hold a g_new() "
"allocated error messages if something fails"
msgstr ""

#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_COLLECT_INIT:
#. #-#-#-#-#  gvaluecollector.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_VALUE_COLLECT:
#: gvaluecollector.h:142:3 gvaluecollector.h:85:3
msgid ""
"Collects a variable argument value from a va_list. We have to implement the "
"varargs collection as a macro, because on some systems va_list variables "
"cannot be passed by reference."
msgstr ""

#. used by: G_VALUE_COLLECT:
#: gvaluecollector.h:146:3
msgid ""
"Note: If you are creating the @value argument just before calling this "
"macro, you should use the #G_VALUE_COLLECT_INIT variant and pass the "
"unitialized #GValue. That variant is faster than #G_VALUE_COLLECT."
msgstr ""

#. used by: G_VALUE_LCOPY:
#: gvaluecollector.h:167:2
msgid ""
"@flags: flags which are passed on to the lcopy_value() function of the "
"#GTypeValueTable of @value."
msgstr ""

#. used by: G_VALUE_LCOPY:
#: gvaluecollector.h:172:2
msgid ""
"Collects a value's variable argument locations from a va_list. Usage is "
"analogous to G_VALUE_COLLECT()."
msgstr ""

#. used by: G_VALUE_COLLECT_FORMAT_MAX_LENGTH:
#: gvaluecollector.h:220:2
msgid ""
"The maximal number of #GTypeCValue<!-- -->s which can be collected for a "
"single #GValue."
msgstr ""

#. used by: SECTION:value_collection
#: gvaluecollector.h:23:1
msgid "@Short_description: Converting varargs to generic values"
msgstr ""

#. used by: SECTION:value_collection
#: gvaluecollector.h:24:1
msgid "@See_also:#GValueTable"
msgstr ""

#. used by: SECTION:value_collection
#: gvaluecollector.h:25:1
msgid "@Title: Varargs Value Collection"
msgstr ""

#. used by: SECTION:value_collection
#: gvaluecollector.h:27:4
msgid ""
"The macros in this section provide the varargs parsing support needed in "
"variadic GObject functions such as g_object_new() or g_object_set(). They "
"currently support the collection of integral types, floating point types and "
"pointers."
msgstr ""

#. used by: GTypeCValue:
#: gvaluecollector.h:58:1
msgid "@v_int: the field for holding integer values"
msgstr ""

#. used by: GTypeCValue:
#: gvaluecollector.h:59:2
msgid ""
"@v_long: the field for holding long integer values @v_int64: the field for "
"holding 64 bit integer values"
msgstr ""

#. used by: GTypeCValue:
#: gvaluecollector.h:61:1
msgid "@v_double: the field for holding floating point values"
msgstr ""

#. used by: GTypeCValue:
#: gvaluecollector.h:62:1
msgid "@v_pointer: the field for holding pointers"
msgstr ""

#. used by: GTypeCValue:
#: gvaluecollector.h:64:1
msgid "A union holding one collected value."
msgstr ""

#. used by: G_VALUE_COLLECT_INIT:
#: gvaluecollector.h:77:1
msgid "@value: a #GValue return location. @value must contain only 0 bytes."
msgstr ""

#. used by: G_VALUE_COLLECT_INIT:
#: gvaluecollector.h:78:1
msgid "@_value_type: the #GType to use for @value."
msgstr ""

#. used by: G_VALUE_COLLECT_INIT:
#: gvaluecollector.h:89:1
msgid "Since: 2.24"
msgstr ""
