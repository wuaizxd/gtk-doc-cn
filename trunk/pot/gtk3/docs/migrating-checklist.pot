msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-04-14 19:54+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: migrating-checklist.sgml:0(None)
msgid "translator-credits"
msgstr ""

#: migrating-checklist.sgml:103(para)
msgid "Implement a handler for the #GtkWidget::popup-menu signal:"
msgstr ""

#: migrating-checklist.sgml:107(programlisting)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"my_widget_popup_menu_handler (GtkWidget *widget)\n"
"{\n"
"  do_popup_menu (widget, NULL);\n"
"  return TRUE;\n"
"}\n"
"        "
msgstr ""

#: migrating-checklist.sgml:119(para)
msgid ""
"If you do not pass a positioning function to gtk_menu_popup(), it will show "
"the menu at the mouse position by default. This is what you usually want "
"when the menu is shown as a result of pressing a mouse button. However, if "
"you press the <keycombo><keycap>Shift</keycap><keycap>F10</keycap></"
"keycombo> or <keycap>Menu</keycap> keys while the widget is focused, the "
"mouse cursor may not be near the widget at all. In the <link linkend="
"\"do_popup_menu\">example above</link>, you may want to provide your own "
"<link linkend=\"GtkMenuPositionFunc\">menu-positioning function</link> in "
"the case where the <parameter>event</parameter> is %NULL. This function "
"should compute the desired position for a menu when it is invoked through "
"the keyboard. For example, #GtkEntry aligns the top edge of its popup menu "
"with the bottom edge of the entry."
msgstr ""

#: migrating-checklist.sgml:139(para)
msgid ""
"For the standard key bindings to work, your widget must be able to take the "
"keyboard focus. In general, widgets should be fully usable through the "
"keyboard and not just the mouse. The very first step of this is to ensure "
"that your widget turns on the %GTK_CAN_FOCUS <link linkend=\"gtkwidgetflags"
"\">flag</link>."
msgstr ""

#: migrating-checklist.sgml:150(title)
msgid "Use GdkEventExpose.region"
msgstr ""

#: migrating-checklist.sgml:153(title) migrating-checklist.sgml:20(title)
#: migrating-checklist.sgml:217(title) migrating-checklist.sgml:288(title)
msgid "Why"
msgstr ""

#: migrating-checklist.sgml:154(para)
msgid ""
"The <structfield>region</structfield> field of <structname>GdkEventExpose</"
"structname> allows you to redraw less than the traditional "
"<structfield>GdkEventRegion.area</structfield>."
msgstr ""

#: migrating-checklist.sgml:161(para)
msgid ""
"In early GTK+ versions, the <structname>GdkEventExpose</structname> "
"structure only had an <structfield>area</structfield> field to let you "
"determine the region that you needed to redraw. In current GTK+, this field "
"still exists for compatibility and as a simple interface. However, there is "
"also a <structfield>region</structfield> field which contains a fine-grained "
"region. The <structfield>area</structfield> field is simply the bounding "
"rectangle of the <structfield>region</structfield>."
msgstr ""

#: migrating-checklist.sgml:17(title)
msgid "Implement GtkWidget::popup_menu"
msgstr ""

#: migrating-checklist.sgml:172(para)
msgid ""
"Widgets that are very expensive to re-render, such as an image editor, may "
"prefer to use the <structfield>GdkEventExpose.region</structfield> field to "
"paint as little as possible. Widgets that just use a few drawing primitives, "
"such as labels and buttons, may prefer to use the traditional "
"<structfield>GdkEventExpose.area</structfield> field for simplicity."
msgstr ""

#: migrating-checklist.sgml:182(para)
msgid ""
"Regions have an internal representation that is accessible as a list of "
"rectangles. To turn the <structfield>GdkEventExpose.region</structfield> "
"field into such a list, use gdk_region_get_rectangles():"
msgstr ""

#: migrating-checklist.sgml:189(programlisting)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"my_widget_expose_event_handler (GtkWidget *widget, GdkEventExpose *event)\n"
"{\n"
"  GdkRectangle *rects;\n"
"  int n_rects;\n"
"  int i;\n"
"\n"
"  gdk_region_get_rectangles (event-&gt;region, &amp;rects, &amp;n_rects);\n"
"\n"
"  for (i = 0; i &lt; n_rects; i++)\n"
"    {\n"
"      /* Repaint rectangle: (rects[i].x, rects[i].y),\n"
"       *                    (rects[i].width, rects[i].height)\n"
"       */\n"
"    }\n"
"\n"
"  g_free (rects);\n"
"\n"
"  return FALSE;\n"
"}\n"
"    "
msgstr ""

#: migrating-checklist.sgml:21(para)
msgid ""
"By handling this signal, you let widgets have context-sensitive menus that "
"can be invoked with the standard key bindings."
msgstr ""

#: migrating-checklist.sgml:214(title)
msgid "Test for modifier keys correctly"
msgstr ""

#: migrating-checklist.sgml:218(para)
msgid ""
"With gtk_accelerator_get_default_mod_mask() you can test for modifier keys "
"reliably; this way your key event handlers will work correctly even if "
"<keycap>NumLock</keycap> or <keycap>CapsLock</keycap> are activated."
msgstr ""

#: migrating-checklist.sgml:226(para)
msgid ""
"In a <structname>GdkEventKey</structname>, the <structfield>state</"
"structfield> field is a bit mask which indicates the modifier state at the "
"time the key was pressed. Modifiers are keys like <keycap>Control</keycap> "
"and <keycap>NumLock</keycap>. When implementing a #GtkWidget::key-press-"
"event handler, you should use gtk_accelerator_get_default_mod_mask() to test "
"against modifier keys. This function returns a bit mask which encompasses "
"all the modifiers which the user may be actively pressing, such as "
"<keycap>Control</keycap>, <keycap>Shift</keycap>, and <keycap>Alt</keycap>, "
"but ignores \"innocuous\" modifiers such as <keycap>NumLock</keycap> and "
"<keycap>CapsLock</keycap>."
msgstr ""

#: migrating-checklist.sgml:242(para)
msgid ""
"Say you want to see if <keycombo><keycap>Control</keycap><keycap>F10</"
"keycap></keycombo> was pressed. Doing a simple test like <literal>event-&gt;"
"keysym&nbsp;==&nbsp;GDK_F10 &amp;&amp; event-&gt;state&nbsp;==&nbsp;"
"GDK_CONTROL_MASK</literal> is not enough. If <keycap>CapsLock</keycap> is "
"pressed, then <structfield>event-&gt;state</structfield> will be equal to "
"<literal>GDK_CONTROL_MASK | GDK_LOCK_MASK</literal>, and the simple test "
"will fail. By taking the logical-and of <structfield>event-&gt;state</"
"structfield> and gtk_accelerator_get_default_mod_mask(), you can ignore the "
"modifiers which are not actively pressed by the user at the same time as the "
"base key."
msgstr ""

#: migrating-checklist.sgml:258(para)
msgid ""
"The following example correctly tests for <keycombo><keycap>Control</"
"keycap><keycap>F10</keycap></keycombo> being pressed."
msgstr ""

#: migrating-checklist.sgml:264(programlisting)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"my_widget_key_press_event_handler (GtkWidget *widget, GdkEventKey *event)\n"
"{\n"
"  GdkModifierType modifiers;\n"
"\n"
"  modifiers = gtk_accelerator_get_default_mod_mask ();\n"
"\n"
"  if (event-&gt;keysym == GDK_F10\n"
"      &amp;&amp; (event-&gt;state &amp; modifiers) == GDK_CONTROL_MASK)\n"
"    {\n"
"      g_print (\"Control-F10 was pressed\\n\");\n"
"      return TRUE;\n"
"    }\n"
"\n"
"  return FALSE;\n"
"}\n"
"    "
msgstr ""

#: migrating-checklist.sgml:28(para)
msgid ""
"The #GtkWidget::popup-menu signal instructs the widget for which it is "
"emitted to create a context-sensitive popup menu. By default, the <link "
"linkend=\"gtk-bindings\">key binding mechanism</link> is set to emit this "
"signal when the <keycombo><keycap>Shift</keycap><keycap>F10</keycap></"
"keycombo> or <keycap>Menu</keycap> keys are pressed while a widget has the "
"focus. If a widget in your application shows a popup menu when you press a "
"mouse button, you can make it work as well through the normal key binding "
"mechanism in the following fahion:"
msgstr ""

#: migrating-checklist.sgml:285(title)
msgid "Use named icons"
msgstr ""

#: migrating-checklist.sgml:289(para)
msgid ""
"Named icons automatically adapt to theme changes, giving your application a "
"much more integrated appearance."
msgstr ""

#: migrating-checklist.sgml:295(para)
msgid ""
"Named icons can be used for window icons (see gtk_window_set_icon_name()) "
"and images (see gtk_image_set_icon_name()). You can also use named icons for "
"drag-and-drop (see gtk_drag_source_set_icon_name()) and in treeview cells "
"(see the #GtkCellRendererPixbuf:icon-name property)."
msgstr ""

#: migrating-checklist.sgml:42(para)
msgid ""
"Write a function to create and show a popup menu. This function needs to "
"know the button number and the event's time to pass them to gtk_menu_popup"
"(). You can implement such a function like this:"
msgstr ""

#: migrating-checklist.sgml:49(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"do_popup_menu (GtkWidget *my_widget, GdkEventButton *event)\n"
"{\n"
"  GtkWidget *menu;\n"
"  int button, event_time;\n"
"\n"
"  menu = gtk_menu_new ();\n"
"  g_signal_connect (menu, \"deactivate\",\n"
"                    G_CALLBACK (gtk_widget_destroy), NULL);\n"
"\n"
"  /* ... add menu items ... */\n"
"\n"
"  if (event)\n"
"    {\n"
"      button = event-&gt;button;\n"
"      event_time = event-&gt;time;\n"
"    }\n"
"  else\n"
"    {\n"
"      button = 0;\n"
"      event_time = gtk_get_current_event_time ();\n"
"    }\n"
"\n"
"  gtk_menu_attach_to_widget (GTK_MENU (menu), my_widget, NULL);\n"
"  gtk_menu_popup (GTK_MENU (menu), NULL, NULL, NULL, NULL,\n"
"                  button, event_time);\n"
"}\n"
"        "
msgstr ""

#: migrating-checklist.sgml:6(title)
msgid "Migration Checklist"
msgstr ""

#: migrating-checklist.sgml:8(para)
msgid ""
"This chapter includes a checklist of things you need to do to ensure that "
"your programs are good citizens in the GTK+ world. By paying attention to "
"the points in the checklist, you ensure that many automatic features of GTK+ "
"will work correctly in your program."
msgstr ""

#: migrating-checklist.sgml:81(para)
msgid ""
"In your #GtkWidget::button-press-event handler, call this function when you "
"need to pop up a menu:"
msgstr ""

#: migrating-checklist.sgml:86(programlisting)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"my_widget_button_press_event_handler (GtkWidget *widget, GdkEventButton *event)\n"
"{\n"
"  /* Ignore double-clicks and triple-clicks */\n"
"  if (event-&gt;button == 3 &amp;&amp; event-&gt;type == GDK_BUTTON_PRESS)\n"
"    {\n"
"      do_popup_menu (widget, event);\n"
"      return TRUE;\n"
"    }\n"
"\n"
"  return FALSE;\n"
"}\n"
"        "
msgstr ""
