# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 20:26-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_withdraw:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_is_input_only:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_is_shaped:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_beep:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_skip_taskbar_hint:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_skip_pager_hint:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_urgency_hint:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_geometry_hints:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_title:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_role:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_startup_id:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_transient_for:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_root_origin:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_frame_extents:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_override_redirect:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_accept_focus:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_focus_on_map:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_icon_name:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_iconify:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_deiconify:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_stick:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_unstick:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_maximize:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_unmaximize:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_fullscreen:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_unfullscreen:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_keep_above:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_keep_below:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_group:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_group:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_decorations:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_functions:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_begin_resize_drag:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_begin_move_drag:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_enable_synchronized_configure:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_configure_finished:
#: gdkwindow.c:10012:1 gdkwindow.c:10034:1 gdkwindow.c:10054:1
#: gdkwindow.c:10099:1 gdkwindow.c:10122:1 gdkwindow.c:10139:1
#: gdkwindow.c:10156:1 gdkwindow.c:10177:1 gdkwindow.c:10191:1
#: gdkwindow.c:10214:1 gdkwindow.c:10237:1 gdkwindow.c:10263:1
#: gdkwindow.c:10286:1 gdkwindow.c:10310:1 gdkwindow.c:10333:1
#: gdkwindow.c:10349:1 gdkwindow.c:10372:1 gdkwindow.c:10417:1
#: gdkwindow.c:10444:1 gdkwindow.c:10471:1 gdkwindow.c:10497:1
#: gdkwindow.c:10520:1 gdkwindow.c:5669:1 gdkwindow.c:7503:1
#: gdkwindow.c:7521:1 gdkwindow.c:7947:1 gdkwindow.c:9796:1 gdkwindow.c:9817:1
#: gdkwindow.c:9840:1 gdkwindow.c:9857:1 gdkwindow.c:9894:1 gdkwindow.c:9912:1
#: gdkwindow.c:9938:1 gdkwindow.c:9956:1 gdkwindow.c:9976:1 gdkwindow.c:9994:1
msgid "@window: a toplevel #GdkWindow"
msgstr ""

#. used by: gdk_window_set_override_redirect:
#: gdkwindow.c:10013:1
msgid "@override_redirect: %TRUE if window should be override redirect"
msgstr ""

#. used by: gdk_window_set_override_redirect:
#: gdkwindow.c:10015:4
msgid ""
"An override redirect window is not under the control of the window manager. "
"This means it won't have a titlebar, won't be minimizable, etc. - it will be "
"entirely under the control of the application. The window manager can't see "
"the override redirect window at all."
msgstr ""

#. used by: gdk_window_set_override_redirect:
#: gdkwindow.c:10020:3
msgid ""
"Override redirect should only be used for short-lived temporary windows, "
"such as popup menus. #GtkMenu uses an override redirect window in its "
"implementation, for example."
msgstr ""

#. used by: gdk_window_set_accept_focus:
#: gdkwindow.c:10035:1
msgid "@accept_focus: %TRUE if the window should receive input focus"
msgstr ""

#. used by: gdk_window_set_accept_focus:
#: gdkwindow.c:10037:2
msgid ""
"Setting @accept_focus to %FALSE hints the desktop environment that the "
"window doesn't want to receive input focus."
msgstr ""

#. used by: gdk_window_set_accept_focus:
#: gdkwindow.c:10040:2
msgid ""
"On X, it is the responsibility of the window manager to interpret this hint. "
"ICCCM-compliant window manager usually respect it."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_accept_focus:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_keep_above:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_keep_below:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_group:
#: gdkwindow.c:10043:1 gdkwindow.c:10299:1 gdkwindow.c:10323:1
#: gdkwindow.c:10339:1
msgid "Since: 2.4"
msgstr ""

#. used by: gdk_window_set_focus_on_map:
#: gdkwindow.c:10055:1
msgid ""
"@focus_on_map: %TRUE if the window should receive input focus when mapped"
msgstr ""

#. used by: gdk_window_set_focus_on_map:
#: gdkwindow.c:10057:4
msgid ""
"Setting @focus_on_map to %FALSE hints the desktop environment that the "
"window doesn't want to receive input focus when it is mapped. focus_on_map "
"should be turned off for windows that aren't triggered interactively (such "
"as popups from network activity)."
msgstr ""

#. used by: gdk_window_set_focus_on_map:
#: gdkwindow.c:10062:3
msgid ""
"On X, it is the responsibility of the window manager to interpret this hint. "
"Window managers following the freedesktop.org window manager extension "
"specification should respect it."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_focus_on_map:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_enable_synchronized_configure:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_configure_finished:
#: gdkwindow.c:10066:1 gdkwindow.c:10510:1 gdkwindow.c:10531:1
msgid "Since: 2.6"
msgstr ""

#. used by: gdk_window_set_icon_list:
#: gdkwindow.c:10077:1
msgid "@window: The #GdkWindow toplevel window to set the icon of."
msgstr ""

#. used by: gdk_window_set_icon_list:
#: gdkwindow.c:10078:2
msgid ""
"@pixbufs: (transfer none) (element-type GdkPixbuf): A list of pixbufs, of "
"different sizes."
msgstr ""

#. used by: gdk_window_set_icon_list:
#: gdkwindow.c:10081:7
msgid ""
"Sets a list of icons for the window. One of these will be used to represent "
"the window when it has been iconified. The icon is usually shown in an icon "
"box or some sort of task bar. Which icon size is shown depends on the window "
"manager. The window manager can scale the icon  but setting several size "
"icons can give better image quality since the window manager may only need "
"to scale the icon by a small amount or not at all."
msgstr ""

#. used by: gdk_window_set_icon_name:
#: gdkwindow.c:10100:1
msgid "@name: name of window while iconified (minimized)"
msgstr ""

#. used by: gdk_window_set_icon_name:
#: gdkwindow.c:10102:4
msgid ""
"Windows may have a name used while minimized, distinct from the name they "
"display in their titlebar. Most of the time this is a bad idea from a user "
"interface standpoint. But you can set such a name with this function, if you "
"like."
msgstr ""

#. used by: gdk_window_set_icon_name:
#: gdkwindow.c:10107:2
msgid ""
"After calling this with a non-%NULL @name, calls to gdk_window_set_title() "
"will not update the icon title."
msgstr ""

#. used by: gdk_window_set_icon_name:
#: gdkwindow.c:10110:2
msgid ""
"Using %NULL for @name unsets the icon title; further calls to "
"gdk_window_set_title() will again update the icon title as well."
msgstr ""

#. used by: gdk_window_iconify:
#: gdkwindow.c:10124:3
msgid ""
"Asks to iconify (minimize) @window. The window manager may choose to ignore "
"the request, but normally will honor it. Using gtk_window_iconify() is "
"preferred, if you have a #GtkWindow widget."
msgstr ""

#. used by: gdk_window_iconify:
#: gdkwindow.c:10128:1
msgid "This function only makes sense when @window is a toplevel window."
msgstr ""

#. used by: gdk_window_deiconify:
#: gdkwindow.c:10141:5
msgid ""
"Attempt to deiconify (unminimize) @window. On X11 the window manager may "
"choose to ignore the request to deiconify. When using GTK+, use "
"gtk_window_deiconify() instead of the #GdkWindow variant. Or better yet, you "
"probably want to use gtk_window_present(), which raises the window, focuses "
"it, unminimizes it, and puts it on the current desktop."
msgstr ""

#. used by: gdk_window_stick:
#: gdkwindow.c:10158:3
msgid ""
"\"Pins\" a window such that it's on all workspaces and does not scroll with "
"viewports, for window managers that have scrollable viewports. (When using "
"#GtkWindow, gtk_window_stick() may be more useful.)"
msgstr ""

#. used by: gdk_window_stick:
#: gdkwindow.c:10162:5
msgid ""
"On the X11 platform, this function depends on window manager support, so may "
"have no effect with many window managers. However, GDK will do the best it "
"can to convince the window manager to stick the window. For window managers "
"that don't support this operation, there's nothing you can do to force it to "
"happen."
msgstr ""

#. used by: gdk_window_unstick:
#: gdkwindow.c:10179:2
msgid ""
"Reverse operation for gdk_window_stick(); see gdk_window_stick(), and "
"gtk_window_unstick()."
msgstr ""

#. used by: gdk_window_maximize:
#: gdkwindow.c:10193:2
msgid ""
"Maximizes the window. If the window was already maximized, then this "
"function does nothing."
msgstr ""

#. used by: gdk_window_maximize:
#: gdkwindow.c:10196:6
msgid ""
"On X11, asks the window manager to maximize @window, if the window manager "
"supports this operation. Not all window managers support this, and some "
"deliberately ignore it or don't have a concept of \"maximized\"; so you "
"can't rely on the maximization actually happening. But it will happen with "
"most standard window managers, and GDK makes a best effort to get it to "
"happen."
msgstr ""

#. used by: gdk_window_maximize:
#: gdkwindow.c:10203:1
msgid "On Windows, reliably maximizes the window."
msgstr ""

#. used by: gdk_window_unmaximize:
#: gdkwindow.c:10216:2
msgid ""
"Unmaximizes the window. If the window wasn't maximized, then this function "
"does nothing."
msgstr ""

#. used by: gdk_window_unmaximize:
#: gdkwindow.c:10219:6
msgid ""
"On X11, asks the window manager to unmaximize @window, if the window manager "
"supports this operation. Not all window managers support this, and some "
"deliberately ignore it or don't have a concept of \"maximized\"; so you "
"can't rely on the unmaximization actually happening. But it will happen with "
"most standard window managers, and GDK makes a best effort to get it to "
"happen."
msgstr ""

#. used by: gdk_window_unmaximize:
#: gdkwindow.c:10226:1
msgid "On Windows, reliably unmaximizes the window."
msgstr ""

#. used by: gdk_window_fullscreen:
#: gdkwindow.c:10239:3
msgid ""
"Moves the window into fullscreen mode. This means the window covers the "
"entire screen and is above any panels or task bars."
msgstr ""

#. used by: gdk_window_fullscreen:
#: gdkwindow.c:10243:1
msgid "If the window was already fullscreen, then this function does nothing."
msgstr ""

#. used by: gdk_window_fullscreen:
#: gdkwindow.c:10245:7
msgid ""
"On X11, asks the window manager to put @window in a fullscreen state, if the "
"window manager supports this operation. Not all window managers support "
"this, and some deliberately ignore it or don't have a concept of \"fullscreen"
"\"; so you can't rely on the fullscreenification actually happening. But it "
"will happen with most standard window managers, and GDK makes a best effort "
"to get it to happen."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_screen_get_toplevel_windows:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_skip_taskbar_hint:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_skip_pager_hint:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_fullscreen:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_unfullscreen:
#: gdkwindow.c:10253:1 gdkwindow.c:10276:1 gdkwindow.c:2513:1
#: gdkwindow.c:9806:1 gdkwindow.c:9829:1
msgid "Since: 2.2"
msgstr ""

#. used by: gdk_window_unfullscreen:
#: gdkwindow.c:10265:2
msgid ""
"Moves the window out of fullscreen mode. If the window was not fullscreen, "
"does nothing."
msgstr ""

#. used by: gdk_window_unfullscreen:
#: gdkwindow.c:10268:7
msgid ""
"On X11, asks the window manager to move @window out of the fullscreen state, "
"if the window manager supports this operation. Not all window managers "
"support this, and some deliberately ignore it or don't have a concept of "
"\"fullscreen\"; so you can't rely on the unfullscreenification actually "
"happening. But it will happen with most standard window managers, and GDK "
"makes a best effort to get it to happen."
msgstr ""

#. used by: gdk_window_set_keep_above:
#: gdkwindow.c:10287:1
msgid "@setting: whether to keep @window above other windows"
msgstr ""

#. used by: gdk_window_set_keep_above:
#: gdkwindow.c:10289:2
msgid ""
"Set if @window must be kept above other windows. If the window was already "
"above, then this function does nothing."
msgstr ""

#. used by: gdk_window_set_keep_above:
#: gdkwindow.c:10292:6
msgid ""
"On X11, asks the window manager to keep @window above, if the window manager "
"supports this operation. Not all window managers support this, and some "
"deliberately ignore it or don't have a concept of \"keep above\"; so you "
"can't rely on the window being kept above. But it will happen with most "
"standard window managers, and GDK makes a best effort to get it to happen."
msgstr ""

#. used by: gdk_window_set_keep_below:
#: gdkwindow.c:10311:1
msgid "@setting: whether to keep @window below other windows"
msgstr ""

#. used by: gdk_window_set_keep_below:
#: gdkwindow.c:10313:2
msgid ""
"Set if @window must be kept below other windows. If the window was already "
"below, then this function does nothing."
msgstr ""

#. used by: gdk_window_set_keep_below:
#: gdkwindow.c:10316:6
msgid ""
"On X11, asks the window manager to keep @window below, if the window manager "
"supports this operation. Not all window managers support this, and some "
"deliberately ignore it or don't have a concept of \"keep below\"; so you "
"can't rely on the window being kept below. But it will happen with most "
"standard window managers, and GDK makes a best effort to get it to happen."
msgstr ""

#. used by: gdk_window_get_group:
#: gdkwindow.c:10335:1
msgid ""
"Returns the group leader window for @window. See gdk_window_set_group()."
msgstr ""

#. used by: gdk_window_get_group:
#: gdkwindow.c:10337:1
msgid "Return value: (transfer none): the group leader window for @window"
msgstr ""

#. used by: gdk_window_set_group:
#: gdkwindow.c:10350:1
msgid ""
"@leader: group leader window, or %NULL to restore the default group leader "
"window"
msgstr ""

#. used by: gdk_window_set_group:
#: gdkwindow.c:10352:4
msgid ""
"Sets the group leader window for @window. By default, GDK sets the group "
"leader for all toplevel windows to a global window implicitly created by "
"GDK. With this function you can override this default."
msgstr ""

#. used by: gdk_window_set_group:
#: gdkwindow.c:10357:5
msgid ""
"The group leader window allows the window manager to distinguish all windows "
"that belong to a single application. It may for example allow users to "
"minimize/unminimize all windows belonging to an application at once. You "
"should only set a non-default group window if your application pretends to "
"be multiple applications."
msgstr ""

#. used by: gdk_window_set_decorations:
#: gdkwindow.c:10373:1
msgid "@decorations: decoration hint mask"
msgstr ""

#. used by: gdk_window_set_decorations:
#: gdkwindow.c:10375:5
msgid ""
"\"Decorations\" are the features the window manager adds to a toplevel "
"#GdkWindow. This function sets the traditional Motif window manager hints "
"that tell the window manager which decorations you would like your window to "
"have. Usually you should use gtk_window_set_decorated() on a #GtkWindow "
"instead of using the GDK function directly."
msgstr ""

#. used by: gdk_window_set_decorations:
#: gdkwindow.c:10381:5
msgid ""
"The @decorations argument is the logical OR of the fields in the "
"#GdkWMDecoration enumeration. If #GDK_DECOR_ALL is included in the mask, the "
"other bits indicate which decorations should be turned off. If "
"#GDK_DECOR_ALL is not included, then the other bits indicate which "
"decorations should be turned on."
msgstr ""

#. used by: gdk_window_set_decorations:
#: gdkwindow.c:10387:2
msgid ""
"Most window managers honor a decorations hint of 0 to disable all "
"decorations, but very few honor all possible combinations of bits."
msgstr ""

#. used by: gdk_window_get_decorations:
#: gdkwindow.c:10400:1
msgid "@window: The toplevel #GdkWindow to get the decorations from"
msgstr ""

#. used by: gdk_window_get_decorations:
#: gdkwindow.c:10401:1
msgid "@decorations: (out): The window decorations will be written here"
msgstr ""

#. used by: gdk_window_get_decorations:
#: gdkwindow.c:10403:2
msgid ""
"Returns the decorations set on the GdkWindow with gdk_window_set_decorations"
"()."
msgstr ""

#. used by: gdk_window_get_decorations:
#: gdkwindow.c:10406:1
msgid "Returns: %TRUE if the window has decorations set, %FALSE otherwise."
msgstr ""

#. used by: gdk_window_set_functions:
#: gdkwindow.c:10418:1
msgid "@functions: bitmask of operations to allow on @window"
msgstr ""

#. used by: gdk_window_set_functions:
#: gdkwindow.c:10420:2
msgid ""
"Sets hints about the window management functions to make available via "
"buttons on the window frame."
msgstr ""

#. used by: gdk_window_set_functions:
#: gdkwindow.c:10423:4
msgid ""
"On the X backend, this function sets the traditional Motif window manager "
"hint for this purpose. However, few window managers do anything reliable or "
"interesting with this hint. Many ignore it entirely."
msgstr ""

#. used by: gdk_window_set_functions:
#: gdkwindow.c:10428:5
msgid ""
"The @functions argument is the logical OR of values from the #GdkWMFunction "
"enumeration. If the bitmask includes #GDK_FUNC_ALL, then the other bits "
"indicate which functions to disable; if it doesn't include #GDK_FUNC_ALL, it "
"indicates which functions to enable."
msgstr ""

#. used by: gdk_window_begin_resize_drag:
#: gdkwindow.c:10445:1
msgid "@edge: the edge or corner from which the drag is started"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_begin_resize_drag:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_begin_move_drag:
#: gdkwindow.c:10446:1 gdkwindow.c:10472:1
msgid "@button: the button being used to drag"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_begin_resize_drag:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_begin_move_drag:
#: gdkwindow.c:10447:1 gdkwindow.c:10473:1
msgid "@root_x: root window X coordinate of mouse click that began the drag"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_begin_resize_drag:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_begin_move_drag:
#: gdkwindow.c:10448:1 gdkwindow.c:10474:1
msgid "@root_y: root window Y coordinate of mouse click that began the drag"
msgstr ""

#. used by: gdk_window_begin_resize_drag:
#: gdkwindow.c:10449:1
msgid ""
"@timestamp: timestamp of mouse click that began the drag (use "
"gdk_event_get_time())"
msgstr ""

#. used by: gdk_window_begin_resize_drag:
#: gdkwindow.c:10451:5
msgid ""
"Begins a window resize operation (for a toplevel window). You might use this "
"function to implement a \"window resize grip,\" for example; in fact "
"#GtkStatusbar uses it. The function works best with window managers that "
"support the <ulink url=\"http://www.freedesktop.org/Standards/wm-spec"
"\">Extended Window Manager Hints</ulink>, but has a fallback implementation "
"for other window managers."
msgstr ""

#. used by: gdk_window_begin_move_drag:
#: gdkwindow.c:10475:1
msgid "@timestamp: timestamp of mouse click that began the drag"
msgstr ""

#. used by: gdk_window_begin_move_drag:
#: gdkwindow.c:10477:6
msgid ""
"Begins a window move operation (for a toplevel window).  You might use this "
"function to implement a \"window move grip,\" for example. The function "
"works best with window managers that support the <ulink url=\"http://www."
"freedesktop.org/Standards/wm-spec\">Extended Window Manager Hints</ulink>, "
"but has a fallback implementation for other window managers."
msgstr ""

#. used by: gdk_window_enable_synchronized_configure:
#: gdkwindow.c:10499:7
msgid ""
"Indicates that the application will cooperate with the window system in "
"synchronizing the window repaint with the window manager during resizing "
"operations. After an application calls this function, it must call "
"gdk_window_configure_finished() every time it has finished all processing "
"associated with a set of Configure events. Toplevel GTK+ windows "
"automatically use this protocol."
msgstr ""

#. used by: SECTION:windows
#: gdkwindow.c:105:5
msgid ""
"For rendering an offscreen window onto its embedder, the contents of the "
"offscreen window are available as a surface, via "
"gdk_offscreen_window_get_surface(). </para> </refsect2>"
msgstr ""

#. used by: gdk_window_enable_synchronized_configure:
#: gdkwindow.c:10507:2
msgid ""
"On X, calling this function makes @window participate in the "
"_NET_WM_SYNC_REQUEST window manager protocol."
msgstr ""

#. used by: gdk_window_configure_finished:
#: gdkwindow.c:10522:5
msgid ""
"Signal to the window system that the application has finished handling "
"Configure events it has received. Window Managers can use this to better "
"synchronize the frame repaint with the application. GTK+ applications will "
"automatically call this function when appropriate."
msgstr ""

#. used by: gdk_window_configure_finished:
#: gdkwindow.c:10528:2
msgid ""
"This function can only be called if gdk_window_enable_synchronized_configure"
"() was called previously."
msgstr ""

#. used by: gdk_window_set_opacity:
#: gdkwindow.c:10541:1
msgid "@window: a top-level #GdkWindow"
msgstr ""

#. used by: gdk_window_set_opacity:
#: gdkwindow.c:10542:1
msgid "@opacity: opacity"
msgstr ""

#. used by: gdk_window_set_opacity:
#: gdkwindow.c:10544:3
msgid ""
"Request the windowing system to make @window partially transparent, with "
"opacity 0 being fully transparent and 1 fully opaque. (Values of the opacity "
"parameter are clamped to the [0,1] range.)"
msgstr ""

#. used by: gdk_window_set_opacity:
#: gdkwindow.c:10548:2
msgid ""
"On X11, this works only on X screens with a compositing manager running."
msgstr ""

#. used by: gdk_window_set_opacity:
#: gdkwindow.c:10551:3
msgid ""
"For setting up per-pixel alpha, see gdk_screen_get_rgba_visual(). For making "
"non-toplevel windows translucent, see gdk_window_set_composited()."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_composited:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_beep:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_startup_id:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_opacity:
#: gdkwindow.c:10555:1 gdkwindow.c:7403:1 gdkwindow.c:7953:1
#: gdkwindow.c:9944:1
msgid "Since: 2.12"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_clear_update_area:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_device_position:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_device_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_device_cursor:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_support_multidevice:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_support_multidevice:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_register_dnd:
#: gdkwindow.c:10574:1 gdkwindow.c:4625:1 gdkwindow.c:4929:1
#: gdkwindow.c:5845:1 gdkwindow.c:6648:1 gdkwindow.c:7981:1 gdkwindow.c:8010:1
msgid "@window: a #GdkWindow."
msgstr ""

#. used by: gdk_window_register_dnd:
#: gdkwindow.c:10576:1
msgid "Registers a window as a potential drop destination."
msgstr ""

#. used by: gdk_window_get_drag_protocol:
#: gdkwindow.c:10586:1
msgid "@window: the destination window"
msgstr ""

#. used by: gdk_window_get_drag_protocol:
#: gdkwindow.c:10587:3
msgid ""
"@target: (out) (allow-none) (transfer full): location of the window where "
"the drop should happen. This may be @window or a proxy window, or %NULL if "
"@window does not support Drag and Drop."
msgstr ""

#. used by: gdk_window_get_drag_protocol:
#: gdkwindow.c:10591:1
msgid "Finds out the DND protocol supported by a window."
msgstr ""

#. used by: gdk_window_get_drag_protocol:
#: gdkwindow.c:10593:1
msgid "Returns: the supported DND protocol."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkWindow::create-surface:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_device_position:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_device_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_device_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_device_cursor:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_device_cursor:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_support_multidevice:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_support_multidevice:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_source_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_drag_protocol:
#: gdkwindow.c:10595:1 gdkwindow.c:485:1 gdkwindow.c:4942:1 gdkwindow.c:5788:1
#: gdkwindow.c:5852:1 gdkwindow.c:6661:1 gdkwindow.c:6688:1 gdkwindow.c:7989:1
#: gdkwindow.c:8017:1 gdkwindow.c:8877:1
msgid "Since: 3.0"
msgstr ""

#. used by: gdk_drag_begin:
#: gdkwindow.c:10608:1
msgid "@window: the source window for this drag."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_drag_begin:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_drag_begin_for_device:
#: gdkwindow.c:10609:2 gdkwindow.c:10638:2
msgid ""
"@targets: (transfer none) (element-type GdkAtom): the offered targets, as "
"list of #GdkAtoms"
msgstr ""

#. used by: gdk_drag_begin:
#: gdkwindow.c:10612:4
msgid ""
"Starts a drag and creates a new drag context for it. This function assumes "
"that the drag is controlled by the client pointer device, use "
"gdk_drag_begin_for_device() to begin a drag with a different device."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_drag_begin:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_drag_begin_for_device:
#: gdkwindow.c:10617:1 gdkwindow.c:10643:1
msgid "This function is called by the drag source."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_drag_begin:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_drag_begin_for_device:
#: gdkwindow.c:10619:1 gdkwindow.c:10645:1
msgid "Return value: (transfer full): a newly created #GdkDragContext"
msgstr ""

#. used by: gdk_drag_begin_for_device:
#: gdkwindow.c:10636:1
msgid "@window: the source window for this drag"
msgstr ""

#. used by: gdk_drag_begin_for_device:
#: gdkwindow.c:10637:1
msgid "@device: the device that controls this drag"
msgstr ""

#. used by: gdk_drag_begin_for_device:
#: gdkwindow.c:10641:1
msgid "Starts a drag and creates a new drag context for it."
msgstr ""

#. used by: gdk_test_render_sync:
#: gdkwindow.c:10657:1
msgid "@window: a mapped #GdkWindow"
msgstr ""

#. used by: gdk_test_render_sync:
#: gdkwindow.c:10659:2
msgid ""
"Retrieves a pixel from @window to force the windowing system to carry out "
"any pending rendering commands."
msgstr ""

#. used by: gdk_test_render_sync:
#: gdkwindow.c:10662:2
msgid ""
"This function is intended to be used to synchronize with rendering "
"pipelines, to benchmark windowing system rendering operations."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_test_render_sync:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_test_simulate_key:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_test_simulate_button:
#: gdkwindow.c:10665:1 gdkwindow.c:10702:1 gdkwindow.c:10741:1
msgid "Since: 2.14"
msgstr ""

#. used by: gdk_test_simulate_key:
#: gdkwindow.c:10675:1
msgid "@window: a #GdkWindow to simulate a key event for"
msgstr ""

#. used by: gdk_test_simulate_key:
#: gdkwindow.c:10676:1
msgid "@x:      x coordinate within @window for the key event"
msgstr ""

#. used by: gdk_test_simulate_key:
#: gdkwindow.c:10677:1
msgid "@y:      y coordinate within @window for the key event"
msgstr ""

#. used by: gdk_test_simulate_key:
#: gdkwindow.c:10678:1
msgid "@keyval: A GDK keyboard value"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_test_simulate_key:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_test_simulate_button:
#: gdkwindow.c:10679:1 gdkwindow.c:10722:1
msgid "@modifiers: Keyboard modifiers the event is setup with"
msgstr ""

#. used by: gdk_test_simulate_key:
#: gdkwindow.c:10680:1
msgid "@key_pressrelease: either %GDK_KEY_PRESS or %GDK_KEY_RELEASE"
msgstr ""

#. used by: gdk_test_simulate_key:
#: gdkwindow.c:10682:4
msgid ""
"This function is intended to be used in GTK+ test programs. If (@x,@y) are > "
"(-1,-1), it will warp the mouse pointer to the given (@x,@y) coordinates "
"within @window and simulate a key press or release event."
msgstr ""

#. used by: gdk_test_simulate_key:
#: gdkwindow.c:10687:6
msgid ""
"When the mouse pointer is warped to the target location, use of this "
"function outside of test programs that run in their own virtual windowing "
"system (e.g. Xvfb) is not recommended. If (@x,@y) are passed as (-1,-1), the "
"mouse pointer will not be warped and @window origin will be used as mouse "
"pointer location for the event."
msgstr ""

#. used by: gdk_test_simulate_key:
#: gdkwindow.c:10694:4
msgid ""
"Also, gdk_test_simulate_key() is a fairly low level function, for most "
"testing purposes, gtk_test_widget_send_key() is the right function to call "
"which will generate a key press event followed by its accompanying key "
"release event."
msgstr ""

#. used by: gdk_test_simulate_key:
#: gdkwindow.c:10699:2
msgid ""
"Returns: whether all actions necessary for a key event simulation were "
"carried out successfully"
msgstr ""

#. used by: gdk_test_simulate_button:
#: gdkwindow.c:10718:1
msgid "@window: a #GdkWindow to simulate a button event for"
msgstr ""

#. used by: gdk_test_simulate_button:
#: gdkwindow.c:10719:1
msgid "@x:      x coordinate within @window for the button event"
msgstr ""

#. used by: gdk_test_simulate_button:
#: gdkwindow.c:10720:1
msgid "@y:      y coordinate within @window for the button event"
msgstr ""

#. used by: gdk_test_simulate_button:
#: gdkwindow.c:10721:1
msgid "@button: Number of the pointer button for the event, usually 1, 2 or 3"
msgstr ""

#. used by: gdk_test_simulate_button:
#: gdkwindow.c:10723:1
msgid "@button_pressrelease: either %GDK_BUTTON_PRESS or %GDK_BUTTON_RELEASE"
msgstr ""

#. used by: gdk_test_simulate_button:
#: gdkwindow.c:10725:7
msgid ""
"This function is intended to be used in GTK+ test programs. It will warp the "
"mouse pointer to the given (@x,@y) coordinates within @window and simulate a "
"button press or release event. Because the mouse pointer needs to be warped "
"to the target location, use of this function outside of test programs that "
"run in their own virtual windowing system (e.g. Xvfb) is not recommended."
msgstr ""

#. used by: gdk_test_simulate_button:
#: gdkwindow.c:10733:4
msgid ""
"Also, gdk_test_simulate_button() is a fairly low level function, for most "
"testing purposes, gtk_test_widget_click() is the right function to call "
"which will generate a button press event followed by its accompanying button "
"release event."
msgstr ""

#. used by: gdk_test_simulate_button:
#: gdkwindow.c:10738:2
msgid ""
"Returns: whether all actions necessary for a button event simulation were "
"carried out successfully"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkWindowChildFunc:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_reparent:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_ensure_native:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_destroy_hierarchy:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_destroy:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_destroy:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_user_data:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_user_data:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_window_type:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_visual:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_screen:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_display:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_is_destroyed:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_has_native:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_position:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_parent:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_effective_parent:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_toplevel:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_effective_toplevel:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_children:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_peek_children:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_add_filter: (skip)
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_remove_filter: (skip)
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_is_visible:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_is_viewable:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_state:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_begin_paint_rect:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_begin_paint_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_end_paint:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_flush:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_clip_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_visible_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_cairo_create:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_process_updates:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_invalidate_rect:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_invalidate_maybe_recurse:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_invalidate_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_invalidate_for_expose:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_update_area:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_freeze_updates:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_thaw_updates:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_freeze_toplevel_updates_libgtk_only:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_thaw_toplevel_updates_libgtk_only:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_pointer:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_show_unraised:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_raise:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_lower:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_restack:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_show:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_hide:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_device_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_move:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_resize:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_move_resize:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_scroll:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_move_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_background:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_background_rgba:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_background_pattern:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_cursor:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_cursor:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_geometry:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_width:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_height:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_origin:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_root_coords:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_shape_combine_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_child_shapes:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_merge_child_shapes:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_input_shape_combine_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_child_input_shapes:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_merge_child_input_shapes:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_static_gravities:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_composited:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_composited:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_source_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_source_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_focus:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_property_get:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_property_change: (skip)
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_property_delete:
#: gdkwindow.c:10757:1 gdkwindow.c:10829:1 gdkwindow.c:10862:1
#: gdkwindow.c:1498:1 gdkwindow.c:1665:1 gdkwindow.c:1837:1 gdkwindow.c:2008:1
#: gdkwindow.c:2026:1 gdkwindow.c:2045:1 gdkwindow.c:2068:1 gdkwindow.c:2086:1
#: gdkwindow.c:2102:1 gdkwindow.c:2120:1 gdkwindow.c:2138:1 gdkwindow.c:2155:1
#: gdkwindow.c:2195:1 gdkwindow.c:2214:1 gdkwindow.c:2242:1 gdkwindow.c:2268:1
#: gdkwindow.c:2293:1 gdkwindow.c:2325:1 gdkwindow.c:2354:1 gdkwindow.c:2380:1
#: gdkwindow.c:2401:1 gdkwindow.c:2462:1 gdkwindow.c:2541:1 gdkwindow.c:2558:1
#: gdkwindow.c:2580:1 gdkwindow.c:2765:1 gdkwindow.c:2788:1 gdkwindow.c:2915:1
#: gdkwindow.c:3272:1 gdkwindow.c:3349:1 gdkwindow.c:3392:1 gdkwindow.c:3592:1
#: gdkwindow.c:4170:1 gdkwindow.c:4266:1 gdkwindow.c:4418:1 gdkwindow.c:4472:1
#: gdkwindow.c:4507:1 gdkwindow.c:4567:1 gdkwindow.c:4646:1 gdkwindow.c:4667:1
#: gdkwindow.c:4688:1 gdkwindow.c:4712:1 gdkwindow.c:4894:1 gdkwindow.c:5256:1
#: gdkwindow.c:5274:1 gdkwindow.c:5407:1 gdkwindow.c:5441:1 gdkwindow.c:5558:1
#: gdkwindow.c:5578:1 gdkwindow.c:5710:1 gdkwindow.c:5758:1 gdkwindow.c:5778:1
#: gdkwindow.c:6207:1 gdkwindow.c:6230:1 gdkwindow.c:6254:1 gdkwindow.c:6278:1
#: gdkwindow.c:6401:1 gdkwindow.c:6460:1 gdkwindow.c:6489:1 gdkwindow.c:6515:1
#: gdkwindow.c:6584:1 gdkwindow.c:6608:1 gdkwindow.c:6722:1 gdkwindow.c:6805:1
#: gdkwindow.c:6827:1 gdkwindow.c:6849:1 gdkwindow.c:6889:1 gdkwindow.c:7049:1
#: gdkwindow.c:7162:1 gdkwindow.c:7179:1 gdkwindow.c:7200:1 gdkwindow.c:7284:1
#: gdkwindow.c:7303:1 gdkwindow.c:7327:1 gdkwindow.c:7356:1 gdkwindow.c:7376:1
#: gdkwindow.c:8868:1 gdkwindow.c:8937:1 gdkwindow.c:9725:1 gdkwindow.h:809:1
msgid "@window: a #GdkWindow"
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10758:1
msgid "@property: the property to retrieve"
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10759:5
msgid ""
"@type: the desired property type, or %GDK_NONE, if any type of data is "
"acceptable. If this does not match the actual type, then @actual_format and "
"@actual_length will be filled in, a warning will be printed to stderr and no "
"data will be returned."
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10764:2
msgid ""
"@offset: the offset into the property at which to begin retrieving data, in "
"4 byte units."
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10766:5
msgid ""
"@length: the length of the data to retrieve in bytes.  Data is considered to "
"be retrieved in 4 byte chunks, so @length will be rounded up to the next "
"highest 4 byte boundary (so be careful not to pass a value that might "
"overflow when rounded up)."
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10771:2
msgid "@pdelete: if %TRUE, delete the property after retrieving the data."
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10773:2
msgid ""
"@actual_property_type: (out) (transfer none): location to store the actual "
"type of the property."
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10775:2
msgid ""
"@actual_format: (out): location to store the actual return format of the "
"data; either 8, 16 or 32 bits."
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10777:6
msgid ""
"@actual_length: location to store the length of the retrieved data, in "
"bytes.  Data returned in the 32 bit format is stored in a long variable, so "
"the actual number of 32 bit elements should be be calculated via "
"@actual_length / sizeof(glong) to ensure portability to 64 bit systems."
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10783:3
msgid ""
"@data: (out) (array length=actual_length) (transfer full): location to store "
"a pointer to the data. The retrieved data should be freed with g_free() when "
"you are finished using it."
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10787:3
msgid ""
"Retrieves a portion of the contents of a property. If the property does not "
"exist, then the function returns %FALSE, and %GDK_NONE will be stored in "
"@actual_property_type."
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10791:14
msgid ""
"<note> <para> The XGetWindowProperty() function that gdk_property_get() uses "
"has a very confusing and complicated set of semantics. uses has a very "
"confusing and complicated set of semantics. Unfortunately, gdk_property_get"
"() makes the situation worse instead of better (the semantics should be "
"considered undefined), and also prints warnings to stderr in cases where it "
"should return a useful error to the program. You are advised to use "
"XGetWindowProperty() directly until a replacement function for "
"gdk_property_get() is provided. </para> </note>"
msgstr ""

#. used by: gdk_property_get:
#: gdkwindow.c:10806:2
msgid ""
"Returns: %TRUE if data was successfully received and stored in @data, "
"otherwise %FALSE."
msgstr ""

#. used by: gdk_property_change: (skip)
#: gdkwindow.c:10830:1
msgid "@property: the property to change"
msgstr ""

#. used by: gdk_property_change: (skip)
#: gdkwindow.c:10831:3
msgid ""
"@type: the new type for the property. If @mode is %GDK_PROP_MODE_PREPEND or "
"%GDK_PROP_MODE_APPEND, then this must match the existing type or an error "
"will occur."
msgstr ""

#. used by: gdk_property_change: (skip)
#: gdkwindow.c:10834:3
msgid ""
"@format: the new format for the property. If @mode is %GDK_PROP_MODE_PREPEND "
"or %GDK_PROP_MODE_APPEND, then this must match the existing format or an "
"error will occur."
msgstr ""

#. used by: gdk_property_change: (skip)
#: gdkwindow.c:10837:2
msgid ""
"@mode: a value describing how the new data is to be combined with the "
"current data."
msgstr ""

#. used by: gdk_property_change: (skip)
#: gdkwindow.c:10839:3
msgid ""
"@data: the data (a <literal>guchar *</literal> <literal>gushort *</literal>, "
"or <literal>gulong *</literal>, depending on @format), cast to a "
"<literal>guchar *</literal>."
msgstr ""

#. used by: gdk_property_change: (skip)
#: gdkwindow.c:10842:2
msgid ""
"@nelements: the number of elements of size determined by the format, "
"contained in @data."
msgstr ""

#. used by: gdk_property_change: (skip)
#: gdkwindow.c:10845:1
msgid "Changes the contents of a property on a window."
msgstr ""

#. used by: gdk_property_delete:
#: gdkwindow.c:10863:1
msgid "@property: the property to delete"
msgstr ""

#. used by: gdk_property_delete:
#: gdkwindow.c:10865:1
msgid "Deletes a property from a window."
msgstr ""

#. used by: gdk_window_new: (constructor)
#: gdkwindow.c:1237:2
msgid ""
"@parent: (allow-none): a #GdkWindow, or %NULL to create the window as a "
"child of the default root window for the default display."
msgstr ""

#. used by: gdk_window_new: (constructor)
#: gdkwindow.c:1239:1
msgid "@attributes: attributes of the new window"
msgstr ""

#. used by: gdk_window_new: (constructor)
#: gdkwindow.c:1240:1
msgid "@attributes_mask: mask indicating which fields in @attributes are valid"
msgstr ""

#. used by: gdk_window_new: (constructor)
#: gdkwindow.c:1242:4
msgid ""
"Creates a new #GdkWindow using the attributes from @attributes. See "
"#GdkWindowAttr and #GdkWindowAttributesType for more details.  Note: to use "
"this on displays other than the default display, @parent must be specified."
msgstr ""

#. used by: gdk_window_new: (constructor)
#: gdkwindow.c:1247:1
msgid "Return value: (transfer full): the new #GdkWindow"
msgstr ""

#. used by: gdk_window_reparent:
#: gdkwindow.c:1499:1
msgid "@new_parent: new parent to move @window into"
msgstr ""

#. used by: gdk_window_reparent:
#: gdkwindow.c:1500:1
msgid "@x: X location inside the new parent"
msgstr ""

#. used by: gdk_window_reparent:
#: gdkwindow.c:1501:1
msgid "@y: Y location inside the new parent"
msgstr ""

#. used by: gdk_window_reparent:
#: gdkwindow.c:1503:2
msgid ""
"Reparents @window into the given @new_parent. The window being reparented "
"will be unmapped as a side effect."
msgstr ""

#. used by: gdk_window_ensure_native:
#: gdkwindow.c:1667:2
msgid ""
"Tries to ensure that there is a window-system native window for this "
"GdkWindow. This may fail in some situations, returning %FALSE."
msgstr ""

#. used by: gdk_window_ensure_native:
#: gdkwindow.c:1670:1
msgid "Offscreen window and children of them can never have native windows."
msgstr ""

#. used by: gdk_window_ensure_native:
#: gdkwindow.c:1672:1
msgid "Some backends may not support native child windows."
msgstr ""

#. used by: gdk_window_ensure_native:
#: gdkwindow.c:1674:1
msgid "Returns: %TRUE if the window has a native window, %FALSE otherwise"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkWindow:cursor:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkWindow::pick-embedded-child:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkWindow::to-embedder:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkWindow::from-embedder:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_ensure_native:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_is_destroyed:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_flush:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_restack:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_cursor:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_root_coords:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_geometry_changed:
#: gdkwindow.c:1676:1 gdkwindow.c:2161:1 gdkwindow.c:3290:1 gdkwindow.c:368:1
#: gdkwindow.c:390:1 gdkwindow.c:419:1 gdkwindow.c:450:1 gdkwindow.c:5456:1
#: gdkwindow.c:6596:1 gdkwindow.c:6900:1 gdkwindow.c:8808:1
msgid "Since: 2.18"
msgstr ""

#. used by: _gdk_event_filter_unref:
#: gdkwindow.c:1761:1
msgid "@window: A #GdkWindow, or %NULL to be the global window"
msgstr ""

#. used by: _gdk_event_filter_unref:
#: gdkwindow.c:1762:1
msgid "@filter: A window filter"
msgstr ""

#. used by: _gdk_event_filter_unref:
#: gdkwindow.c:1764:3
msgid ""
"Release a reference to @filter.  Note this function may mutate the list "
"storage, so you need to handle this if iterating over a list of filters."
msgstr ""

#. used by: _gdk_window_destroy_hierarchy:
#: gdkwindow.c:1838:2
msgid ""
"@recursing: If TRUE, then this is being called because a parent was "
"destroyed."
msgstr ""

#. used by: _gdk_window_destroy_hierarchy:
#: gdkwindow.c:1840:5
msgid ""
"@recursing_native: If TRUE, then this is being called because a native "
"parent was destroyed. This generally means that the call to the windowing "
"system to destroy the window can be omitted, since it will be destroyed as a "
"result of the parent being destroyed. Unless @foreign_destroy."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_destroy_hierarchy:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_destroy:
#: gdkwindow.c:1845:4 gdkwindow.c:2009:4
msgid ""
"@foreign_destroy: If TRUE, the window or a parent was destroyed by some "
"external agency. The window has already been destroyed and no windowing "
"system calls should be made. (This may never happen for some windowing "
"systems.)"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_destroy_hierarchy:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_destroy:
#: gdkwindow.c:1850:2 gdkwindow.c:2014:2
msgid ""
"Internal function to destroy a window. Like gdk_window_destroy(), but does "
"not drop the reference count created by gdk_window_new()."
msgstr ""

#. used by: gdk_window_destroy:
#: gdkwindow.c:2028:3
msgid ""
"Destroys the window system resources associated with @window and decrements "
"@window's reference count. The window system resources for all children of "
"@window are also destroyed, but the children's reference counts are not "
"decremented."
msgstr ""

#. used by: gdk_window_destroy:
#: gdkwindow.c:2032:2
msgid ""
"Note that a window will not be destroyed automatically when its reference "
"count reaches zero. You must call this function yourself before that happens."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkWindowChildFunc:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_user_data:
#: gdkwindow.c:2046:1 gdkwindow.h:810:1
msgid "@user_data: user data"
msgstr ""

#. used by: gdk_window_set_user_data:
#: gdkwindow.c:2048:7
msgid ""
"For most purposes this function is deprecated in favor of g_object_set_data"
"(). However, for historical reasons GTK+ stores the #GtkWidget that owns a "
"#GdkWindow as user data on the #GdkWindow. So, custom widget implementations "
"should use this function for that. If GTK+ receives an event for a "
"#GdkWindow, and the user data for the window is non-%NULL, GTK+ will assume "
"the user data is a #GtkWidget, and forward the event to that widget."
msgstr ""

#. used by: gdk_window_get_user_data:
#: gdkwindow.c:2069:1
msgid "@data: (out): return location for user data"
msgstr ""

#. used by: gdk_window_get_user_data:
#: gdkwindow.c:2071:2
msgid ""
"Retrieves the user data for @window, which is normally the widget that "
"@window belongs to. See gdk_window_set_user_data()."
msgstr ""

#. used by: gdk_window_get_window_type:
#: gdkwindow.c:2088:1
msgid "Gets the type of the window. See #GdkWindowType."
msgstr ""

#. used by: gdk_window_get_window_type:
#: gdkwindow.c:2090:1
msgid "Return value: type of window"
msgstr ""

#. used by: gdk_window_get_visual:
#: gdkwindow.c:2104:1
msgid "Gets the #GdkVisual describing the pixel format of @window."
msgstr ""

#. used by: gdk_window_get_visual:
#: gdkwindow.c:2106:1
msgid "Return value: (transfer none): a #GdkVisual"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_visual:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_screen:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_display:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_width:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_height:
#: gdkwindow.c:2108:1 gdkwindow.c:2126:1 gdkwindow.c:2144:1 gdkwindow.c:6815:1
#: gdkwindow.c:6837:1
msgid "Since: 2.24"
msgstr ""

#. used by: gdk_window_get_screen:
#: gdkwindow.c:2122:1
msgid "Gets the #GdkScreen associated with a #GdkWindow."
msgstr ""

#. used by: gdk_window_get_screen:
#: gdkwindow.c:2124:1
msgid "Return value: (transfer none): the #GdkScreen associated with @window"
msgstr ""

#. used by: gdk_window_get_display:
#: gdkwindow.c:2140:1
msgid "Gets the #GdkDisplay associated with a #GdkWindow."
msgstr ""

#. used by: gdk_window_get_display:
#: gdkwindow.c:2142:1
msgid "Return value: (transfer none): the #GdkDisplay associated with @window"
msgstr ""

#. used by: gdk_window_is_destroyed:
#: gdkwindow.c:2157:1
msgid "Check to see if a window is destroyed.."
msgstr ""

#. used by: gdk_window_is_destroyed:
#: gdkwindow.c:2159:1
msgid "Return value: %TRUE if the window is destroyed"
msgstr ""

#. used by: gdk_window_has_native:
#: gdkwindow.c:2197:2
msgid ""
"Checks whether the window has a native window or not. Note that you can use "
"gdk_window_ensure_native() if a native window is needed."
msgstr ""

#. used by: gdk_window_has_native:
#: gdkwindow.c:2200:1
msgid "Returns: %TRUE if the %window has a native window, %FALSE otherwise."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_has_native:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_effective_parent:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_effective_toplevel:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_background_pattern:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_coords_to_parent:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_coords_from_parent:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_composited:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_modal_hint:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_accept_focus:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_focus_on_map:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_is_input_only:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_is_shaped:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_create_similar_surface:
#: gdkwindow.c:2202:1 gdkwindow.c:2278:1 gdkwindow.c:2336:1 gdkwindow.c:6557:1
#: gdkwindow.c:6956:1 gdkwindow.c:7014:1 gdkwindow.c:7364:1 gdkwindow.c:7452:1
#: gdkwindow.c:7471:1 gdkwindow.c:7491:1 gdkwindow.c:7509:1 gdkwindow.c:7527:1
#: gdkwindow.c:9700:1
msgid "Since: 2.22"
msgstr ""

#. used by: gdk_window_get_position:
#: gdkwindow.c:2215:1
msgid "@x: (out) (allow-none): X coordinate of window"
msgstr ""

#. used by: gdk_window_get_position:
#: gdkwindow.c:2216:1
msgid "@y: (out) (allow-none): Y coordinate of window"
msgstr ""

#. used by: gdk_window_get_position:
#: gdkwindow.c:2218:5
msgid ""
"Obtains the position of the window as reported in the most-recently-"
"processed #GdkEventConfigure. Contrast with gdk_window_get_geometry() which "
"queries the X server for the current window position, regardless of which "
"events have been received or processed."
msgstr ""

#. used by: gdk_window_get_position:
#: gdkwindow.c:2224:1
msgid "The position coordinates are relative to the window's parent window."
msgstr ""

#. used by: gdk_window_get_parent:
#: gdkwindow.c:2244:6
msgid ""
"Obtains the parent of @window, as known to GDK. Does not query the X server; "
"thus this returns the parent as passed to gdk_window_new(), not the actual "
"parent. This should never matter unless you're using Xlib calls mixed with "
"GDK calls on the X11 platform. It may also matter for toplevel windows, "
"because the window manager may choose to reparent them."
msgstr ""

#. used by: gdk_window_get_parent:
#: gdkwindow.c:2251:4
msgid ""
"Note that you should use gdk_window_get_effective_parent() when writing "
"generic code that walks up a window hierarchy, because gdk_window_get_parent"
"() will most likely not do what you expect if there are offscreen windows in "
"the hierarchy."
msgstr ""

#. used by: gdk_window_get_parent:
#: gdkwindow.c:2256:1
msgid "Return value: (transfer none): parent of @window"
msgstr ""

#. used by: gdk_window_get_effective_parent:
#: gdkwindow.c:2270:3
msgid ""
"Obtains the parent of @window, as known to GDK. Works like "
"gdk_window_get_parent() for normal windows, but returns the window's "
"embedder for offscreen windows."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_effective_parent:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_effective_toplevel:
#: gdkwindow.c:2274:1 gdkwindow.c:2332:1
msgid "See also: gdk_offscreen_window_get_embedder()"
msgstr ""

#. used by: gdk_window_get_effective_parent:
#: gdkwindow.c:2276:1
msgid "Return value: (transfer none): effective parent of @window"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_toplevel:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_effective_toplevel:
#: gdkwindow.c:2295:1 gdkwindow.c:2327:1
msgid "Gets the toplevel window that's an ancestor of @window."
msgstr ""

#. used by: gdk_window_get_toplevel:
#: gdkwindow.c:2297:3
msgid ""
"Any window type but %GDK_WINDOW_CHILD is considered a toplevel window, as is "
"a %GDK_WINDOW_CHILD window that has a root window as parent."
msgstr ""

#. used by: gdk_window_get_toplevel:
#: gdkwindow.c:2301:4
msgid ""
"Note that you should use gdk_window_get_effective_toplevel() when you want "
"to get to a window's toplevel as seen on screen, because "
"gdk_window_get_toplevel() will most likely not do what you expect if there "
"are offscreen windows in the hierarchy."
msgstr ""

#. used by: gdk_window_get_toplevel:
#: gdkwindow.c:2306:1
msgid "Return value: (transfer none): the toplevel window containing @window"
msgstr ""

#. used by: gdk_window_get_effective_toplevel:
#: gdkwindow.c:2329:2
msgid ""
"Works like gdk_window_get_toplevel(), but treats an offscreen window's "
"embedder as its parent, using gdk_window_get_effective_parent()."
msgstr ""

#. used by: gdk_window_get_effective_toplevel:
#: gdkwindow.c:2334:1
msgid ""
"Return value: (transfer none): the effective toplevel window containing "
"@window"
msgstr ""

#. used by: gdk_window_get_children:
#: gdkwindow.c:2356:4
msgid ""
"Gets the list of children of @window known to GDK. This function only "
"returns children created via GDK, so for example it's useless when used with "
"the root window; it only returns windows an application created itself."
msgstr ""

#. used by: gdk_window_get_children:
#: gdkwindow.c:2361:2
msgid ""
"The returned list must be freed, but the elements in the list need not be."
msgstr ""

#. used by: gdk_window_get_children:
#: gdkwindow.c:2364:2
msgid ""
"Return value: (transfer container) (element-type GdkWindow): list of child "
"windows inside @window"
msgstr ""

#. used by: gdk_window_peek_children:
#: gdkwindow.c:2382:2
msgid ""
"Like gdk_window_get_children(), but does not copy the list of children, so "
"the list does not need to be freed."
msgstr ""

#. used by: gdk_window_peek_children:
#: gdkwindow.c:2385:2
msgid ""
"Return value: (transfer none) (element-type GdkWindow): a reference to the "
"list of child windows in @window"
msgstr ""

#. used by: gdk_window_add_filter: (skip)
#: gdkwindow.c:2402:1
msgid "@function: filter callback"
msgstr ""

#. used by: gdk_window_add_filter: (skip)
#: gdkwindow.c:2403:1
msgid "@data: data to pass to filter callback"
msgstr ""

#. used by: gdk_window_add_filter: (skip)
#: gdkwindow.c:2405:5
msgid ""
"Adds an event filter to @window, allowing you to intercept events before "
"they reach GDK. This is a low-level operation and makes it easy to break GDK "
"and/or GTK+, so you have to know what you're doing. Pass %NULL for @window "
"to get all events for all windows, instead of events for a specific window."
msgstr ""

#. used by: gdk_window_add_filter: (skip)
#: gdkwindow.c:2411:2
msgid ""
"See gdk_display_add_client_message_filter() if you are interested in X "
"ClientMessage events."
msgstr ""

#. used by: gdk_window_remove_filter: (skip)
#: gdkwindow.c:2463:1
msgid "@function: previously-added filter function"
msgstr ""

#. used by: gdk_window_remove_filter: (skip)
#: gdkwindow.c:2464:1
msgid "@data: user data for previously-added filter function"
msgstr ""

#. used by: gdk_window_remove_filter: (skip)
#: gdkwindow.c:2466:1
msgid "Remove a filter previously added with gdk_window_add_filter()."
msgstr ""

#. used by: gdk_screen_get_toplevel_windows:
#: gdkwindow.c:2501:1
msgid "@screen: The #GdkScreen where the toplevels are located."
msgstr ""

#. used by: gdk_screen_get_toplevel_windows:
#: gdkwindow.c:2503:3
msgid ""
"Obtains a list of all toplevel windows known to GDK on the screen @screen. A "
"toplevel window is a child of the root window (see "
"gdk_get_default_root_window())."
msgstr ""

#. used by: gdk_screen_get_toplevel_windows:
#: gdkwindow.c:2507:2
msgid ""
"The returned list should be freed with g_list_free(), but its elements need "
"not be freed."
msgstr ""

#. used by: gdk_screen_get_toplevel_windows:
#: gdkwindow.c:2510:2
msgid ""
"Return value: (transfer container) (element-type GdkWindow): list of "
"toplevel windows, free with g_list_free()"
msgstr ""

#. used by: gdk_window_is_visible:
#: gdkwindow.c:2543:2
msgid ""
"Checks whether the window has been mapped (with gdk_window_show() or "
"gdk_window_show_unraised())."
msgstr ""

#. used by: gdk_window_is_visible:
#: gdkwindow.c:2546:1
msgid "Return value: %TRUE if the window is mapped"
msgstr ""

#. used by: gdk_window_is_viewable:
#: gdkwindow.c:2560:4
msgid ""
"Check if the window and all ancestors of the window are mapped. (This is not "
"necessarily \"viewable\" in the X sense, since we only check as far as we "
"have GDK window parents, not to the root window.)"
msgstr ""

#. used by: gdk_window_is_viewable:
#: gdkwindow.c:2565:1
msgid "Return value: %TRUE if the window is viewable"
msgstr ""

#. used by: gdk_window_get_state:
#: gdkwindow.c:2582:2
msgid ""
"Gets the bitwise OR of the currently active window state flags, from the "
"#GdkWindowState enumeration."
msgstr ""

#. used by: gdk_window_get_state:
#: gdkwindow.c:2585:1
msgid "Return value: window state bitfield"
msgstr ""

#. used by: gdk_window_begin_paint_rect:
#: gdkwindow.c:2766:1
msgid "@rectangle: rectangle you intend to draw to"
msgstr ""

#. used by: gdk_window_begin_paint_rect:
#: gdkwindow.c:2768:3
msgid ""
"A convenience wrapper around gdk_window_begin_paint_region() which creates a "
"rectangular region for you. See gdk_window_begin_paint_region() for details."
msgstr ""

#. used by: gdk_window_begin_paint_region:
#: gdkwindow.c:2789:1
msgid "@region: region you intend to draw to"
msgstr ""

#. used by: gdk_window_begin_paint_region:
#: gdkwindow.c:2791:9
msgid ""
"Indicates that you are beginning the process of redrawing @region. A backing "
"store (offscreen buffer) large enough to contain @region will be created. "
"The backing store will be initialized with the background color or "
"background surface for @window. Then, all drawing operations performed on "
"@window will be diverted to the backing store.  When you call "
"gdk_window_end_paint(), the backing store will be copied to @window, making "
"it visible onscreen. Only the part of @window contained in @region will be "
"modified; that is, drawing operations are clipped to @region."
msgstr ""

#. used by: gdk_window_begin_paint_region:
#: gdkwindow.c:2801:8
msgid ""
"The net result of all this is to remove flicker, because the user sees the "
"finished product appear all at once when you call gdk_window_end_paint(). If "
"you draw to @window directly without calling gdk_window_begin_paint_region"
"(), the user may see flicker as individual drawing operations are performed "
"in sequence.  The clipping and background-initializing features of "
"gdk_window_begin_paint_region() are conveniences for the programmer, so you "
"can avoid doing that work yourself."
msgstr ""

#. used by: gdk_window_begin_paint_region:
#: gdkwindow.c:2810:10
msgid ""
"When using GTK+, the widget system automatically places calls to "
"gdk_window_begin_paint_region() and gdk_window_end_paint() around emissions "
"of the expose_event signal. That is, if you're writing an expose event "
"handler, you can assume that the exposed area in #GdkEventExpose has already "
"been cleared to the window background, is already set as the clip region, "
"and already has a backing store. Therefore in most cases, application code "
"need not call gdk_window_begin_paint_region(). (You can disable the "
"automatic calls around expose events on a widget-by-widget basis by calling "
"gtk_widget_set_double_buffered().)"
msgstr ""

#. used by: gdk_window_begin_paint_region:
#: gdkwindow.c:2821:8
msgid ""
"If you call this function multiple times before calling the matching "
"gdk_window_end_paint(), the backing stores are pushed onto a stack. "
"gdk_window_end_paint() copies the topmost backing store onscreen, subtracts "
"the topmost region from all other regions in the stack, and pops the stack. "
"All drawing operations affect only the topmost backing store in the stack. "
"One matching call to gdk_window_end_paint() is required for each call to "
"gdk_window_begin_paint_region()."
msgstr ""

#. used by: gdk_window_end_paint:
#: gdkwindow.c:2917:7
msgid ""
"Indicates that the backing store created by the most recent call to "
"gdk_window_begin_paint_region() should be copied onscreen and deleted, "
"leaving the next-most-recent backing store or no backing store at all as the "
"active paint region. See gdk_window_begin_paint_region() for full details. "
"It is an error to call this function without a matching "
"gdk_window_begin_paint_region() first."
msgstr ""

#. used by: gdk_window_flush:
#: gdkwindow.c:3274:2
msgid ""
"Flush all outstanding cached operations on a window, leaving the window in a "
"state which reflects all that has been drawn before."
msgstr ""

#. used by: gdk_window_flush:
#: gdkwindow.c:3277:6
msgid ""
"Gdk uses multiple kinds of caching to get better performance and nicer "
"drawing. For instance, during exposes all paints to a window using double "
"buffered rendering are keep on a surface until the last window has been "
"exposed. It also delays window moves/scrolls until as long as possible until "
"next update to avoid tearing when moving windows."
msgstr ""

#. used by: gdk_window_flush:
#: gdkwindow.c:3284:5
msgid ""
"Normally this should be completely invisible to applications, as we "
"automatically flush the windows when required, but this might be needed if "
"you for instance mix direct native drawing with gdk drawing. For Gtk widgets "
"that don't use double buffering this will be called automatically before "
"sending the expose event."
msgstr ""

#. used by: gdk_window_get_clip_region:
#: gdkwindow.c:3351:5
msgid ""
"Computes the region of a window that potentially can be written to by "
"drawing primitives. This region may not take into account other factors such "
"as if the window is obscured by other windows, but no area outside of this "
"region will be affected by drawing primitives."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_clip_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_visible_region:
#: gdkwindow.c:3357:2 gdkwindow.c:3399:2
msgid ""
"Returns: a #cairo_region_t. This must be freed with cairo_region_destroy() "
"when you are done."
msgstr ""

#. used by: gdk_window_get_visible_region:
#: gdkwindow.c:3394:4
msgid ""
"Computes the region of the @window that is potentially visible. This does "
"not necessarily take into account if the window is obscured by other "
"windows, but no area outside of this region is visible."
msgstr ""

#. used by: gdk_cairo_create:
#: gdkwindow.c:3594:1
msgid "Creates a Cairo context for drawing to @window."
msgstr ""

#. used by: gdk_cairo_create:
#: gdkwindow.c:3596:4
msgid ""
"<note><warning> Note that calling cairo_reset_clip() on the resulting "
"#cairo_t will produce undefined results, so avoid it at all costs. </"
"warning></note>"
msgstr ""

#. used by: gdk_cairo_create:
#: gdkwindow.c:3601:2
msgid ""
"Return value: A newly created Cairo context. Free with cairo_destroy() when "
"you are done drawing."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_cairo_create:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_move_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_urgency_hint:
#: gdkwindow.c:3604:1 gdkwindow.c:6412:1 gdkwindow.c:9846:1
msgid "Since: 2.8"
msgstr ""

#. used by: GdkWindow:cursor:
#: gdkwindow.c:365:2
msgid ""
"The mouse pointer for a #GdkWindow. See gdk_window_set_cursor() and "
"gdk_window_get_cursor() for details."
msgstr ""

#. used by: GdkWindow::pick-embedded-child:
#: gdkwindow.c:380:1
msgid "@window: the window on which the signal is emitted"
msgstr ""

#. used by: GdkWindow::pick-embedded-child:
#: gdkwindow.c:381:1
msgid "@x: x coordinate in the window"
msgstr ""

#. used by: GdkWindow::pick-embedded-child:
#: gdkwindow.c:382:1
msgid "@y: y coordinate in the window"
msgstr ""

#. used by: GdkWindow::pick-embedded-child:
#: gdkwindow.c:384:2
msgid ""
"The ::pick-embedded-child signal is emitted to find an embedded child at the "
"given position."
msgstr ""

#. used by: GdkWindow::pick-embedded-child:
#: gdkwindow.c:387:2
msgid ""
"Returns: (transfer none): the #GdkWindow of the embedded child at @x, @y, or "
"%NULL"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkWindow::to-embedder:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkWindow::from-embedder:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkWindow::create-surface:
#: gdkwindow.c:406:1 gdkwindow.c:437:1 gdkwindow.c:468:1
msgid "@window: the offscreen window on which the signal is emitted"
msgstr ""

#. used by: GdkWindow::to-embedder:
#: gdkwindow.c:407:1
msgid "@offscreen-x: x coordinate in the offscreen window"
msgstr ""

#. used by: GdkWindow::to-embedder:
#: gdkwindow.c:408:1
msgid "@offscreen-y: y coordinate in the offscreen window"
msgstr ""

#. used by: GdkWindow::to-embedder:
#: gdkwindow.c:409:2
msgid ""
"@embedder-x: (out) (type double): return location for the x coordinate in "
"the embedder window"
msgstr ""

#. used by: gdk_window_process_all_updates:
#: gdkwindow.c:4098:2
msgid ""
"Calls gdk_window_process_updates() for all windows (see #GdkWindow) in the "
"application."
msgstr ""

#. used by: GdkWindow::to-embedder:
#: gdkwindow.c:411:2
msgid ""
"@embedder-y: (out) (type double): return location for the y coordinate in "
"the embedder window"
msgstr ""

#. used by: GdkWindow::to-embedder:
#: gdkwindow.c:414:2
msgid ""
"The ::to-embedder signal is emitted to translate coordinates in an offscreen "
"window to its embedder."
msgstr ""

#. used by: GdkWindow::to-embedder:
#: gdkwindow.c:417:1
msgid "See also #GtkWindow::from-embedder."
msgstr ""

#. used by: gdk_window_process_updates:
#: gdkwindow.c:4171:1
msgid "@update_children: whether to also process updates for child windows"
msgstr ""

#. used by: gdk_window_process_updates:
#: gdkwindow.c:4173:8
msgid ""
"Sends one or more expose events to @window. The areas in each expose event "
"will cover the entire update area for the window (see "
"gdk_window_invalidate_region() for details). Normally GDK calls "
"gdk_window_process_all_updates() on your behalf, so there's no need to call "
"this function unless you want to force expose events to be delivered "
"immediately and synchronously (vs. the usual case, where GDK delivers them "
"in an idle handler). Occasionally this is useful to produce nicer scrolling "
"behavior, for example."
msgstr ""

#. used by: gdk_window_invalidate_rect:
#: gdkwindow.c:4267:2
msgid ""
"@rect: (allow-none): rectangle to invalidate or %NULL to invalidate the "
"whole window"
msgstr ""

#. used by: gdk_window_invalidate_rect:
#: gdkwindow.c:4269:1
msgid "@invalidate_children: whether to also invalidate child windows"
msgstr ""

#. used by: gdk_window_invalidate_rect:
#: gdkwindow.c:4271:3
msgid ""
"A convenience wrapper around gdk_window_invalidate_region() which "
"invalidates a rectangular region. See gdk_window_invalidate_region() for "
"details."
msgstr ""

#. used by: GdkWindow::from-embedder:
#: gdkwindow.c:438:1
msgid "@embedder-x: x coordinate in the embedder window"
msgstr ""

#. used by: GdkWindow::from-embedder:
#: gdkwindow.c:439:1
msgid "@embedder-y: y coordinate in the embedder window"
msgstr ""

#. used by: GdkWindow::from-embedder:
#: gdkwindow.c:440:2
msgid ""
"@offscreen-x: (out) (type double): return location for the x coordinate in "
"the offscreen window"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_invalidate_maybe_recurse:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_invalidate_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_invalidate_for_expose:
#: gdkwindow.c:4419:1 gdkwindow.c:4473:1 gdkwindow.c:4508:1
msgid "@region: a #cairo_region_t"
msgstr ""

#. used by: GdkWindow::from-embedder:
#: gdkwindow.c:442:2
msgid ""
"@offscreen-y: (out) (type double): return location for the y coordinate in "
"the offscreen window"
msgstr ""

#. used by: gdk_window_invalidate_maybe_recurse:
#: gdkwindow.c:4420:2
msgid ""
"@child_func: (scope call): function to use to decide if to recurse to a "
"child, %NULL means never recurse."
msgstr ""

#. used by: gdk_window_invalidate_maybe_recurse:
#: gdkwindow.c:4422:1
msgid "@user_data: data passed to @child_func"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_invalidate_maybe_recurse:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_invalidate_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_invalidate_for_expose:
#: gdkwindow.c:4424:6 gdkwindow.c:4476:6 gdkwindow.c:4510:6
msgid ""
"Adds @region to the update area for @window. The update area is the region "
"that needs to be redrawn, or \"dirty region.\" The call "
"gdk_window_process_updates() sends one or more expose events to the window, "
"which together cover the entire update area. An application would normally "
"redraw the contents of @window in response to those expose events."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_invalidate_maybe_recurse:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_invalidate_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: _gdk_window_invalidate_for_expose:
#: gdkwindow.c:4431:4 gdkwindow.c:4483:4 gdkwindow.c:4517:4
msgid ""
"GDK will call gdk_window_process_all_updates() on your behalf whenever your "
"program returns to the main loop and becomes idle, so normally there's no "
"need to do that manually, you just need to invalidate regions that you know "
"should be redrawn."
msgstr ""

#. used by: gdk_window_invalidate_maybe_recurse:
#: gdkwindow.c:4436:4
msgid ""
"The @child_func parameter controls whether the region of each child window "
"that intersects @region will also be invalidated. Only children for which "
"@child_func returns TRUE will have the area invalidated."
msgstr ""

#. used by: GdkWindow::from-embedder:
#: gdkwindow.c:445:2
msgid ""
"The ::from-embedder signal is emitted to translate coordinates in the "
"embedder of an offscreen window to the offscreen window."
msgstr ""

#. used by: gdk_window_invalidate_region:
#: gdkwindow.c:4474:1
msgid "@invalidate_children: %TRUE to also invalidate child windows"
msgstr ""

#. used by: GdkWindow::from-embedder:
#: gdkwindow.c:448:1
msgid "See also #GtkWindow::to-embedder."
msgstr ""

#. used by: gdk_window_invalidate_region:
#: gdkwindow.c:4488:5
msgid ""
"The @invalidate_children parameter controls whether the region of each child "
"window that intersects @region will also be invalidated. If %FALSE, then the "
"update area for child windows will remain unaffected. See "
"gdk_window_invalidate_maybe_recurse if you need fine grained control over "
"which children are invalidated."
msgstr ""

#. used by: _gdk_window_invalidate_for_expose:
#: gdkwindow.c:4522:4
msgid ""
"This version of invalidation is used when you recieve expose events from the "
"native window system. It exposes the native window, plus any non-native "
"child windows (but not native child windows, as those would have gotten "
"their own expose events)."
msgstr ""

#. used by: gdk_window_get_update_area:
#: gdkwindow.c:4569:6
msgid ""
"Transfers ownership of the update area from @window to the caller of the "
"function. That is, after calling this function, @window will no longer have "
"an invalid/dirty region; the update area is removed from @window and handed "
"to you. If a window has no update area, gdk_window_get_update_area() returns "
"%NULL. You are responsible for calling cairo_region_destroy() on the "
"returned region if it's non-%NULL."
msgstr ""

#. used by: gdk_window_get_update_area:
#: gdkwindow.c:4576:1
msgid "Return value: the update area for @window"
msgstr ""

#. used by: _gdk_window_clear_update_area:
#: gdkwindow.c:4627:2
msgid ""
"Internal function to clear the update area for a window. This is called when "
"the window is hidden or destroyed."
msgstr ""

#. used by: gdk_window_freeze_updates:
#: gdkwindow.c:4648:5
msgid ""
"Temporarily freezes a window such that it won't receive expose events.  The "
"window will begin receiving expose events again when gdk_window_thaw_updates"
"() is called. If gdk_window_freeze_updates() has been called more than once, "
"gdk_window_thaw_updates() must be called an equal number of times to begin "
"processing exposes."
msgstr ""

#. used by: gdk_window_thaw_updates:
#: gdkwindow.c:4669:1
msgid "Thaws a window frozen with gdk_window_freeze_updates()."
msgstr ""

#. used by: GdkWindow::create-surface:
#: gdkwindow.c:469:1
msgid "@width: the width of the offscreen surface to create"
msgstr ""

#. used by: gdk_window_freeze_toplevel_updates_libgtk_only:
#: gdkwindow.c:4690:7
msgid ""
"Temporarily freezes a window and all its descendants such that it won't "
"receive expose events.  The window will begin receiving expose events again "
"when gdk_window_thaw_toplevel_updates_libgtk_only() is called. If "
"gdk_window_freeze_toplevel_updates_libgtk_only() has been called more than "
"once, gdk_window_thaw_toplevel_updates_libgtk_only() must be called an equal "
"number of times to begin processing exposes."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_freeze_toplevel_updates_libgtk_only:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_thaw_toplevel_updates_libgtk_only:
#: gdkwindow.c:4698:2 gdkwindow.c:4717:2
msgid ""
"This function is not part of the GDK public API and is only for use by GTK+."
msgstr ""

#. used by: GdkWindow::create-surface:
#: gdkwindow.c:470:1
msgid "@height: the height of the offscreen surface to create"
msgstr ""

#. used by: gdk_window_thaw_toplevel_updates_libgtk_only:
#: gdkwindow.c:4714:2
msgid ""
"Thaws a window frozen with gdk_window_freeze_toplevel_updates_libgtk_only()."
msgstr ""

#. used by: GdkWindow::create-surface:
#: gdkwindow.c:472:6
msgid ""
"The ::create-surface signal is emitted when an offscreen window needs its "
"surface (re)created, which happens either when the the window is first drawn "
"to, or when the window is being resized. The first signal handler that "
"returns a non-%NULL surface will stop any further signal emission, and its "
"surface will be used."
msgstr ""

#. used by: gdk_window_set_debug_updates:
#: gdkwindow.c:4734:1
msgid "@setting: %TRUE to turn on update debugging"
msgstr ""

#. used by: gdk_window_set_debug_updates:
#: gdkwindow.c:4736:7
msgid ""
"With update debugging enabled, calls to gdk_window_invalidate_region() clear "
"the invalidated region of the screen to a noticeable color, and GDK pauses "
"for a short time before sending exposes to windows during "
"gdk_window_process_updates().  The net effect is that you can see the "
"invalid region for each window and watch redraws as they occur. This allows "
"you to diagnose inefficiencies in your application."
msgstr ""

#. used by: gdk_window_set_debug_updates:
#: gdkwindow.c:4744:5
msgid ""
"In essence, because the GDK rendering model prevents all flicker, if you are "
"redrawing the same region 400 times you may never notice, aside from "
"noticing a speed problem. Enabling update debugging causes GTK to flicker "
"slowly and noticeably, so you can see exactly what's being redrawn when, in "
"what order."
msgstr ""

#. used by: gdk_window_set_debug_updates:
#: gdkwindow.c:4750:5
msgid ""
"The --gtk-debug=updates command line option passed to GTK+ programs enables "
"this debug option at application startup time. That's usually more useful "
"than calling gdk_window_set_debug_updates() yourself, though you might want "
"to use this function to enable updates sometime after application startup "
"time."
msgstr ""

#. used by: gdk_window_constrain_size:
#: gdkwindow.c:4765:1
msgid "@geometry: a #GdkGeometry structure"
msgstr ""

#. used by: gdk_window_constrain_size:
#: gdkwindow.c:4766:1
msgid "@flags: a mask indicating what portions of @geometry are set"
msgstr ""

#. used by: gdk_window_constrain_size:
#: gdkwindow.c:4767:1
msgid "@width: desired width of window"
msgstr ""

#. used by: gdk_window_constrain_size:
#: gdkwindow.c:4768:1
msgid "@height: desired height of the window"
msgstr ""

#. used by: gdk_window_constrain_size:
#: gdkwindow.c:4769:1
msgid "@new_width: (out): location to store resulting width"
msgstr ""

#. used by: gdk_window_constrain_size:
#: gdkwindow.c:4770:1
msgid "@new_height: (out): location to store resulting height"
msgstr ""

#. used by: gdk_window_constrain_size:
#: gdkwindow.c:4772:2
msgid ""
"Constrains a desired width and height according to a set of geometry hints "
"(such as minimum and maximum size)."
msgstr ""

#. used by: GdkWindow::create-surface:
#: gdkwindow.c:479:3
msgid ""
"Note that it is not possible to access the window's previous surface from "
"within any callback of this signal. Calling gdk_offscreen_window_get_surface"
"() will lead to a crash."
msgstr ""

#. used by: GdkWindow::create-surface:
#: gdkwindow.c:483:1
msgid "Returns: the newly created #cairo_surface_t for the offscreen window"
msgstr ""

#. used by: gdk_window_get_pointer:
#: gdkwindow.c:4895:2
msgid ""
"@x: (out) (allow-none): return location for X coordinate of pointer or %NULL "
"to not return the X coordinate"
msgstr ""

#. used by: gdk_window_get_pointer:
#: gdkwindow.c:4897:2
msgid ""
"@y: (out) (allow-none):  return location for Y coordinate of pointer or "
"%NULL to not return the Y coordinate"
msgstr ""

#. used by: gdk_window_get_pointer:
#: gdkwindow.c:4899:2
msgid ""
"@mask: (out) (allow-none): return location for modifier mask or %NULL to not "
"return the modifier mask"
msgstr ""

#. used by: gdk_window_get_pointer:
#: gdkwindow.c:4902:3
msgid ""
"Obtains the current pointer position and modifier state. The position is "
"given in coordinates relative to the upper left corner of @window."
msgstr ""

#. used by: gdk_window_get_pointer:
#: gdkwindow.c:4906:3
msgid ""
"Return value: (transfer none): the window containing the pointer (as with "
"gdk_window_at_pointer()), or %NULL if the window containing the pointer "
"isn't known to GDK"
msgstr ""

#. used by: gdk_window_get_pointer:
#: gdkwindow.c:4910:1
msgid "Deprecated: 3.0: Use gdk_window_get_device_position() instead."
msgstr ""

#. used by: gdk_window_get_device_position:
#: gdkwindow.c:4930:1
msgid "@device: pointer #GdkDevice to query to."
msgstr ""

#. used by: gdk_window_get_device_position:
#: gdkwindow.c:4931:1
msgid ""
"@x: (out) (allow-none): return location for the X coordinate of @device, or "
"%NULL."
msgstr ""

#. used by: gdk_window_get_device_position:
#: gdkwindow.c:4932:1
msgid ""
"@y: (out) (allow-none): return location for the Y coordinate of @device, or "
"%NULL."
msgstr ""

#. used by: gdk_window_get_device_position:
#: gdkwindow.c:4933:1
msgid ""
"@mask: (out) (allow-none): return location for the modifier mask, or %NULL."
msgstr ""

#. used by: gdk_window_get_device_position:
#: gdkwindow.c:4935:3
msgid ""
"Obtains the current device position and modifier state. The position is "
"given in coordinates relative to the upper left corner of @window."
msgstr ""

#. used by: gdk_window_get_device_position:
#: gdkwindow.c:4939:2
msgid ""
"Return value: (transfer none): The window underneath @device (as with "
"gdk_device_get_window_at_position()), or %NULL if the window is not known to "
"GDK."
msgstr ""

#. used by: gdk_window_at_pointer:
#: gdkwindow.c:4983:1
msgid ""
"@win_x: (out) (allow-none): return location for origin of the window under "
"the pointer"
msgstr ""

#. used by: gdk_window_at_pointer:
#: gdkwindow.c:4984:1
msgid ""
"@win_y: (out) (allow-none): return location for origin of the window under "
"the pointer"
msgstr ""

#. used by: gdk_window_at_pointer:
#: gdkwindow.c:4986:5
msgid ""
"Obtains the window underneath the mouse pointer, returning the location of "
"that window in @win_x, @win_y. Returns %NULL if the window under the mouse "
"pointer is not known to GDK (if the window belongs to another application "
"and a #GdkWindow hasn't been created for it with gdk_window_foreign_new())"
msgstr ""

#. used by: gdk_window_at_pointer:
#: gdkwindow.c:4992:2
msgid ""
"NOTE: For multihead-aware widgets or applications use "
"gdk_display_get_window_at_pointer() instead."
msgstr ""

#. used by: gdk_window_at_pointer:
#: gdkwindow.c:4995:1
msgid "Return value: (transfer none): window under the mouse pointer"
msgstr ""

#. used by: gdk_window_at_pointer:
#: gdkwindow.c:4997:1
msgid "Deprecated: 3.0: Use gdk_device_get_window_at_position() instead."
msgstr ""

#. used by: gdk_get_default_root_window:
#: gdkwindow.c:5009:2
msgid ""
"Obtains the root window (parent all other windows are inside) for the "
"default display and screen."
msgstr ""

#. used by: gdk_get_default_root_window:
#: gdkwindow.c:5012:1
msgid "Return value: (transfer none): the default root window"
msgstr ""

#. used by: SECTION:windows
#: gdkwindow.c:51:1
msgid "@Short_description: Onscreen display areas in the target window system"
msgstr ""

#. used by: SECTION:windows
#: gdkwindow.c:52:1
msgid "@Title: Windows"
msgstr ""

#. used by: gdk_window_show_unraised:
#: gdkwindow.c:5258:3
msgid ""
"Shows a #GdkWindow onscreen, but does not modify its stacking order. In "
"contrast, gdk_window_show() will raise the window to the top of the window "
"stack."
msgstr ""

#. used by: gdk_window_show_unraised:
#: gdkwindow.c:5262:3
msgid ""
"On the X11 platform, in Xlib terms, this function calls XMapWindow() (it "
"also updates some internal GDK state, which means that you can't really use "
"XMapWindow() directly on a GDK window)."
msgstr ""

#. used by: gdk_window_raise:
#: gdkwindow.c:5276:3
msgid ""
"Raises @window to the top of the Z-order (stacking order), so that other "
"windows with the same parent window appear below @window. This is true "
"whether or not the windows are visible."
msgstr ""

#. used by: gdk_window_raise:
#: gdkwindow.c:5280:3
msgid ""
"If @window is a toplevel, the window manager may choose to deny the request "
"to move the window in the Z-order, gdk_window_raise() only requests the "
"restack, does not guarantee it."
msgstr ""

#. used by: SECTION:windows
#: gdkwindow.c:54:6
msgid ""
"A #GdkWindow is a (usually) rectangular region on the screen. It's a low-"
"level object, used to implement high-level objects such as #GtkWidget and "
"#GtkWindow on the GTK+ level. A #GtkWindow is a toplevel window, the thing a "
"user might think of as a \"window\" with a titlebar and so on; a #GtkWindow "
"may contain many #GdkWindows. For example, each #GtkButton has a #GdkWindow "
"associated with it."
msgstr ""

#. used by: gdk_window_lower:
#: gdkwindow.c:5409:3
msgid ""
"Lowers @window to the bottom of the Z-order (stacking order), so that other "
"windows with the same parent window appear above @window. This is true "
"whether or not the other windows are visible."
msgstr ""

#. used by: gdk_window_lower:
#: gdkwindow.c:5413:3
msgid ""
"If @window is a toplevel, the window manager may choose to deny the request "
"to move the window in the Z-order, gdk_window_lower() only requests the "
"restack, does not guarantee it."
msgstr ""

#. used by: gdk_window_lower:
#: gdkwindow.c:5417:2
msgid ""
"Note that gdk_window_show() raises the window again, so don't call this "
"function before gdk_window_show(). (Try gdk_window_show_unraised().)"
msgstr ""

#. used by: gdk_window_restack:
#: gdkwindow.c:5442:1
msgid ""
"@sibling: (allow-none): a #GdkWindow that is a sibling of @window, or %NULL"
msgstr ""

#. used by: gdk_window_restack:
#: gdkwindow.c:5443:1
msgid "@above: a boolean"
msgstr ""

#. used by: gdk_window_restack:
#: gdkwindow.c:5445:3
msgid ""
"Changes the position of  @window in the Z-order (stacking order), so that it "
"is above @sibling (if @above is %TRUE) or below @sibling (if @above is "
"%FALSE)."
msgstr ""

#. used by: gdk_window_restack:
#: gdkwindow.c:5449:2
msgid ""
"If @sibling is %NULL, then this either raises (if @above is %TRUE) or lowers "
"the window."
msgstr ""

#. used by: gdk_window_restack:
#: gdkwindow.c:5452:3
msgid ""
"If @window is a toplevel, the window manager may choose to deny the request "
"to move the window in the Z-order, gdk_window_restack() only requests the "
"restack, does not guarantee it."
msgstr ""

#. used by: gdk_window_show:
#: gdkwindow.c:5560:3
msgid ""
"Like gdk_window_show_unraised(), but also raises the window to the top of "
"the window stack (moves the window to the front of the Z-order)."
msgstr ""

#. used by: gdk_window_show:
#: gdkwindow.c:5564:2
msgid ""
"This function maps a window so it's visible onscreen. Its opposite is "
"gdk_window_hide()."
msgstr ""

#. used by: gdk_window_show:
#: gdkwindow.c:5567:2
msgid ""
"When implementing a #GtkWidget, you should call this function on the "
"widget's #GdkWindow as part of the \"map\" method."
msgstr ""

#. used by: gdk_window_hide:
#: gdkwindow.c:5580:4
msgid ""
"For toplevel windows, withdraws them, so they will no longer be known to the "
"window manager; for all windows, unmaps them, so they won't be displayed. "
"Normally done automatically as part of gtk_widget_hide()."
msgstr ""

#. used by: gdk_window_withdraw:
#: gdkwindow.c:5671:3
msgid ""
"Withdraws a window (unmaps it and asks the window manager to forget about "
"it). This function is not really useful as gdk_window_hide() automatically "
"withdraws toplevel windows before hiding them."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_device_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_source_events:
#: gdkwindow.c:5711:1 gdkwindow.c:5780:1 gdkwindow.c:8870:1
msgid "@event_mask: event mask for @window"
msgstr ""

#. used by: gdk_window_set_events:
#: gdkwindow.c:5713:5
msgid ""
"The event mask for a window determines which events will be reported for "
"that window from all master input devices. For example, an event mask "
"including #GDK_BUTTON_PRESS_MASK means the window should report button press "
"events. The event mask is the bitwise OR of values from the #GdkEventMask "
"enumeration."
msgstr ""

#. used by: gdk_window_get_events:
#: gdkwindow.c:5760:2
msgid ""
"Gets the event mask for @window for all master input devices. See "
"gdk_window_set_events()."
msgstr ""

#. used by: gdk_window_get_events:
#: gdkwindow.c:5763:1
msgid "Return value: event mask for @window"
msgstr ""

#. used by: gdk_window_set_device_events:
#: gdkwindow.c:5779:1
msgid "@device: #GdkDevice to enable events for."
msgstr ""

#. used by: gdk_window_set_device_events:
#: gdkwindow.c:5782:5
msgid ""
"Sets the event mask for a given device (Normally a floating device, not "
"attached to any visible pointer) to @window. For example, an event mask "
"including #GDK_BUTTON_PRESS_MASK means the window should report button press "
"events. The event mask is the bitwise OR of values from the #GdkEventMask "
"enumeration."
msgstr ""

#. used by: gdk_window_get_device_events:
#: gdkwindow.c:5846:1
msgid "@device: a #GdkDevice."
msgstr ""

#. used by: gdk_window_get_device_events:
#: gdkwindow.c:5848:1
msgid "Returns the event mask for @window corresponding to an specific device."
msgstr ""

#. used by: gdk_window_get_device_events:
#: gdkwindow.c:5850:1
msgid "Returns: device event mask for @window"
msgstr ""

#. used by: SECTION:windows
#: gdkwindow.c:61:11
msgid ""
"<refsect2 id=\"COMPOSITED-WINDOWS\"> <title>Composited Windows</title> "
"<para> Normally, the windowing system takes care of rendering the contents "
"of a child window onto its parent window. This mechanism can be intercepted "
"by calling gdk_window_set_composited() on the child window. For a "
"<firstterm>composited</firstterm> window it is the responsibility of the "
"application to render the window contents at the right spot. </para> "
"<example id=\"composited-window-example\"> <title>Composited windows</title>"
msgstr ""

#. used by: gdk_window_move:
#: gdkwindow.c:6208:1
msgid "@x: X coordinate relative to window's parent"
msgstr ""

#. used by: gdk_window_move:
#: gdkwindow.c:6209:1
msgid "@y: Y coordinate relative to window's parent"
msgstr ""

#. used by: gdk_window_move:
#: gdkwindow.c:6211:5
msgid ""
"Repositions a window relative to its parent window. For toplevel windows, "
"window managers may ignore or modify the move; you should probably use "
"gtk_window_move() on a #GtkWindow widget anyway, instead of using GDK "
"functions. For child windows, the move will reliably succeed."
msgstr ""

#. used by: gdk_window_move:
#: gdkwindow.c:6217:2
msgid ""
"If you're also planning to resize the window, use gdk_window_move_resize() "
"to both move and resize simultaneously, for a nicer visual effect."
msgstr ""

#. used by: gdk_window_resize:
#: gdkwindow.c:6231:1
msgid "@width: new width of the window"
msgstr ""

#. used by: gdk_window_resize:
#: gdkwindow.c:6232:1
msgid "@height: new height of the window"
msgstr ""

#. used by: gdk_window_resize:
#: gdkwindow.c:6234:3
msgid ""
"Resizes @window; for toplevel windows, asks the window manager to resize the "
"window. The window manager may not allow the resize. When using GTK+, use "
"gtk_window_resize() instead of this low-level GDK function."
msgstr ""

#. used by: gdk_window_resize:
#: gdkwindow.c:6238:1
msgid "Windows may not be resized below 1x1."
msgstr ""

#. used by: gdk_window_resize:
#: gdkwindow.c:6240:2
msgid ""
"If you're also planning to move the window, use gdk_window_move_resize() to "
"both move and resize simultaneously, for a nicer visual effect."
msgstr ""

#. used by: gdk_window_move_resize:
#: gdkwindow.c:6255:1
msgid "@x: new X position relative to window's parent"
msgstr ""

#. used by: gdk_window_move_resize:
#: gdkwindow.c:6256:1
msgid "@y: new Y position relative to window's parent"
msgstr ""

#. used by: gdk_window_move_resize:
#: gdkwindow.c:6257:1
msgid "@width: new width"
msgstr ""

#. used by: gdk_window_move_resize:
#: gdkwindow.c:6258:1
msgid "@height: new height"
msgstr ""

#. used by: gdk_window_move_resize:
#: gdkwindow.c:6260:4
msgid ""
"Equivalent to calling gdk_window_move() and gdk_window_resize(), except that "
"both operations are performed at once, avoiding strange visual effects. (i."
"e. the user may be able to see the window first move, then resize, if you "
"don't use gdk_window_move_resize().)"
msgstr ""

#. used by: gdk_window_scroll:
#: gdkwindow.c:6279:1
msgid "@dx: Amount to scroll in the X direction"
msgstr ""

#. used by: gdk_window_scroll:
#: gdkwindow.c:6280:1
msgid "@dy: Amount to scroll in the Y direction"
msgstr ""

#. used by: gdk_window_scroll:
#: gdkwindow.c:6282:5
msgid ""
"Scroll the contents of @window, both pixels and children, by the given "
"amount. @window itself does not move. Portions of the window that the scroll "
"operation brings in from offscreen areas are invalidated. The invalidated "
"region may be bigger than what would strictly be necessary."
msgstr ""

#. used by: gdk_window_scroll:
#: gdkwindow.c:6288:5
msgid ""
"For X11, a minimum area will be invalidated if the window has no subwindows, "
"or if the edges of the window's parent do not extend beyond the edges of the "
"window. In other cases, a multi-step process is used to scroll the window "
"which may produce temporary visual artifacts and unnecessary invalidations."
msgstr ""

#. used by: gdk_window_move_region:
#: gdkwindow.c:6402:1
msgid "@region: The #cairo_region_t to move"
msgstr ""

#. used by: gdk_window_move_region:
#: gdkwindow.c:6403:1
msgid "@dx: Amount to move in the X direction"
msgstr ""

#. used by: gdk_window_move_region:
#: gdkwindow.c:6404:1
msgid "@dy: Amount to move in the Y direction"
msgstr ""

#. used by: gdk_window_move_region:
#: gdkwindow.c:6406:3
msgid ""
"Move the part of @window indicated by @region by @dy pixels in the Y "
"direction and @dx pixels in the X direction. The portions of @region that "
"not covered by the new position of @region are invalidated."
msgstr ""

#. used by: gdk_window_move_region:
#: gdkwindow.c:6410:1
msgid "Child windows are not moved."
msgstr ""

#. used by: gdk_window_set_background:
#: gdkwindow.c:6461:1
msgid "@color: a #GdkColor"
msgstr ""

#. used by: gdk_window_set_background:
#: gdkwindow.c:6463:4
msgid ""
"Sets the background color of @window. (However, when using GTK+, set the "
"background of a widget with gtk_widget_modify_bg() - if you're an "
"application - or gtk_style_set_background() - if you're implementing a "
"custom widget.)"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_background:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_background_rgba:
#: gdkwindow.c:6468:1 gdkwindow.c:6494:1
msgid "See also gdk_window_set_background_pattern()."
msgstr ""

#. used by: gdk_window_set_background_rgba:
#: gdkwindow.c:6490:1
msgid "@rgba: a #GdkRGBA color"
msgstr ""

#. used by: gdk_window_set_background_rgba:
#: gdkwindow.c:6492:1
msgid "Sets the background color of @window."
msgstr ""

#. used by: gdk_window_set_background_pattern:
#: gdkwindow.c:6516:1
msgid "@pattern: (allow-none): a pattern to use, or %NULL"
msgstr ""

#. used by: gdk_window_set_background_pattern:
#: gdkwindow.c:6518:1
msgid "Sets the background of @window."
msgstr ""

#. used by: gdk_window_set_background_pattern:
#: gdkwindow.c:6520:2
msgid ""
"A background of %NULL means that the window will inherit its background form "
"its parent window."
msgstr ""

#. used by: gdk_window_set_background_pattern:
#: gdkwindow.c:6523:2
msgid ""
"The windowing system will normally fill a window with its background when "
"the window is obscured then exposed."
msgstr ""

#. used by: gdk_window_get_background_pattern:
#: gdkwindow.c:6548:1
msgid "@window: a window"
msgstr ""

#. used by: gdk_window_get_background_pattern:
#: gdkwindow.c:6550:3
msgid ""
"Gets the pattern used to clear the background on @window. If @window does "
"not have its own background and reuses the parent's, %NULL is returned and "
"you'll have to query it yourself."
msgstr ""

#. used by: gdk_window_get_background_pattern:
#: gdkwindow.c:6554:2
msgid ""
"Returns: (transfer none): The pattern to use for the background or %NULL to "
"use the parent's background."
msgstr ""

#. used by: gdk_window_get_cursor:
#: gdkwindow.c:6586:4
msgid ""
"Retrieves a #GdkCursor pointer for the cursor currently set on the specified "
"#GdkWindow, or %NULL.  If the return value is %NULL then there is no custom "
"cursor set on the specified window, and it is using the cursor for its "
"parent window."
msgstr ""

#. used by: gdk_window_get_cursor:
#: gdkwindow.c:6591:4
msgid ""
"Return value: (transfer none): a #GdkCursor, or %NULL. The returned object "
"is owned by the #GdkWindow and should not be unreferenced directly. Use "
"gdk_window_set_cursor() to unset the cursor of the window"
msgstr ""

#. used by: gdk_window_set_cursor:
#: gdkwindow.c:6609:1
msgid "@cursor: (allow-none): a cursor"
msgstr ""

#. used by: gdk_window_set_cursor:
#: gdkwindow.c:6611:5
msgid ""
"Sets the default mouse pointer for a #GdkWindow. Use "
"gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to create the "
"cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR. Passing %NULL "
"for the @cursor argument to gdk_window_set_cursor() means that @window will "
"use the cursor of its parent window. Most windows should use this default."
msgstr ""

#. used by: gdk_window_get_device_cursor:
#: gdkwindow.c:6649:1
msgid "@device: a master, pointer #GdkDevice."
msgstr ""

#. used by: gdk_window_get_device_cursor:
#: gdkwindow.c:6651:4
msgid ""
"Retrieves a #GdkCursor pointer for the @device currently set on the "
"specified #GdkWindow, or %NULL.  If the return value is %NULL then there is "
"no custom cursor set on the specified window, and it is using the cursor for "
"its parent window."
msgstr ""

#. used by: gdk_window_get_device_cursor:
#: gdkwindow.c:6656:4
msgid ""
"Returns: (transfer none): a #GdkCursor, or %NULL. The returned object is "
"owned by the #GdkWindow and should not be unreferenced directly. Use "
"gdk_window_set_cursor() to unset the cursor of the window"
msgstr ""

#. used by: gdk_window_set_device_cursor:
#: gdkwindow.c:6677:1
msgid "@window: a #Gdkwindow"
msgstr ""

#. used by: gdk_window_set_device_cursor:
#: gdkwindow.c:6678:1
msgid "@device: a master, pointer #GdkDevice"
msgstr ""

#. used by: gdk_window_set_device_cursor:
#: gdkwindow.c:6679:1
msgid "@cursor: a #GdkCursor"
msgstr ""

#. used by: gdk_window_set_device_cursor:
#: gdkwindow.c:6681:6
msgid ""
"Sets a specific #GdkCursor for a given device when it gets inside @window. "
"Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to create "
"the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR. Passing "
"%NULL for the @cursor argument to gdk_window_set_cursor() means that @window "
"will use the cursor of its parent window. Most windows should use this "
"default."
msgstr ""

#. used by: gdk_window_get_geometry:
#: gdkwindow.c:6723:1
msgid ""
"@x: (out) (allow-none): return location for X coordinate of window (relative "
"to its parent)"
msgstr ""

#. used by: gdk_window_get_geometry:
#: gdkwindow.c:6724:1
msgid ""
"@y: (out) (allow-none): return location for Y coordinate of window (relative "
"to its parent)"
msgstr ""

#. used by: gdk_window_get_geometry:
#: gdkwindow.c:6725:1
msgid "@width: (out) (allow-none): return location for width of window"
msgstr ""

#. used by: gdk_window_get_geometry:
#: gdkwindow.c:6726:1
msgid "@height: (out) (allow-none): return location for height of window"
msgstr ""

#. used by: gdk_window_get_geometry:
#: gdkwindow.c:6728:2
msgid ""
"Any of the return location arguments to this function may be %NULL, if you "
"aren't interested in getting the value of that field."
msgstr ""

#. used by: gdk_window_get_geometry:
#: gdkwindow.c:6731:4
msgid ""
"The X and Y coordinates returned are relative to the parent window of "
"@window, which for toplevels usually means relative to the window "
"decorations (titlebar, etc.) rather than relative to the root window (screen-"
"size background window)."
msgstr ""

#. used by: gdk_window_get_geometry:
#: gdkwindow.c:6736:5
msgid ""
"On the X11 platform, the geometry is obtained from the X server, so reflects "
"the latest position of @window; this may be out-of-sync with the position of "
"@window delivered in the most-recently-processed #GdkEventConfigure. "
"gdk_window_get_position() in contrast gets the position from the most recent "
"configure event."
msgstr ""

#. used by: gdk_window_get_geometry:
#: gdkwindow.c:6742:8
msgid ""
"<note> If @window is not a toplevel, it is <emphasis>much</emphasis> better "
"to call gdk_window_get_position(), gdk_window_get_width() and "
"gdk_window_get_height() instead, because it avoids the roundtrip to the X "
"server and because these functions support the full 32-bit coordinate space, "
"whereas gdk_window_get_geometry() is restricted to the 16-bit coordinates of "
"X11. </note>"
msgstr ""

#. used by: gdk_window_get_width:
#: gdkwindow.c:6807:1
msgid "Returns the width of the given @window."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_width:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_height:
#: gdkwindow.c:6809:3 gdkwindow.c:6831:3
msgid ""
"On the X11 platform the returned size is the size reported in the most-"
"recently-processed configure event, rather than the current size on the X "
"server."
msgstr ""

#. used by: gdk_window_get_width:
#: gdkwindow.c:6813:1
msgid "Returns: The width of @window"
msgstr ""

#. used by: gdk_window_get_height:
#: gdkwindow.c:6829:1
msgid "Returns the height of the given @window."
msgstr ""

#. used by: gdk_window_get_height:
#: gdkwindow.c:6835:1
msgid "Returns: The height of @window"
msgstr ""

#. used by: gdk_window_get_origin:
#: gdkwindow.c:6850:1
msgid "@x: (out) (allow-none): return location for X coordinate"
msgstr ""

#. used by: gdk_window_get_origin:
#: gdkwindow.c:6851:1
msgid "@y: (out) (allow-none): return location for Y coordinate"
msgstr ""

#. used by: gdk_window_get_origin:
#: gdkwindow.c:6853:4
msgid ""
"Obtains the position of a window in root window coordinates. (Compare with "
"gdk_window_get_position() and gdk_window_get_geometry() which return the "
"position of a window relative to its parent window.)"
msgstr ""

#. used by: gdk_window_get_origin:
#: gdkwindow.c:6858:1
msgid "Return value: not meaningful, ignore"
msgstr ""

#. used by: gdk_window_get_root_coords:
#: gdkwindow.c:6890:1
msgid "@x: X coordinate in window"
msgstr ""

#. used by: gdk_window_get_root_coords:
#: gdkwindow.c:6891:1
msgid "@y: Y coordinate in window"
msgstr ""

#. used by: gdk_window_get_root_coords:
#: gdkwindow.c:6892:1
msgid "@root_x: (out): return location for X coordinate"
msgstr ""

#. used by: gdk_window_get_root_coords:
#: gdkwindow.c:6893:1
msgid "@root_y: (out): return location for Y coordinate"
msgstr ""

#. used by: gdk_window_get_root_coords:
#: gdkwindow.c:6895:4
msgid ""
"Obtains the position of a window position in root window coordinates. This "
"is similar to gdk_window_get_origin() but allows you go pass in any position "
"in the window, not just the origin."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_coords_to_parent:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_coords_from_parent:
#: gdkwindow.c:6931:1 gdkwindow.c:6991:1
msgid "@window: a child window"
msgstr ""

#. used by: gdk_window_coords_to_parent:
#: gdkwindow.c:6932:1
msgid "@x: X coordinate in child's coordinate system"
msgstr ""

#. used by: gdk_window_coords_to_parent:
#: gdkwindow.c:6933:1
msgid "@y: Y coordinate in child's coordinate system"
msgstr ""

#. used by: gdk_window_coords_to_parent:
#: gdkwindow.c:6934:2
msgid ""
"@parent_x: (out) (allow-none): return location for X coordinate in parent's "
"coordinate system, or %NULL"
msgstr ""

#. used by: gdk_window_coords_to_parent:
#: gdkwindow.c:6936:2
msgid ""
"@parent_y: (out) (allow-none): return location for Y coordinate in parent's "
"coordinate system, or %NULL"
msgstr ""

#. used by: gdk_window_coords_to_parent:
#: gdkwindow.c:6939:5
msgid ""
"Transforms window coordinates from a child window to its parent window, "
"where the parent window is the normal parent as returned by "
"gdk_window_get_parent() for normal windows, and the window's embedder as "
"returned by gdk_offscreen_window_get_embedder() for offscreen windows."
msgstr ""

#. used by: gdk_window_coords_to_parent:
#: gdkwindow.c:6945:5
msgid ""
"For normal windows, calling this function is equivalent to adding the return "
"values of gdk_window_get_position() to the child coordinates. For offscreen "
"windows however (which can be arbitrarily transformed), this function calls "
"the GdkWindow::to-embedder: signal to translate the coordinates."
msgstr ""

#. used by: gdk_window_coords_to_parent:
#: gdkwindow.c:6951:2
msgid ""
"You should always use this function when writing generic code that walks up "
"a window hierarchy."
msgstr ""

#. used by: gdk_window_coords_to_parent:
#: gdkwindow.c:6954:1
msgid "See also: gdk_window_coords_from_parent()"
msgstr ""

#. used by: gdk_window_coords_from_parent:
#: gdkwindow.c:6992:1
msgid "@parent_x: X coordinate in parent's coordinate system"
msgstr ""

#. used by: gdk_window_coords_from_parent:
#: gdkwindow.c:6993:1
msgid "@parent_y: Y coordinate in parent's coordinate system"
msgstr ""

#. used by: gdk_window_coords_from_parent:
#: gdkwindow.c:6994:1
msgid ""
"@x: (out) (allow-none): return location for X coordinate in child's "
"coordinate system"
msgstr ""

#. used by: gdk_window_coords_from_parent:
#: gdkwindow.c:6995:1
msgid ""
"@y: (out) (allow-none): return location for Y coordinate in child's "
"coordinate system"
msgstr ""

#. used by: gdk_window_coords_from_parent:
#: gdkwindow.c:6997:5
msgid ""
"Transforms window coordinates from a parent window to a child window, where "
"the parent window is the normal parent as returned by gdk_window_get_parent"
"() for normal windows, and the window's embedder as returned by "
"gdk_offscreen_window_get_embedder() for offscreen windows."
msgstr ""

#. used by: gdk_window_coords_from_parent:
#: gdkwindow.c:7003:5
msgid ""
"For normal windows, calling this function is equivalent to subtracting the "
"return values of gdk_window_get_position() from the parent coordinates. For "
"offscreen windows however (which can be arbitrarily transformed), this "
"function calls the GdkWindow::from-embedder: signal to translate the "
"coordinates."
msgstr ""

#. used by: gdk_window_coords_from_parent:
#: gdkwindow.c:7009:2
msgid ""
"You should always use this function when writing generic code that walks "
"down a window hierarchy."
msgstr ""

#. used by: gdk_window_coords_from_parent:
#: gdkwindow.c:7012:1
msgid "See also: gdk_window_coords_to_parent()"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_shape_combine_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_input_shape_combine_region:
#: gdkwindow.c:7050:1 gdkwindow.c:7201:1
msgid "@shape_region: region of window to be non-transparent"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_shape_combine_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_input_shape_combine_region:
#: gdkwindow.c:7051:1 gdkwindow.c:7202:1
msgid "@offset_x: X position of @shape_region in @window coordinates"
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_shape_combine_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_input_shape_combine_region:
#: gdkwindow.c:7052:1 gdkwindow.c:7203:1
msgid "@offset_y: Y position of @shape_region in @window coordinates"
msgstr ""

#. used by: gdk_window_shape_combine_region:
#: gdkwindow.c:7054:2
msgid ""
"Makes pixels in @window outside @shape_region be transparent, so that the "
"window may be nonrectangular."
msgstr ""

#. used by: gdk_window_shape_combine_region:
#: gdkwindow.c:7057:3
msgid ""
"If @shape_region is %NULL, the shape will be unset, so the whole window will "
"be opaque again. @offset_x and @offset_y are ignored if @shape_region is "
"%NULL."
msgstr ""

#. used by: gdk_window_shape_combine_region:
#: gdkwindow.c:7061:5
msgid ""
"On the X11 platform, this uses an X server extension which is widely "
"available on most common platforms, but not available on very old X servers, "
"and occasionally the implementation will be buggy. On servers without the "
"shape extension, this function will do nothing."
msgstr ""

#. used by: gdk_window_shape_combine_region:
#: gdkwindow.c:7067:1
msgid "This function works on both toplevel and child windows."
msgstr ""

#. used by: gdk_window_set_child_shapes:
#: gdkwindow.c:7164:4
msgid ""
"Sets the shape mask of @window to the union of shape masks for all children "
"of @window, ignoring the shape mask of @window itself. Contrast with "
"gdk_window_merge_child_shapes() which includes the shape mask of @window in "
"the masks to be merged."
msgstr ""

#. used by: gdk_window_merge_child_shapes:
#: gdkwindow.c:7181:4
msgid ""
"Merges the shape masks for any child windows into the shape mask for "
"@window. i.e. the union of all masks for @window and its children will "
"become the new mask for @window. See gdk_window_shape_combine_region()."
msgstr ""

#. used by: gdk_window_merge_child_shapes:
#: gdkwindow.c:7186:3
msgid ""
"This function is distinct from gdk_window_set_child_shapes() because it "
"includes @window's shape mask in the set of shapes to be merged."
msgstr ""

#. used by: gdk_window_input_shape_combine_region:
#: gdkwindow.c:7205:4
msgid ""
"Like gdk_window_shape_combine_region(), but the shape applies only to event "
"handling. Mouse events which happen while the pointer position corresponds "
"to an unset bit in the mask will be passed on the window below @window."
msgstr ""

#. used by: gdk_window_input_shape_combine_region:
#: gdkwindow.c:7210:5
msgid ""
"An input shape is typically used with RGBA windows. The alpha channel of the "
"window defines which pixels are invisible and allows for nicely antialiased "
"borders, and the input shape controls where the window is \"clickable\"."
msgstr ""

#. used by: gdk_window_input_shape_combine_region:
#: gdkwindow.c:7216:2
msgid "On the X11 platform, this requires version 1.1 of the shape extension."
msgstr ""

#. used by: gdk_window_input_shape_combine_region:
#: gdkwindow.c:7219:2
msgid ""
"On the Win32 platform, this functionality is not present and the function "
"does nothing."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_input_shape_combine_region:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_child_input_shapes:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_merge_child_input_shapes:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_type_hint:
#: gdkwindow.c:7222:1 gdkwindow.c:7291:1 gdkwindow.c:7314:1 gdkwindow.c:9766:1
msgid "Since: 2.10"
msgstr ""

#. used by: gdk_window_set_child_input_shapes:
#: gdkwindow.c:7286:4
msgid ""
"Sets the input shape mask of @window to the union of input shape masks for "
"all children of @window, ignoring the input shape mask of @window itself. "
"Contrast with gdk_window_merge_child_input_shapes() which includes the input "
"shape mask of @window in the masks to be merged."
msgstr ""

#. used by: gdk_window_merge_child_input_shapes:
#: gdkwindow.c:7305:4
msgid ""
"Merges the input shape masks for any child windows into the input shape mask "
"for @window. i.e. the union of all input masks for @window and its children "
"will become the new input mask for @window. See "
"gdk_window_input_shape_combine_region()."
msgstr ""

#. used by: gdk_window_merge_child_input_shapes:
#: gdkwindow.c:7310:3
msgid ""
"This function is distinct from gdk_window_set_child_input_shapes() because "
"it includes @window's input shape mask in the set of shapes to be merged."
msgstr ""

#. used by: gdk_window_set_static_gravities:
#: gdkwindow.c:7328:1
msgid "@use_static: %TRUE to turn on static gravity"
msgstr ""

#. used by: gdk_window_set_static_gravities:
#: gdkwindow.c:7330:4
msgid ""
"Set the bit gravity of the given window to static, and flag it so all "
"children get static subwindow gravity. This is used if you are implementing "
"scary features that involve deep knowledge of the windowing system. Don't "
"worry about it unless you have to."
msgstr ""

#. used by: gdk_window_set_static_gravities:
#: gdkwindow.c:7335:1
msgid "Return value: %TRUE if the server supports static gravity"
msgstr ""

#. used by: gdk_window_get_composited:
#: gdkwindow.c:7358:1
msgid "Determines whether @window is composited."
msgstr ""

#. used by: gdk_window_get_composited:
#: gdkwindow.c:7360:1
msgid "See gdk_window_set_composited()."
msgstr ""

#. used by: gdk_window_get_composited:
#: gdkwindow.c:7362:1
msgid "Returns: %TRUE if the window is composited."
msgstr ""

#. used by: gdk_window_set_composited:
#: gdkwindow.c:7377:1
msgid "@composited: %TRUE to set the window as composited"
msgstr ""

#. used by: gdk_window_set_composited:
#: gdkwindow.c:7379:8
msgid ""
"Sets a #GdkWindow as composited, or unsets it. Composited windows do not "
"automatically have their contents drawn to the screen. Drawing is redirected "
"to an offscreen buffer and an expose event is emitted on the parent of the "
"composited window. It is the responsibility of the parent's expose handler "
"to manually merge the off-screen content onto the screen in whatever way it "
"sees fit. See <xref linkend=\"composited-window-example\"/> for an example."
msgstr ""

#. used by: gdk_window_set_composited:
#: gdkwindow.c:7388:3
msgid ""
"It only makes sense for child windows to be composited; see "
"gdk_window_set_opacity() if you need translucent toplevel windows."
msgstr ""

#. used by: gdk_window_set_composited:
#: gdkwindow.c:7392:4
msgid ""
"An additional effect of this call is that the area of this window is no "
"longer clipped from regions marked for invalidation on its parent. Draws "
"done on the parent window are also no longer clipped by the child."
msgstr ""

#. used by: gdk_window_set_composited:
#: gdkwindow.c:7397:5
msgid ""
"This call is only supported on some systems (currently, only X11 with new "
"enough Xcomposite and Xdamage extensions). You must call "
"gdk_display_supports_composite() to check if setting a window as composited "
"is supported before attempting to do so."
msgstr ""

#. used by: gdk_window_get_modal_hint:
#: gdkwindow.c:7445:1
msgid "@window: A toplevel #GdkWindow."
msgstr ""

#. used by: gdk_window_get_modal_hint:
#: gdkwindow.c:7447:2
msgid ""
"Determines whether or not the window manager is hinted that @window has "
"modal behaviour."
msgstr ""

#. used by: gdk_window_get_modal_hint:
#: gdkwindow.c:7450:1
msgid "Return value: whether or not the window has the modal hint set."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_accept_focus:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_focus_on_map:
#: gdkwindow.c:7464:1 gdkwindow.c:7483:1
msgid "@window: a toplevel #GdkWindow."
msgstr ""

#. used by: gdk_window_get_accept_focus:
#: gdkwindow.c:7466:2
msgid ""
"Determines whether or not the desktop environment shuld be hinted that the "
"window does not want to receive input focus."
msgstr ""

#. used by: gdk_window_get_accept_focus:
#: gdkwindow.c:7469:1
msgid "Return value: whether or not the window should receive input focus."
msgstr ""

#. used by: gdk_window_get_focus_on_map:
#: gdkwindow.c:7485:2
msgid ""
"Determines whether or not the desktop environment should be hinted that the "
"window does not want to receive input focus when it is mapped."
msgstr ""

#. used by: gdk_window_get_focus_on_map:
#: gdkwindow.c:7488:2
msgid ""
"Return value: whether or not the window wants to receive input focus when it "
"is mapped."
msgstr ""

#. used by: SECTION:windows
#: gdkwindow.c:75:4
msgid ""
"<para> In the example <xref linkend=\"composited-window-example\"/>, a "
"button is placed inside of an event box inside of a window. The event box is "
"set as composited and therefore is no longer automatically drawn to the "
"screen."
msgstr ""

#. used by: gdk_window_is_input_only:
#: gdkwindow.c:7505:1
msgid "Determines whether or not the window is an input only window."
msgstr ""

#. used by: gdk_window_is_input_only:
#: gdkwindow.c:7507:1
msgid "Return value: %TRUE if @window is input only"
msgstr ""

#. used by: gdk_window_is_shaped:
#: gdkwindow.c:7523:1
msgid "Determines whether or not the window is shaped."
msgstr ""

#. used by: gdk_window_is_shaped:
#: gdkwindow.c:7525:1
msgid "Return value: %TRUE if @window is shaped"
msgstr ""

#. used by: gdk_window_beep:
#: gdkwindow.c:7949:3
msgid ""
"Emits a short beep associated to @window in the appropriate display, if "
"supported. Otherwise, emits a short beep on the display just as "
"gdk_display_beep()."
msgstr ""

#. used by: gdk_window_set_support_multidevice:
#: gdkwindow.c:7982:1
msgid "@support_multidevice: %TRUE to enable multidevice support in @window."
msgstr ""

#. used by: gdk_window_set_support_multidevice:
#: gdkwindow.c:7984:1
msgid "This function will enable multidevice features in @window."
msgstr ""

#. used by: gdk_window_set_support_multidevice:
#: gdkwindow.c:7986:2
msgid ""
"Multidevice aware windows will need to handle properly multiple, per device "
"enter/leave events, device grabs and grab ownerships."
msgstr ""

#. used by: SECTION:windows
#: gdkwindow.c:80:4
msgid ""
"When the contents of the event box change, an expose event is generated on "
"its parent window (which, in this case, belongs to the toplevel #GtkWindow). "
"The expose handler for this widget is responsible for merging the changes "
"back on the screen in the way that it wishes."
msgstr ""

#. used by: gdk_window_get_support_multidevice:
#: gdkwindow.c:8012:2
msgid ""
"Returns %TRUE if the window is aware of the existence of multiple devices."
msgstr ""

#. used by: gdk_window_get_support_multidevice:
#: gdkwindow.c:8015:1
msgid "Returns: %TRUE if the window handles multidevice features."
msgstr ""

#. used by: SECTION:windows
#: gdkwindow.c:85:11
msgid ""
"In our case, we merge the contents with a 50% transparency. We also set the "
"background colour of the window to red. The effect is that the background "
"shows through the button. </para> </refsect2> <refsect2 id=\"OFFSCREEN-"
"WINDOWS\"> <title>Offscreen Windows</title> <para> Offscreen windows are "
"more general than composited windows, since they allow not only to modify "
"the rendering of the child window onto its parent, but also to apply "
"coordinate transformations."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_pointer_grab:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_keyboard_grab:
#: gdkwindow.c:8564:1 gdkwindow.c:8703:1
msgid "@window: the #GdkWindow which will own the grab (the grab window)."
msgstr ""

#. used by: gdk_pointer_grab:
#: gdkwindow.c:8565:5
msgid ""
"@owner_events: if %FALSE then all pointer events are reported with respect "
"to @window and are only reported if selected by @event_mask. If %TRUE then "
"pointer events for this application are reported as normal, but pointer "
"events outside this application are reported with respect to @window and "
"only if selected by @event_mask. In either mode, unreported events are "
"discarded."
msgstr ""

#. used by: gdk_pointer_grab:
#: gdkwindow.c:8570:3
msgid ""
"@event_mask: specifies the event mask, which is used in accordance with "
"@owner_events. Note that only pointer events (i.e. button and motion events) "
"may be selected."
msgstr ""

#. used by: gdk_pointer_grab:
#: gdkwindow.c:8573:4
msgid ""
"@confine_to: If non-%NULL, the pointer will be confined to this window "
"during the grab. If the pointer is outside @confine_to, it will "
"automatically be moved to the closest edge of @confine_to and enter and "
"leave events will be generated as necessary."
msgstr ""

#. used by: gdk_pointer_grab:
#: gdkwindow.c:8577:3
msgid ""
"@cursor: the cursor to display while the grab is active. If this is %NULL "
"then the normal cursors are used for @window and its descendants, and the "
"cursor for @window is used for all other windows."
msgstr ""

#. used by: gdk_pointer_grab:
#: gdkwindow.c:8580:3
msgid ""
"@time_: the timestamp of the event which led to this pointer grab. This "
"usually comes from a #GdkEventButton struct, though %GDK_CURRENT_TIME can be "
"used if the time isn't known."
msgstr ""

#. used by: gdk_pointer_grab:
#: gdkwindow.c:8584:4
msgid ""
"Grabs the pointer (usually a mouse) so that all events are passed to this "
"application until the pointer is ungrabbed with gdk_pointer_ungrab(), or the "
"grab window becomes unviewable. This overrides any previous pointer grab by "
"this client."
msgstr ""

#. used by: gdk_pointer_grab:
#: gdkwindow.c:8589:4
msgid ""
"Pointer grabs are used for operations which need complete control over mouse "
"events, even if the mouse leaves the application. For example in GTK+ it is "
"used for Drag and Drop, for dragging the handle in the #GtkHPaned and "
"#GtkVPaned widgets."
msgstr ""

#. used by: gdk_pointer_grab:
#: gdkwindow.c:8594:7
msgid ""
"Note that if the event mask of an X window has selected both button press "
"and button release events, then a button press event will cause an automatic "
"pointer grab until the button is released. X does this automatically since "
"most applications expect to receive button press and release events in "
"pairs. It is equivalent to a pointer grab on the window with @owner_events "
"set to %TRUE."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_pointer_grab:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_keyboard_grab:
#: gdkwindow.c:8602:3 gdkwindow.c:8717:3
msgid ""
"If you set up anything at the time you take the grab that needs to be "
"cleaned up when the grab ends, you should handle the #GdkEventGrabBroken "
"events that are emitted when the grab ends unvoluntarily."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_pointer_grab:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_keyboard_grab:
#: gdkwindow.c:8606:1 gdkwindow.c:8721:1
msgid "Returns: %GDK_GRAB_SUCCESS if the grab was successful."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_pointer_grab:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_keyboard_grab:
#: gdkwindow.c:8608:1 gdkwindow.c:8723:1
msgid "Deprecated: 3.0: Use gdk_device_grab() instead."
msgstr ""

#. used by: gdk_keyboard_grab:
#: gdkwindow.c:8704:6
msgid ""
"@owner_events: if %FALSE then all keyboard events are reported with respect "
"to @window. If %TRUE then keyboard events for this application are reported "
"as normal, but keyboard events outside this application are reported with "
"respect to @window. Both key press and key release events are always "
"reported, independant of the event mask set by the application."
msgstr ""

#. used by: gdk_keyboard_grab:
#: gdkwindow.c:8710:2
msgid ""
"@time_: a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no timestamp "
"is available."
msgstr ""

#. used by: gdk_keyboard_grab:
#: gdkwindow.c:8713:3
msgid ""
"Grabs the keyboard so that all events are passed to this application until "
"the keyboard is ungrabbed with gdk_keyboard_ungrab(). This overrides any "
"previous keyboard grab by this client."
msgstr ""

#. used by: gdk_window_geometry_changed:
#: gdkwindow.c:8802:1
msgid "@window: an embedded offscreen #GdkWindow"
msgstr ""

#. used by: gdk_window_geometry_changed:
#: gdkwindow.c:8804:3
msgid ""
"This function informs GDK that the geometry of an embedded offscreen window "
"has changed. This is necessary for GDK to keep track of which offscreen "
"window the pointer is in."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_source_events:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_source_events:
#: gdkwindow.c:8869:1 gdkwindow.c:8938:1
msgid "@source: a #GdkInputSource to define the source class."
msgstr ""

#. used by: gdk_window_set_source_events:
#: gdkwindow.c:8872:4
msgid ""
"Sets the event mask for any floating device (i.e. not attached to any "
"visible pointer) that has the source defined as @source. This event mask "
"will be applied both to currently existing, newly added devices after this "
"call, and devices being attached/detached."
msgstr ""

#. used by: gdk_window_get_source_events:
#: gdkwindow.c:8940:2
msgid ""
"Returns the event mask for @window corresponding to the device class "
"specified by @source."
msgstr ""

#. used by: gdk_window_get_source_events:
#: gdkwindow.c:8943:1
msgid "Returns: source event mask for @window"
msgstr ""

#. used by: gdk_window_create_similar_surface:
#: gdkwindow.c:9677:1
msgid "@window: window to make new surface similar to"
msgstr ""

#. used by: gdk_window_create_similar_surface:
#: gdkwindow.c:9678:1
msgid "@content: the content for the new surface"
msgstr ""

#. used by: gdk_window_create_similar_surface:
#: gdkwindow.c:9679:1
msgid "@width: width of the new surface"
msgstr ""

#. used by: gdk_window_create_similar_surface:
#: gdkwindow.c:9680:1
msgid "@height: height of the new surface"
msgstr ""

#. used by: gdk_window_create_similar_surface:
#: gdkwindow.c:9682:6
msgid ""
"Create a new surface that is as compatible as possible with the given "
"@window. For example the new surface will have the same fallback resolution "
"and font options as @window. Generally, the new surface will also use the "
"same backend as @window, unless that is not possible for some reason. The "
"type of the returned surface may be examined with cairo_surface_get_type()."
msgstr ""

#. used by: gdk_window_create_similar_surface:
#: gdkwindow.c:9689:2
msgid ""
"Initially the surface contents are all 0 (transparent if contents have "
"transparency, black otherwise.)"
msgstr ""

#. used by: gdk_window_create_similar_surface:
#: gdkwindow.c:9692:3
msgid ""
"Returns: a pointer to the newly allocated surface. The caller owns the "
"surface and should call cairo_surface_destroy() when done with it."
msgstr ""

#. used by: gdk_window_create_similar_surface:
#: gdkwindow.c:9696:3
msgid ""
"This function always returns a valid pointer, but it will return a pointer "
"to a \"nil\" surface if @other is already in an error state or any other "
"error occurs."
msgstr ""

#. used by: SECTION:windows
#: gdkwindow.c:97:7
msgid ""
"To integrate an offscreen window into a window hierarchy, one has to call "
"gdk_offscreen_window_set_embedder() and handle a number of signals. The "
"#GdkWindow::pick-embedded-child signal on the embedder window is used to "
"select an offscreen child at given coordinates, and the #GdkWindow::to-"
"embedder and #GdkWindow::from-embedder signals on the offscreen window are "
"used to translate coordinates between the embedder and the offscreen window."
msgstr ""

#. used by: gdk_window_focus:
#: gdkwindow.c:9726:1
msgid "@timestamp: timestamp of the event triggering the window focus"
msgstr ""

#. used by: gdk_window_focus:
#: gdkwindow.c:9728:2
msgid ""
"Sets keyboard focus to @window. In most cases, gtk_window_present() should "
"be used on a #GtkWindow, rather than calling this function."
msgstr ""

#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_type_hint:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_get_type_hint:
#. #-#-#-#-#  gdkwindow.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_window_set_modal_hint:
#: gdkwindow.c:9741:1 gdkwindow.c:9760:1 gdkwindow.c:9776:1
msgid "@window: A toplevel #GdkWindow"
msgstr ""

#. used by: gdk_window_set_type_hint:
#: gdkwindow.c:9742:1
msgid "@hint: A hint of the function this window will have"
msgstr ""

#. used by: gdk_window_set_type_hint:
#: gdkwindow.c:9744:4
msgid ""
"The application can use this call to provide a hint to the window manager "
"about the functionality of a window. The window manager can use this "
"information when determining the decoration and behaviour of the window."
msgstr ""

#. used by: gdk_window_set_type_hint:
#: gdkwindow.c:9749:1
msgid "The hint must be set before the window is mapped."
msgstr ""

#. used by: gdk_window_get_type_hint:
#: gdkwindow.c:9762:1
msgid "This function returns the type hint set for a window."
msgstr ""

#. used by: gdk_window_get_type_hint:
#: gdkwindow.c:9764:1
msgid "Return value: The type hint set for @window"
msgstr ""

#. used by: gdk_window_set_modal_hint:
#: gdkwindow.c:9777:1
msgid "@modal: %TRUE if the window is modal, %FALSE otherwise."
msgstr ""

#. used by: gdk_window_set_modal_hint:
#: gdkwindow.c:9779:4
msgid ""
"The application can use this hint to tell the window manager that a certain "
"window has modal behaviour. The window manager can use this information to "
"handle modal windows in a special way."
msgstr ""

#. used by: gdk_window_set_modal_hint:
#: gdkwindow.c:9784:2
msgid ""
"You should only use this on windows for which you have previously called "
"gdk_window_set_transient_for()"
msgstr ""

#. used by: gdk_window_set_skip_taskbar_hint:
#: gdkwindow.c:9797:1
msgid "@skips_taskbar: %TRUE to skip the taskbar"
msgstr ""

#. used by: gdk_window_set_skip_taskbar_hint:
#: gdkwindow.c:9799:6
msgid ""
"Toggles whether a window should appear in a task list or window list. If a "
"window's semantic type as specified with gdk_window_set_type_hint() already "
"fully describes the window, this function should <emphasis>not</emphasis> be "
"called in addition, instead you should allow the window to be treated "
"according to standard policy for its semantic type."
msgstr ""

#. used by: gdk_window_set_skip_pager_hint:
#: gdkwindow.c:9818:1
msgid "@skips_pager: %TRUE to skip the pager"
msgstr ""

#. used by: gdk_window_set_skip_pager_hint:
#: gdkwindow.c:9820:8
msgid ""
"Toggles whether a window should appear in a pager (workspace switcher, or "
"other desktop utility program that displays a small thumbnail representation "
"of the windows on the desktop). If a window's semantic type as specified "
"with gdk_window_set_type_hint() already fully describes the window, this "
"function should <emphasis>not</emphasis> be called in addition, instead you "
"should allow the window to be treated according to standard policy for its "
"semantic type."
msgstr ""

#. used by: gdk_window_set_urgency_hint:
#: gdkwindow.c:9841:1
msgid "@urgent: %TRUE if the window is urgent"
msgstr ""

#. used by: gdk_window_set_urgency_hint:
#: gdkwindow.c:9843:2
msgid "Toggles whether a window needs the user's urgent attention."
msgstr ""

#. used by: gdk_window_set_geometry_hints:
#: gdkwindow.c:9858:1
msgid "@geometry: geometry hints"
msgstr ""

#. used by: gdk_window_set_geometry_hints:
#: gdkwindow.c:9859:1
msgid "@geom_mask: bitmask indicating fields of @geometry to pay attention to"
msgstr ""

#. used by: gdk_window_set_geometry_hints:
#: gdkwindow.c:9861:3
msgid ""
"Sets the geometry hints for @window. Hints flagged in @geom_mask are set, "
"hints not flagged in @geom_mask are unset. To unset all hints, use a "
"@geom_mask of 0 and a @geometry of %NULL."
msgstr ""

#. used by: gdk_window_set_geometry_hints:
#: gdkwindow.c:9865:7
msgid ""
"This function provides hints to the windowing system about acceptable sizes "
"for a toplevel window. The purpose of this is to constrain user resizing, "
"but the windowing system will typically  (but is not required to) also "
"constrain the current size of the window to the provided values and "
"constrain programatic resizing via gdk_window_resize() or "
"gdk_window_move_resize()."
msgstr ""

#. used by: gdk_window_set_geometry_hints:
#: gdkwindow.c:9873:4
msgid ""
"Note that on X11, this effect has no effect on windows of type "
"%GDK_WINDOW_TEMP or windows where override redirect has been turned on via "
"gdk_window_set_override_redirect() since these windows are not resizable by "
"the user."
msgstr ""

#. used by: gdk_window_set_geometry_hints:
#: gdkwindow.c:9878:4
msgid ""
"Since you can't count on the windowing system doing the constraints for "
"programmatic resizes, you should generally call gdk_window_constrain_size() "
"yourself to determine appropriate sizes."
msgstr ""

#. used by: gdk_window_set_title:
#: gdkwindow.c:9895:1
msgid "@title: title of @window"
msgstr ""

#. used by: gdk_window_set_title:
#: gdkwindow.c:9897:5
msgid ""
"Sets the title of a toplevel window, to be displayed in the titlebar. If you "
"haven't explicitly set the icon name for the window (using "
"gdk_window_set_icon_name()), the icon name will be set to @title as well. "
"@title must be in UTF-8 encoding (as with all user-readable strings in GDK/"
"GTK+). @title may not be %NULL."
msgstr ""

#. used by: gdk_window_set_role:
#: gdkwindow.c:9913:1
msgid "@role: a string indicating its role"
msgstr ""

#. used by: gdk_window_set_role:
#: gdkwindow.c:9915:2
msgid ""
"When using GTK+, typically you should use gtk_window_set_role() instead of "
"this low-level function."
msgstr ""

#. used by: gdk_window_set_role:
#: gdkwindow.c:9918:9
msgid ""
"The window manager and session manager use a window's role to distinguish it "
"from other kinds of window in the same application. When an application is "
"restarted after being saved in a previous session, all windows with the same "
"title and role are treated as interchangeable.  So if you have two windows "
"with the same title that should be distinguished for session management "
"purposes, you should set the role on those windows. It doesn't matter what "
"string you use for the role, as long as you have a different role for each "
"non-interchangeable kind of window."
msgstr ""

#. used by: gdk_window_set_startup_id:
#: gdkwindow.c:9939:1
msgid "@startup_id: a string with startup-notification identifier"
msgstr ""

#. used by: gdk_window_set_startup_id:
#: gdkwindow.c:9941:2
msgid ""
"When using GTK+, typically you should use gtk_window_set_startup_id() "
"instead of this low-level function."
msgstr ""

#. used by: gdk_window_set_transient_for:
#: gdkwindow.c:9957:1
msgid "@parent: another toplevel #GdkWindow"
msgstr ""

#. used by: gdk_window_set_transient_for:
#: gdkwindow.c:9959:4
msgid ""
"Indicates to the window manager that @window is a transient dialog "
"associated with the application window @parent. This allows the window "
"manager to do things like center @window on @parent and keep @window above "
"@parent."
msgstr ""

#. used by: gdk_window_set_transient_for:
#: gdkwindow.c:9964:2
msgid ""
"See gtk_window_set_transient_for() if you're using #GtkWindow or #GtkDialog."
msgstr ""

#. used by: gdk_window_get_root_origin:
#: gdkwindow.c:9977:1
msgid "@x: (out): return location for X position of window frame"
msgstr ""

#. used by: gdk_window_get_root_origin:
#: gdkwindow.c:9978:1
msgid "@y: (out): return location for Y position of window frame"
msgstr ""

#. used by: gdk_window_get_root_origin:
#: gdkwindow.c:9980:2
msgid ""
"Obtains the top-left corner of the window manager frame in root window "
"coordinates."
msgstr ""

#. used by: gdk_window_get_frame_extents:
#: gdkwindow.c:9995:1
msgid "@rect: rectangle to fill with bounding box of the window frame"
msgstr ""

#. used by: gdk_window_get_frame_extents:
#: gdkwindow.c:9997:4
msgid ""
"Obtains the bounding box of the window, including window manager titlebar/"
"borders if any. The frame position is given in root window coordinates. To "
"get the position of the window itself (rather than the frame) in root window "
"coordinates, use gdk_window_get_origin()."
msgstr ""

#. used by: GdkWindowHints:
#: gdkwindow.h:118:1
msgid "@GDK_HINT_POS: indicates that the program has positioned the window"
msgstr ""

#. used by: GdkWindowHints:
#: gdkwindow.h:119:1
msgid "@GDK_HINT_MIN_SIZE: min size fields are set"
msgstr ""

#. used by: GdkWindowHints:
#: gdkwindow.h:120:1
msgid "@GDK_HINT_MAX_SIZE: max size fields are set"
msgstr ""

#. used by: GdkWindowHints:
#: gdkwindow.h:121:1
msgid "@GDK_HINT_BASE_SIZE: base size fields are set"
msgstr ""

#. used by: GdkWindowHints:
#: gdkwindow.h:122:1
msgid "@GDK_HINT_ASPECT: aspect ratio fields are set"
msgstr ""

#. used by: GdkWindowHints:
#: gdkwindow.h:123:1
msgid "@GDK_HINT_RESIZE_INC: resize increment fields are set"
msgstr ""

#. used by: GdkWindowHints:
#: gdkwindow.h:124:1
msgid "@GDK_HINT_WIN_GRAVITY: window gravity field is set"
msgstr ""

#. used by: GdkWindowHints:
#: gdkwindow.h:125:2
msgid ""
"@GDK_HINT_USER_POS: indicates that the window's position was explicitly set "
"by the user"
msgstr ""

#. used by: GdkWindowHints:
#: gdkwindow.h:127:2
msgid ""
"@GDK_HINT_USER_SIZE: indicates that the window's size was explicitly set by "
"the user"
msgstr ""

#. used by: GdkWindowHints:
#: gdkwindow.h:130:8
msgid ""
"Used to indicate which fields of a #GdkGeometry struct should be paid "
"attention to. Also, the presence/absence of @GDK_HINT_POS, "
"@GDK_HINT_USER_POS, and @GDK_HINT_USER_SIZE is significant, though they "
"don't directly refer to #GdkGeometry fields. @GDK_HINT_USER_POS will be set "
"automatically by #GtkWindow if you call gtk_window_move(). "
"@GDK_HINT_USER_POS and @GDK_HINT_USER_SIZE should be set if the user "
"specified a size/position using a --geometry command-line argument; "
"gtk_window_parse_geometry() automatically sets these flags."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:155:1
msgid "@GDK_WINDOW_TYPE_HINT_NORMAL: Normal toplevel window."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:156:1
msgid "@GDK_WINDOW_TYPE_HINT_DIALOG: Dialog window."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:157:2
msgid ""
"@GDK_WINDOW_TYPE_HINT_MENU: Window used to implement a menu; GTK+ uses this "
"hint only for torn-off menus, see #GtkTearoffMenuItem."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:159:1
msgid "@GDK_WINDOW_TYPE_HINT_TOOLBAR: Window used to implement toolbars."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:160:2
msgid ""
"@GDK_WINDOW_TYPE_HINT_SPLASHSCREEN: Window used to display a splash screen "
"during application startup."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:162:2
msgid ""
"@GDK_WINDOW_TYPE_HINT_UTILITY: Utility windows which are not detached "
"toolbars or dialogs."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:164:1
msgid "@GDK_WINDOW_TYPE_HINT_DOCK: Used for creating dock or panel windows."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:165:2
msgid ""
"@GDK_WINDOW_TYPE_HINT_DESKTOP: Used for creating the desktop background "
"window."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:167:1
msgid "@GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU: A menu that belongs to a menubar."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:168:2
msgid ""
"@GDK_WINDOW_TYPE_HINT_POPUP_MENU: A menu that does not belong to a menubar, "
"e.g. a context menu."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:170:1
msgid "@GDK_WINDOW_TYPE_HINT_TOOLTIP: A tooltip."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:171:2
msgid ""
"@GDK_WINDOW_TYPE_HINT_NOTIFICATION: A notification - typically a \"bubble\" "
"that belongs to a status icon."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:173:1
msgid "@GDK_WINDOW_TYPE_HINT_COMBO: A popup from a combo box."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:174:1
msgid ""
"@GDK_WINDOW_TYPE_HINT_DND: A window that is used to implement a DND cursor."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:176:3
msgid ""
"These are hints for the window manager that indicate what type of function "
"the window has. The window manager can use this when determining decoration "
"and behaviour of the window. The hint must be set before mapping the window."
msgstr ""

#. used by: GdkWindowTypeHint:
#: gdkwindow.h:180:4
msgid ""
"See the <ulink url=\"http://www.freedesktop.org/Standards/wm-spec\">Extended "
"Window Manager Hints</ulink> specification for more details about window "
"types."
msgstr ""

#. used by: GdkWMDecoration:
#: gdkwindow.h:210:1
msgid "@GDK_DECOR_ALL: all decorations should be applied."
msgstr ""

#. used by: GdkWMDecoration:
#: gdkwindow.h:211:1
msgid "@GDK_DECOR_BORDER: a frame should be drawn around the window."
msgstr ""

#. used by: GdkWMDecoration:
#: gdkwindow.h:212:1
msgid "@GDK_DECOR_RESIZEH: the frame should have resize handles."
msgstr ""

#. used by: GdkWMDecoration:
#: gdkwindow.h:213:1
msgid "@GDK_DECOR_TITLE: a titlebar should be placed above the window."
msgstr ""

#. used by: GdkWMDecoration:
#: gdkwindow.h:214:1
msgid "@GDK_DECOR_MENU: a button for opening a menu should be included."
msgstr ""

#. used by: GdkWMDecoration:
#: gdkwindow.h:215:1
msgid "@GDK_DECOR_MINIMIZE: a minimize button should be included."
msgstr ""

#. used by: GdkWMDecoration:
#: gdkwindow.h:216:1
msgid "@GDK_DECOR_MAXIMIZE: a maximize button should be included."
msgstr ""

#. used by: GdkWMDecoration:
#: gdkwindow.h:218:3
msgid ""
"These are hints originally defined by the Motif toolkit. The window manager "
"can use them when determining how to decorate the window. The hint must be "
"set before mapping the window."
msgstr ""

#. used by: GdkWMFunction:
#: gdkwindow.h:235:1
msgid "@GDK_FUNC_ALL: all functions should be offered."
msgstr ""

#. used by: GdkWMFunction:
#: gdkwindow.h:236:1
msgid "@GDK_FUNC_RESIZE: the window should be resizable."
msgstr ""

#. used by: GdkWMFunction:
#: gdkwindow.h:237:1
msgid "@GDK_FUNC_MOVE: the window should be movable."
msgstr ""

#. used by: GdkWMFunction:
#: gdkwindow.h:238:1
msgid "@GDK_FUNC_MINIMIZE: the window should be minimizable."
msgstr ""

#. used by: GdkWMFunction:
#: gdkwindow.h:239:1
msgid "@GDK_FUNC_MAXIMIZE: the window should be maximizable."
msgstr ""

#. used by: GdkWMFunction:
#: gdkwindow.h:240:1
msgid "@GDK_FUNC_CLOSE: the window should be closable."
msgstr ""

#. used by: GdkWMFunction:
#: gdkwindow.h:242:3
msgid ""
"These are hints originally defined by the Motif toolkit. The window manager "
"can use them when determining the functions to offer for the window. The "
"hint must be set before mapping the window."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:262:1
msgid "@GDK_GRAVITY_NORTH_WEST: the reference point is at the top left corner."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:263:1
msgid ""
"@GDK_GRAVITY_NORTH: the reference point is in the middle of the top edge."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:264:1
msgid ""
"@GDK_GRAVITY_NORTH_EAST: the reference point is at the top right corner."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:265:1
msgid ""
"@GDK_GRAVITY_WEST: the reference point is at the middle of the left edge."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:266:1
msgid ""
"@GDK_GRAVITY_CENTER: the reference point is at the center of the window."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:267:1
msgid ""
"@GDK_GRAVITY_EAST: the reference point is at the middle of the right edge."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:268:1
msgid ""
"@GDK_GRAVITY_SOUTH_WEST: the reference point is at the lower left corner."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:269:1
msgid ""
"@GDK_GRAVITY_SOUTH: the reference point is at the middle of the lower edge."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:270:1
msgid ""
"@GDK_GRAVITY_SOUTH_EAST: the reference point is at the lower right corner."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:271:2
msgid ""
"@GDK_GRAVITY_STATIC: the reference point is at the top left corner of the "
"window itself, ignoring window manager decorations."
msgstr ""

#. used by: GdkGravity:
#: gdkwindow.h:274:5
msgid ""
"Defines the reference point of a window and the meaning of coordinates "
"passed to gtk_window_move(). See gtk_window_move() and the \"implementation "
"notes\" section of the <ulink url=\"http://www.freedesktop.org/Standards/wm-"
"spec\">Extended Window Manager Hints</ulink> specification for more details."
msgstr ""

#. used by: GdkWindowEdge:
#: gdkwindow.h:297:1
msgid "@GDK_WINDOW_EDGE_NORTH_WEST: the top left corner."
msgstr ""

#. used by: GdkWindowEdge:
#: gdkwindow.h:298:1
msgid "@GDK_WINDOW_EDGE_NORTH: the top edge."
msgstr ""

#. used by: GdkWindowEdge:
#: gdkwindow.h:299:1
msgid "@GDK_WINDOW_EDGE_NORTH_EAST: the top right corner."
msgstr ""

#. used by: GdkWindowEdge:
#: gdkwindow.h:300:1
msgid "@GDK_WINDOW_EDGE_WEST: the left edge."
msgstr ""

#. used by: GdkWindowEdge:
#: gdkwindow.h:301:1
msgid "@GDK_WINDOW_EDGE_EAST: the right edge."
msgstr ""

#. used by: GdkWindowEdge:
#: gdkwindow.h:302:1
msgid "@GDK_WINDOW_EDGE_SOUTH_WEST: the lower left corner."
msgstr ""

#. used by: GdkWindowEdge:
#: gdkwindow.h:303:1
msgid "@GDK_WINDOW_EDGE_SOUTH: the lower edge."
msgstr ""

#. used by: GdkWindowEdge:
#: gdkwindow.h:304:1
msgid "@GDK_WINDOW_EDGE_SOUTH_EAST: the lower right corner."
msgstr ""

#. used by: GdkWindowEdge:
#: gdkwindow.h:306:1
msgid "Determines a window edge or corner."
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:322:1
msgid "@title: title of the window (for toplevel windows)"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:323:1
msgid "@event_mask: event mask (see gdk_window_set_events())"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:324:1
msgid "@x: X coordinate relative to parent window (see gdk_window_move())"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:325:1
msgid "@y: Y coordinate relative to parent window (see gdk_window_move())"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:326:1
msgid "@width: width of window"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:327:1
msgid "@height: height of window"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:328:2
msgid ""
"@wclass: #GDK_INPUT_OUTPUT (normal window) or #GDK_INPUT_ONLY (invisible "
"window that receives events)"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:330:1
msgid "@visual: #GdkVisual for window"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:331:1
msgid "@window_type: type of window"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:332:1
msgid "@cursor: cursor for the window (see gdk_window_set_cursor())"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:333:1
msgid "@wmclass_name: don't use (see gtk_window_set_wmclass())"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:334:1
msgid "@wmclass_class: don't use (see gtk_window_set_wmclass())"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:335:1
msgid "@override_redirect: %TRUE to bypass the window manager"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:336:1
msgid "@type_hint: a hint of the function of the window"
msgstr ""

#. used by: GdkWindowAttr:
#: gdkwindow.h:338:1
msgid "Attributes to use for a newly-created window."
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:359:2
msgid ""
"@min_width: minimum width of window (or -1 to use requisition, with "
"#GtkWindow only)"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:361:2
msgid ""
"@min_height: minimum height of window (or -1 to use requisition, with "
"#GtkWindow only)"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:363:2
msgid ""
"@max_width: maximum width of window (or -1 to use requisition, with "
"#GtkWindow only)"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:365:2
msgid ""
"@max_height: maximum height of window (or -1 to use requisition, with "
"#GtkWindow only)"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:367:2
msgid ""
"@base_width: allowed window widths are @base_width + @width_inc * N where N "
"is any integer (-1 allowed with #GtkWindow)"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:369:2
msgid ""
"@base_height: allowed window widths are @base_height + @height_inc * N where "
"N is any integer (-1 allowed with #GtkWindow)"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:371:1
msgid "@width_inc: width resize increment"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:372:1
msgid "@height_inc: height resize increment"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:373:1
msgid "@min_aspect: minimum width/height ratio"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:374:1
msgid "@max_aspect: maximum width/height ratio"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:375:1
msgid "@win_gravity: window gravity, see gtk_window_set_gravity()"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:377:4
msgid ""
"The #GdkGeometry struct gives the window manager information about a "
"window's geometry constraints. Normally you would set these on the GTK+ "
"level using gtk_window_set_geometry_hints(). #GtkWindow then sets the hints "
"on the #GdkWindow it creates."
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:382:12
msgid ""
"gdk_window_set_geometry_hints() expects the hints to be fully valid already "
"and simply passes them to the window manager; in contrast, "
"gtk_window_set_geometry_hints() performs some interpretation. For example, "
"#GtkWindow will apply the hints to the geometry widget instead of the "
"toplevel window, if you set a geometry widget. Also, the @min_width/"
"@min_height/@max_width/@max_height fields may be set to -1, and #GtkWindow "
"will substitute the size request of the window or geometry widget. If the "
"minimum size hint is not provided, #GtkWindow will use its requisition as "
"the minimum size. If the minimum size is provided and a geometry widget is "
"set, #GtkWindow will take the minimum size as the minimum size of the "
"geometry widget rather than the entire window. The base size is treated "
"similarly."
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:395:9
msgid ""
"The canonical use-case for gtk_window_set_geometry_hints() is to get a "
"terminal widget to resize properly. Here, the terminal text area should be "
"the geometry widget; #GtkWindow will then automatically set the base size to "
"the size of other widgets in the terminal window, such as the menubar and "
"scrollbar. Then, the @width_inc and @height_inc fields should be set to the "
"size of one character in the terminal. Finally, the base size should be set "
"to the size of one character. The net effect is that the minimum size of the "
"terminal will have a 1x1 character terminal area, and only terminal sizes on "
"the \"character grid\" will be allowed."
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:405:2
msgid ""
"Here's an example of how the terminal example would be implemented, assuming "
"a terminal area widget called \"terminal\" and a toplevel window \"toplevel"
"\":"
msgstr ""

#. used by: GdkGeometry:
#: gdkwindow.h:426:6
msgid ""
"The other useful fields are the @min_aspect and @max_aspect fields; these "
"contain a width/height ratio as a floating point number. If a geometry "
"widget is set, the aspect applies to the geometry widget rather than the "
"entire window. The most common use of these hints is probably to set "
"@min_aspect and @max_aspect to the same value, thus forcing the window to "
"keep a constant aspect ratio."
msgstr ""

#. used by: GdkWindowWindowClass:
#: gdkwindow.h:45:1
msgid "@GDK_INPUT_OUTPUT: window for graphics and events"
msgstr ""

#. used by: GdkWindowWindowClass:
#: gdkwindow.h:46:1
msgid "@GDK_INPUT_ONLY: window for events only"
msgstr ""

#. used by: GdkWindowWindowClass:
#: gdkwindow.h:48:5
msgid ""
"@GDK_INPUT_OUTPUT windows are the standard kind of window you might expect. "
"Such windows receive events and are also displayed on screen. "
"@GDK_INPUT_ONLY windows are invisible; they are usually placed above other "
"windows in order to trap or filter the events. You can't draw on "
"@GDK_INPUT_ONLY windows."
msgstr ""

#. used by: GdkWindowType:
#: gdkwindow.h:62:2
msgid ""
"@GDK_WINDOW_ROOT: root window; this window has no parent, covers the entire "
"screen, and is created by the window system"
msgstr ""

#. used by: GdkWindowType:
#: gdkwindow.h:64:1
msgid "@GDK_WINDOW_TOPLEVEL: toplevel window (used to implement #GtkWindow)"
msgstr ""

#. used by: GdkWindowType:
#: gdkwindow.h:65:1
msgid "@GDK_WINDOW_CHILD: child window (used to implement e.g. #GtkEntry)"
msgstr ""

#. used by: GdkWindowType:
#: gdkwindow.h:66:2
msgid ""
"@GDK_WINDOW_TEMP: override redirect temporary window (used to implement "
"#GtkMenu)"
msgstr ""

#. used by: GdkWindowType:
#: gdkwindow.h:68:1
msgid "@GDK_WINDOW_FOREIGN: foreign window (see gdk_window_foreign_new())"
msgstr ""

#. used by: GdkWindowType:
#: gdkwindow.h:69:2
msgid ""
"@GDK_WINDOW_OFFSCREEN: offscreen window (see <xref linkend=\"OFFSCREEN-"
"WINDOWS\"/>). Since 2.18"
msgstr ""

#. used by: GdkWindowType:
#: gdkwindow.h:72:1
msgid "Describes the kind of window."
msgstr ""

#. used by: GdkWindowChildFunc:
#: gdkwindow.h:812:3
msgid ""
"A function of this type is passed to gdk_window_invalidate_maybe_recurse(). "
"It gets called for each child of the window to determine whether to "
"recursively invalidate it or now."
msgstr ""

#. used by: GdkWindowChildFunc:
#: gdkwindow.h:816:1
msgid "Returns: %TRUE to invalidate @window recursively"
msgstr ""

#. used by: GdkWindowAttributesType:
#: gdkwindow.h:86:1
msgid "@GDK_WA_TITLE: Honor the title field"
msgstr ""

#. used by: GdkWindowAttributesType:
#: gdkwindow.h:87:1
msgid "@GDK_WA_X: Honor the X coordinate field"
msgstr ""

#. used by: GdkWindowAttributesType:
#: gdkwindow.h:88:1
msgid "@GDK_WA_Y: Honor the Y coordinate field"
msgstr ""

#. used by: GdkWindowAttributesType:
#: gdkwindow.h:89:1
msgid "@GDK_WA_CURSOR: Honor the cursor field"
msgstr ""

#. used by: GdkWindowAttributesType:
#: gdkwindow.h:90:1
msgid "@GDK_WA_VISUAL: Honor the visual field"
msgstr ""

#. used by: GdkWindowAttributesType:
#: gdkwindow.h:91:1
msgid "@GDK_WA_WMCLASS: Honor the wmclass_class and wmclass_name fields"
msgstr ""

#. used by: GdkWindowAttributesType:
#: gdkwindow.h:92:1
msgid "@GDK_WA_NOREDIR: Honor the override_redirect field"
msgstr ""

#. used by: GdkWindowAttributesType:
#: gdkwindow.h:93:1
msgid "@GDK_WA_TYPE_HINT: Honor the type_hint field"
msgstr ""

#. used by: GdkWindowAttributesType:
#: gdkwindow.h:95:6
msgid ""
"Used to indicate which fields in the #GdkWindowAttr struct should be "
"honored. For example, if you filled in the \"cursor\" and \"x\" fields of "
"#GdkWindowAttr, pass \"@GDK_WA_X | @GDK_WA_CURSOR\" to gdk_window_new(). "
"Fields in #GdkWindowAttr not covered by a bit in this enum are required; for "
"example, the @width/@height, @wclass, and @window_type fields are required, "
"they have no corresponding flag in #GdkWindowAttributesType."
msgstr ""
