# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-18 23:24-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. used by: g_type_module_set_name:
#: gtypemodule.c:183:1
msgid "@module: a #GTypeModule."
msgstr ""

#. used by: g_type_module_set_name:
#: gtypemodule.c:184:1
msgid "@name: a human-readable name to use in error messages."
msgstr ""

#. used by: g_type_module_set_name:
#: gtypemodule.c:186:1
msgid "Sets the name for a #GTypeModule"
msgstr ""

#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_use:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_unuse:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_type:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_add_interface:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_enum:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_flags:
#: gtypemodule.c:236:1 gtypemodule.c:284:1 gtypemodule.c:359:1
#: gtypemodule.c:444:1 gtypemodule.c:507:1 gtypemodule.c:546:1
msgid "@module: a #GTypeModule"
msgstr ""

#. used by: g_type_module_use:
#: gtypemodule.c:238:4
msgid ""
"Increases the use count of a #GTypeModule by one. If the use count was zero "
"before, the plugin will be loaded. If loading the plugin fails, the use "
"count is reset to its prior value."
msgstr ""

#. used by: g_type_module_use:
#: gtypemodule.c:243:2
msgid ""
"Returns: %FALSE if the plugin needed to be loaded and loading the plugin "
"failed."
msgstr ""

#. used by: g_type_module_unuse:
#: gtypemodule.c:286:5
msgid ""
"Decreases the use count of a #GTypeModule by one. If the result is zero, the "
"module will be unloaded. (However, the #GTypeModule will not be freed, and "
"types associated with the #GTypeModule are not unregistered. Once a "
"#GTypeModule is initialized, it must exist forever.)"
msgstr ""

#. used by: SECTION:gtypemodule
#: gtypemodule.c:30:1
msgid "@short_description: Type loading modules"
msgstr ""

#. used by: SECTION:gtypemodule
#: gtypemodule.c:31:10
msgid ""
"@see_also:<variablelist> <varlistentry> <term>#GTypePlugin</term> "
"<listitem><para>The abstract type loader interface.</para></listitem> </"
"varlistentry> <varlistentry> <term>#GModule</term> <listitem><para>Portable "
"mechanism for dynamically loaded modules.</para></listitem> </varlistentry> "
"</variablelist>"
msgstr ""

#. used by: g_type_module_register_type:
#: gtypemodule.c:360:1
msgid "@parent_type: the type for the parent class"
msgstr ""

#. used by: g_type_module_register_type:
#: gtypemodule.c:361:1
msgid "@type_name: name for the type"
msgstr ""

#. used by: g_type_module_register_type:
#: gtypemodule.c:362:1
msgid "@type_info: type information structure"
msgstr ""

#. used by: g_type_module_register_type:
#: gtypemodule.c:363:1
msgid "@flags: flags field providing details about the type"
msgstr ""

#. used by: g_type_module_register_type:
#: gtypemodule.c:365:4
msgid ""
"Looks up or registers a type that is implemented with a particular type "
"plugin. If a type with name @type_name was previously registered, the #GType "
"identifier for the type is returned, otherwise the type is newly registered, "
"and the resulting #GType identifier returned."
msgstr ""

#. used by: g_type_module_register_type:
#: gtypemodule.c:370:3
msgid ""
"When reregistering a type (typically because a module is unloaded then "
"reloaded, and reinitialized), @module and @parent_type must be the same as "
"they were previously."
msgstr ""

#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_type:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_add_interface:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_enum:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_flags:
#: gtypemodule.c:374:2 gtypemodule.c:453:2 gtypemodule.c:519:2
#: gtypemodule.c:558:2
msgid ""
"As long as any instances of the type exist, the type plugin will not be "
"unloaded."
msgstr ""

#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_type:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_enum:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_flags:
#: gtypemodule.c:377:1 gtypemodule.c:524:1 gtypemodule.c:563:1
msgid "Returns: the new or existing type ID"
msgstr ""

#. used by: SECTION:gtypemodule
#: gtypemodule.c:41:1
msgid "@title: GTypeModule"
msgstr ""

#. used by: SECTION:gtypemodule
#: gtypemodule.c:43:12
msgid ""
"#GTypeModule provides a simple implementation of the #GTypePlugin interface. "
"The model of #GTypeModule is a dynamically loaded module which implements "
"some number of types and interface implementations. When the module is "
"loaded, it registers its types and interfaces using "
"g_type_module_register_type() and g_type_module_add_interface().  As long as "
"any instances of these types and interface implementations are in use, the "
"module is kept loaded. When the types and interfaces are gone, the module "
"may be unloaded. If the types and interfaces become used again, the module "
"will be reloaded. Note that the last unref can not happen in module code, "
"since that would lead to the caller's code being unloaded before "
"g_object_unref() returns to it."
msgstr ""

#. used by: g_type_module_add_interface:
#: gtypemodule.c:445:1
msgid "@instance_type: type to which to add the interface."
msgstr ""

#. used by: g_type_module_add_interface:
#: gtypemodule.c:446:1
msgid "@interface_type: interface type to add"
msgstr ""

#. used by: g_type_module_add_interface:
#: gtypemodule.c:447:1
msgid "@interface_info: type information structure"
msgstr ""

#. used by: g_type_module_add_interface:
#: gtypemodule.c:449:3
msgid ""
"Registers an additional interface for a type, whose interface lives in the "
"given type plugin. If the interface was already registered for the type in "
"this plugin, nothing will be done."
msgstr ""

#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_enum:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_flags:
#: gtypemodule.c:508:1 gtypemodule.c:547:1
msgid "@name: name for the type"
msgstr ""

#. used by: g_type_module_register_enum:
#: gtypemodule.c:509:4
msgid ""
"@const_static_values: an array of #GEnumValue structs for the possible "
"enumeration values. The array is terminated by a struct with all members "
"being 0."
msgstr ""

#. used by: g_type_module_register_enum:
#: gtypemodule.c:514:4
msgid ""
"Looks up or registers an enumeration that is implemented with a particular "
"type plugin. If a type with name @type_name was previously registered, the "
"#GType identifier for the type is returned, otherwise the type is newly "
"registered, and the resulting #GType identifier returned."
msgstr ""

#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_enum:
#. #-#-#-#-#  gtypemodule.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_module_register_flags:
#: gtypemodule.c:522:1 gtypemodule.c:561:1
msgid "Since: 2.6"
msgstr ""

#. used by: g_type_module_register_flags:
#: gtypemodule.c:548:4
msgid ""
"@const_static_values: an array of #GFlagsValue structs for the possible "
"flags values. The array is terminated by a struct with all members being 0."
msgstr ""

#. used by: g_type_module_register_flags:
#: gtypemodule.c:553:4
msgid ""
"Looks up or registers a flags type that is implemented with a particular "
"type plugin. If a type with name @type_name was previously registered, the "
"#GType identifier for the type is returned, otherwise the type is newly "
"registered, and the resulting #GType identifier returned."
msgstr ""

#. used by: SECTION:gtypemodule
#: gtypemodule.c:56:9
msgid ""
"Keeping track of whether the module should be loaded or not is done by using "
"a use count - it starts at zero, and whenever it is greater than zero, the "
"module is loaded. The use count is maintained internally by the type system, "
"but also can be explicitly controlled by g_type_module_use() and "
"g_type_module_unuse(). Typically, when loading a module for the first type, "
"g_type_module_use() will be used to load it so that it can initialize its "
"types. At some later point, when the module no longer needs to be loaded "
"except for the type implementations it contains, g_type_module_unuse() is "
"called."
msgstr ""

#. used by: SECTION:gtypemodule
#: gtypemodule.c:66:4
msgid ""
"#GTypeModule does not actually provide any implementation of module loading "
"and unloading. To create a particular module type you must derive from "
"#GTypeModule and implement the load and unload functions in "
"#GTypeModuleClass."
msgstr ""

#. #-#-#-#-#  gtypemodule.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_DYNAMIC_TYPE:
#. #-#-#-#-#  gtypemodule.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:102:1 gtypemodule.h:175:1
msgid "Since: 2.14"
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:107:1
msgid "@TypeName: The name of the new type, in Camel case."
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:108:2
msgid ""
"@type_name: The name of the new type, in lowercase, with words separated by "
"'_'."
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:110:1
msgid "@TYPE_PARENT: The #GType of the parent type."
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:111:1
msgid "@flags: #GTypeFlags to pass to g_type_module_register_type()"
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:112:1
msgid "@CODE: Custom code that gets inserted in the *_get_type() function."
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:114:2
msgid ""
"A more general version of G_DEFINE_DYNAMIC_TYPE() which allows to specify "
"#GTypeFlags and custom code."
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:117:13
msgid ""
"|[ G_DEFINE_DYNAMIC_TYPE_EXTENDED (GtkGadget, gtk_gadget, GTK_TYPE_THING, 0, "
"G_IMPLEMENT_INTERFACE_DYNAMIC (TYPE_GIZMO, gtk_gadget_gizmo_init)); ]| "
"expands to |[ static void     gtk_gadget_init              (GtkGadget      "
"*self); static void     gtk_gadget_class_init        (GtkGadgetClass "
"*klass); static void     gtk_gadget_class_finalize    (GtkGadgetClass "
"*klass);"
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:131:2
msgid ""
"static gpointer gtk_gadget_parent_class = NULL; static GType    "
"gtk_gadget_type_id = 0;"
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:134:5
msgid ""
"static void     gtk_gadget_class_intern_init (gpointer klass) "
"{ gtk_gadget_parent_class = g_type_class_peek_parent (klass); "
"gtk_gadget_class_init ((GtkGadgetClass*) klass); }"
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:140:5
msgid "GType gtk_gadget_get_type (void) { return gtk_gadget_type_id; }"
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE_EXTENDED:
#: gtypemodule.h:146:28
msgid ""
"static void gtk_gadget_register_type (GTypeModule *type_module) { const "
"GTypeInfo g_define_type_info = { sizeof (GtkGadgetClass), (GBaseInitFunc) "
"NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) "
"gtk_gadget_class_intern_init, (GClassFinalizeFunc) "
"gtk_gadget_class_finalize, NULL,   // class_data sizeof (GtkGadget), "
"0,      // n_preallocs (GInstanceInitFunc) gtk_gadget_init, NULL    // "
"value_table }; gtk_gadget_type_id = g_type_module_register_type "
"(type_module, GTK_TYPE_THING, GtkGadget, &g_define_type_info, (GTypeFlags) "
"flags); { const GInterfaceInfo g_implement_interface_info = "
"{ (GInterfaceInitFunc) gtk_gadget_gizmo_init }; g_type_module_add_interface "
"(type_module, g_define_type_id, TYPE_GIZMO, "
"&g_implement_interface_info); } } ]|"
msgstr ""

#. used by: G_IMPLEMENT_INTERFACE_DYNAMIC:
#: gtypemodule.h:220:1
msgid "@TYPE_IFACE: The #GType of the interface to add"
msgstr ""

#. used by: G_IMPLEMENT_INTERFACE_DYNAMIC:
#: gtypemodule.h:221:1
msgid "@iface_init: The interface init function"
msgstr ""

#. used by: G_IMPLEMENT_INTERFACE_DYNAMIC:
#: gtypemodule.h:223:3
msgid ""
"A convenience macro to ease interface addition in the @_C_ section of "
"G_DEFINE_DYNAMIC_TYPE_EXTENDED(). See G_DEFINE_DYNAMIC_TYPE_EXTENDED() for "
"an example."
msgstr ""

#. used by: G_IMPLEMENT_INTERFACE_DYNAMIC:
#: gtypemodule.h:227:3
msgid ""
"Note that this macro can only be used together with the "
"G_DEFINE_DYNAMIC_TYPE_EXTENDED macros, since it depends on variable names "
"from that macro."
msgstr ""

#. used by: G_IMPLEMENT_INTERFACE_DYNAMIC:
#: gtypemodule.h:231:1
msgid "Since: 2.24"
msgstr ""

#. used by: GTypeModule:
#: gtypemodule.h:43:1
msgid "@name: the name of the module"
msgstr ""

#. used by: GTypeModule:
#: gtypemodule.h:45:2
msgid ""
"The members of the <structname>GTypeModule</structname> structure should not "
"be accessed directly, except for the @name field."
msgstr ""

#. used by: GTypeModuleClass:
#: gtypemodule.h:62:1
msgid "@parent_class: the parent class"
msgstr ""

#. used by: GTypeModuleClass:
#: gtypemodule.h:63:2
msgid ""
"@load: loads the module and registers one or more types using "
"g_type_module_register_type()."
msgstr ""

#. used by: GTypeModuleClass:
#: gtypemodule.h:65:1
msgid "@unload: unloads the module"
msgstr ""

#. used by: GTypeModuleClass:
#: gtypemodule.h:67:2
msgid ""
"In order to implement dynamic loading of types based on #GTypeModule, the "
"@load and @unload functions in #GTypeModuleClass must be implemented."
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE:
#: gtypemodule.h:88:1
msgid "@TN: The name of the new type, in Camel case."
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE:
#: gtypemodule.h:89:2
msgid ""
"@t_n: The name of the new type, in lowercase, with words separated by '_'."
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE:
#: gtypemodule.h:91:1
msgid "@T_P: The #GType of the parent type."
msgstr ""

#. used by: G_DEFINE_DYNAMIC_TYPE:
#: gtypemodule.h:93:8
msgid ""
"A convenience macro for dynamic type implementations, which declares a class "
"initialization function, an instance initialization function (see #GTypeInfo "
"for information about these) and a static variable named @t_n<!-- --"
">_parent_class pointing to the parent class. Furthermore, it defines a "
"<function>*_get_type()</function> and a static <function>*_register_type()</"
"function> function for use in your <function>module_init()</function>. See "
"G_DEFINE_DYNAMIC_TYPE_EXTENDED() for an example."
msgstr ""
