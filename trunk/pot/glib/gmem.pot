# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-14 21:51-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

# #used by: SECTION: memory_chunks
#: gmem.c:1002:1 gmem.c:1027:1
msgid "</example>"
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:1004:2
msgid "<example> <title>Using a #GMemChunk with data structures</title>"
msgstr ""

# #used by: GAllocator:
#: gmem.c:1035:2
msgid ""
"The #GAllocator struct contains private data. and should only be accessed "
"using the following functions."
msgstr ""

# #used by: GMemChunk:
#: gmem.c:1043:3
msgid ""
"The #GMemChunk struct is an opaque data structure representing a memory "
"chunk. It should be accessed only through the use of the following functions."
msgstr ""

# #used by: G_ALLOC_ONLY:
#: gmem.c:1052:3
msgid ""
"Specifies the type of a #GMemChunk. Used in g_mem_chunk_new() and "
"g_mem_chunk_create() to specify that atoms will never be freed individually."
msgstr ""

# #used by: G_ALLOC_AND_FREE:
#: gmem.c:1061:3
msgid ""
"Specifies the type of a #GMemChunk. Used in g_mem_chunk_new() and "
"g_mem_chunk_create() to specify that atoms will be freed individually."
msgstr ""

# used by: g_mem_chunk_new:
#: gmem.c:1074:3
msgid ""
"@name: a string to identify the #GMemChunk. It is not copied so it should be "
"valid for the lifetime of the #GMemChunk. It is only used in "
"g_mem_chunk_print(), which is used for debugging."
msgstr ""

# used by: g_mem_chunk_new:
#: gmem.c:1077:1
msgid "@atom_size: the size, in bytes, of each element in the #GMemChunk."
msgstr ""

# used by: g_mem_chunk_new:
#: gmem.c:1078:2
msgid ""
"@area_size: the size, in bytes, of each block of memory allocated to contain "
"the atoms."
msgstr ""

# used by: g_mem_chunk_new:
#: gmem.c:1080:6
msgid ""
"@type: the type of the #GMemChunk.  #G_ALLOC_AND_FREE is used if the atoms "
"will be freed individually.  #G_ALLOC_ONLY should be used if atoms will "
"never be freed individually. #G_ALLOC_ONLY is quicker, since it does not "
"need to track free atoms, but it obviously wastes memory if you no longer "
"need many of the atoms."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_new:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_create:
#: gmem.c:1086:1 gmem.c:1291:1
msgid "@Returns: the new #GMemChunk."
msgstr ""

# #used by: g_mem_chunk_new:
#: gmem.c:1088:1
msgid "Creates a new #GMemChunk."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_mem_chunk_new:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_mem_chunk_destroy:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_mem_chunk_clean:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_mem_chunk_reset:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_mem_chunk_print:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_mem_chunk_info:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_blow_chunks:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_mem_chunk_create:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_allocator_new:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_allocator_free:
#: gmem.c:1090:2 gmem.c:1113:2 gmem.c:1185:2 gmem.c:1197:2 gmem.c:1211:2
#: gmem.c:1225:2 gmem.c:1235:2 gmem.c:1299:2 gmem.c:1318:2 gmem.c:1346:2
msgid ""
"Deprecated:2.10: Use the <link linkend=|$_1_$|glib-Memory-Slices|$_1_$|"
">slice allocator</link> instead"
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_destroy:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_alloc:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_alloc0:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_free:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_clean:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_reset:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_print:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_chunk_free:
#: gmem.c:1109:1 gmem.c:1126:1 gmem.c:1143:1 gmem.c:1161:1 gmem.c:1181:1
#: gmem.c:1192:1 gmem.c:1205:1 gmem.c:1257:1
msgid "@mem_chunk: a #GMemChunk."
msgstr ""

# #used by: g_mem_chunk_destroy:
#: gmem.c:1111:1
msgid "Frees all of the memory allocated for a #GMemChunk."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_alloc:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mem_chunk_alloc0:
#: gmem.c:1127:1 gmem.c:1144:1
msgid "@Returns: a pointer to the allocated atom."
msgstr ""

# #used by: g_mem_chunk_alloc:
#: gmem.c:1129:1
msgid "Allocates an atom of memory from a #GMemChunk."
msgstr ""

# #used by: g_mem_chunk_alloc:
#: gmem.c:1131:1
msgid "Deprecated:2.10: Use g_slice_alloc() instead"
msgstr ""

# #used by: g_mem_chunk_alloc0:
#: gmem.c:1146:2
msgid "Allocates an atom of memory from a #GMemChunk, setting the memory to 0."
msgstr ""

# #used by: g_mem_chunk_alloc0:
#: gmem.c:1149:1
msgid "Deprecated:2.10: Use g_slice_alloc0() instead"
msgstr ""

# used by: g_mem_chunk_free:
#: gmem.c:1162:1
msgid "@mem: a pointer to the atom to free."
msgstr ""

# #used by: g_mem_chunk_free:
#: gmem.c:1164:3
msgid ""
"Frees an atom in a #GMemChunk. This should only be called if the #GMemChunk "
"was created with #G_ALLOC_AND_FREE. Otherwise it will simply return."
msgstr ""

# #used by: g_mem_chunk_free:
#: gmem.c:1168:1
msgid "Deprecated:2.10: Use g_slice_free1() instead"
msgstr ""

# #used by: g_mem_chunk_clean:
#: gmem.c:1183:1
msgid "Frees any blocks in a #GMemChunk which are no longer being used."
msgstr ""

# #used by: g_mem_chunk_reset:
#: gmem.c:1194:2
msgid ""
"Resets a GMemChunk to its initial state. It frees all of the currently "
"allocated blocks of memory."
msgstr ""

# #used by: g_mem_chunk_print:
#: gmem.c:1207:3
msgid ""
"Outputs debugging information for a #GMemChunk. It outputs the name of the "
"#GMemChunk (set with g_mem_chunk_new()), the number of bytes used, and the "
"number of blocks of memory allocated."
msgstr ""

# #used by: g_mem_chunk_info:
#: gmem.c:1220:4
msgid ""
"Outputs debugging information for all #GMemChunk objects currently in use. "
"It outputs the number of #GMemChunk objects currently allocated, and calls "
"g_mem_chunk_print() to output information on each one."
msgstr ""

# #used by: g_blow_chunks:
#: gmem.c:1233:1
msgid "Calls g_mem_chunk_clean() on all #GMemChunk objects."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_chunk_new0:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_chunk_new:
#: gmem.c:1242:1 gmem.c:1269:1
msgid "@type: the type of the #GMemChunk atoms, typically a structure name."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_chunk_new0:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_chunk_new:
#: gmem.c:1243:1 gmem.c:1270:1
msgid "@chunk: a #GMemChunk."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_chunk_new0:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_chunk_new:
#: gmem.c:1244:2 gmem.c:1271:2
msgid "@Returns: a pointer to the allocated atom, cast to a pointer to @type."
msgstr ""

# #used by: g_chunk_new0:
#: gmem.c:1247:3
msgid ""
"A convenience macro to allocate an atom of memory from a #GMemChunk. It "
"calls g_mem_chunk_alloc0() and casts the returned atom to a pointer to the "
"given type, avoiding a type cast in the source code."
msgstr ""

# #used by: g_chunk_new0:
#: gmem.c:1251:1
msgid "Deprecated:2.10: Use g_slice_new0() instead"
msgstr ""

# used by: g_chunk_free:
#: gmem.c:1256:1
msgid "@mem: a pointer to the atom to be freed."
msgstr ""

# #used by: g_chunk_free:
#: gmem.c:1259:4
msgid ""
"A convenience macro to free an atom of memory from a #GMemChunk. It simply "
"switches the arguments and calls g_mem_chunk_free() It is included simply to "
"complement the other convenience macros, g_chunk_new() and g_chunk_new0()."
msgstr ""

# used by: SECTION:memory
#: gmem.c:126:1
msgid "@Short_Description: general memory-handling"
msgstr ""

# #used by: g_chunk_free:
#: gmem.c:1264:1
msgid "Deprecated:2.10: Use g_slice_free() instead"
msgstr ""

# used by: SECTION:memory
#: gmem.c:127:1
msgid "@Title: Memory Allocation"
msgstr ""

# #used by: g_chunk_new:
#: gmem.c:1274:3
msgid ""
"A convenience macro to allocate an atom of memory from a #GMemChunk. It "
"calls g_mem_chunk_alloc() and casts the returned atom to a pointer to the "
"given type, avoiding a type cast in the source code."
msgstr ""

# #used by: g_chunk_new:
#: gmem.c:1278:1
msgid "Deprecated:2.10: Use g_slice_new() instead"
msgstr ""

# used by: g_mem_chunk_create:
#: gmem.c:1283:1
msgid "@type: the type of the atoms, typically a structure name."
msgstr ""

# used by: g_mem_chunk_create:
#: gmem.c:1284:1
msgid "@pre_alloc: the number of atoms to store in each block of memory."
msgstr ""

# used by: g_mem_chunk_create:
#: gmem.c:1285:6
msgid ""
"@alloc_type: the type of the #GMemChunk.  #G_ALLOC_AND_FREE is used if the "
"atoms will be freed individually.  #G_ALLOC_ONLY should be used if atoms "
"will never be freed individually.  #G_ALLOC_ONLY is quicker, since it does "
"not need to track free atoms, but it obviously wastes memory if you no "
"longer need many of the atoms."
msgstr ""

# #used by: SECTION:memory
#: gmem.c:129:1
msgid "These functions provide support for allocating and freeing memory."
msgstr ""

# #used by: g_mem_chunk_create:
#: gmem.c:1293:5
msgid ""
"A convenience macro for creating a new #GMemChunk. It calls g_mem_chunk_new"
"(), using the given type to create the #GMemChunk name. The atom size is "
"determined using <function>sizeof()</function>, and the area size is "
"calculated by multiplying the @pre_alloc parameter with the atom size."
msgstr ""

# used by: g_allocator_new:
#: gmem.c:1306:3
msgid ""
"@name: the name of the #GAllocator. This name is used to set the name of the "
"#GMemChunk used by the #GAllocator, and is only used for debugging."
msgstr ""

# used by: g_allocator_new:
#: gmem.c:1309:5
msgid ""
"@n_preallocs: the number of elements in each block of memory allocated.  "
"Larger blocks mean less calls to g_malloc(), but some memory may be wasted.  "
"(GLib uses 128 elements per block by default.) The value must be between 1 "
"and 65535."
msgstr ""

# #used by: SECTION:memory
#: gmem.c:131:4
msgid ""
"<note> If any call to allocate memory fails, the application is terminated. "
"This also means that there is no need to check if the call succeeded. </note>"
msgstr ""

# used by: g_allocator_new:
#: gmem.c:1314:1
msgid "@Returns: a new #GAllocator."
msgstr ""

# #used by: g_allocator_new:
#: gmem.c:1316:1
msgid "Creates a new #GAllocator."
msgstr ""

# used by: g_allocator_free:
#: gmem.c:1342:1
msgid "@allocator: a #GAllocator."
msgstr ""

# #used by: g_allocator_free:
#: gmem.c:1344:1
msgid "Frees all of the memory allocated by the #GAllocator."
msgstr ""

# #used by: SECTION:memory
#: gmem.c:136:7
msgid ""
"<note> It's important to match g_malloc() with g_free(), plain malloc() with "
"free(), and (if you're using C++) new with delete and new[] with delete[]. "
"Otherwise bad things can happen, since these allocators may use different "
"memory pools (and new/delete call constructors and destructors). See also "
"g_mem_set_vtable(). </note>"
msgstr ""

# #used by: g_mem_gc_friendly:
#: gmem.c:1360:2
msgid ""
"This variable is %TRUE if the <envar>G_DEBUG</envar> environment variable "
"includes the key <link linkend=|$_1_$|G_DEBUG|$_1_$|>gc-friendly</link>."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_malloc:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_malloc0:
#: gmem.c:148:1 gmem.c:180:1
msgid "@n_bytes: the number of bytes to allocate"
msgstr ""

# #used by: g_malloc:
#: gmem.c:150:2
msgid "Allocates @n_bytes bytes of memory. If @n_bytes is 0 it returns %NULL."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_malloc:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_malloc0:
#: gmem.c:153:1 gmem.c:185:1
msgid "Returns: a pointer to the allocated memory"
msgstr ""

# #used by: g_malloc0:
#: gmem.c:182:2
msgid ""
"Allocates @n_bytes bytes of memory, initialized to 0's. If @n_bytes is 0 it "
"returns %NULL."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_realloc:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_realloc_n:
#: gmem.c:212:1 gmem.c:413:1
msgid "@mem: the memory to reallocate"
msgstr ""

# used by: g_realloc:
#: gmem.c:213:1
msgid "@n_bytes: new size of the memory in bytes"
msgstr ""

# #used by: g_realloc:
#: gmem.c:215:5
msgid ""
"Reallocates the memory pointed to by @mem, so that it now has space for "
"@n_bytes bytes of memory. It returns the new address of the memory, which "
"may have been moved. @mem may be %NULL, in which case it's considered to "
"have zero-length. @n_bytes may be 0, in which case %NULL will be returned "
"and @mem will be freed unless it is %NULL."
msgstr ""

# #used by: g_realloc:
#: gmem.c:221:1
msgid "Returns: the new address of the allocated memory"
msgstr ""

# used by: g_free:
#: gmem.c:252:1
msgid "@mem: the memory to free"
msgstr ""

# #used by: g_free:
#: gmem.c:254:2
msgid ""
"Frees the memory pointed to by @mem. If @mem is %NULL it simply returns."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_malloc:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_realloc:
#: gmem.c:269:1 gmem.c:324:1
msgid "@n_bytes: number of bytes to allocate."
msgstr ""

# #used by: g_try_malloc:
#: gmem.c:271:2
msgid ""
"Attempts to allocate @n_bytes, and returns %NULL on failure. Contrast with "
"g_malloc(), which aborts the program on failure."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_try_malloc:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_try_realloc:
#: gmem.c:274:1 gmem.c:330:1
msgid "Returns: the allocated memory, or %NULL."
msgstr ""

# used by: g_try_malloc0:
#: gmem.c:295:1
msgid "@n_bytes: number of bytes to allocate"
msgstr ""

# #used by: g_try_malloc0:
#: gmem.c:297:2
msgid ""
"Attempts to allocate @n_bytes, initialized to 0's, and returns %NULL on "
"failure. Contrast with g_malloc0(), which aborts the program on failure."
msgstr ""

# #used by: g_try_malloc0:
#: gmem.c:300:2
msgid "Since: 2.8 Returns: the allocated memory, or %NULL"
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_realloc:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_realloc_n:
#: gmem.c:323:1 gmem.c:484:1
msgid "@mem: previously-allocated memory, or %NULL."
msgstr ""

# #used by: g_try_realloc:
#: gmem.c:326:3
msgid ""
"Attempts to realloc @mem to a new size, @n_bytes, and returns %NULL on "
"failure. Contrast with g_realloc(), which aborts the program on failure. If "
"@mem is %NULL, behaves the same as g_try_malloc()."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_malloc_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_malloc0_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_realloc_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_malloc_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_malloc0_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_realloc_n:
#: gmem.c:359:1 gmem.c:386:1 gmem.c:414:1 gmem.c:442:1 gmem.c:463:1
#: gmem.c:485:1
msgid "@n_blocks: the number of blocks to allocate"
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_malloc_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_malloc0_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_realloc_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_malloc_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_malloc0_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_realloc_n:
#: gmem.c:360:1 gmem.c:387:1 gmem.c:415:1 gmem.c:443:1 gmem.c:464:1
#: gmem.c:486:1
msgid "@n_block_bytes: the size of each block in bytes"
msgstr ""

# #used by: g_malloc_n:
#: gmem.c:362:2
msgid ""
"This function is similar to g_malloc(), allocating (@n_blocks * "
"@n_block_bytes) bytes, but care is taken to detect possible overflow during "
"multiplication."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_malloc_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_malloc0_n:
#: gmem.c:365:2 gmem.c:392:2
msgid "Since: 2.24 Returns: a pointer to the allocated memory"
msgstr ""

# #used by: g_malloc0_n:
#: gmem.c:389:2
msgid ""
"This function is similar to g_malloc0(), allocating (@n_blocks * "
"@n_block_bytes) bytes, but care is taken to detect possible overflow during "
"multiplication."
msgstr ""

# #used by: g_realloc_n:
#: gmem.c:417:2
msgid ""
"This function is similar to g_realloc(), allocating (@n_blocks * "
"@n_block_bytes) bytes, but care is taken to detect possible overflow during "
"multiplication."
msgstr ""

# #used by: g_realloc_n:
#: gmem.c:420:2
msgid "Since: 2.24 Returns: the new address of the allocated memory"
msgstr ""

# #used by: g_try_malloc_n:
#: gmem.c:445:2
msgid ""
"This function is similar to g_try_malloc(), allocating (@n_blocks * "
"@n_block_bytes) bytes, but care is taken to detect possible overflow during "
"multiplication."
msgstr ""

# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_try_malloc_n:
# #-#-#-#-#  gmem.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_try_realloc_n:
#: gmem.c:448:2 gmem.c:491:2
msgid "Since: 2.24 Returns: the allocated memory, or %NULL."
msgstr ""

# #used by: g_try_malloc0_n:
#: gmem.c:466:2
msgid ""
"This function is similar to g_try_malloc0(), allocating (@n_blocks * "
"@n_block_bytes) bytes, but care is taken to detect possible overflow during "
"multiplication."
msgstr ""

# #used by: g_try_malloc0_n:
#: gmem.c:469:2
msgid "Since: 2.24 Returns: the allocated memory, or %NULL"
msgstr ""

# #used by: g_try_realloc_n:
#: gmem.c:488:2
msgid ""
"This function is similar to g_try_realloc(), allocating (@n_blocks * "
"@n_block_bytes) bytes, but care is taken to detect possible overflow during "
"multiplication."
msgstr ""

# #used by: g_mem_is_system_malloc
#: gmem.c:525:5
msgid ""
"Checks whether the allocator used by g_malloc() is the system's malloc "
"implementation. If it returns %TRUE memory allocated with malloc() can be "
"used interchangeable with memory allocated using g_malloc(). This function "
"is useful for avoiding an extra copy of allocated memory returned by a non-"
"GLib-based API."
msgstr ""

# #used by: g_mem_is_system_malloc
#: gmem.c:531:1
msgid "A different allocator can be set using g_mem_set_vtable()."
msgstr ""

# #used by: g_mem_is_system_malloc
#: gmem.c:533:1
msgid "Return value: if %TRUE, malloc() and g_malloc() can be mixed."
msgstr ""

# used by: g_mem_set_vtable:
#: gmem.c:543:1
msgid "@vtable: table of memory allocation routines."
msgstr ""

# #used by: g_mem_set_vtable:
#: gmem.c:545:7
msgid ""
"Sets the #GMemVTable to use for memory allocation. You can use this to "
"provide custom memory allocation routines. <emphasis>This function must be "
"called before using any other GLib functions.</emphasis> The @vtable only "
"needs to provide malloc(), realloc(), and free() functions; GLib can provide "
"default implementations of the others. The malloc() and realloc() "
"implementations should return %NULL on failure, GLib will handle error-"
"checking for you. @vtable is copied, so need not persist after this function "
"has been called."
msgstr ""

# #used by: glib_mem_profiler_table:
#: gmem.c:581:4
msgid ""
"A #GMemVTable containing profiling variants of the memory allocation "
"functions. Use them together with g_mem_profile() in order to get "
"information about the memory allocation pattern of your program."
msgstr ""

# used by: g_mem_profile:
#: gmem.c:688:1
msgid "@void:"
msgstr ""

# #used by: g_mem_profile:
#: gmem.c:690:1
msgid "Outputs a summary of memory usage."
msgstr ""

# #used by: g_mem_profile:
#: gmem.c:692:5
msgid ""
"It outputs the frequency of allocations of different sizes, the total number "
"of bytes which have been allocated, the total number of bytes which have "
"been freed, and the difference between the previous two values, i.e. the "
"number of bytes still in use."
msgstr ""

# #used by: g_mem_profile:
#: gmem.c:698:2
msgid ""
"Note that this function will not output anything unless you have previously "
"installed the #glib_mem_profiler_table with g_mem_set_vtable()."
msgstr ""

# used by: SECTION: allocators
#: gmem.c:915:1
msgid "@title: Memory Allocators"
msgstr ""

# used by: SECTION: allocators
#: gmem.c:916:2
msgid ""
"@short_description: deprecated way to allocate chunks of memory for GList, "
"GSList and GNode"
msgstr ""

# #used by: SECTION: allocators
#: gmem.c:919:5
msgid ""
"Prior to 2.10, #GAllocator was used as an efficient way to allocate small "
"pieces of memory for use with the #GList, #GSList and #GNode data "
"structures. Since 2.10, it has been completely replaced by the <link "
"linkend=|$_1_$|glib-Memory-Slices|$_1_$|>slice allocator</link> and "
"deprecated."
msgstr ""

# used by: SECTION: memory_chunks
#: gmem.c:928:1
msgid "@title: Memory Chunks"
msgstr ""

# used by: SECTION: memory_chunks
#: gmem.c:929:2
msgid ""
"@short_description: deprecated way to allocate groups of equal-sized chunks "
"of memory"
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:932:9
msgid ""
"Memory chunks provide an space-efficient way to allocate equal-sized pieces "
"of memory, called atoms. However, due to the administrative overhead (in "
"particular for #G_ALLOC_AND_FREE, and when used from multiple threads), they "
"are in practise often slower than direct use of g_malloc(). Therefore, "
"memory chunks have been deprecated in favor of the <link linkend=|$_1_$|glib-"
"Memory-Slices|$_1_$|>slice allocator</link>, which has been added in 2.10. "
"All internal uses of memory chunks in GLib have been converted to the "
"<literal>g_slice</literal> API."
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:942:9
msgid ""
"There are two types of memory chunks, #G_ALLOC_ONLY, and #G_ALLOC_AND_FREE. "
"<itemizedlist> <listitem><para> #G_ALLOC_ONLY chunks only allow allocation "
"of atoms. The atoms can never be freed individually. The memory chunk can "
"only be free in its entirety. </para></listitem> <listitem><para> "
"#G_ALLOC_AND_FREE chunks do allow atoms to be freed individually. The "
"disadvantage of this is that the memory chunk has to keep track of which "
"atoms have been freed. This results in more memory being used and a slight "
"degradation in performance. </para></listitem> </itemizedlist>"
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:952:2
msgid ""
"To create a memory chunk use g_mem_chunk_new() or the convenience macro "
"g_mem_chunk_create()."
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:955:3
msgid ""
"To allocate a new atom use g_mem_chunk_alloc(), g_mem_chunk_alloc0(), or the "
"convenience macros g_chunk_new() or g_chunk_new0()."
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:959:3
msgid ""
"To free an atom use g_mem_chunk_free(), or the convenience macro g_chunk_free"
"(). (Atoms can only be freed if the memory chunk is created with the type "
"set to #G_ALLOC_AND_FREE.)"
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:963:2
msgid ""
"To free any blocks of memory which are no longer being used, use "
"g_mem_chunk_clean(). To clean all memory chunks, use g_blow_chunks()."
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:966:2
msgid ""
"To reset the memory chunk, freeing all of the atoms, use g_mem_chunk_reset()."
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:969:1
msgid "To destroy a memory chunk, use g_mem_chunk_destroy()."
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:971:2
msgid ""
"To help debug memory chunks, use g_mem_chunk_info() and g_mem_chunk_print()."
msgstr ""

# #used by: SECTION: memory_chunks
#: gmem.c:974:2
msgid "<example> <title>Using a #GMemChunk</title>"
msgstr ""

# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_new:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_renew:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_new:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_new0:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_renew:
#: gmem.h:144:1 gmem.h:178:1 gmem.h:192:1 gmem.h:206:1 gmem.h:221:1
msgid "@struct_type: the type of the elements to allocate"
msgstr ""

# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_new:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_renew:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_new:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_new0:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_renew:
#: gmem.h:145:1 gmem.h:180:1 gmem.h:193:1 gmem.h:207:1 gmem.h:223:1
msgid "@n_structs: the number of elements to allocate"
msgstr ""

# #used by: g_new:
#: gmem.h:147:4
msgid ""
"Allocates @n_structs elements of type @struct_type. The returned pointer is "
"cast to a pointer to the given type. If @n_structs is 0 it returns %NULL. "
"Care is taken to avoid overflow when calculating the size of the allocated "
"block."
msgstr ""

# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_new:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_new0:
#: gmem.h:152:3 gmem.h:169:3
msgid ""
"Since the returned pointer is already casted to the right type, it is "
"normally unnecessary to cast it explicitly, and doing so might hide memory "
"allocation errors."
msgstr ""

# #used by: g_new:
#: gmem.h:156:1
msgid ""
"Returns: a pointer to the allocated memory, cast to a pointer to @struct_type"
msgstr ""

# used by: g_new0:
#: gmem.h:161:1
msgid "@struct_type: the type of the elements to allocate."
msgstr ""

# used by: g_new0:
#: gmem.h:162:1
msgid "@n_structs: the number of elements to allocate."
msgstr ""

# #used by: g_new0:
#: gmem.h:164:4
msgid ""
"Allocates @n_structs elements of type @struct_type, initialized to 0's. The "
"returned pointer is cast to a pointer to the given type. If @n_structs is 0 "
"it returns %NULL. Care is taken to avoid overflow when calculating the size "
"of the allocated block."
msgstr ""

# #used by: g_new0:
#: gmem.h:173:1
msgid ""
"Returns: a pointer to the allocated memory, cast to a pointer to "
"@struct_type."
msgstr ""

# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_renew:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_try_renew:
#: gmem.h:179:1 gmem.h:222:1
msgid "@mem: the currently allocated memory"
msgstr ""

# #used by: g_renew:
#: gmem.h:182:4
msgid ""
"Reallocates the memory pointed to by @mem, so that it now has space for "
"@n_structs elements of type @struct_type. It returns the new address of the "
"memory, which may have been moved. Care is taken to avoid overflow when "
"calculating the size of the allocated block."
msgstr ""

# #used by: g_renew:
#: gmem.h:187:1
msgid ""
"Returns: a pointer to the new allocated memory, cast to a pointer to "
"@struct_type"
msgstr ""

# #used by: g_try_new:
#: gmem.h:195:4
msgid ""
"Attempts to allocate @n_structs elements of type @struct_type, and returns "
"%NULL on failure. Contrast with g_new(), which aborts the program on "
"failure. The returned pointer is cast to a pointer to the given type. The "
"function returns %NULL when @n_structs is 0 of if an overflow occurs."
msgstr ""

# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_try_new:
# #-#-#-#-#  gmem.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_try_new0:
#: gmem.h:200:2 gmem.h:215:2
msgid ""
"Since: 2.8 Returns: a pointer to the allocated memory, cast to a pointer to "
"@struct_type"
msgstr ""

# #used by: g_try_new0:
#: gmem.h:209:5
msgid ""
"Attempts to allocate @n_structs elements of type @struct_type, initialized "
"to 0's, and returns %NULL on failure. Contrast with g_new0(), which aborts "
"the program on failure. The returned pointer is cast to a pointer to the "
"given type. The function returns %NULL when @n_structs is 0 of if an "
"overflow occurs."
msgstr ""

# #used by: g_try_renew:
#: gmem.h:225:5
msgid ""
"Attempts to reallocate the memory pointed to by @mem, so that it now has "
"space for @n_structs elements of type @struct_type, and returns %NULL on "
"failure. Contrast with g_renew(), which aborts the program on failure. It "
"returns the new address of the memory, which may have been moved. The "
"function returns %NULL if an overflow occurs."
msgstr ""

# #used by: g_try_renew:
#: gmem.h:231:2
msgid ""
"Since: 2.8 Returns: a pointer to the new allocated memory, cast to a pointer "
"to @struct_type"
msgstr ""

# used by: GMemVTable:
#: gmem.h:41:1
msgid "@malloc: function to use for allocating memory."
msgstr ""

# used by: GMemVTable:
#: gmem.h:42:1
msgid "@realloc: function to use for reallocating memory."
msgstr ""

# used by: GMemVTable:
#: gmem.h:43:1
msgid "@free: function to use to free memory."
msgstr ""

# used by: GMemVTable:
#: gmem.h:44:1
msgid "@calloc: function to use for allocating zero-filled memory."
msgstr ""

# used by: GMemVTable:
#: gmem.h:45:1
msgid ""
"@try_malloc: function to use for allocating memory without a default error "
"handler."
msgstr ""

# used by: GMemVTable:
#: gmem.h:46:1
msgid ""
"@try_realloc: function to use for reallocating memory without a default "
"error handler."
msgstr ""

# #used by: GMemVTable:
#: gmem.h:48:3
msgid ""
"A set of functions used to perform memory allocation. The same #GMemVTable "
"must be used for all allocations in the same program; a call to "
"g_mem_set_vtable(), if it exists, should be prior to any use of GLib."
msgstr ""

# #used by: G_MEM_ALIGN:
#: gmem.h:59:2
msgid ""
"Indicates the number of bytes to which memory will be aligned on the current "
"platform."
msgstr ""
