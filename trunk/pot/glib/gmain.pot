# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-14 21:52-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_attach:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_destroy:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_get_id:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_get_context:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_set_funcs:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_set_priority:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_get_priority:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_set_can_recurse:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_get_can_recurse:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_set_name:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_get_name:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_ref:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_unref:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_is_destroyed:
#: gmain.c:1007:1 gmain.c:1033:1 gmain.c:1245:1 gmain.c:1267:1 gmain.c:1316:1
#: gmain.c:1332:1 gmain.c:1364:1 gmain.c:1382:1 gmain.c:1416:1 gmain.c:1463:1
#: gmain.c:1549:1 gmain.c:1978:1 gmain.c:889:1 gmain.c:984:1
msgid "@source: a #GSource"
msgstr ""

# #used by: g_source_get_id:
#: gmain.c:1009:4
msgid ""
"Returns the numeric ID for a particular source. The ID of a source is a "
"positive integer which is unique within a particular main loop context. The "
"reverse mapping from ID to source is done by g_main_context_find_source_by_id"
"()."
msgstr ""

# #used by: g_source_get_id:
#: gmain.c:1014:1
msgid "Return value: the ID (greater than 0) for the source"
msgstr ""

# #used by: g_source_get_context:
#: gmain.c:1035:2
msgid ""
"Gets the #GMainContext with which the source is associated. Calling this "
"function on a destroyed source is an error."
msgstr ""

# #used by: g_source_get_context:
#: gmain.c:1038:3
msgid ""
"Return value: the #GMainContext with which the source is associated, or "
"%NULL if the context has not yet been added to a source."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_add_poll:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_remove_poll:
#: gmain.c:1052:1 gmain.c:1089:1
msgid "@source:a #GSource"
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_add_poll:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_add_poll:
#: gmain.c:1053:2 gmain.c:3154:2
msgid ""
"@fd: a #GPollFD structure holding information about a file descriptor to "
"watch."
msgstr ""

# #used by: g_source_add_poll:
#: gmain.c:1056:5
msgid ""
"Adds a file descriptor to the set of file descriptors polled for this "
"source. This is usually combined with g_source_new() to add an event source. "
"The event source's check function will typically test the @revents field in "
"the #GPollFD struct and return %TRUE if events need to be processed."
msgstr ""

# used by: g_source_remove_poll:
#: gmain.c:1090:1
msgid "@fd: a #GPollFD structure previously passed to g_source_add_poll()."
msgstr ""

# #used by: g_source_remove_poll:
#: gmain.c:1092:2
msgid ""
"Removes a file descriptor from the set of file descriptors polled for this "
"source."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_set_callback_indirect:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_set_callback:
#: gmain.c:1122:1 gmain.c:1207:1
msgid "@source: the source"
msgstr ""

# used by: g_source_set_callback_indirect:
#: gmain.c:1123:1
msgid "@callback_data: pointer to callback data |$_1_$|object|$_1_$|"
msgstr ""

# used by: g_source_set_callback_indirect:
#: gmain.c:1124:2
msgid ""
"@callback_funcs: functions for reference counting @callback_data and getting "
"the callback and data"
msgstr ""

# #used by: g_source_set_callback_indirect:
#: gmain.c:1127:6
msgid ""
"Sets the callback function storing the data as a refcounted callback |$_1_$|"
"object|$_1_$|. This is used internally. Note that calling "
"g_source_set_callback_indirect() assumes an initial reference count on "
"@callback_data, and thus @callback_funcs->unref will eventually be called "
"once more than @callback_funcs->ref."
msgstr ""

# used by: SECTION:main
#: gmain.c:113:1
msgid "@title: The Main Event Loop"
msgstr ""

# used by: SECTION:main
#: gmain.c:114:1
msgid "@short_description: manages all available sources of events"
msgstr ""

# #used by: SECTION:main
#: gmain.c:116:5
msgid ""
"The main event loop manages all the available sources of events for GLib and "
"GTK+ applications. These events can come from any number of different types "
"of sources such as file descriptors (plain files, pipes or sockets) and "
"timeouts. New types of event sources can also be added using g_source_attach"
"()."
msgstr ""

# used by: g_source_set_callback:
#: gmain.c:1208:1
msgid "@func: a callback function"
msgstr ""

# used by: g_source_set_callback:
#: gmain.c:1209:1
msgid "@data: the data to pass to callback function"
msgstr ""

# used by: g_source_set_callback:
#: gmain.c:1210:1
msgid "@notify: a function to call when @data is no longer in use, or %NULL."
msgstr ""

# #used by: g_source_set_callback:
#: gmain.c:1212:2
msgid ""
"Sets the callback function for a source. The callback for a source is called "
"from the source's dispatch function."
msgstr ""

# #used by: g_source_set_callback:
#: gmain.c:1215:3
msgid ""
"The exact type of @func depends on the type of source; ie. you should not "
"count on @func being called with @data as its first parameter."
msgstr ""

# #used by: g_source_set_callback:
#: gmain.c:1219:2
msgid ""
"Typically, you won't use this function. Instead use functions specific to "
"the type of source you are using."
msgstr ""

# #used by: SECTION:main
#: gmain.c:122:4
msgid ""
"To allow multiple independent sets of sources to be handled in different "
"threads, each source is associated with a #GMainContext. A GMainContext can "
"only be running in a single thread, but sources can be added to it and "
"removed from it from other threads."
msgstr ""

# used by: g_source_set_funcs:
#: gmain.c:1246:1
msgid "@funcs: the new #GSourceFuncs"
msgstr ""

# #used by: g_source_set_funcs:
#: gmain.c:1248:2
msgid ""
"Sets the source functions (can be used to override default implementations) "
"of an unattached source."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_source_set_funcs:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_main_current_source:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_source_is_destroyed:
#: gmain.c:1251:1 gmain.c:1967:1 gmain.c:2043:1
msgid "Since: 2.12"
msgstr ""

# used by: g_source_set_priority:
#: gmain.c:1268:1
msgid "@priority: the new priority."
msgstr ""

# #used by: SECTION:main
#: gmain.c:127:4
msgid ""
"Each event source is assigned a priority. The default priority, "
"#G_PRIORITY_DEFAULT, is 0. Values less than 0 denote higher priorities. "
"Values greater than 0 denote lower priorities. Events from high priority "
"sources are always processed before events from lower priority sources."
msgstr ""

# #used by: g_source_set_priority:
#: gmain.c:1270:3
msgid ""
"Sets the priority of a source. While the main loop is being run, a source "
"will be dispatched if it is ready to be dispatched and no sources at a "
"higher (numerically smaller) priority are ready to be dispatched."
msgstr ""

# #used by: g_source_get_priority:
#: gmain.c:1318:1
msgid "Gets the priority of a source."
msgstr ""

# #used by: SECTION:main
#: gmain.c:132:2
msgid ""
"Idle functions can also be added, and assigned a priority. These will be run "
"whenever no events with a higher priority are ready to be processed."
msgstr ""

# #used by: g_source_get_priority:
#: gmain.c:1320:1
msgid "Return value: the priority of the source"
msgstr ""

# used by: g_source_set_can_recurse:
#: gmain.c:1333:1
msgid "@can_recurse: whether recursion is allowed for this source"
msgstr ""

# #used by: g_source_set_can_recurse:
#: gmain.c:1335:4
msgid ""
"Sets whether a source can be called recursively. If @can_recurse is %TRUE, "
"then while the source is being dispatched then this source will be processed "
"normally. Otherwise, all processing of this source is blocked until the "
"dispatch function returns."
msgstr ""

# #used by: SECTION:main
#: gmain.c:135:6
msgid ""
"The #GMainLoop data type represents a main event loop. A GMainLoop is "
"created with g_main_loop_new(). After adding the initial event sources, "
"g_main_loop_run() is called. This continuously checks for new events from "
"each of the event sources and dispatches them. Finally, the processing of an "
"event from one of the sources leads to a call to g_main_loop_quit() to exit "
"the main loop, and g_main_loop_run() returns."
msgstr ""

# #used by: g_source_get_can_recurse:
#: gmain.c:1366:2
msgid ""
"Checks whether a source is allowed to be called recursively. see "
"g_source_set_can_recurse()."
msgstr ""

# #used by: g_source_get_can_recurse:
#: gmain.c:1369:1
msgid "Return value: whether recursion is allowed."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_set_name:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_set_name_by_id:
#: gmain.c:1383:1 gmain.c:1436:1
msgid "@name: debug name for the source"
msgstr ""

# #used by: g_source_set_name:
#: gmain.c:1385:2
msgid ""
"Sets a name for the source, used in debugging and profiling. The name "
"defaults to #NULL."
msgstr ""

# #used by: g_source_set_name:
#: gmain.c:1388:3
msgid ""
"The source name should describe in a human-readable way what the source "
"does. For example, |$_1_$|X11 event queue|$_1_$| or |$_1_$|GTK+ repaint idle "
"handler|$_1_$| or whatever it is."
msgstr ""

# #used by: g_source_set_name:
#: gmain.c:1392:4
msgid ""
"It is permitted to call this function multiple times, but is not recommended "
"due to the potential performance impact.  For example, one could change the "
"name in the |$_1_$|check|$_1_$| function of a #GSourceFuncs to include "
"details like the event type in the source name."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_source_set_name:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_source_set_name_by_id:
#: gmain.c:1397:1 gmain.c:1443:1
msgid "Since: 2.26"
msgstr ""

# #used by: g_source_get_name:
#: gmain.c:1418:3
msgid ""
"Gets a name for the source, used in debugging and profiling. The name may be "
"#NULL if it has never been set with g_source_set_name()."
msgstr ""

# #used by: SECTION:main
#: gmain.c:142:5
msgid ""
"It is possible to create new instances of #GMainLoop recursively. This is "
"often used in GTK+ applications when showing modal dialog boxes. Note that "
"event sources are associated with a particular #GMainContext, and will be "
"checked and dispatched for all main loops associated with that GMainContext."
msgstr ""

# #used by: g_source_get_name:
#: gmain.c:1422:2
msgid "Return value: the name of the source Since: 2.26"
msgstr ""

# used by: g_source_set_name_by_id:
#: gmain.c:1435:1
msgid "@tag: a #GSource ID"
msgstr ""

# #used by: g_source_set_name_by_id:
#: gmain.c:1438:1
msgid "Sets the name of a source using its ID."
msgstr ""

# #used by: g_source_set_name_by_id:
#: gmain.c:1440:2
msgid ""
"This is a convenience utility to set source names from the return value of "
"g_idle_add(), g_timeout_add(), etc."
msgstr ""

# #used by: g_source_ref:
#: gmain.c:1465:1
msgid "Increases the reference count on a source by one."
msgstr ""

# #used by: g_source_ref:
#: gmain.c:1467:1
msgid "Return value: @source"
msgstr ""

# #used by: SECTION:main
#: gmain.c:148:2
msgid ""
"GTK+ contains wrappers of some of these functions, e.g. gtk_main(), "
"gtk_main_quit() and gtk_events_pending()."
msgstr ""

# #used by: SECTION:main
#: gmain.c:151:34
msgid ""
"<refsect2><title>Creating new source types</title> <para>One of the unusual "
"features of the #GMainLoop functionality is that new types of event source "
"can be created and used in addition to the builtin type of event source. A "
"new event source type is used for handling GDK events. A new source type is "
"created by <firstterm>deriving</firstterm> from the #GSource structure. The "
"derived type of source is represented by a structure that has the #GSource "
"structure as a first element, and other elements specific to the new source "
"type. To create an instance of the new source type, call g_source_new() "
"passing in the size of the derived structure and a table of functions. These "
"#GSourceFuncs determine the behavior of the new source type.</para> "
"<para>New source types basically interact with the main context in two ways. "
"Their prepare function in #GSourceFuncs can set a timeout to determine the "
"maximum amount of time that the main loop will sleep before checking the "
"source again. In addition, or as well, the source can add file descriptors "
"to the set that the main context checks using g_source_add_poll().</para> </"
"refsect2> <refsect2><title>Customizing the main loop iteration</title> "
"<para>Single iterations of a #GMainContext can be run with "
"g_main_context_iteration(). In some cases, more detailed control of exactly "
"how the details of the main loop work is desired, for instance, when "
"integrating the #GMainLoop with an external main loop. In such cases, you "
"can call the component functions of g_main_context_iteration() directly. "
"These functions are g_main_context_prepare(), g_main_context_query(), "
"g_main_context_check() and g_main_context_dispatch().</para> <para>The "
"operation of these functions can best be seen in terms of a state diagram, "
"as shown in <xref linkend=|$_1_$|mainloop-states|$_1_$|/>.</para> <figure "
"id=|$_1_$|mainloop-states|$_1_$|><title>States of a Main Context</title> "
"<graphic fileref=|$_1_$|mainloop-states.gif|$_1_$| format=|$_1_$|GIF|$_1_$|"
"></graphic> </figure> </refsect2>"
msgstr ""

# #used by: g_source_unref:
#: gmain.c:1551:3
msgid ""
"Decreases the reference count of a source by one. If the resulting reference "
"count is zero the source and associated memory will be destroyed."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_attach:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_find_source_by_id:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_pending:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_iteration:
#: gmain.c:1565:1 gmain.c:2793:1 gmain.c:2816:1 gmain.c:890:1
msgid "@context: a #GMainContext (if %NULL, the default context will be used)"
msgstr ""

# used by: g_main_context_find_source_by_id:
#: gmain.c:1566:1
msgid "@source_id: the source ID, as returned by g_source_get_id()."
msgstr ""

# #used by: g_main_context_find_source_by_id:
#: gmain.c:1568:1
msgid "Finds a #GSource given a pair of context and ID."
msgstr ""

# #used by: g_main_context_find_source_by_id:
#: gmain.c:1570:1
msgid "Return value: the #GSource if found, otherwise, %NULL"
msgstr ""

# used by: g_main_context_find_source_by_funcs_user_data:
#: gmain.c:1601:1
msgid "@context: a #GMainContext (if %NULL, the default context will be used)."
msgstr ""

# used by: g_main_context_find_source_by_funcs_user_data:
#: gmain.c:1602:1
msgid "@funcs: the @source_funcs passed to g_source_new()."
msgstr ""

# used by: g_main_context_find_source_by_funcs_user_data:
#: gmain.c:1603:1
msgid "@user_data: the user data from the callback."
msgstr ""

# #used by: g_main_context_find_source_by_funcs_user_data:
#: gmain.c:1605:3
msgid ""
"Finds a source with the given source functions and user data.  If multiple "
"sources exist with the same source function and user data, the first one "
"found will be returned."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_main_context_find_source_by_funcs_user_data:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_main_context_find_source_by_user_data:
#: gmain.c:1609:1 gmain.c:1657:1
msgid "Return value: the source, if one was found, otherwise %NULL"
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_ref:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_unref:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_find_source_by_user_data:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_acquire:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_release:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_wait:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_prepare:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_query:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_check:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_dispatch:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_set_poll_func:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_get_poll_func:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_wakeup:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_is_owner:
#: gmain.c:1650:1 gmain.c:2210:1 gmain.c:2260:1 gmain.c:2304:1 gmain.c:2376:1
#: gmain.c:2507:1 gmain.c:2574:1 gmain.c:2691:1 gmain.c:3313:1 gmain.c:3345:1
#: gmain.c:3388:1 gmain.c:3408:1 gmain.c:422:1 gmain.c:448:1
msgid "@context: a #GMainContext"
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_context_find_source_by_user_data:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_source_remove_by_user_data:
#: gmain.c:1651:1 gmain.c:1724:1
msgid "@user_data: the user_data for the callback."
msgstr ""

# #used by: g_main_context_find_source_by_user_data:
#: gmain.c:1653:3
msgid ""
"Finds a source with the given user data for the callback.  If multiple "
"sources exist with the same user data, the first one found will be returned."
msgstr ""

# used by: g_source_remove:
#: gmain.c:1694:1
msgid "@tag: the ID of the source to remove."
msgstr ""

# #used by: g_source_remove:
#: gmain.c:1696:6
msgid ""
"Removes the source with the given id from the default main context. The id "
"of a #GSource is given by g_source_get_id(), or will be returned by the "
"functions g_source_attach(), g_idle_add(), g_idle_add_full(), g_timeout_add"
"(), g_timeout_add_full(), g_child_watch_add(), g_child_watch_add_full(), "
"g_io_add_watch(), and g_io_add_watch_full()."
msgstr ""

# #used by: g_source_remove:
#: gmain.c:1703:2
msgid ""
"See also g_source_destroy(). You must use g_source_destroy() for sources "
"added to a non-default main context."
msgstr ""

# #used by: g_source_remove:
#: gmain.c:1706:1
msgid "Return value: %TRUE if the source was found and removed."
msgstr ""

# #used by: g_source_remove_by_user_data:
#: gmain.c:1726:3
msgid ""
"Removes a source from the default main loop context given the user data for "
"the callback. If multiple sources exist with the same user data, only one "
"will be destroyed."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_source_remove_by_user_data:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_source_remove_by_funcs_user_data:
#: gmain.c:1730:1 gmain.c:1756:1
msgid "Return value: %TRUE if a source was found and removed."
msgstr ""

# used by: g_source_remove_by_funcs_user_data:
#: gmain.c:1749:1
msgid "@funcs: The @source_funcs passed to g_source_new()"
msgstr ""

# used by: g_source_remove_by_funcs_user_data:
#: gmain.c:1750:1
msgid "@user_data: the user data for the callback"
msgstr ""

# #used by: g_source_remove_by_funcs_user_data:
#: gmain.c:1752:3
msgid ""
"Removes a source from the default main loop context given the source "
"functions and user data. If multiple sources exist with the same source "
"functions and user data, only one will be destroyed."
msgstr ""

# used by: g_get_current_time:
#: gmain.c:1778:1
msgid "@result: #GTimeVal structure in which to store current time."
msgstr ""

# #used by: g_get_current_time:
#: gmain.c:1780:1
msgid "Equivalent to the UNIX gettimeofday() function, but portable."
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1840:7
msgid ""
"Returns the depth of the stack of calls to g_main_context_dispatch() on any "
"#GMainContext in the current thread. That is, when called from the toplevel, "
"it gives 0. When called from within a callback from g_main_context_iteration"
"() (or g_main_loop_run(), etc.) it returns 1. When called from within a "
"callback to a recursive call to g_main_context_iterate(), it returns 2. And "
"so forth."
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1848:2
msgid ""
"This function is useful in a situation like the following: Imagine an "
"extremely simple |$_1_$|garbage collected|$_1_$| system."
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1851:2
msgid "|[ static GList *free_list;"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1854:7
msgid ""
"gpointer allocate_memory (gsize size) { gpointer result = g_malloc (size); "
"free_list = g_list_prepend (free_list, result); return result; }"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1862:9
msgid ""
"void free_allocated_memory (void) { GList *l; for (l = free_list; l; l = l-"
">next); g_free (l->data); g_list_free (free_list); free_list = NULL; }"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1872:1
msgid "[...]"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1874:6
msgid ""
"while (TRUE); { g_main_context_iteration (NULL, TRUE); free_allocated_memory"
"(); } ]|"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1881:6
msgid ""
"This works from an application, however, if you want to do the same thing "
"from a library, it gets more difficult, since you no longer control the main "
"loop. You might think you can simply use an idle function to make the call "
"to free_allocated_memory(), but that doesn't work, since the idle function "
"could be called from a recursive callback. This can be fixed by using "
"g_main_depth()"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1888:10
msgid ""
"|[ gpointer allocate_memory (gsize size) { FreeListBlock *block = g_new "
"(FreeListBlock, 1); block->mem = g_malloc (size); block->depth = "
"g_main_depth (); free_list = g_list_prepend (free_list, block); return block-"
">mem; }"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1899:4
msgid "void free_allocated_memory (void) { GList *l;"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1904:11
msgid ""
"int depth = g_main_depth (); for (l = free_list; l; ); { GList *next = l-"
">next; FreeListBlock *block = l->data; if (block->depth > depth) { g_free "
"(block->mem); g_free (block); free_list = g_list_delete_link (free_list, "
"l); }"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1916:4
msgid "l = next; } } ]|"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1921:11
msgid ""
"There is a temptation to use g_main_depth() to solve problems with "
"reentrancy. For instance, while waiting for data to be received from the "
"network in response to a menu item, the menu item might be selected again. "
"It might seem that one could make the menu item's callback return "
"immediately and do nothing if g_main_depth() returns a value greater than 1. "
"However, this should be avoided since the user then sees selecting the menu "
"item do nothing. Furthermore, you'll find yourself adding these checks all "
"over your code, since there are doubtless many, many things that the user "
"could do. Instead, you can use the following techniques:"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1933:17
msgid ""
"<orderedlist> <listitem> <para> Use gtk_widget_set_sensitive() or modal "
"dialogs to prevent the user from interacting with elements while the main "
"loop is recursing. </para> </listitem> <listitem> <para> Avoid main loop "
"recursion in situations where you can't handle arbitrary  callbacks. "
"Instead, structure your code so that you simply return to the main loop and "
"then get called again when there is more work to do. </para> </listitem> </"
"orderedlist>"
msgstr ""

# #used by: g_main_depth:
#: gmain.c:1951:1
msgid "Return value: The main loop recursion level in the current thread"
msgstr ""

# #used by: g_main_current_source:
#: gmain.c:1963:1
msgid "Returns the currently firing source for this thread."
msgstr ""

# #used by: g_main_current_source:
#: gmain.c:1965:1
msgid "Return value: The currently firing source or %NULL."
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:1980:1
msgid "Returns whether @source has been destroyed."
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:1982:3
msgid ""
"This is important when you operate upon your objects from within idle "
"handlers, but may have freed the object before the dispatch of your idle "
"handler."
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:1986:5 gmain.c:2024:5
msgid ""
"|[ static gboolean idle_callback (gpointer data) { SomeWidget *self = data;"
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:1992:4
msgid ""
"GDK_THREADS_ENTER (<!-- -->); /<!-- -->* do stuff with self *<!-- -->/ self-"
">idle_id = 0; GDK_THREADS_LEAVE (<!-- -->);"
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:1997:2
msgid "return FALSE; }"
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:2000:5
msgid ""
"static void some_widget_do_stuff_later (SomeWidget *self) { self->idle_id = "
"g_idle_add (idle_callback, self); }"
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:2006:4
msgid ""
"static void some_widget_finalize (GObject *object) { SomeWidget *self = "
"SOME_WIDGET (object);"
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:2011:2
msgid "if (self->idle_id) g_source_remove (self->idle_id);"
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:2014:3
msgid "G_OBJECT_CLASS (parent_class)->finalize (object); } ]|"
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:2018:5
msgid ""
"This will fail in a multi-threaded application if the widget is destroyed "
"before the idle handler fires due to the use after free in the callback. A "
"solution, to this particular problem, is to check to if the source has "
"already been destroy within the callback."
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:2030:6
msgid ""
"GDK_THREADS_ENTER (); if (!g_source_is_destroyed (g_main_current_source ())) "
"{ /<!-- -->* do stuff with self *<!-- -->/ } GDK_THREADS_LEAVE ();"
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:2037:3
msgid "return FALSE; } ]|"
msgstr ""

# #used by: g_source_is_destroyed:
#: gmain.c:2041:1
msgid "Return value: %TRUE if the source has been destroyed"
msgstr ""

# #used by: g_main_context_acquire:
#: gmain.c:2212:6
msgid ""
"Tries to become the owner of the specified context. If some other thread is "
"the owner of the context, returns %FALSE immediately. Ownership is properly "
"recursive: the owner can require ownership again and will release ownership "
"when g_main_context_release() is called as many times as "
"g_main_context_acquire()."
msgstr ""

# #used by: g_main_context_acquire:
#: gmain.c:2219:3
msgid ""
"You must be the owner of a context before you can call g_main_context_prepare"
"(), g_main_context_query(), g_main_context_check(), g_main_context_dispatch"
"()."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_main_context_acquire:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_main_context_wait:
#: gmain.c:2223:2 gmain.c:2314:2
msgid ""
"Return value: %TRUE if the operation succeeded, and this thread is now the "
"owner of @context."
msgstr ""

# #used by: g_main_context_release:
#: gmain.c:2262:4
msgid ""
"Releases ownership of a context previously acquired by this thread with "
"g_main_context_acquire(). If the context was acquired multiple times, the "
"ownership will be released only when g_main_context_release() is called as "
"many times as it was acquired."
msgstr ""

# used by: g_main_context_wait:
#: gmain.c:2305:1
msgid "@cond: a condition variable"
msgstr ""

# used by: g_main_context_wait:
#: gmain.c:2306:1
msgid "@mutex: a mutex, currently held"
msgstr ""

# #used by: g_main_context_wait:
#: gmain.c:2308:5
msgid ""
"Tries to become the owner of the specified context, as with "
"g_main_context_acquire(). But if another thread is the owner, atomically "
"drop @mutex and wait on @cond until that owner releases ownership or until "
"@cond is signaled, then try again (once) to become the owner."
msgstr ""

# used by: g_main_context_prepare:
#: gmain.c:2377:2
msgid ""
"@priority: location to store priority of highest priority source already "
"ready."
msgstr ""

# #used by: g_main_context_prepare:
#: gmain.c:2380:2
msgid ""
"Prepares to poll sources within a main loop. The resulting information for "
"polling is determined by calling g_main_context_query ()."
msgstr ""

# #used by: g_main_context_prepare:
#: gmain.c:2383:2
msgid ""
"Return value: %TRUE if some source is ready to be dispatched prior to "
"polling."
msgstr ""

# used by: g_main_context_query:
#: gmain.c:2508:1
msgid "@max_priority: maximum priority source to check"
msgstr ""

# used by: g_main_context_query:
#: gmain.c:2509:1
msgid "@timeout_: location to store timeout to be used in polling"
msgstr ""

# used by: g_main_context_query:
#: gmain.c:2510:1
msgid "@fds: location to store #GPollFD records that need to be polled."
msgstr ""

# used by: g_main_context_query:
#: gmain.c:2511:1
msgid "@n_fds: length of @fds."
msgstr ""

# #used by: g_main_context_query:
#: gmain.c:2513:1
msgid "Determines information necessary to poll this main loop."
msgstr ""

# #used by: g_main_context_query:
#: gmain.c:2515:3
msgid ""
"Return value: the number of records actually stored in @fds, or, if more "
"than @n_fds records need to be stored, the number of records that need to be "
"stored."
msgstr ""

# used by: g_main_context_check:
#: gmain.c:2575:1
msgid "@max_priority: the maximum numerical priority of sources to check"
msgstr ""

# used by: g_main_context_check:
#: gmain.c:2576:2
msgid ""
"@fds: array of #GPollFD's that was passed to the last call to "
"g_main_context_query()"
msgstr ""

# used by: g_main_context_check:
#: gmain.c:2578:1
msgid "@n_fds: return value of g_main_context_query()"
msgstr ""

# #used by: g_main_context_check:
#: gmain.c:2580:1
msgid "Passes the results of polling back to the main loop."
msgstr ""

# #used by: g_main_context_check:
#: gmain.c:2582:1
msgid "Return value: %TRUE if some sources are ready to be dispatched."
msgstr ""

# #used by: g_main_context_dispatch:
#: gmain.c:2693:1
msgid "Dispatches all pending sources."
msgstr ""

# #used by: g_main_context_pending:
#: gmain.c:2795:1
msgid "Checks if any sources have pending events for the given context."
msgstr ""

# #used by: g_main_context_pending:
#: gmain.c:2797:1
msgid "Return value: %TRUE if events are pending."
msgstr ""

# used by: g_main_context_iteration:
#: gmain.c:2817:1
msgid "@may_block: whether the call may block."
msgstr ""

# #used by: g_main_context_iteration:
#: gmain.c:2819:8
msgid ""
"Runs a single iteration for the given main loop. This involves checking to "
"see if any event sources are ready to be processed, then if no events "
"sources are ready and @may_block is %TRUE, waiting for a source to become "
"ready, then dispatching the highest priority events sources that are ready. "
"Otherwise, if @may_block is %FALSE sources are not waited to become ready, "
"only those highest priority events sources will be dispatched (if any), that "
"are ready at this given moment without further waiting."
msgstr ""

# #used by: g_main_context_iteration:
#: gmain.c:2828:3
msgid ""
"Note that even when @may_block is %TRUE, it is still possible for "
"g_main_context_iteration() to return %FALSE, since the the wait may be "
"interrupted for other reasons than an event source becoming ready."
msgstr ""

# #used by: g_main_context_iteration:
#: gmain.c:2832:1
msgid "Return value: %TRUE if events were dispatched."
msgstr ""

# used by: g_main_loop_new:
#: gmain.c:2851:1
msgid ""
"@context: a #GMainContext  (if %NULL, the default context will be used)."
msgstr ""

# used by: g_main_loop_new:
#: gmain.c:2852:3
msgid ""
"@is_running: set to %TRUE to indicate that the loop is running. This is not "
"very important since calling g_main_loop_run() will set this to %TRUE anyway."
msgstr ""

# #used by: g_main_loop_new:
#: gmain.c:2856:1
msgid "Creates a new #GMainLoop structure."
msgstr ""

# #used by: g_main_loop_new:
#: gmain.c:2858:1
msgid "Return value: a new #GMainLoop."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_loop_ref:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_loop_unref:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_loop_run:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_loop_quit:
#: gmain.c:2881:1 gmain.c:2900:1 gmain.c:2920:1 gmain.c:3001:1 gmain.h:404:1
#: gmain.h:414:1 gmain.h:425:1 gmain.h:435:1
msgid "@loop: a #GMainLoop"
msgstr ""

# #used by: g_main_loop_ref:
#: gmain.c:2883:1
msgid "Increases the reference count on a #GMainLoop object by one."
msgstr ""

# #used by: g_main_loop_ref:
#: gmain.c:2885:1
msgid "Return value: @loop"
msgstr ""

# #used by: g_main_loop_unref:
#: gmain.c:2902:2
msgid ""
"Decreases the reference count on a #GMainLoop object by one. If the result "
"is zero, free the loop and free all associated memory."
msgstr ""

# #used by: g_main_loop_run:
#: gmain.c:2922:4
msgid ""
"Runs a main loop until g_main_loop_quit() is called on the loop. If this is "
"called for the thread of the loop's #GMainContext, it will process events "
"from the loop, otherwise it will simply wait."
msgstr ""

# #used by: g_main_loop_quit:
#: gmain.c:3003:2
msgid ""
"Stops a #GMainLoop from running. Any calls to g_main_loop_run() for the loop "
"will return."
msgstr ""

# #used by: g_main_loop_quit:
#: gmain.c:3006:2
msgid ""
"Note that sources that have already been dispatched when g_main_loop_quit() "
"is called will still be executed."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_loop_is_running:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_main_loop_get_context:
#: gmain.c:3029:1 gmain.c:3046:1
msgid "@loop: a #GMainLoop."
msgstr ""

# #used by: g_main_loop_is_running:
#: gmain.c:3031:1
msgid ""
"Checks to see if the main loop is currently being run via g_main_loop_run()."
msgstr ""

# #used by: g_main_loop_is_running:
#: gmain.c:3033:1
msgid "Return value: %TRUE if the mainloop is currently being run."
msgstr ""

# #used by: g_main_loop_get_context:
#: gmain.c:3048:1
msgid "Returns the #GMainContext of @loop."
msgstr ""

# #used by: g_main_loop_get_context:
#: gmain.c:3050:1
msgid "Return value: the #GMainContext of @loop"
msgstr ""

# used by: g_main_context_add_poll:
#: gmain.c:3153:1
msgid "@context: a #GMainContext (or %NULL for the default context)"
msgstr ""

# used by: g_main_context_add_poll:
#: gmain.c:3156:3
msgid ""
"@priority: the priority for this file descriptor which should be the same as "
"the priority used for g_source_attach() to ensure that the file descriptor "
"is polled whenever the results may be needed."
msgstr ""

# #used by: g_main_context_add_poll:
#: gmain.c:3160:3
msgid ""
"Adds a file descriptor to the set of file descriptors polled for this "
"context. This will very seldomly be used directly. Instead a typical event "
"source will use g_source_add_poll() instead."
msgstr ""

# used by: g_main_context_remove_poll:
#: gmain.c:3221:1
msgid "@context:a #GMainContext"
msgstr ""

# used by: g_main_context_remove_poll:
#: gmain.c:3222:1
msgid ""
"@fd: a #GPollFD descriptor previously added with g_main_context_add_poll()"
msgstr ""

# #used by: g_main_context_remove_poll:
#: gmain.c:3224:2
msgid ""
"Removes file descriptor from the set of file descriptors to be polled for a "
"particular context."
msgstr ""

# used by: g_source_get_current_time:
#: gmain.c:3279:1
msgid "@source:  a #GSource"
msgstr ""

# used by: g_source_get_current_time:
#: gmain.c:3280:1
msgid "@timeval: #GTimeVal structure in which to store current time."
msgstr ""

# #used by: g_source_get_current_time:
#: gmain.c:3282:5
msgid ""
"Gets the |$_1_$|current time|$_1_$| to be used when checking this source. "
"The advantage of calling this function over calling g_get_current_time() "
"directly is that when checking multiple sources, GLib can cache a single "
"value instead of having to repeatedly get the system time."
msgstr ""

# used by: g_main_context_set_poll_func:
#: gmain.c:3314:1 gmain.h:474:1
msgid "@func: the function to call to poll all file descriptors"
msgstr ""

# #used by: g_main_context_set_poll_func:
#: gmain.c:3316:4
msgid ""
"Sets the function to use to handle polling of file descriptors. It will be "
"used instead of the poll() system call (or GLib's replacement function, "
"which is used where poll() isn't available)."
msgstr ""

# #used by: g_main_context_set_poll_func:
#: gmain.c:3321:2
msgid ""
"This function could possibly be used to integrate the GLib event loop with "
"an external event loop."
msgstr ""

# #used by: g_main_context_get_poll_func:
#: gmain.c:3347:1
msgid "Gets the poll function set by g_main_context_set_poll_func()."
msgstr ""

# #used by: g_main_context_get_poll_func:
#: gmain.c:3349:1
msgid "Return value: the poll function"
msgstr ""

# #used by: g_main_context_wakeup:
#: gmain.c:3390:2
msgid ""
"If @context is currently waiting in a poll(), interrupt the poll(), and "
"continue the iteration process."
msgstr ""

# #used by: g_main_context_is_owner:
#: gmain.c:3410:4
msgid ""
"Determines whether this thread holds the (recursive) ownership of this "
"#GMaincontext. This is useful to know before waiting on another thread that "
"may be blocking to get ownership of @context."
msgstr ""

# #used by: g_main_context_is_owner:
#: gmain.c:3415:1
msgid "Returns: %TRUE if current thread is owner of @context."
msgstr ""

# #used by: g_main_context_is_owner:
#: gmain.c:3417:1
msgid "Since: 2.10"
msgstr ""

# used by: g_timeout_source_new:
#: gmain.c:3600:1
msgid "@interval: the timeout interval in milliseconds."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_source_new:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_source_new_seconds:
#: gmain.c:3602:1 gmain.c:3629:1
msgid "Creates a new timeout source."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_source_new:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_source_new:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_source_new_seconds:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_source_new:
#: gmain.c:3604:3 gmain.c:3631:3 gmain.c:4087:3 gmain.c:813:3
msgid ""
"The source will not initially be associated with any #GMainContext and must "
"be added to one with g_source_attach() before it will be executed."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_source_new:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_source_new_seconds:
#: gmain.c:3608:1 gmain.c:3638:1
msgid "Return value: the newly-created timeout source"
msgstr ""

# used by: g_timeout_source_new_seconds:
#: gmain.c:3627:1
msgid "@interval: the timeout interval in seconds"
msgstr ""

# #used by: g_timeout_source_new_seconds:
#: gmain.c:3635:2
msgid ""
"The scheduling granularity/accuracy of this timeout source will be in "
"seconds."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_source_new_seconds:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_add_seconds_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_add_seconds:
#: gmain.c:3640:1 gmain.c:3793:1 gmain.c:3837:1
msgid "Since: 2.14"
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_seconds_full:
#: gmain.c:3661:2 gmain.c:3753:2
msgid ""
"@priority: the priority of the timeout source. Typically this will be in the "
"range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add:
#: gmain.c:3663:2 gmain.c:3714:2
msgid ""
"@interval: the time between calls to the function, in milliseconds "
"(1/1000ths of a second)"
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_seconds_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_seconds:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_child_watch_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_child_watch_add:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_idle_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_idle_add:
#: gmain.c:3665:1 gmain.c:3716:1 gmain.c:3756:1 gmain.c:3822:1 gmain.c:4135:1
#: gmain.c:4190:1 gmain.c:4285:1 gmain.c:4324:1
msgid "@function: function to call"
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_seconds_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_child_watch_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_child_watch_add:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_idle_add_full:
#: gmain.c:3666:1 gmain.c:3717:1 gmain.c:3757:1 gmain.c:4136:1 gmain.c:4191:1
#: gmain.c:4286:1
msgid "@data:     data to pass to @function"
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_seconds_full:
#: gmain.c:3667:1 gmain.c:3758:1
msgid "@notify:   function to call when the timeout is removed, or %NULL"
msgstr ""

# #used by: g_timeout_add_full:
#: gmain.c:3669:6
msgid ""
"Sets a function to be called at regular intervals, with the given priority.  "
"The function is called repeatedly until it returns %FALSE, at which point "
"the timeout is automatically destroyed and the function will not be called "
"again.  The @notify function is called when the timeout is destroyed.  The "
"first call to the function will be at the end of the first @interval."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_add:
#: gmain.c:3676:5 gmain.c:3725:5
msgid ""
"Note that timeout functions may be delayed, due to the processing of other "
"event sources. Thus they should not be relied on for precise timing. After "
"each call to the timeout function, the time of the next timeout is "
"recalculated based on the current time and the given interval (it does not "
"try to 'catch up' time lost in delays)."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_add:
#: gmain.c:3682:3 gmain.c:3736:3
msgid ""
"This internally creates a main loop source using g_timeout_source_new() and "
"attaches it to the main loop context using g_source_attach(). You can do "
"these steps manually if you need greater control."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_add:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_add_seconds_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_timeout_add_seconds:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_idle_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_idle_add:
#: gmain.c:3686:1 gmain.c:3740:1 gmain.c:3791:1 gmain.c:3835:1 gmain.c:4158:1
#: gmain.c:4212:1 gmain.c:4297:1 gmain.c:4337:1
msgid "Return value: the ID (greater than 0) of the event source."
msgstr ""

# #used by: g_timeout_add:
#: gmain.c:3719:5
msgid ""
"Sets a function to be called at regular intervals, with the default "
"priority, #G_PRIORITY_DEFAULT.  The function is called repeatedly until it "
"returns %FALSE, at which point the timeout is automatically destroyed and "
"the function will not be called again.  The first call to the function will "
"be at the end of the first @interval."
msgstr ""

# #used by: g_timeout_add:
#: gmain.c:3731:4
msgid ""
"If you want to have a timer in the |$_1_$|seconds|$_1_$| range and do not "
"care about the exact time of the first call of the timer, use the "
"g_timeout_add_seconds() function; this function allows for more "
"optimizations and more efficient system power usage."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_seconds_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_timeout_add_seconds:
#: gmain.c:3755:1 gmain.c:3821:1
msgid "@interval: the time between calls to the function, in seconds"
msgstr ""

# #used by: g_timeout_add_seconds_full:
#: gmain.c:3760:4
msgid ""
"Sets a function to be called at regular intervals, with @priority. The "
"function is called repeatedly until it returns %FALSE, at which point the "
"timeout is automatically destroyed and the function will not be called again."
msgstr ""

# #used by: g_timeout_add_seconds_full:
#: gmain.c:3765:7
msgid ""
"Unlike g_timeout_add(), this function operates at whole second granularity. "
"The initial starting point of the timer is determined by the implementation "
"and the implementation is expected to group multiple timers together so that "
"they fire all at the same time. To allow this grouping, the @interval to the "
"first timer is rounded and can deviate up to one second from the specified "
"interval. Subsequent timer iterations will generally run at the specified "
"interval."
msgstr ""

# #used by: g_timeout_add_seconds_full:
#: gmain.c:3773:4
msgid ""
"Note that timeout functions may be delayed, due to the processing of other "
"event sources. Thus they should not be relied on for precise timing. After "
"each call to the timeout function, the time of the next timeout is "
"recalculated based on the current time and the given @interval"
msgstr ""

# #used by: g_timeout_add_seconds_full:
#: gmain.c:3778:2
msgid ""
"If you want timing more precise than whole seconds, use g_timeout_add() "
"instead."
msgstr ""

# #used by: g_timeout_add_seconds_full:
#: gmain.c:3781:4
msgid ""
"The grouping of timers to fire at the same time results in a more power and "
"CPU efficient behavior so if your timer is in multiples of seconds and you "
"don't require the first timer exactly one second from now, the use of "
"g_timeout_add_seconds() is preferred over g_timeout_add()."
msgstr ""

# #used by: g_timeout_add_seconds_full:
#: gmain.c:3786:4
msgid ""
"This internally creates a main loop source using g_timeout_source_new_seconds"
"() and attaches it to the main loop context using g_source_attach(). You can "
"do these steps manually if you need greater control."
msgstr ""

# used by: g_timeout_add_seconds:
#: gmain.c:3823:1
msgid "@data: data to pass to @function"
msgstr ""

# #used by: g_timeout_add_seconds:
#: gmain.c:3825:4
msgid ""
"Sets a function to be called at regular intervals with the default priority, "
"#G_PRIORITY_DEFAULT. The function is called repeatedly until it returns "
"%FALSE, at which point the timeout is automatically destroyed and the "
"function will not be called again."
msgstr ""

# #used by: g_timeout_add_seconds:
#: gmain.c:3830:4
msgid ""
"This internally creates a main loop source using g_timeout_source_new_seconds"
"() and attaches it to the main loop context using g_source_attach(). You can "
"do these steps manually if you need greater control. Also see "
"g_timout_add_seconds_full()."
msgstr ""

# used by: g_child_watch_source_new:
#: gmain.c:4082:2
msgid ""
"@pid: process to watch. On POSIX the pid of a child process. On Windows a "
"handle for a process (which doesn't have to be a child)."
msgstr ""

# #used by: g_child_watch_source_new:
#: gmain.c:4085:1
msgid "Creates a new child_watch source."
msgstr ""

# #used by: g_child_watch_source_new:
#: gmain.c:4091:3
msgid ""
"Note that child watch sources can only be used in conjunction with "
"<literal>g_spawn...</literal> when the %G_SPAWN_DO_NOT_REAP_CHILD flag is "
"used."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_source_new:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add:
#: gmain.c:4095:4 gmain.c:4146:4 gmain.c:4200:4
msgid ""
"Note that on platforms where #GPid must be explicitly closed (see "
"g_spawn_close_pid()) @pid must not be closed while the source is still "
"active. Typically, you will want to call g_spawn_close_pid() in the callback "
"function for the source."
msgstr ""

# #used by: g_child_watch_source_new:
#: gmain.c:4100:4
msgid ""
"Note further that using g_child_watch_source_new() is not compatible with "
"calling <literal>waitpid(-1)</literal> in the application. Calling waitpid() "
"for individual pids will still work fine."
msgstr ""

# #used by: g_child_watch_source_new:
#: gmain.c:4105:1
msgid "Return value: the newly-created child watch source"
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_source_new:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add:
#: gmain.c:4107:1 gmain.c:4160:1 gmain.c:4214:1
msgid "Since: 2.4"
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_child_watch_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_idle_add_full:
#: gmain.c:4131:2 gmain.c:4283:2
msgid ""
"@priority: the priority of the idle source. Typically this will be in the "
"range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE."
msgstr ""

# used by: g_child_watch_add_full:
#: gmain.c:4133:2
msgid ""
"@pid:      process to watch. On POSIX the pid of a child process. On Windows "
"a handle for a process (which doesn't have to be a child)."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_child_watch_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_idle_add_full:
#: gmain.c:4137:1 gmain.c:4287:1
msgid "@notify:   function to call when the idle is removed, or %NULL"
msgstr ""

# #used by: g_child_watch_add_full:
#: gmain.c:4139:2
msgid ""
"Sets a function to be called when the child indicated by @pid exits, at the "
"priority @priority."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add:
#: gmain.c:4142:3 gmain.c:4196:3
msgid ""
"If you obtain @pid from g_spawn_async() or g_spawn_async_with_pipes() you "
"will need to pass #G_SPAWN_DO_NOT_REAP_CHILD as flag to the spawn function "
"for the child watching to work."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add:
#: gmain.c:4151:1 gmain.c:4205:1
msgid "GLib supports only a single callback per process id."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_child_watch_add:
#: gmain.c:4153:4 gmain.c:4207:4
msgid ""
"This internally creates a main loop source using g_child_watch_source_new() "
"and attaches it to the main loop context using g_source_attach(). You can do "
"these steps manually if you need greater control."
msgstr ""

# used by: g_child_watch_add:
#: gmain.c:4188:2
msgid ""
"@pid:      process id to watch. On POSIX the pid of a child process. On "
"Windows a handle for a process (which doesn't have to be a child)."
msgstr ""

# #used by: g_child_watch_add:
#: gmain.c:4193:2
msgid ""
"Sets a function to be called when the child indicated by @pid exits, at a "
"default priority, #G_PRIORITY_DEFAULT."
msgstr ""

# #used by: g_main_context_ref:
#: gmain.c:424:1
msgid "Increases the reference count on a #GMainContext object by one."
msgstr ""

# #used by: g_main_context_ref:
#: gmain.c:426:1
msgid "Returns: the @context that was passed in (since 2.6)"
msgstr ""

# #used by: g_idle_source_new:
#: gmain.c:4260:1
msgid "Creates a new idle source."
msgstr ""

# #used by: g_idle_source_new:
#: gmain.c:4262:5
msgid ""
"The source will not initially be associated with any #GMainContext and must "
"be added to one with g_source_attach() before it will be executed. Note that "
"the default priority for idle sources is %G_PRIORITY_DEFAULT_IDLE, as "
"compared to other sources which have a default priority of "
"%G_PRIORITY_DEFAULT."
msgstr ""

# #used by: g_idle_source_new:
#: gmain.c:4268:1
msgid "Return value: the newly-created idle source"
msgstr ""

# #used by: g_idle_add_full:
#: gmain.c:4289:3
msgid ""
"Adds a function to be called whenever there are no higher priority events "
"pending.  If the function returns %FALSE it is automatically removed from "
"the list of event sources and will not be called again."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_idle_add_full:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_idle_add:
#: gmain.c:4293:3 gmain.c:4333:3
msgid ""
"This internally creates a main loop source using g_idle_source_new() and "
"attaches it to the main loop context using g_source_attach(). You can do "
"these steps manually if you need greater control."
msgstr ""

# used by: g_idle_add:
#: gmain.c:4325:1
msgid "@data: data to pass to @function."
msgstr ""

# #used by: g_idle_add:
#: gmain.c:4327:5
msgid ""
"Adds a function to be called whenever there are no higher priority events "
"pending to the default main loop. The function is given the default idle "
"priority, #G_PRIORITY_DEFAULT_IDLE.  If the function returns %FALSE it is "
"automatically removed from the list of event sources and will not be called "
"again."
msgstr ""

# used by: g_idle_remove_by_data:
#: gmain.c:4348:1
msgid "@data: the data for the idle source's callback."
msgstr ""

# #used by: g_idle_remove_by_data:
#: gmain.c:4350:1
msgid "Removes the idle function with the given data."
msgstr ""

# #used by: g_idle_remove_by_data:
#: gmain.c:4352:1
msgid "Return value: %TRUE if an idle source was found and removed."
msgstr ""

# #used by: g_main_context_unref:
#: gmain.c:450:2
msgid ""
"Decreases the reference count on a #GMainContext object by one. If the "
"result is zero, free the context and free all associated memory."
msgstr ""

# #used by: g_main_context_new:
#: gmain.c:562:1
msgid "Creates a new #GMainContext structure."
msgstr ""

# #used by: g_main_context_new:
#: gmain.c:564:1
msgid "Return value: the new #GMainContext"
msgstr ""

# #used by: g_main_context_default:
#: gmain.c:637:4
msgid ""
"Returns the global default main context. This is the main context used for "
"main loop functions when a main loop is not explicitly specified, and "
"corresponds to the |$_1_$|main|$_1_$| main loop. See also "
"g_main_context_get_thread_default()."
msgstr ""

# #used by: g_main_context_default:
#: gmain.c:642:1
msgid "Return value: the global default main context."
msgstr ""

# used by: g_main_context_push_thread_default:
#: gmain.c:685:1
msgid "@context: a #GMainContext, or %NULL for the global default context"
msgstr ""

# #used by: g_main_context_push_thread_default:
#: gmain.c:687:10
msgid ""
"Acquires @context and sets it as the thread-default context for the current "
"thread. This will cause certain asynchronous operations (such as most <link "
"linkend=|$_1_$|gio|$_1_$|>gio</link>-based I/O) which are started in this "
"thread to run under @context and deliver their results to its main loop, "
"rather than running under the global default context in the main thread. "
"Note that calling this function changes the context returned by "
"g_main_context_get_thread_default(), <emphasis>not</emphasis> the one "
"returned by g_main_context_default(), so it does not affect the context used "
"by functions like g_idle_add()."
msgstr ""

# #used by: g_main_context_push_thread_default:
#: gmain.c:698:13
msgid ""
"Normally you would call this function shortly after creating a new thread, "
"passing it a #GMainContext which will be run by a #GMainLoop in that thread, "
"to set a new default context for all async operations in that thread. (In "
"this case, you don't need to ever call g_main_context_pop_thread_default().) "
"In some cases however, you may want to schedule a single operation in a non-"
"default context, or temporarily use a non-default context in the main "
"thread. In that case, you can wrap the call to the asynchronous operation "
"inside a g_main_context_push_thread_default() / "
"g_main_context_pop_thread_default() pair, but it is up to you to ensure that "
"no other asynchronous operations accidentally get started while the non-"
"default context is active."
msgstr ""

# #used by: g_main_context_push_thread_default:
#: gmain.c:712:3
msgid ""
"Beware that libraries that predate this function may not correctly handle "
"being used from a thread with a thread-default context. Eg, see "
"g_file_supports_thread_contexts()."
msgstr ""

# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_main_context_push_thread_default:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_main_context_pop_thread_default:
# #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_main_context_get_thread_default:
#: gmain.c:716:1 gmain.c:750:1 gmain.c:786:1
msgid "Since: 2.22"
msgstr ""

# used by: g_main_context_pop_thread_default:
#: gmain.c:745:1
msgid "@context: a #GMainContext object, or %NULL"
msgstr ""

# #used by: g_main_context_pop_thread_default:
#: gmain.c:747:2
msgid ""
"Pops @context off the thread-default context stack (verifying that it was on "
"the top of the stack)."
msgstr ""

# #used by: g_main_context_get_thread_default:
#: gmain.c:775:7
msgid ""
"Gets the thread-default #GMainContext for this thread. Asynchronous "
"operations that want to be able to be run in contexts other than the default "
"one should call this method to get a #GMainContext to add their #GSource<!-- "
"-->s to. (Note that even in single-threaded programs applications may "
"sometimes want to temporarily push a non-default context, so it is not safe "
"to assume that this will always return %NULL if threads are not initialized.)"
msgstr ""

# #used by: g_main_context_get_thread_default:
#: gmain.c:783:2
msgid ""
"Returns: the thread-default #GMainContext, or %NULL if the thread-default "
"context is the global default context."
msgstr ""

# used by: g_source_new:
#: gmain.c:804:2
msgid ""
"@source_funcs: structure containing functions that implement the sources "
"behavior."
msgstr ""

# used by: g_source_new:
#: gmain.c:806:1
msgid "@struct_size: size of the #GSource structure to create."
msgstr ""

# #used by: g_source_new:
#: gmain.c:808:4
msgid ""
"Creates a new #GSource structure. The size is specified to allow creating "
"structures derived from #GSource that contain additional data. The size "
"passed in must be at least <literal>sizeof (GSource)</literal>."
msgstr ""

# #used by: g_source_new:
#: gmain.c:817:1
msgid "Return value: the newly-created #GSource."
msgstr ""

# #used by: g_source_attach:
#: gmain.c:892:2
msgid ""
"Adds a #GSource to a @context so that it will be executed within that "
"context. Remove it by calling g_source_destroy()."
msgstr ""

# #used by: g_source_attach:
#: gmain.c:895:2
msgid ""
"Return value: the ID (greater than 0) for the source within the "
"#GMainContext."
msgstr ""

# #used by: g_source_destroy:
#: gmain.c:986:3
msgid ""
"Removes a source from its #GMainContext, if any, and mark it as destroyed.  "
"The source cannot be subsequently added to another context."
msgstr ""

# #used by: GSourceFuncs:
#: gmain.h:102:4
msgid ""
"For timeout sources, the prepare and check functions both return %TRUE if "
"the timeout interval has expired. The prepare function also returns a "
"timeout value to ensure that the poll() call doesn't block too long and miss "
"the next timeout."
msgstr ""

# #used by: GSourceFuncs:
#: gmain.h:107:6
msgid ""
"For file descriptor sources, the prepare function typically returns %FALSE, "
"since it must wait until poll() has been called before it knows whether any "
"events need to be processed. It sets the returned timeout to -1 to indicate "
"that it doesn't mind how long the poll() call blocks. In the check function, "
"it tests the results of the poll() call to see if the required condition has "
"been met, and returns %TRUE if so."
msgstr ""

# #used by: GPid:
#: gmain.h:119:1
msgid "A type which is used to hold a process identification."
msgstr ""

# #used by: GPid:
#: gmain.h:121:2
msgid ""
"On UNIX, processes are identified by a process id (an integer), while "
"Windows uses process handles (which are pointers)."
msgstr ""

# used by: GChildWatchFunc:
#: gmain.h:129:1
msgid "@pid: the process id of the child process"
msgstr ""

# used by: GChildWatchFunc:
#: gmain.h:130:2
msgid ""
"@status: Status information about the child process, see waitpid(2) for more "
"information about this field"
msgstr ""

# used by: GChildWatchFunc:
#: gmain.h:132:1
msgid "@data: user data passed to g_child_watch_add()"
msgstr ""

# #used by: GChildWatchFunc:
#: gmain.h:134:1
msgid "The type of functions to be called when a child exists."
msgstr ""

# #used by: G_PRIORITY_HIGH:
#: gmain.h:195:1
msgid "Use this for high priority event sources."
msgstr ""

# #-#-#-#-#  gmain.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: G_PRIORITY_HIGH:
# #-#-#-#-#  gmain.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: G_PRIORITY_LOW:
#: gmain.h:197:1 gmain.h:239:1
msgid "It is not used within GLib or GTK+."
msgstr ""

# #used by: G_PRIORITY_DEFAULT:
#: gmain.h:204:1
msgid "Use this for default priority event sources."
msgstr ""

# #used by: G_PRIORITY_DEFAULT:
#: gmain.h:206:3
msgid ""
"In GLib this priority is used when adding timeout functions with "
"g_timeout_add(). In GDK this priority is used for events from the X server."
msgstr ""

# #used by: G_PRIORITY_HIGH_IDLE:
#: gmain.h:215:1
msgid "Use this for high priority idle functions."
msgstr ""

# #used by: G_PRIORITY_HIGH_IDLE:
#: gmain.h:217:4
msgid ""
"GTK+ uses #G_PRIORITY_HIGH_IDLE + 10 for resizing operations, and "
"#G_PRIORITY_HIGH_IDLE + 20 for redrawing operations. (This is done to ensure "
"that any pending resizes are processed before any pending redraws, so that "
"widgets are not redrawn twice unnecessarily.)"
msgstr ""

# #used by: G_PRIORITY_DEFAULT_IDLE:
#: gmain.h:227:1
msgid "Use this for default priority idle functions."
msgstr ""

# #used by: G_PRIORITY_DEFAULT_IDLE:
#: gmain.h:229:2
msgid ""
"In GLib this priority is used when adding idle functions with g_idle_add()."
msgstr ""

# #used by: G_PRIORITY_LOW:
#: gmain.h:237:1
msgid "Use this for very low priority background tasks."
msgstr ""

# #used by: GMainContext:
#: gmain.h:36:2
msgid ""
"The <structname>GMainContext</structname> struct is an opaque data type "
"representing a set of sources to be handled in a main loop."
msgstr ""

# used by: g_main_new:
#: gmain.h:390:3
msgid ""
"@is_running: set to %TRUE to indicate that the loop is running. This is not "
"very important since calling g_main_run() will set this to %TRUE anyway."
msgstr ""

# #used by: g_main_new:
#: gmain.h:394:1
msgid "Creates a new #GMainLoop for th default main context."
msgstr ""

# #used by: g_main_new:
#: gmain.h:396:1
msgid "Returns: a new #GMainLoop"
msgstr ""

# #used by: g_main_new:
#: gmain.h:398:1
msgid "Deprecated: 2.2: Use g_main_loop_new() instead"
msgstr ""

# #used by: g_main_run:
#: gmain.h:406:1
msgid "Runs a main loop until it stops running."
msgstr ""

# #used by: g_main_run:
#: gmain.h:408:1
msgid "Deprecated: 2.2: Use g_main_loop_run() instead"
msgstr ""

# #used by: g_main_quit:
#: gmain.h:416:2
msgid ""
"Stops the #GMainLoop. If g_main_run() was called to run the #GMainLoop, it "
"will now return."
msgstr ""

# #used by: g_main_quit:
#: gmain.h:419:1
msgid "Deprecated: 2.2: Use g_main_loop_quit() instead"
msgstr ""

# #used by: g_main_destroy:
#: gmain.h:427:1
msgid "Frees the memory allocated for the #GMainLoop."
msgstr ""

# #used by: g_main_destroy:
#: gmain.h:429:1
msgid "Deprecated: 2.2: Use g_main_loop_unref() instead"
msgstr ""

# #used by: g_main_is_running:
#: gmain.h:437:1
msgid "Checks if the main loop is running."
msgstr ""

# #used by: g_main_is_running:
#: gmain.h:439:1
msgid "Returns: %TRUE if the main loop is running"
msgstr ""

# #used by: GMainLoop:
#: gmain.h:44:2
msgid ""
"The <structname>GMainLoop</structname> struct is an opaque data type "
"representing the main event loop of a GLib or GTK+ application."
msgstr ""

# #used by: g_main_is_running:
#: gmain.h:441:1
msgid "Deprecated: 2.2: Use g_main_loop_is_running() instead"
msgstr ""

# used by: g_main_iteration:
#: gmain.h:447:4
msgid ""
"@may_block: set to %TRUE if it should block (i.e. wait) until an event "
"source becomes ready. It will return after an event source has been "
"processed. If set to %FALSE it will return immediately if no event source is "
"ready to be processed."
msgstr ""

# #used by: g_main_iteration:
#: gmain.h:452:1
msgid "Runs a single iteration for the default #GMainContext."
msgstr ""

# #used by: g_main_iteration:
#: gmain.h:454:1
msgid "Returns: %TRUE if more events are pending."
msgstr ""

# #used by: g_main_iteration:
#: gmain.h:456:1
msgid "Deprecated: 2.2: Use g_main_context_iteration() instead."
msgstr ""

# #used by: g_main_pending:
#: gmain.h:463:2
msgid ""
"Checks if any events are pending for the default #GMainContext (i.e. ready "
"to be processed)."
msgstr ""

# #used by: g_main_pending:
#: gmain.h:466:1
msgid "Returns: %TRUE if any events are pending."
msgstr ""

# #used by: g_main_pending:
#: gmain.h:468:1
msgid "Deprected: 2.2: Use g_main_context_pending() instead."
msgstr ""

# #used by: g_main_set_poll_func:
#: gmain.h:476:2
msgid ""
"Sets the function to use for the handle polling of file descriptors for the "
"default main context."
msgstr ""

# #used by: g_main_set_poll_func:
#: gmain.h:479:1
msgid "Deprecated: 2.2: Use g_main_context_set_poll_func() again"
msgstr ""

# #used by: GSource:
#: gmain.h:52:2
msgid ""
"The <structname>GSource</structname> struct is an opaque data type "
"representing an event source."
msgstr ""

# used by: GSourceCallbackFuncs:
#: gmain.h:59:1
msgid "@ref: Called when a reference is added to the callback object"
msgstr ""

# used by: GSourceCallbackFuncs:
#: gmain.h:60:1
msgid "@unref: Called when a reference to the callback object is dropped"
msgstr ""

# used by: GSourceCallbackFuncs:
#: gmain.h:61:2
msgid ""
"@get: Called to extract the callback function and data from the callback "
"object."
msgstr ""

# #used by: GSourceCallbackFuncs:
#: gmain.h:64:2
msgid ""
"The <structname>GSourceCallbackFuncs</structname> struct contains functions "
"for managing callback objects."
msgstr ""

# used by: GSourceFuncs:
#: gmain.h:71:7
msgid ""
"@prepare: Called before all the file descriptors are polled. If the source "
"can determine that it is ready here (without waiting for the results of the "
"poll() call) it should return %TRUE. It can also return a @timeout_ value "
"which should be the maximum timeout (in milliseconds) which should be passed "
"to the poll() call. The actual timeout used will be -1 if all sources "
"returned -1, or it will be the minimum of all the @timeout_ values returned "
"which were >= 0."
msgstr ""

# used by: GSourceFuncs:
#: gmain.h:78:4
msgid ""
"@check: Called after all the file descriptors are polled. The source should "
"return %TRUE if it is ready to be dispatched. Note that some time may have "
"passed since the previous prepare function was called, so the source should "
"be checked again here."
msgstr ""

# used by: GSourceFuncs:
#: gmain.h:82:7
msgid ""
"@dispatch: Called to dispatch the event source, after it has returned %TRUE "
"in either its @prepare or its @check function. The @dispatch function is "
"passed in a callback function and data. The callback function may be %NULL "
"if the source was never connected to a callback using g_source_set_callback"
"(). The @dispatch function should call the callback function with @user_data "
"and whatever additional parameters are needed for this type of event source."
msgstr ""

# used by: GSourceFuncs:
#: gmain.h:89:1
msgid "@finalize: Called when the source is finalized."
msgstr ""

# used by: GSourceFuncs:
#: gmain.h:90:1
msgid "@closure_callback:"
msgstr ""

# used by: GSourceFuncs:
#: gmain.h:91:1
msgid "@closure_marshal:"
msgstr ""

# #used by: GSourceFuncs:
#: gmain.h:93:2
msgid ""
"The <structname>GSourceFuncs</structname> struct contains a table of "
"functions used to handle event sources in a generic manner."
msgstr ""

# #used by: GSourceFuncs:
#: gmain.h:96:5
msgid ""
"For idle sources, the prepare and check functions always return %TRUE to "
"indicate that the source is always ready to be processed. The prepare "
"function also returns a timeout value of 0 to ensure that the poll() call "
"doesn't block (since that would be time wasted which could have been spent "
"running the idle function)."
msgstr ""
