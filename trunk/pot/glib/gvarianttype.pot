# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-14 21:52-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

# #used by: g_variant_type_equal:
#: gvarianttype.c:1012:3
msgid ""
"@type1: a #GVariantType @type2: a #GVariantType @returns: %TRUE if @type1 "
"and @type2 are exactly equal"
msgstr ""

# #used by: g_variant_type_equal:
#: gvarianttype.c:1016:1
msgid "Compares @type1 and @type2 for equality."
msgstr ""

# #used by: g_variant_type_equal:
#: gvarianttype.c:1018:4
msgid ""
"Only returns %TRUE if the types are exactly equal.  Even if one type is an "
"indefinite type and the other is a subtype of it, %FALSE will be returned if "
"they are not exactly equal.  If you want to check for subtypes, use "
"g_variant_type_is_subtype_of()."
msgstr ""

# #used by: g_variant_type_equal:
#: gvarianttype.c:1023:3
msgid ""
"The argument types of @type1 and @type2 are only #gconstpointer to allow use "
"with #GHashTable without function pointer casting.  For both arguments, a "
"valid #GVariantType must be provided."
msgstr ""

# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_string_is_valid:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_free:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_copy:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_get_string_length:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_peek_string:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_dup_string:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_is_definite:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_is_container:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_is_basic:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_is_maybe:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_is_array:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_is_tuple:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_is_dict_entry:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_is_variant:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_hash:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_equal:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_is_subtype_of:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_element:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_first:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_next:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_n_items:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_key:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_value:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_new_tuple:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_new_array:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_new_maybe:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_new_dict_entry:
#: gvarianttype.c:1027:1 gvarianttype.c:1066:1 gvarianttype.c:1137:1
#: gvarianttype.c:1173:1 gvarianttype.c:1208:1 gvarianttype.c:1241:1
#: gvarianttype.c:1269:1 gvarianttype.c:1293:1 gvarianttype.c:1321:1
#: gvarianttype.c:1400:1 gvarianttype.c:1429:1 gvarianttype.c:1459:1
#: gvarianttype.c:580:1 gvarianttype.c:605:1 gvarianttype.c:623:1
#: gvarianttype.c:673:1 gvarianttype.c:713:1 gvarianttype.c:732:1
#: gvarianttype.c:759:1 gvarianttype.c:796:1 gvarianttype.c:836:1
#: gvarianttype.c:881:1 gvarianttype.c:903:1 gvarianttype.c:926:1
#: gvarianttype.c:951:1 gvarianttype.c:968:1 gvarianttype.c:989:1
#: gvarianttype.h:270:1
msgid "Since 2.24"
msgstr ""

# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_copy:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_get_string_length:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_peek_string:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_dup_string:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_is_definite:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_is_container:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_is_basic:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_is_maybe:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_is_array:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_is_tuple:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_is_dict_entry:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_is_variant:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_hash:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_is_subtype_of:
#: gvarianttype.c:1056:1 gvarianttype.c:617:1 gvarianttype.c:666:1
#: gvarianttype.c:704:1 gvarianttype.c:725:1 gvarianttype.c:745:1
#: gvarianttype.c:784:1 gvarianttype.c:823:1 gvarianttype.c:871:1
#: gvarianttype.c:893:1 gvarianttype.c:915:1 gvarianttype.c:941:1
#: gvarianttype.c:963:1 gvarianttype.c:980:1
msgid "@type: a #GVariantType"
msgstr ""

# used by: g_variant_type_is_subtype_of:
#: gvarianttype.c:1057:1
msgid "@supertype: a #GVariantType"
msgstr ""

# used by: g_variant_type_is_subtype_of:
#: gvarianttype.c:1058:1
msgid "@returns: %TRUE if @type is a subtype of @supertype"
msgstr ""

# #used by: g_variant_type_is_subtype_of:
#: gvarianttype.c:1060:1
msgid "Checks if @type is a subtype of @supertype."
msgstr ""

# #used by: g_variant_type_is_subtype_of:
#: gvarianttype.c:1062:3
msgid ""
"This function returns %TRUE if @type is a subtype of @supertype.  All types "
"are considered to be subtypes of themselves.  Aside from that, only "
"indefinite types can have subtypes."
msgstr ""

# used by: g_variant_type_element:
#: gvarianttype.c:1130:1
msgid "@type: an array or maybe #GVariantType"
msgstr ""

# used by: g_variant_type_element:
#: gvarianttype.c:1131:1
msgid "@returns: the element type of @type"
msgstr ""

# #used by: g_variant_type_element:
#: gvarianttype.c:1133:1
msgid "Determines the element type of an array or maybe type."
msgstr ""

# #used by: g_variant_type_element:
#: gvarianttype.c:1135:1
msgid "This function may only be used with array or maybe types."
msgstr ""

# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_first:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_n_items:
#: gvarianttype.c:1155:1 gvarianttype.c:1228:1
msgid "@type: a tuple or dictionary entry #GVariantType"
msgstr ""

# used by: g_variant_type_first:
#: gvarianttype.c:1156:1
msgid "@returns: the first item type of @type, or %NULL"
msgstr ""

# #used by: g_variant_type_first:
#: gvarianttype.c:1158:2
msgid "Determines the first item type of a tuple or dictionary entry type."
msgstr ""

# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_first:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_n_items:
#: gvarianttype.c:1161:3 gvarianttype.c:1234:3
msgid ""
"This function may only be used with tuple or dictionary entry types, but "
"must not be used with the generic tuple type %G_VARIANT_TYPE_TUPLE."
msgstr ""

# #used by: g_variant_type_first:
#: gvarianttype.c:1165:2
msgid ""
"In the case of a dictionary entry type, this returns the type of the key."
msgstr ""

# #used by: g_variant_type_first:
#: gvarianttype.c:1168:1
msgid "%NULL is returned in case of @type being %G_VARIANT_TYPE_UNIT."
msgstr ""

# #used by: g_variant_type_first:
#: gvarianttype.c:1170:2
msgid ""
"This call, together with g_variant_type_next() provides an iterator "
"interface over tuple and dictionary entry types."
msgstr ""

# used by: g_variant_type_next:
#: gvarianttype.c:1193:1
msgid "@type: a #GVariantType from a previous call"
msgstr ""

# used by: g_variant_type_next:
#: gvarianttype.c:1194:1
msgid "@returns: the next #GVariantType after @type, or %NULL"
msgstr ""

# #used by: g_variant_type_next:
#: gvarianttype.c:1196:2
msgid "Determines the next item type of a tuple or dictionary entry type."
msgstr ""

# #used by: g_variant_type_next:
#: gvarianttype.c:1199:2
msgid ""
"@type must be the result of a previous call to g_variant_type_first() or "
"g_variant_type_next()."
msgstr ""

# #used by: g_variant_type_next:
#: gvarianttype.c:1202:3
msgid ""
"If called on the key type of a dictionary entry then this call returns the "
"value type.  If called on the value type of a dictionary entry then this "
"call returns %NULL."
msgstr ""

# #used by: g_variant_type_next:
#: gvarianttype.c:1206:1
msgid "For tuples, %NULL is returned when @type is the last item in a tuple."
msgstr ""

# used by: g_variant_type_n_items:
#: gvarianttype.c:1229:1
msgid "@returns: the number of items in @type"
msgstr ""

# #used by: g_variant_type_n_items:
#: gvarianttype.c:1231:2
msgid ""
"Determines the number of items contained in a tuple or dictionary entry type."
msgstr ""

# #used by: g_variant_type_n_items:
#: gvarianttype.c:1238:2
msgid ""
"In the case of a dictionary entry type, this function will always return 2."
msgstr ""

# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_key:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_value:
#: gvarianttype.c:1260:1 gvarianttype.c:1286:1
msgid "@type: a dictionary entry #GVariantType"
msgstr ""

# used by: g_variant_type_key:
#: gvarianttype.c:1261:1
msgid "@returns: the key type of the dictionary entry"
msgstr ""

# #used by: g_variant_type_key:
#: gvarianttype.c:1263:1
msgid "Determines the key type of a dictionary entry type."
msgstr ""

# #used by: g_variant_type_key:
#: gvarianttype.c:1265:3
msgid ""
"This function may only be used with a dictionary entry type.  Other than the "
"additional restriction, this call is equivalent to g_variant_type_first()."
msgstr ""

# used by: g_variant_type_value:
#: gvarianttype.c:1287:1
msgid "@returns: the value type of the dictionary entry"
msgstr ""

# #used by: g_variant_type_value:
#: gvarianttype.c:1289:1
msgid "Determines the value type of a dictionary entry type."
msgstr ""

# #used by: g_variant_type_value:
#: gvarianttype.c:1291:1
msgid "This function may only be used with a dictionary entry type."
msgstr ""

# used by: g_variant_type_new_tuple:
#: gvarianttype.c:1310:1
msgid "@items: an array of #GVariantTypes, one for each item"
msgstr ""

# used by: g_variant_type_new_tuple:
#: gvarianttype.c:1311:1
msgid "@length: the length of @items, or -1"
msgstr ""

# used by: g_variant_type_new_tuple:
#: gvarianttype.c:1312:1
msgid "@returns: a new tuple #GVariantType"
msgstr ""

# #used by: g_variant_type_new_tuple:
#: gvarianttype.c:1314:1
msgid "Constructs a new tuple type, from @items."
msgstr ""

# #used by: g_variant_type_new_tuple:
#: gvarianttype.c:1316:2
msgid ""
"@length is the number of items in @items, or -1 to indicate that @items is "
"%NULL-terminated."
msgstr ""

# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_new_tuple:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_new_array:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_new_maybe:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_new_dict_entry:
#: gvarianttype.c:1319:1 gvarianttype.c:1398:1 gvarianttype.c:1427:1
#: gvarianttype.c:1457:1
msgid "It is appropriate to call g_variant_type_free() on the return value."
msgstr ""

# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_new_array:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_new_maybe:
#: gvarianttype.c:1392:1 gvarianttype.c:1421:1
msgid "@element: a #GVariantType"
msgstr ""

# used by: g_variant_type_new_array:
#: gvarianttype.c:1393:1
msgid "@returns: a new array #GVariantType"
msgstr ""

# #used by: g_variant_type_new_array:
#: gvarianttype.c:1395:2
msgid ""
"Constructs the type corresponding to an array of elements of the type @type."
msgstr ""

# used by: g_variant_type_new_maybe:
#: gvarianttype.c:1422:1
msgid "@returns: a new maybe #GVariantType"
msgstr ""

# #used by: g_variant_type_new_maybe:
#: gvarianttype.c:1424:2
msgid ""
"Constructs the type corresponding to a maybe instance containing type @type "
"or Nothing."
msgstr ""

# used by: g_variant_type_new_dict_entry:
#: gvarianttype.c:1450:1
msgid "@key: a basic #GVariantType"
msgstr ""

# used by: g_variant_type_new_dict_entry:
#: gvarianttype.c:1451:1
msgid "@value: a #GVariantType"
msgstr ""

# used by: g_variant_type_new_dict_entry:
#: gvarianttype.c:1452:1
msgid "@returns: a new dictionary entry #GVariantType"
msgstr ""

# #used by: g_variant_type_new_dict_entry:
#: gvarianttype.c:1454:2
msgid ""
"Constructs the type corresponding to a dictionary entry with a key of type "
"@key and a value of type @value."
msgstr ""

# used by: SECTION: gvarianttype
#: gvarianttype.c:35:1
msgid "@title: GVariantType"
msgstr ""

# used by: SECTION: gvarianttype
#: gvarianttype.c:36:1
msgid "@short_description: introduction to the GVariant type system"
msgstr ""

# used by: SECTION: gvarianttype
#: gvarianttype.c:37:1
msgid "@see_also: #GVariantType, #GVariant"
msgstr ""

# #used by: SECTION: gvarianttype
#: gvarianttype.c:39:6
msgid ""
"This section introduces the GVariant type system.  It is based, in large "
"part, on the DBus type system, with two major changes and some minor lifting "
"of restrictions.  The <ulink url='http://dbus.freedesktop.org/doc/dbus-"
"specification.html'>DBus specification</ulink>, therefore, provides a "
"significant amount of information that is useful when working with GVariant."
msgstr ""

# #used by: SECTION: gvarianttype
#: gvarianttype.c:46:5
msgid ""
"The first major change with respect to the DBus type system is the "
"introduction of maybe (or |$_1_$|nullable|$_1_$|) types.  Any type in "
"GVariant can be converted to a maybe type, in which case, |$_1_$|nothing|$_1_"
"$| (or |$_1_$|null|$_1_$|) becomes a valid value.  Maybe types have been "
"added by introducing the character |$_1_$|<literal>m</literal>|$_1_$| to "
"type strings."
msgstr ""

# used by: g_variant_type_string_scan:
#: gvarianttype.c:503:1
msgid "@string: a pointer to any string"
msgstr ""

# used by: g_variant_type_string_scan:
#: gvarianttype.c:504:1
msgid "@limit: the end of @string, or %NULL"
msgstr ""

# used by: g_variant_type_string_scan:
#: gvarianttype.c:505:1
msgid "@endptr: location to store the end pointer, or %NULL"
msgstr ""

# used by: g_variant_type_string_scan:
#: gvarianttype.c:506:1
msgid "@returns: %TRUE if a valid type string was found"
msgstr ""

# #used by: g_variant_type_string_scan:
#: gvarianttype.c:508:3
msgid ""
"Scan for a single complete and valid GVariant type string in @string. The "
"memory pointed to by @limit (or bytes beyond it) is never accessed."
msgstr ""

# #used by: g_variant_type_string_scan:
#: gvarianttype.c:512:3
msgid ""
"If a valid type string is found, @endptr is updated to point to the first "
"character past the end of the string that was found and %TRUE is returned."
msgstr ""

# #used by: g_variant_type_string_scan:
#: gvarianttype.c:516:2
msgid ""
"If there is no valid type string starting at @string, or if the type string "
"does not end before @limit then %FALSE is returned."
msgstr ""

# #used by: g_variant_type_string_scan:
#: gvarianttype.c:519:2
msgid ""
"For the simple case of checking if a string is a valid type string, see "
"g_variant_type_string_is_valid()."
msgstr ""

# #used by: SECTION: gvarianttype
#: gvarianttype.c:52:8
msgid ""
"The second major change is that the GVariant type system supports the "
"concept of |$_1_$|indefinite types|$_1_$| -- types that are less specific "
"than the normal types found in DBus.  For example, it is possible to speak "
"of |$_1_$|an array of any type|$_1_$| in GVariant, where the DBus type "
"system would require you to speak of |$_1_$|an array of integers|$_1_$| or |"
"$_1_$|an array of strings|$_1_$|.  Indefinite types have been added by "
"introducing the characters |$_1_$|<literal>*</literal>|$_1_$|, |$_1_$|"
"<literal>?</literal>|$_1_$| and |$_1_$|<literal>r</literal>|$_1_$| to type "
"strings."
msgstr ""

# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_string_scan:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_variant_type_new:
#: gvarianttype.c:522:1 gvarianttype.c:654:1
msgid "Since: 2.24"
msgstr ""

# used by: g_variant_type_string_is_valid:
#: gvarianttype.c:573:1
msgid "@type_string: a pointer to any string"
msgstr ""

# used by: g_variant_type_string_is_valid:
#: gvarianttype.c:574:1
msgid "@returns: %TRUE if @type_string is exactly one valid type string"
msgstr ""

# #used by: g_variant_type_string_is_valid:
#: gvarianttype.c:576:3
msgid ""
"Checks if @type_string is a valid GVariant type string.  This call is "
"equivalent to calling g_variant_type_string_scan() and confirming that the "
"following character is a nul terminator."
msgstr ""

# used by: g_variant_type_free:
#: gvarianttype.c:597:1
msgid "@type: a #GVariantType, or %NULL"
msgstr ""

# #used by: g_variant_type_free:
#: gvarianttype.c:599:3
msgid ""
"Frees a #GVariantType that was allocated with g_variant_type_copy(), "
"g_variant_type_new() or one of the container type constructor functions."
msgstr ""

# #used by: g_variant_type_free:
#: gvarianttype.c:603:1
msgid "In the case that @type is %NULL, this function does nothing."
msgstr ""

# #used by: SECTION: gvarianttype
#: gvarianttype.c:61:3
msgid ""
"Finally, all arbitrary restrictions relating to the complexity of types are "
"lifted along with the restriction that dictionary entries may only appear "
"nested inside of arrays."
msgstr ""

# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_copy:
# #-#-#-#-#  gvarianttype.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_variant_type_new:
#: gvarianttype.c:618:1 gvarianttype.c:645:1
msgid "@returns: a new #GVariantType"
msgstr ""

# #used by: g_variant_type_copy:
#: gvarianttype.c:620:2
msgid ""
"Makes a copy of a #GVariantType.  It is appropriate to call "
"g_variant_type_free() on the return value.  @type may not be %NULL."
msgstr ""

# used by: g_variant_type_new:
#: gvarianttype.c:644:1
msgid "@type_string: a valid GVariant type string"
msgstr ""

# #used by: g_variant_type_new:
#: gvarianttype.c:647:3
msgid ""
"Creates a new #GVariantType corresponding to the type string given by "
"@type_string.  It is appropriate to call g_variant_type_free() on the return "
"value."
msgstr ""

# #used by: SECTION: gvarianttype
#: gvarianttype.c:65:11
msgid ""
"Just as in DBus, GVariant types are described with strings (|$_1_$|type "
"strings|$_1_$|).  Subject to the differences mentioned above, these strings "
"are of the same form as those found in DBus.  Note, however: DBus always "
"works in terms of messages and therefore individual type strings appear "
"nowhere in its interface.  Instead, |$_1_$|signatures|$_1_$| are a "
"concatenation of the strings of the type of each argument in a message.  "
"GVariant deals with single values directly so GVariant type strings always "
"describe the type of exactly one value.  This means that a DBus signature "
"string is generally not a valid GVariant type string -- except in the case "
"that it is the signature of a message containing exactly one argument."
msgstr ""

# #used by: g_variant_type_new:
#: gvarianttype.c:651:2
msgid ""
"It is a programmer error to call this function with an invalid type string.  "
"Use g_variant_type_string_is_valid() if you are unsure."
msgstr ""

# used by: g_variant_type_get_string_length:
#: gvarianttype.c:667:1
msgid "@returns: the length of the corresponding type string"
msgstr ""

# #used by: g_variant_type_get_string_length:
#: gvarianttype.c:669:3
msgid ""
"Returns the length of the type string corresponding to the given @type.  "
"This function must be used to determine the valid extent of the memory "
"region returned by g_variant_type_peek_string()."
msgstr ""

# used by: g_variant_type_peek_string:
#: gvarianttype.c:705:1
msgid "@returns: the corresponding type string (not nul-terminated)"
msgstr ""

# #used by: g_variant_type_peek_string:
#: gvarianttype.c:707:3
msgid ""
"Returns the type string corresponding to the given @type.  The result is not "
"nul-terminated; in order to determine its length you must call "
"g_variant_type_get_string_length()."
msgstr ""

# #used by: g_variant_type_peek_string:
#: gvarianttype.c:711:1
msgid "To get a nul-terminated string, see g_variant_type_dup_string()."
msgstr ""

# used by: g_variant_type_dup_string:
#: gvarianttype.c:726:1
msgid "@returns: the corresponding type string"
msgstr ""

# #used by: g_variant_type_dup_string:
#: gvarianttype.c:728:3
msgid ""
"Returns a newly-allocated copy of the type string corresponding to @type.  "
"The returned string is nul-terminated.  It is appropriate to call g_free() "
"on the return value."
msgstr ""

# used by: g_variant_type_is_definite:
#: gvarianttype.c:746:1
msgid "@returns: %TRUE if @type is definite"
msgstr ""

# #used by: g_variant_type_is_definite:
#: gvarianttype.c:748:1
msgid "Determines if the given @type is definite (ie: not indefinite)."
msgstr ""

# #used by: g_variant_type_is_definite:
#: gvarianttype.c:750:2
msgid ""
"A type is definite if its type string does not contain any indefinite type "
"characters ('*', '?', or 'r')."
msgstr ""

# #used by: g_variant_type_is_definite:
#: gvarianttype.c:753:5
msgid ""
"A #GVariant instance may not have an indefinite type, so calling this "
"function on the result of g_variant_get_type() will always result in %TRUE "
"being returned.  Calling this function on an indefinite type like "
"%G_VARIANT_TYPE_ARRAY, however, will result in %FALSE being returned."
msgstr ""

# #used by: SECTION: gvarianttype
#: gvarianttype.c:77:10
msgid ""
"An indefinite type is similar in spirit to what may be called an abstract "
"type in other type systems.  No value can exist that has an indefinite type "
"as its type, but values can exist that have types that are subtypes of "
"indefinite types.  That is to say, g_variant_get_type() will never return an "
"indefinite type, but calling g_variant_is_a() with an indefinite type may "
"return %TRUE. For example, you can not have a value that represents |$_1_$|"
"an array of no particular type|$_1_$|, but you can have an |$_1_$|array of "
"integers|$_1_$| which certainly matches the type of |$_1_$|an array of no "
"particular type|$_1_$|, since |$_1_$|array of integers|$_1_$| is a subtype "
"of |$_1_$|array of no particular type|$_1_$|."
msgstr ""

# used by: g_variant_type_is_container:
#: gvarianttype.c:785:1
msgid "@returns: %TRUE if @type is a container type"
msgstr ""

# #used by: g_variant_type_is_container:
#: gvarianttype.c:787:1
msgid "Determines if the given @type is a container type."
msgstr ""

# #used by: g_variant_type_is_container:
#: gvarianttype.c:789:2
msgid ""
"Container types are any array, maybe, tuple, or dictionary entry types plus "
"the variant type."
msgstr ""

# #used by: g_variant_type_is_container:
#: gvarianttype.c:792:3
msgid ""
"This function returns %TRUE for any indefinite type for which every definite "
"subtype is a container -- %G_VARIANT_TYPE_ARRAY, for example."
msgstr ""

# used by: g_variant_type_is_basic:
#: gvarianttype.c:824:1
msgid "@returns: %TRUE if @type is a basic type"
msgstr ""

# #used by: g_variant_type_is_basic:
#: gvarianttype.c:826:1
msgid "Determines if the given @type is a basic type."
msgstr ""

# #used by: g_variant_type_is_basic:
#: gvarianttype.c:828:2
msgid ""
"Basic types are booleans, bytes, integers, doubles, strings, object paths "
"and signatures."
msgstr ""

# #used by: g_variant_type_is_basic:
#: gvarianttype.c:831:1
msgid "Only a basic type may be used as the key of a dictionary entry."
msgstr ""

# #used by: g_variant_type_is_basic:
#: gvarianttype.c:833:2
msgid ""
"This function returns %FALSE for all indefinite types except "
"%G_VARIANT_TYPE_BASIC."
msgstr ""

# used by: g_variant_type_is_maybe:
#: gvarianttype.c:872:1
msgid "@returns: %TRUE if @type is a maybe type"
msgstr ""

# #used by: g_variant_type_is_maybe:
#: gvarianttype.c:874:2
msgid ""
"Determines if the given @type is a maybe type.  This is true if the type "
"string for @type starts with an 'm'."
msgstr ""

# #used by: g_variant_type_is_maybe:
#: gvarianttype.c:877:3
msgid ""
"This function returns %TRUE for any indefinite type for which every definite "
"subtype is a maybe type -- %G_VARIANT_TYPE_MAYBE, for example."
msgstr ""

# #used by: SECTION: gvarianttype
#: gvarianttype.c:88:7
msgid ""
"This is similar to how instances of abstract classes may not directly exist "
"in other type systems, but instances of their non-abstract subtypes may.  "
"For example, in GTK, no object that has the type of #GtkBin can exist (since "
"#GtkBin is an abstract class), but a #GtkWindow can certainly be "
"instantiated, and you would say that the #GtkWindow is a #GtkBin (since "
"#GtkWindow is a subclass of #GtkBin)."
msgstr ""

# used by: g_variant_type_is_array:
#: gvarianttype.c:894:1
msgid "@returns: %TRUE if @type is an array type"
msgstr ""

# #used by: g_variant_type_is_array:
#: gvarianttype.c:896:2
msgid ""
"Determines if the given @type is an array type.  This is true if the type "
"string for @type starts with an 'a'."
msgstr ""

# #used by: g_variant_type_is_array:
#: gvarianttype.c:899:3
msgid ""
"This function returns %TRUE for any indefinite type for which every definite "
"subtype is an array type -- %G_VARIANT_TYPE_ARRAY, for example."
msgstr ""

# used by: g_variant_type_is_tuple:
#: gvarianttype.c:916:1
msgid "@returns: %TRUE if @type is a tuple type"
msgstr ""

# #used by: g_variant_type_is_tuple:
#: gvarianttype.c:918:3
msgid ""
"Determines if the given @type is a tuple type.  This is true if the type "
"string for @type starts with a '(' or if @type is %G_VARIANT_TYPE_TUPLE."
msgstr ""

# #used by: g_variant_type_is_tuple:
#: gvarianttype.c:922:3
msgid ""
"This function returns %TRUE for any indefinite type for which every definite "
"subtype is a tuple type -- %G_VARIANT_TYPE_TUPLE, for example."
msgstr ""

# used by: g_variant_type_is_dict_entry:
#: gvarianttype.c:942:1
msgid "@returns: %TRUE if @type is a dictionary entry type"
msgstr ""

# #used by: g_variant_type_is_dict_entry:
#: gvarianttype.c:944:2
msgid ""
"Determines if the given @type is a dictionary entry type.  This is true if "
"the type string for @type starts with a '{'."
msgstr ""

# #used by: g_variant_type_is_dict_entry:
#: gvarianttype.c:947:3
msgid ""
"This function returns %TRUE for any indefinite type for which every definite "
"subtype is a dictionary entry type -- %G_VARIANT_TYPE_DICT_ENTRY, for "
"example."
msgstr ""

# #used by: SECTION: gvarianttype
#: gvarianttype.c:96:1
msgid "A detailed description of GVariant type strings is given here:"
msgstr ""

# used by: g_variant_type_is_variant:
#: gvarianttype.c:964:1
msgid "@returns: %TRUE if @type is the variant type"
msgstr ""

# #used by: g_variant_type_is_variant:
#: gvarianttype.c:966:1
msgid "Determines if the given @type is the variant type."
msgstr ""

# #used by: SECTION: gvarianttype
#: gvarianttype.c:98:384
msgid ""
"<refsect2 id='gvariant-typestrings'> <title>GVariant Type Strings</title> "
"<para> A GVariant type string can be any of the following: </para> "
"<itemizedlist> <listitem> <para> any basic type string (listed below) </"
"para> </listitem> <listitem> <para> |$_1_$|<literal>v</literal>|$_1_$|, |$_1_"
"$|<literal>r</literal>|$_1_$| or |$_1_$|<literal>*</literal>|$_1_$| </para> "
"</listitem> <listitem> <para> one of the characters '<literal>a</literal>' "
"or '<literal>m</literal>', followed by another type string </para> </"
"listitem> <listitem> <para> the character '<literal>(</literal>', followed "
"by a concatenation of zero or more other type strings, followed by the "
"character '<literal>)</literal>' </para> </listitem> <listitem> <para> the "
"character '<literal>{</literal>', followed by a basic type string (see "
"below), followed by another type string, followed by the character "
"'<literal>}</literal>' </para> </listitem> </itemizedlist> <para> A basic "
"type string describes a basic type (as per g_variant_type_is_basic()) and is "
"always a single character in length.  The valid basic type strings are |$_1_"
"$|<literal>b</literal>|$_1_$|, |$_1_$|<literal>y</literal>|$_1_$|, |$_1_$|"
"<literal>n</literal>|$_1_$|, |$_1_$|<literal>q</literal>|$_1_$|, |$_1_$|"
"<literal>i</literal>|$_1_$|, |$_1_$|<literal>u</literal>|$_1_$|, |$_1_$|"
"<literal>x</literal>|$_1_$|, |$_1_$|<literal>t</literal>|$_1_$|, |$_1_$|"
"<literal>h</literal>|$_1_$|, |$_1_$|<literal>d</literal>|$_1_$|, |$_1_$|"
"<literal>s</literal>|$_1_$|, |$_1_$|<literal>o</literal>|$_1_$|, |$_1_$|"
"<literal>g</literal>|$_1_$| and |$_1_$|<literal>?</literal>|$_1_$|. </para> "
"<para> The above definition is recursive to arbitrary depth. |$_1_$|"
"<literal>aaaaai</literal>|$_1_$| and |$_1_$|<literal>(ui(nq((y)))s)</"
"literal>|$_1_$| are both valid type strings, as is |$_1_$|<literal>a(aa(ui)"
"(qna{ya(yd)}))</literal>|$_1_$|. </para> <para> The meaning of each of the "
"characters is as follows: </para> <informaltable> <tgroup cols='2'> <tbody> "
"<row> <entry> <para> <emphasis role='strong'>Character</emphasis> </para> </"
"entry> <entry> <para> <emphasis role='strong'>Meaning</emphasis> </para> </"
"entry> </row> <row> <entry> <para> <literal>b</literal> </para> </entry> "
"<entry> <para> the type string of %G_VARIANT_TYPE_BOOLEAN; a boolean value. "
"</para> </entry> </row> <row> <entry> <para> <literal>y</literal> </para> </"
"entry> <entry> <para> the type string of %G_VARIANT_TYPE_BYTE; a byte. </"
"para> </entry> </row> <row> <entry> <para> <literal>n</literal> </para> </"
"entry> <entry> <para> the type string of %G_VARIANT_TYPE_INT16; a signed 16 "
"bit integer. </para> </entry> </row> <row> <entry> <para> <literal>q</"
"literal> </para> </entry> <entry> <para> the type string of "
"%G_VARIANT_TYPE_UINT16; an unsigned 16 bit integer. </para> </entry> </row> "
"<row> <entry> <para> <literal>i</literal> </para> </entry> <entry> <para> "
"the type string of %G_VARIANT_TYPE_INT32; a signed 32 bit integer. </para> </"
"entry> </row> <row> <entry> <para> <literal>u</literal> </para> </entry> "
"<entry> <para> the type string of %G_VARIANT_TYPE_UINT32; an unsigned 32 bit "
"integer. </para> </entry> </row> <row> <entry> <para> <literal>x</literal> </"
"para> </entry> <entry> <para> the type string of %G_VARIANT_TYPE_INT64; a "
"signed 64 bit integer. </para> </entry> </row> <row> <entry> <para> "
"<literal>t</literal> </para> </entry> <entry> <para> the type string of "
"%G_VARIANT_TYPE_UINT64; an unsigned 64 bit integer. </para> </entry> </row> "
"<row> <entry> <para> <literal>h</literal> </para> </entry> <entry> <para> "
"the type string of %G_VARIANT_TYPE_HANDLE; a signed 32 bit value that, by "
"convention, is used as an index into an array of file descriptors that are "
"sent alongside a DBus message. </para> </entry> </row> <row> <entry> <para> "
"<literal>d</literal> </para> </entry> <entry> <para> the type string of "
"%G_VARIANT_TYPE_DOUBLE; a double precision floating point value. </para> </"
"entry> </row> <row> <entry> <para> <literal>s</literal> </para> </entry> "
"<entry> <para> the type string of %G_VARIANT_TYPE_STRING; a string. </para> "
"</entry> </row> <row> <entry> <para> <literal>o</literal> </para> </entry> "
"<entry> <para> the type string of %G_VARIANT_TYPE_OBJECT_PATH; a string in "
"the form of a DBus object path. </para> </entry> </row> <row> <entry> <para> "
"<literal>g</literal> </para> </entry> <entry> <para> the type string of "
"%G_VARIANT_TYPE_STRING; a string in the form of a DBus type signature. </"
"para> </entry> </row> <row> <entry> <para> <literal>?</literal> </para> </"
"entry> <entry> <para> the type string of %G_VARIANT_TYPE_BASIC; an "
"indefinite type that is a supertype of any of the basic types. </para> </"
"entry> </row> <row> <entry> <para> <literal>v</literal> </para> </entry> "
"<entry> <para> the type string of %G_VARIANT_TYPE_VARIANT; a container type "
"that contain any other type of value. </para> </entry> </row> <row> <entry> "
"<para> <literal>a</literal> </para> </entry> <entry> <para> used as a prefix "
"on another type string to mean an array of that type; the type string |$_1_$|"
"<literal>ai</literal>|$_1_$|, for example, is the type of an array of 32 bit "
"signed integers. </para> </entry> </row> <row> <entry> <para> <literal>m</"
"literal> </para> </entry> <entry> <para> used as a prefix on another type "
"string to mean a |$_1_$|maybe|$_1_$|, or |$_1_$|nullable|$_1_$|, version of "
"that type; the type string |$_1_$|<literal>ms</literal>|$_1_$|, for example, "
"is the type of a value that maybe contains a string, or maybe contains "
"nothing. </para> </entry> </row> <row> <entry> <para> <literal>()</literal> "
"</para> </entry> <entry> <para> used to enclose zero or more other "
"concatenated type strings to create a tuple type; the type string |$_1_$|"
"<literal>(is)</literal>|$_1_$|, for example, is the type of a pair of an "
"integer and a string. </para> </entry> </row> <row> <entry> <para> "
"<literal>r</literal> </para> </entry> <entry> <para> the type string of "
"%G_VARIANT_TYPE_TUPLE; an indefinite type that is a supertype of any tuple "
"type, regardless of the number of items. </para> </entry> </row> <row> "
"<entry> <para> <literal>{}</literal> </para> </entry> <entry> <para> used to "
"enclose a basic type string concatenated with another type string to create "
"a dictionary entry type, which usually appears inside of an array to form a "
"dictionary; the type string |$_1_$|<literal>a{sd}</literal>|$_1_$|, for "
"example, is the type of a dictionary that maps strings to double precision "
"floating point values. </para> <para> The first type (the basic type) is the "
"key type and the second type is the value type.  The reason that the first "
"type is restricted to being a basic type is so that it can easily be hashed. "
"</para> </entry> </row> <row> <entry> <para> <literal>*</literal> </para> </"
"entry> <entry> <para> the type string of %G_VARIANT_TYPE_ANY; the indefinite "
"type that is a supertype of all types.  Note that, as with all type strings, "
"this character represents exactly one type.  It cannot be used inside of "
"tuples to mean |$_1_$|any number of items|$_1_$|. </para> </entry> </row> </"
"tbody> </tgroup> </informaltable> <para> Any type string of a container that "
"contains an indefinite type is, itself, an indefinite type.  For example, "
"the type string |$_1_$|<literal>a*</literal>|$_1_$| (corresponding to "
"%G_VARIANT_TYPE_ARRAY) is an indefinite type that is a supertype of every "
"array type. |$_1_$|<literal>(*s)</literal>|$_1_$| is a supertype of all "
"tuples that contain exactly two items where the second item is a string. </"
"para> <para> |$_1_$|<literal>a{?*}</literal>|$_1_$| is an indefinite type "
"that is a supertype of all arrays containing dictionary entries where the "
"key is any basic type and the value is any type at all.  This is, by "
"definition, a dictionary, so this type string corresponds to "
"%G_VARIANT_TYPE_DICTIONARY.  Note that, due to the restriction that the key "
"of a dictionary entry must be a basic type, |$_1_$|<literal>{**}</literal>|"
"$_1_$| is not a valid type string. </para> </refsect2>"
msgstr ""

# used by: g_variant_type_hash:
#: gvarianttype.c:981:1
msgid "@returns: the hash value"
msgstr ""

# #used by: g_variant_type_hash:
#: gvarianttype.c:983:1
msgid "Hashes @type."
msgstr ""

# #used by: g_variant_type_hash:
#: gvarianttype.c:985:3
msgid ""
"The argument type of @type is only #gconstpointer to allow use with "
"#GHashTable without function pointer casting.  A valid #GVariantType must be "
"provided."
msgstr ""

# #used by: G_VARIANT_TYPE_UINT64:
#: gvarianttype.h:102:3
msgid ""
"The type of an integer value that can range from 0 to 18446744073709551616.  "
"That's a really big number, but a Rubik's cube can have a bit more than "
"twice as many possible positions."
msgstr ""

# #used by: G_VARIANT_TYPE_DOUBLE:
#: gvarianttype.h:111:5
msgid ""
"The type of a double precision IEEE754 floating point number. These guys go "
"up to about 1.80e308 (plus and minus) but miss out on some numbers in "
"between.  In any case, that's far greater than the estimated number of "
"fundamental particles in the observable universe."
msgstr ""

# #used by: G_VARIANT_TYPE_STRING:
#: gvarianttype.h:122:1
msgid ""
"The type of a string.  |$_1_$||$_1_$| is a string.  %NULL is not a string."
msgstr ""

# #used by: G_VARIANT_TYPE_OBJECT_PATH:
#: gvarianttype.h:129:3
msgid ""
"The type of a DBus object reference.  These are strings of a specific format "
"used to identify objects at a given destination on the bus."
msgstr ""

# #used by: G_VARIANT_TYPE_OBJECT_PATH:
#: gvarianttype.h:133:3
msgid ""
"If you are not interacting with DBus, then there is no reason to make use of "
"this type.  If you are, then the DBus specification contains a precise "
"description of valid object paths."
msgstr ""

# #used by: G_VARIANT_TYPE_SIGNATURE:
#: gvarianttype.h:142:2
msgid ""
"The type of a DBus type signature.  These are strings of a specific format "
"used as type signatures for DBus methods and messages."
msgstr ""

# #used by: G_VARIANT_TYPE_SIGNATURE:
#: gvarianttype.h:145:3
msgid ""
"If you are not interacting with DBus, then there is no reason to make use of "
"this type.  If you are, then the DBus specification contains a precise "
"description of valid signature strings."
msgstr ""

# #used by: G_VARIANT_TYPE_VARIANT:
#: gvarianttype.h:154:2
msgid ""
"The type of a box that contains any other value (including another variant)."
msgstr ""

# #used by: G_VARIANT_TYPE_HANDLE:
#: gvarianttype.h:162:3
msgid ""
"The type of a 32bit signed integer value, that by convention, is used as an "
"index into an array of file descriptors that are sent alongside a DBus "
"message."
msgstr ""

# #used by: G_VARIANT_TYPE_HANDLE:
#: gvarianttype.h:166:2
msgid ""
"If you are not interacting with DBus, then there is no reason to make use of "
"this type."
msgstr ""

# #used by: G_VARIANT_TYPE_UNIT:
#: gvarianttype.h:174:2
msgid ""
"The empty tuple type.  Has only one instance.  Known also as |$_1_$|triv|$_1_"
"$| or |$_1_$|void|$_1_$|."
msgstr ""

# #used by: G_VARIANT_TYPE_ANY:
#: gvarianttype.h:182:2
msgid ""
"An indefinite type that is a supertype of every type (including itself)."
msgstr ""

# #used by: G_VARIANT_TYPE_BASIC:
#: gvarianttype.h:190:2
msgid ""
"An indefinite type that is a supertype of every basic (ie: non-container) "
"type."
msgstr ""

# #used by: G_VARIANT_TYPE_MAYBE:
#: gvarianttype.h:198:1
msgid "An indefinite type that is a supertype of every maybe type."
msgstr ""

# #used by: G_VARIANT_TYPE_ARRAY:
#: gvarianttype.h:205:1
msgid "An indefinite type that is a supertype of every array type."
msgstr ""

# #used by: G_VARIANT_TYPE_TUPLE:
#: gvarianttype.h:212:2
msgid ""
"An indefinite type that is a supertype of every tuple type, regardless of "
"the number of items in the tuple."
msgstr ""

# #used by: G_VARIANT_TYPE_DICT_ENTRY:
#: gvarianttype.h:220:2
msgid "An indefinite type that is a supertype of every dictionary entry type."
msgstr ""

# #used by: G_VARIANT_TYPE_DICTIONARY:
#: gvarianttype.h:228:3
msgid ""
"An indefinite type that is a supertype of every dictionary type -- that is, "
"any array type that has an element type equal to any dictionary entry type."
msgstr ""

# #used by: G_VARIANT_TYPE_STRING_ARRAY:
#: gvarianttype.h:237:1
msgid "The type of an array of strings."
msgstr ""

# #used by: G_VARIANT_TYPE_BYTESTRING:
#: gvarianttype.h:244:4
msgid ""
"The type of an array of bytes.  This type is commonly used to pass around "
"strings that may not be valid utf8.  In that case, the convention is that "
"the nul terminator character should be included as the last character in the "
"array."
msgstr ""

# #used by: G_VARIANT_TYPE_BYTESTRING_ARRAY:
#: gvarianttype.h:254:1
msgid "The type of an array of byte strings (an array of arrays of bytes)."
msgstr ""

# used by: G_VARIANT_TYPE:
#: gvarianttype.h:261:1
msgid "@type_string: a well-formed #GVariantType type string"
msgstr ""

# #used by: G_VARIANT_TYPE:
#: gvarianttype.h:263:3
msgid ""
"Converts a string to a const #GVariantType.  Depending on the current "
"debugging level, this function may perform a runtime check to ensure that "
"@string is a valid GVariant type string."
msgstr ""

# #used by: G_VARIANT_TYPE:
#: gvarianttype.h:267:2
msgid ""
"It is always a programmer error to use this macro with an invalid type "
"string."
msgstr ""

# #used by: GVariantType:
#: gvarianttype.h:38:1
msgid "A type in the GVariant type system."
msgstr ""

# #used by: GVariantType:
#: gvarianttype.h:40:3
msgid ""
"Two types may not be compared by value; use g_variant_type_equal() or "
"g_variant_type_is_subtype().  May be copied using g_variant_type_copy() and "
"freed using g_variant_type_free()."
msgstr ""

# #used by: G_VARIANT_TYPE_BOOLEAN:
#: gvarianttype.h:49:1
msgid "The type of a value that can be either %TRUE or %FALSE."
msgstr ""

# #used by: G_VARIANT_TYPE_BYTE:
#: gvarianttype.h:56:1
msgid "The type of an integer value that can range from 0 to 255."
msgstr ""

# #used by: G_VARIANT_TYPE_INT16:
#: gvarianttype.h:63:1
msgid "The type of an integer value that can range from -32768 to 32767."
msgstr ""

# #used by: G_VARIANT_TYPE_UINT16:
#: gvarianttype.h:70:2
msgid ""
"The type of an integer value that can range from 0 to 65535. There were "
"about this many people living in Toronto in the 1870s."
msgstr ""

# #used by: G_VARIANT_TYPE_INT32:
#: gvarianttype.h:78:2
msgid ""
"The type of an integer value that can range from -2147483648 to 2147483647."
msgstr ""

# #used by: G_VARIANT_TYPE_UINT32:
#: gvarianttype.h:86:2
msgid ""
"The type of an integer value that can range from 0 to 4294967295. That's one "
"number for everyone who was around in the late 1970s."
msgstr ""

# #used by: G_VARIANT_TYPE_INT64:
#: gvarianttype.h:94:2
msgid ""
"The type of an integer value that can range from -9223372036854775808 to "
"9223372036854775807."
msgstr ""
