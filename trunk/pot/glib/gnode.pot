# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-14 21:51-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

# used by: g_node_last_child:
#: gnode.c:1014:1
msgid "@node: a #GNode (must not be %NULL)"
msgstr ""

# #used by: g_node_last_child:
#: gnode.c:1016:1
msgid "Gets the last child of a #GNode."
msgstr ""

# #used by: g_node_last_child:
#: gnode.c:1018:1
msgid "Returns: the last child of @node, or %NULL if @node has no children"
msgstr ""

# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_node_push_allocator:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_node_pop_allocator:
#: gnode.c:102:3 gnode.c:117:3
msgid ""
"Deprecated:2.10: It does nothing, since #GNode has been converted to the "
"<link linkend=|$_1_$|glib-Memory-Slices|$_1_$|>slice allocator</link>"
msgstr ""

# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: G_NODE_IS_ROOT:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: G_NODE_IS_LEAF:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_prev_sibling:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_next_sibling:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_first_child:
#: gnode.c:1035:1 gnode.c:1060:1 gnode.c:1085:1 gnode.c:1126:1 gnode.c:1159:1
#: gnode.c:1190:1 gnode.c:1213:1 gnode.c:1233:1 gnode.c:201:1 gnode.c:240:1
#: gnode.c:419:1 gnode.c:438:1 gnode.c:467:1 gnode.h:106:1 gnode.h:249:1
#: gnode.h:261:1 gnode.h:273:1 gnode.h:93:1
msgid "@node: a #GNode"
msgstr ""

# used by: g_node_nth_child:
#: gnode.c:1036:1
msgid "@n: the index of the desired child"
msgstr ""

# #used by: g_node_nth_child:
#: gnode.c:1038:3
msgid ""
"Gets a child of a #GNode, using the given index. The first child is at index "
"0. If the index is too big, %NULL is returned."
msgstr ""

# #used by: g_node_nth_child:
#: gnode.c:1042:1
msgid "Returns: the child of @node at index @n"
msgstr ""

# #used by: g_node_n_children:
#: gnode.c:1062:1
msgid "Gets the number of children of a #GNode."
msgstr ""

# #used by: g_node_n_children:
#: gnode.c:1064:1
msgid "Returns: the number of children of @node"
msgstr ""

# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_find:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_find_child:
#: gnode.c:1086:2 gnode.c:937:2
msgid ""
"@flags: which types of children are to be searched, one of %G_TRAVERSE_ALL, "
"%G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES"
msgstr ""

# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_find:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_find_child:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_child_index:
#: gnode.c:1088:1 gnode.c:1160:1 gnode.c:939:1
msgid "@data: the data to find"
msgstr ""

# #used by: g_node_find_child:
#: gnode.c:1090:1
msgid "Finds the first child of a #GNode with the given data."
msgstr ""

# #used by: g_node_find_child:
#: gnode.c:1092:1
msgid "Returns: the found child #GNode, or %NULL if the data is not found"
msgstr ""

# #used by: g_node_pop_allocator:
#: gnode.c:111:2
msgid ""
"Restores the previous #GAllocator, used when allocating #GNode elements."
msgstr ""

# used by: g_node_child_position:
#: gnode.c:1127:1
msgid "@child: a child of @node"
msgstr ""

# #used by: g_node_child_position:
#: gnode.c:1129:3
msgid ""
"Gets the position of a #GNode with respect to its siblings. @child must be a "
"child of @node. The first child is numbered 0, the second 1, and so on."
msgstr ""

# #used by: g_node_child_position:
#: gnode.c:1133:1
msgid "Returns: the position of @child with respect to its siblings"
msgstr ""

# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_node_push_allocator:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_node_pop_allocator:
#: gnode.c:114:2 gnode.c:99:2
msgid ""
"Note that this function is not available if GLib has been compiled with "
"<option>--disable-mem-pools</option>"
msgstr ""

# #used by: g_node_child_index:
#: gnode.c:1162:2
msgid ""
"Gets the position of the first child of a #GNode which contains the given "
"data."
msgstr ""

# #used by: g_node_child_index:
#: gnode.c:1165:2
msgid ""
"Returns: the index of the child of @node which contains @data, or -1 if the "
"data is not found"
msgstr ""

# #used by: g_node_first_sibling:
#: gnode.c:1192:2
msgid ""
"Gets the first sibling of a #GNode. This could possibly be the node itself."
msgstr ""

# #used by: g_node_first_sibling:
#: gnode.c:1195:1
msgid "Returns: the first sibling of @node"
msgstr ""

# #used by: g_node_last_sibling:
#: gnode.c:1215:2
msgid ""
"Gets the last sibling of a #GNode. This could possibly be the node itself."
msgstr ""

# #used by: g_node_last_sibling:
#: gnode.c:1218:1
msgid "Returns: the last sibling of @node"
msgstr ""

# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_traverse:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_children_foreach:
#: gnode.c:1234:2 gnode.c:838:2
msgid ""
"@flags: which types of children are to be visited, one of %G_TRAVERSE_ALL, "
"%G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES"
msgstr ""

# used by: g_node_children_foreach:
#: gnode.c:1236:1
msgid "@func: the function to call for each visited node"
msgstr ""

# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_traverse:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_children_foreach:
#: gnode.c:1237:1 gnode.c:845:1
msgid "@data: user data to pass to the function"
msgstr ""

# #used by: g_node_children_foreach:
#: gnode.c:1239:2
msgid ""
"Calls a function for each of the children of a #GNode. Note that it doesn't "
"descend beneath the child nodes."
msgstr ""

# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_reverse_children:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: GNodeTraverseFunc:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: GNodeForeachFunc:
#: gnode.c:1244:1 gnode.c:492:1 gnode.c:869:1
msgid "@node: a #GNode."
msgstr ""

# used by: GNodeForeachFunc:
#: gnode.c:1245:1
msgid "@data: user data passed to g_node_children_foreach()."
msgstr ""

# #used by: GNodeForeachFunc:
#: gnode.c:1247:3
msgid ""
"Specifies the type of function passed to g_node_children_foreach(). The "
"function is called with each child node, together with the user data passed "
"to g_node_children_foreach()."
msgstr ""

# used by: g_node_new:
#: gnode.c:129:1
msgid "@data: the data of the new node"
msgstr ""

# #used by: g_node_new:
#: gnode.c:131:2
msgid ""
"Creates a new #GNode containing the given data. Used to create the first "
"node in a tree."
msgstr ""

# #used by: g_node_new:
#: gnode.c:134:1
msgid "Returns: a new #GNode"
msgstr ""

# used by: g_node_destroy:
#: gnode.c:159:1
msgid "@root: the root of the tree/subtree to destroy"
msgstr ""

# #used by: g_node_destroy:
#: gnode.c:161:2
msgid ""
"Removes @root and its children from the tree, freeing any memory allocated."
msgstr ""

# used by: g_node_unlink:
#: gnode.c:177:1
msgid "@node: the #GNode to unlink, which becomes the root of a new tree"
msgstr ""

# #used by: g_node_unlink:
#: gnode.c:179:1
msgid "Unlinks a #GNode from a tree, resulting in two separate trees."
msgstr ""

# used by: g_node_copy_deep:
#: gnode.c:202:2
msgid ""
"@copy_func: the function which is called to copy the data inside each node, "
"or %NULL to use the original data."
msgstr ""

# used by: g_node_copy_deep:
#: gnode.c:204:1
msgid "@data: data to pass to @copy_func"
msgstr ""

# #used by: g_node_copy_deep:
#: gnode.c:206:1
msgid "Recursively copies a #GNode and its data."
msgstr ""

# #used by: g_node_copy_deep:
#: gnode.c:208:1
msgid "Return value: a new #GNode containing copies of the data in @node."
msgstr ""

# #used by: GCopyFunc:
#: gnode.c:210:1 gnode.h:75:1
msgid "Since: 2.4"
msgstr ""

# #used by: g_node_copy:
#: gnode.c:242:2
msgid ""
"Recursively copies a #GNode (but does not deep-copy the data inside the "
"nodes, see g_node_copy_deep() if you need that)."
msgstr ""

# #used by: g_node_copy:
#: gnode.c:245:1
msgid "Returns: a new #GNode containing the same data pointers"
msgstr ""

# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_insert:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_insert_before:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_insert_after:
#: gnode.c:267:1 gnode.c:297:1 gnode.c:354:1
msgid "@parent: the #GNode to place @node under"
msgstr ""

# used by: g_node_insert:
#: gnode.c:268:2
msgid ""
"@position: the position to place @node at, with respect to its siblings If "
"position is -1, @node is inserted as the last child of @parent"
msgstr ""

# used by: g_node_append:
#: gnode.c:270:1 gnode.c:300:1 gnode.c:357:1 gnode.c:402:1 gnode.h:148:1
msgid "@node: the #GNode to insert"
msgstr ""

# #used by: g_node_insert:
#: gnode.c:272:1
msgid "Inserts a #GNode beneath the parent at the given position."
msgstr ""

# #used by: g_node_append:
#: gnode.c:274:1 gnode.c:304:1 gnode.c:361:1 gnode.c:406:1 gnode.h:152:1
msgid "Returns: the inserted #GNode"
msgstr ""

# used by: g_node_insert_before:
#: gnode.c:298:2
msgid ""
"@sibling: the sibling #GNode to place @node before. If sibling is %NULL, the "
"node is inserted as the last child of @parent."
msgstr ""

# #used by: g_node_insert_before:
#: gnode.c:302:1
msgid "Inserts a #GNode beneath the parent before the given sibling."
msgstr ""

# used by: g_node_insert_after:
#: gnode.c:355:2
msgid ""
"@sibling: the sibling #GNode to place @node after. If sibling is %NULL, the "
"node is inserted as the first child of @parent."
msgstr ""

# #used by: g_node_insert_after:
#: gnode.c:359:1
msgid "Inserts a #GNode beneath the parent after the given sibling."
msgstr ""

# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_append:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_insert_data:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_insert_data_before:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_prepend_data:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_append_data:
#: gnode.c:401:1 gnode.h:147:1 gnode.h:159:1 gnode.h:173:1 gnode.h:186:1
#: gnode.h:198:1
msgid "@parent: the #GNode to place the new #GNode under"
msgstr ""

# #used by: g_node_prepend:
#: gnode.c:404:1
msgid "Inserts a #GNode as the first child of the given parent."
msgstr ""

# used by: SECTION: trees-nary
#: gnode.c:42:1
msgid "@title: N-ary Trees"
msgstr ""

# #used by: g_node_get_root:
#: gnode.c:421:1
msgid "Gets the root of a tree."
msgstr ""

# #used by: g_node_get_root:
#: gnode.c:423:1
msgid "Returns: the root of the tree"
msgstr ""

# used by: SECTION: trees-nary
#: gnode.c:43:1
msgid "@short_description: trees of data with any number of branches"
msgstr ""

# used by: g_node_is_ancestor:
#: gnode.c:439:1
msgid "@descendant: a #GNode"
msgstr ""

# #used by: g_node_is_ancestor:
#: gnode.c:441:3
msgid ""
"Returns %TRUE if @node is an ancestor of @descendant. This is true if node "
"is the parent of @descendant, or if node is the grandparent of @descendant "
"etc."
msgstr ""

# #used by: g_node_is_ancestor:
#: gnode.c:445:1
msgid "Returns: %TRUE if @node is an ancestor of @descendant"
msgstr ""

# #used by: SECTION: trees-nary
#: gnode.c:45:2
msgid ""
"The #GNode struct and its associated functions provide a N-ary tree data "
"structure, where nodes in the tree can contain arbitrary data."
msgstr ""

# #used by: g_node_depth:
#: gnode.c:469:1
msgid "Gets the depth of a #GNode."
msgstr ""

# #used by: g_node_depth:
#: gnode.c:471:2
msgid ""
"If @node is %NULL the depth is 0. The root node has a depth of 1. For the "
"children of the root node the depth is 2. And so on."
msgstr ""

# #used by: g_node_depth:
#: gnode.c:474:1
msgid "Returns: the depth of the #GNode"
msgstr ""

# #used by: SECTION: trees-nary
#: gnode.c:48:1
msgid "To create a new tree use g_node_new()."
msgstr ""

# #used by: g_node_reverse_children:
#: gnode.c:494:2
msgid ""
"Reverses the order of the children of a #GNode. (It doesn't change the order "
"of the grandchildren.)"
msgstr ""

# #used by: SECTION: trees-nary
#: gnode.c:50:2
msgid ""
"To insert a node into a tree use g_node_insert(), g_node_insert_before(), "
"g_node_append() and g_node_prepend()."
msgstr ""

# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_max_height:
# #-#-#-#-#  gnode.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_n_nodes:
#: gnode.c:519:1 gnode.c:990:1
msgid "@root: a #GNode"
msgstr ""

# #used by: g_node_max_height:
#: gnode.c:521:2
msgid ""
"Gets the maximum height of all branches beneath a #GNode. This is the "
"maximum distance from the #GNode to all leaf nodes."
msgstr ""

# #used by: g_node_max_height:
#: gnode.c:524:2
msgid ""
"If @root is %NULL, 0 is returned. If @root has no children, 1 is returned. "
"If @root has children, 2 is returned. And so on."
msgstr ""

# #used by: g_node_max_height:
#: gnode.c:527:1
msgid "Returns: the maximum height of the tree beneath @root"
msgstr ""

# #used by: SECTION: trees-nary
#: gnode.c:53:3
msgid ""
"To create a new node and insert it into a tree use g_node_insert_data(), "
"g_node_insert_data_before(), g_node_append_data() and g_node_prepend_data()."
msgstr ""

# #used by: SECTION: trees-nary
#: gnode.c:57:1
msgid "To reverse the children of a node use g_node_reverse_children()."
msgstr ""

# #used by: SECTION: trees-nary
#: gnode.c:59:5
msgid ""
"To find a node use g_node_get_root(), g_node_find(), g_node_find_child(), "
"g_node_child_index(), g_node_child_position(), g_node_first_child(), "
"g_node_last_child(), g_node_nth_child(), g_node_first_sibling(), "
"g_node_prev_sibling(), g_node_next_sibling() or g_node_last_sibling()."
msgstr ""

# #used by: SECTION: trees-nary
#: gnode.c:65:3
msgid ""
"To get information about a node or tree use G_NODE_IS_LEAF(), G_NODE_IS_ROOT"
"(), g_node_depth(), g_node_n_nodes(), g_node_n_children(), g_node_is_ancestor"
"() or g_node_max_height()."
msgstr ""

# #used by: SECTION: trees-nary
#: gnode.c:69:2
msgid ""
"To traverse a tree, calling a function for each node visited in the "
"traversal, use g_node_traverse() or g_node_children_foreach()."
msgstr ""

# #used by: SECTION: trees-nary
#: gnode.c:72:2
msgid ""
"To remove a node or subtree from a tree use g_node_unlink() or g_node_destroy"
"()."
msgstr ""

# used by: GNode:
#: gnode.c:78:1
msgid "@data: contains the actual data of the node."
msgstr ""

# used by: GNode:
#: gnode.c:79:2
msgid ""
"@next: points to the node's next sibling (a sibling is another #GNode with "
"the same parent)."
msgstr ""

# used by: GNode:
#: gnode.c:81:1
msgid "@prev: points to the node's previous sibling."
msgstr ""

# used by: GNode:
#: gnode.c:82:2
msgid ""
"@parent: points to the parent of the #GNode, or is %NULL if the #GNode is "
"the root of the tree."
msgstr ""

# used by: g_node_traverse:
#: gnode.c:835:1
msgid "@root: the root #GNode of the tree to traverse"
msgstr ""

# used by: g_node_traverse:
#: gnode.c:836:2
msgid ""
"@order: the order in which nodes are visited - %G_IN_ORDER, %G_PRE_ORDER, "
"%G_POST_ORDER, or %G_LEVEL_ORDER."
msgstr ""

# used by: GNode:
#: gnode.c:84:3
msgid ""
"@children: points to the first child of the #GNode.  The other children are "
"accessed by using the @next pointer of each child."
msgstr ""

# used by: g_node_traverse:
#: gnode.c:840:4
msgid ""
"@max_depth: the maximum depth of the traversal. Nodes below this depth will "
"not be visited. If max_depth is -1 all nodes in the tree are visited. If "
"depth is 1, only the root is visited. If depth is 2, the root and its "
"children are visited. And so on."
msgstr ""

# used by: g_node_traverse:
#: gnode.c:844:1
msgid "@func: the function to call for each visited #GNode"
msgstr ""

# #used by: g_node_traverse:
#: gnode.c:847:3
msgid ""
"Traverses a tree starting at the given root #GNode. It calls the given "
"function for each node visited. The traversal can be halted at any point by "
"returning %TRUE from @func."
msgstr ""

# used by: GTraverseFlags:
#: gnode.c:853:3
msgid ""
"@G_TRAVERSE_LEAVES: only leaf nodes should be visited. This name has been "
"introduced in 2.6, for older version use %G_TRAVERSE_LEAFS."
msgstr ""

# used by: GTraverseFlags:
#: gnode.c:856:3
msgid ""
"@G_TRAVERSE_NON_LEAVES: only non-leaf nodes should be visited. This name has "
"been introduced in 2.6, for older version use %G_TRAVERSE_NON_LEAFS."
msgstr ""

# used by: GTraverseFlags:
#: gnode.c:859:1
msgid "@G_TRAVERSE_ALL: all nodes should be visited."
msgstr ""

# used by: GTraverseFlags:
#: gnode.c:860:1
msgid "@G_TRAVERSE_MASK: a mask of all traverse flags."
msgstr ""

# used by: GTraverseFlags:
#: gnode.c:861:1
msgid "@G_TRAVERSE_LEAFS: identical to %G_TRAVERSE_LEAVES."
msgstr ""

# used by: GTraverseFlags:
#: gnode.c:862:1
msgid "@G_TRAVERSE_NON_LEAFS: identical to %G_TRAVERSE_NON_LEAVES."
msgstr ""

# #used by: GTraverseFlags:
#: gnode.c:864:2
msgid ""
"Specifies which nodes are visited during several of the tree functions, "
"including g_node_traverse() and g_node_find()."
msgstr ""

# used by: GNodeTraverseFunc:
#: gnode.c:870:1
msgid "@data: user data passed to g_node_traverse()."
msgstr ""

# used by: GNodeTraverseFunc:
#: gnode.c:871:1
msgid "@Returns: %TRUE to stop the traversal."
msgstr ""

# #used by: GNodeTraverseFunc:
#: gnode.c:873:4
msgid ""
"Specifies the type of function passed to g_node_traverse(). The function is "
"called with each of the nodes visited, together with the user data passed to "
"g_node_traverse(). If the function returns %TRUE, then the traversal is "
"stopped."
msgstr ""

# #used by: GNode:
#: gnode.c:88:2
msgid ""
"The #GNode struct represents one node in a <link linkend=|$_1_$|glib-N-ary-"
"Trees|$_1_$|>N-ary Tree</link>. fields"
msgstr ""

# used by: g_node_find:
#: gnode.c:934:1
msgid "@root: the root #GNode of the tree to search"
msgstr ""

# used by: g_node_find:
#: gnode.c:935:2
msgid ""
"@order: the order in which nodes are visited - %G_IN_ORDER, %G_PRE_ORDER, "
"%G_POST_ORDER, or %G_LEVEL_ORDER"
msgstr ""

# used by: g_node_push_allocator:
#: gnode.c:94:1
msgid "@dummy: the #GAllocator to use when allocating #GNode elements."
msgstr ""

# #used by: g_node_find:
#: gnode.c:941:1
msgid "Finds a #GNode in a tree."
msgstr ""

# #used by: g_node_find:
#: gnode.c:943:1
msgid "Returns: the found #GNode, or %NULL if the data is not found"
msgstr ""

# #used by: g_node_push_allocator:
#: gnode.c:96:2
msgid ""
"Sets the allocator to use to allocate #GNode elements. Use "
"g_node_pop_allocator() to restore the previous allocator."
msgstr ""

# used by: g_node_n_nodes:
#: gnode.c:991:2
msgid ""
"@flags: which types of children are to be counted, one of %G_TRAVERSE_ALL, "
"%G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES"
msgstr ""

# #used by: g_node_n_nodes:
#: gnode.c:994:1
msgid "Gets the number of nodes in a tree."
msgstr ""

# #used by: g_node_n_nodes:
#: gnode.c:996:1
msgid "Returns: the number of nodes in the tree"
msgstr ""

# #used by: G_NODE_IS_LEAF:
#: gnode.h:108:1
msgid "Returns %TRUE if a #GNode is a leaf node."
msgstr ""

# #used by: G_NODE_IS_LEAF:
#: gnode.h:110:2
msgid "Returns: %TRUE if the #GNode is a leaf node (i.e. it has no children)"
msgstr ""

# #used by: g_node_append:
#: gnode.h:150:1
msgid "Inserts a #GNode as the last child of the given parent."
msgstr ""

# used by: g_node_insert_data:
#: gnode.h:160:2
msgid ""
"@position: the position to place the new #GNode at. If position is -1, the "
"new #GNode is inserted as the last child of @parent"
msgstr ""

# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_insert_data:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_insert_data_before:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_prepend_data:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# used by: g_node_append_data:
#: gnode.h:162:1 gnode.h:175:1 gnode.h:187:1 gnode.h:199:1
msgid "@data: the data for the new #GNode"
msgstr ""

# #used by: g_node_insert_data:
#: gnode.h:164:1
msgid "Inserts a new #GNode at the given position."
msgstr ""

# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_node_insert_data:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_node_insert_data_before:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_node_prepend_data:
# #-#-#-#-#  gnode.pot~ (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_node_append_data:
#: gnode.h:166:1 gnode.h:179:1 gnode.h:191:1 gnode.h:203:1
msgid "Returns: the new #GNode"
msgstr ""

# used by: g_node_insert_data_before:
#: gnode.h:174:1
msgid "@sibling: the sibling #GNode to place the new #GNode before"
msgstr ""

# #used by: g_node_insert_data_before:
#: gnode.h:177:1
msgid "Inserts a new #GNode before the given sibling."
msgstr ""

# #used by: g_node_prepend_data:
#: gnode.h:189:1
msgid "Inserts a new #GNode as the first child of the given parent."
msgstr ""

# #used by: g_node_append_data:
#: gnode.h:201:1
msgid "Inserts a new #GNode as the last child of the given parent."
msgstr ""

# #used by: g_node_prev_sibling:
#: gnode.h:251:1
msgid "Gets the previous sibling of a #GNode."
msgstr ""

# #used by: g_node_prev_sibling:
#: gnode.h:253:2
msgid ""
"Returns: the previous sibling of @node, or %NULL if @node is the first node "
"or %NULL"
msgstr ""

# #used by: g_node_next_sibling:
#: gnode.h:263:1
msgid "Gets the next sibling of a #GNode."
msgstr ""

# #used by: g_node_next_sibling:
#: gnode.h:265:2
msgid ""
"Returns: the next sibling of @node, or %NULL if @node is the last node or "
"%NULL"
msgstr ""

# #used by: g_node_first_child:
#: gnode.h:275:1
msgid "Gets the first child of a #GNode."
msgstr ""

# #used by: g_node_first_child:
#: gnode.h:277:2
msgid ""
"Returns: the first child of @node, or %NULL if @node is %NULL or has no "
"children"
msgstr ""

# used by: GCopyFunc:
#: gnode.h:67:1
msgid "@src: A pointer to the data which should be copied"
msgstr ""

# used by: GCopyFunc:
#: gnode.h:68:1
msgid "@data: Additional data"
msgstr ""

# #used by: GCopyFunc:
#: gnode.h:70:2
msgid ""
"A function of this signature is used to copy the node data when doing a deep-"
"copy of a tree."
msgstr ""

# #used by: GCopyFunc:
#: gnode.h:73:1
msgid "Returns: A pointer to the copy"
msgstr ""

# #used by: G_NODE_IS_ROOT:
#: gnode.h:95:1
msgid "Returns %TRUE if a #GNode is the root of a tree."
msgstr ""

# #used by: G_NODE_IS_ROOT:
#: gnode.h:97:2
msgid ""
"Returns: %TRUE if the #GNode is the root of a tree (i.e. it has no parent or "
"siblings)"
msgstr ""
