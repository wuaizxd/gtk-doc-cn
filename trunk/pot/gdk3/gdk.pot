# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 20:26-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_seconds_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_seconds: (skip)
#: gdk.c:1010:1 gdk.c:971:1
msgid "@interval: the time between calls to the function, in seconds"
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_idle_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_idle: (skip)
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout: (skip)
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_seconds_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_seconds: (skip)
#: gdk.c:1011:1 gdk.c:764:1 gdk.c:838:1 gdk.c:865:1 gdk.c:945:1 gdk.c:972:1
msgid "@function: function to call"
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_idle_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_idle: (skip)
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout: (skip)
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_seconds_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_seconds: (skip)
#: gdk.c:1012:1 gdk.c:765:1 gdk.c:839:1 gdk.c:866:1 gdk.c:946:1 gdk.c:973:1
msgid "@data:     data to pass to @function"
msgstr ""

#. used by: gdk_threads_add_timeout_seconds: (skip)
#: gdk.c:1014:2
msgid ""
"A wrapper for the common usage of gdk_threads_add_timeout_seconds_full() "
"assigning the default priority, #G_PRIORITY_DEFAULT."
msgstr ""

#. used by: gdk_threads_add_timeout_seconds: (skip)
#: gdk.c:1017:1
msgid "For details, see gdk_threads_add_timeout_full()."
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_idle_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_idle: (skip)
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout: (skip)
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_seconds_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_seconds: (skip)
#: gdk.c:1019:1 gdk.c:810:1 gdk.c:846:1 gdk.c:913:1 gdk.c:953:1 gdk.c:980:1
msgid "Return value: the ID (greater than 0) of the event source."
msgstr ""

#. used by: gdk_threads_add_timeout_seconds: (skip)
#: gdk.c:1021:1
msgid "Since: 2.14"
msgstr ""

#. used by: gdk_get_program_class:
#: gdk.c:1035:4
msgid ""
"Gets the program class. Unless the program class has explicitly been set "
"with gdk_set_program_class() or with the <option>--class</option> "
"commandline option, the default value is the program name (determined with "
"g_get_prgname()) with the first character converted to uppercase."
msgstr ""

#. used by: gdk_get_program_class:
#: gdk.c:1040:1
msgid "Returns: the program class."
msgstr ""

#. used by: gdk_set_program_class:
#: gdk.c:1050:1
msgid "@program_class: a string."
msgstr ""

#. used by: gdk_set_program_class:
#: gdk.c:1052:3
msgid ""
"Sets the program class. The X11 backend uses the program class to set the "
"class name part of the <literal>WM_CLASS</literal> property on toplevel "
"windows; see the ICCCM."
msgstr ""

#. used by: gdk_disable_multidevice:
#: gdk.c:1067:3
msgid ""
"Disables multidevice support in GDK. This call must happen prior to "
"gdk_display_open(), gtk_init(), gtk_init_with_args() or gtk_init_check() in "
"order to take effect."
msgstr ""

#. used by: gdk_disable_multidevice:
#: gdk.c:1071:4
msgid ""
"Most common GTK+ applications won't ever need to call this. Only "
"applications that do mixed GDK/Xlib calls could want to disable multidevice "
"support if such Xlib code deals with input devices in any way and doesn't "
"observe the presence of XInput 2."
msgstr ""

#. used by: gdk_disable_multidevice:
#: gdk.c:1076:1
msgid "Since: 3.0"
msgstr ""

#. used by: gdk_add_option_entries_libgtk_only:
#: gdk.c:204:1
msgid "@group: An option group."
msgstr ""

#. used by: gdk_add_option_entries_libgtk_only:
#: gdk.c:206:2
msgid ""
"Appends gdk option entries to the passed in option group. This is not public "
"API and must not be used by applications."
msgstr ""

#. used by: gdk_parse_args:
#: gdk.c:253:1
msgid "@argc: the number of command line arguments."
msgstr ""

#. used by: gdk_parse_args:
#: gdk.c:254:1
msgid ""
"@argv: (inout) (array length=argc): the array of command line arguments."
msgstr ""

#. used by: gdk_parse_args:
#: gdk.c:256:2
msgid ""
"Parse command line arguments, and store for future use by calls to "
"gdk_display_open()."
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_parse_args:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_init_check:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_init:
#: gdk.c:259:2 gdk.c:354:2 gdk.c:381:2
msgid ""
"Any arguments used by GDK are removed from the array and @argc and @argv are "
"updated accordingly."
msgstr ""

#. used by: gdk_parse_args:
#: gdk.c:262:2
msgid ""
"You shouldn't call this function explicitely if you are using gtk_init(), "
"gtk_init_check(), gdk_init(), or gdk_init_check()."
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_parse_args:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_get_display_arg_name:
#: gdk.c:265:1 gdk.c:307:1
msgid "Since: 2.2"
msgstr ""

#. used by: gdk_get_display_arg_name:
#: gdk.c:301:2
msgid ""
"Gets the display name specified in the command line arguments passed to "
"gdk_init() or gdk_parse_args(), if any."
msgstr ""

#. used by: gdk_get_display_arg_name:
#: gdk.c:304:2
msgid ""
"Returns: the display name, if specified explicitely, otherwise %NULL this "
"string is owned by GTK+ and must not be modified or freed."
msgstr ""

#. used by: gdk_display_open_default_libgtk_only:
#: gdk.c:321:5
msgid ""
"Opens the default display specified by command line arguments or environment "
"variables, sets it as the default display, and returns it.  gdk_parse_args "
"must have been called first. If the default display has previously been set, "
"simply returns that. An internal function that should not be used by "
"applications."
msgstr ""

#. used by: gdk_display_open_default_libgtk_only:
#: gdk.c:327:2
msgid ""
"Return value: (transfer none): the default display, if it could be opened, "
"otherwise %NULL."
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_init_check:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_init:
#: gdk.c:348:1 gdk.c:374:1
msgid "@argc: (inout): the number of command line arguments."
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_init_check:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_init:
#: gdk.c:349:1 gdk.c:375:1
msgid ""
"@argv: (array length=argc) (inout): the array of command line arguments."
msgstr ""

#. used by: gdk_init_check:
#: gdk.c:351:2
msgid ""
"Initializes the GDK library and connects to the windowing system, returning "
"%TRUE on success."
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_init_check:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_init:
#: gdk.c:357:2 gdk.c:384:2
msgid ""
"GTK+ initializes GDK in gtk_init() and so this function is not usually "
"needed by GTK+ applications."
msgstr ""

#. used by: gdk_init_check:
#: gdk.c:360:1
msgid "Returns: %TRUE if initialization succeeded."
msgstr ""

#. used by: gdk_init:
#: gdk.c:377:3
msgid ""
"Initializes the GDK library and connects to the windowing system. If "
"initialization fails, a warning message is output and the application "
"terminates with a call to <literal>exit(1)</literal>."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:402:1
msgid "@Short_description: Functions for using GDK in multi-threaded programs"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:403:1
msgid "@Title: Threads"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:405:2
msgid ""
"For thread safety, GDK relies on the thread primitives in GLib, and on the "
"thread-safe GLib main loop."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:408:4
msgid ""
"GLib is completely thread safe (all global data is automatically locked), "
"but individual data structure instances are not automatically locked for "
"performance reasons. So e.g. you must coordinate accesses to the same "
"#GHashTable from multiple threads."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:413:4
msgid ""
"GTK+ is \"thread aware\" but not thread safe &mdash; it provides a global "
"lock controlled by gdk_threads_enter()/gdk_threads_leave() which protects "
"all use of GTK+. That is, only one thread can use GTK+ at any given time."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:418:3
msgid ""
"Unfortunately the above holds with the X11 backend only. With the Win32 "
"backend, GDK calls should not be attempted from multiple threads at all."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:422:2
msgid ""
"You must call g_thread_init() and gdk_threads_init() before executing any "
"other GTK+ or GDK functions in a threaded GTK+ program."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:425:8
msgid ""
"Idles, timeouts, and input functions from GLib, such as g_idle_add(), are "
"executed outside of the main GTK+ lock. So, if you need to call GTK+ inside "
"of such a callback, you must surround the callback with a gdk_threads_enter"
"()/gdk_threads_leave() pair or use gdk_threads_add_idle_full() which does "
"this for you. However, event dispatching from the mainloop is still executed "
"within the main GTK+ lock, so callback functions connected to event signals "
"like #GtkWidget::button-press-event, do not need thread protection."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:434:3
msgid ""
"In particular, this means, if you are writing widgets that might be used in "
"threaded programs, you <emphasis>must</emphasis> surround timeouts and idle "
"functions in this matter."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:438:2
msgid ""
"As always, you must also surround any calls to GTK+ not made within a signal "
"handler with a gdk_threads_enter()/gdk_threads_leave() pair."
msgstr ""

#. used by: SECTION:general
#: gdk.c:44:1
msgid "@Short_description: Library initialization and miscellaneous functions"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:441:7
msgid ""
"Before calling gdk_threads_leave() from a thread other than your main "
"thread, you probably want to call gdk_flush() to send all pending commands "
"to the windowing system. (The reason you don't need to do this from the main "
"thread is that GDK always automatically flushes pending commands when it "
"runs out of incoming events to process and has to sleep while waiting for "
"more events.)"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:449:8
msgid ""
"A minimal main program for a threaded GTK+ application looks like: "
"<informalexample> <programlisting role=\"C\"> int main (int argc, char *argv"
"[]) { GtkWidget *window;"
msgstr ""

#. used by: SECTION:general
#: gdk.c:45:1
msgid "@Title: General"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:458:3
msgid ""
"g_thread_init (NULL); gdk_threads_init (<!-- -->); gdk_threads_enter (<!-- --"
">);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:462:1
msgid "gtk_init (&argc, &argv);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:464:2
msgid "window = create_window (<!-- -->); gtk_widget_show (window);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:467:2
msgid "gtk_main (<!-- -->); gdk_threads_leave (<!-- -->);"
msgstr ""

#. used by: SECTION:general
#: gdk.c:47:2
msgid ""
"This section describes the GDK initialization functions and miscellaneous "
"utility functions."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:470:4 gdk.c:621:4
msgid "return 0; } </programlisting> </informalexample>"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:475:6
msgid ""
"Callbacks require a bit of attention. Callbacks from GTK+ signals are made "
"within the GTK+ lock. However callbacks from GLib (timeouts, IO callbacks, "
"and idle functions) are made outside of the GTK+ lock. So, within a signal "
"handler you do not need to call gdk_threads_enter(), but within the other "
"types of callbacks, you do."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:482:23
msgid ""
"Erik Mouw contributed the following code example to illustrate how to use "
"threads within GTK+ programs. <informalexample> <programlisting role=\"C\"> /"
"<!----"
">*------------------------------------------------------------------------- "
"* Filename:      gtk-thread.c * Version:       0.99.1 * Copyright:     "
"Copyright (C) 1999, Erik Mouw * Author:        Erik Mouw &lt;J.A.K.Mouw@its."
"tudelft.nl&gt; * Description:   GTK threads example. * Created at:    Sun "
"Oct 17 21:27:09 1999 * Modified by:   Erik Mouw &lt;J.A.K.Mouw@its.tudelft."
"nl&gt; * Modified at:   Sun Oct 24 17:21:41 1999 "
"*-----------------------------------------------------------------------"
"*<!---->/ /<!---->* * Compile with: * * cc -o gtk-thread gtk-thread.c `gtk-"
"config --cflags --libs gthread` * * Thanks to Sebastian Wilhelmi and Owen "
"Taylor for pointing out some * bugs. * *<!---->/"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:506:7
msgid ""
"#include <stdio.h> #include <stdlib.h> #include <unistd.h> #include <time.h> "
"#include <gtk/gtk.h> #include <glib.h> #include <pthread.h>"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:514:2
msgid "#define YES_IT_IS    (1) #define NO_IT_IS_NOT (0)"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:517:5
msgid "typedef struct { GtkWidget *label; int what; } yes_or_no_args;"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:523:2
msgid ""
"G_LOCK_DEFINE_STATIC (yes_or_no); static volatile int yes_or_no = YES_IT_IS;"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:526:4
msgid ""
"void destroy (GtkWidget *widget, gpointer data) { gtk_main_quit (<!-- -->); }"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:531:4
msgid ""
"void *argument_thread (void *args) { yes_or_no_args *data = (yes_or_no_args "
"*)args; gboolean say_something;"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:536:4
msgid ""
"for (;;) { /<!---->* sleep a while *<!---->/ sleep(rand(<!-- -->) / "
"(RAND_MAX / 3) + 1);"
msgstr ""

#. used by: GDK_WINDOWING_X11:
#: gdk.c:54:2
msgid ""
"The #GDK_WINDOWING_X11 macro is defined if the X11 backend is supported."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:541:2
msgid "/<!---->* lock the yes_or_no_variable *<!---->/ G_LOCK(yes_or_no);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:544:2
msgid ""
"/<!---->* do we have to say something? *<!---->/ say_something = (yes_or_no !"
"= data->what);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:547:5
msgid ""
"if(say_something) { /<!---->* set the variable *<!---->/ yes_or_no = data-"
">what; }"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:553:2
msgid "/<!---->* Unlock the yes_or_no variable *<!---->/ G_UNLOCK (yes_or_no);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:556:4
msgid ""
"if (say_something) { /<!---->* get GTK thread lock *<!---->/ "
"gdk_threads_enter (<!-- -->);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:561:5
msgid ""
"/<!---->* set label text *<!---->/ if(data->what == YES_IT_IS) "
"gtk_label_set_text (GTK_LABEL (data->label), \"O yes, it is!\"); else "
"gtk_label_set_text (GTK_LABEL (data->label), \"O no, it isn't!\");"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:567:4
msgid ""
"/<!---->* release GTK thread lock *<!---->/ gdk_threads_leave (<!-- -->); } }"
msgstr ""

#. used by: GDK_WINDOWING_X11:
#: gdk.c:57:1
msgid "Use this macro to guard code that is specific to the X11 backend."
msgstr ""

#. used by: SECTION:threads
#: gdk.c:572:2
msgid "return NULL; }"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:575:6
msgid ""
"int main (int argc, char *argv[]) { GtkWidget *window; GtkWidget *label; "
"yes_or_no_args yes_args, no_args; pthread_t no_tid, yes_tid;"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:582:4
msgid ""
"/<!---->* init threads *<!---->/ g_thread_init (NULL); gdk_threads_init "
"(<!-- -->); gdk_threads_enter (<!-- -->);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:587:2
msgid "/<!---->* init gtk *<!---->/ gtk_init(&argc, &argv);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:590:2
msgid ""
"/<!---->* init random number generator *<!---->/ srand ((unsigned int) time "
"(NULL));"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:593:2
msgid ""
"/<!---->* create a window *<!---->/ window = gtk_window_new "
"(GTK_WINDOW_TOPLEVEL);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:596:1
msgid "g_signal_connect (window, \"destroy\", G_CALLBACK (destroy), NULL);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:598:1
msgid "gtk_container_set_border_width (GTK_CONTAINER (window), 10);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:600:3
msgid ""
"/<!---->* create a label *<!---->/ label = gtk_label_new (\"And now for "
"something completely different ...\"); gtk_container_add (GTK_CONTAINER "
"(window), label);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:604:3
msgid ""
"/<!---->* show everything *<!---->/ gtk_widget_show (label); gtk_widget_show "
"(window);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:608:4
msgid ""
"/<!---->* create the threads *<!---->/ yes_args.label = label; yes_args.what "
"= YES_IT_IS; pthread_create (&yes_tid, NULL, argument_thread, &yes_args);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:613:3
msgid ""
"no_args.label = label; no_args.what = NO_IT_IS_NOT; pthread_create (&no_tid, "
"NULL, argument_thread, &no_args);"
msgstr ""

#. used by: SECTION:threads
#: gdk.c:617:3
msgid ""
"/<!---->* enter the GTK main loop *<!---->/ gtk_main (<!-- -->); "
"gdk_threads_leave (<!-- -->);"
msgstr ""

#. used by: GDK_WINDOWING_WIN32:
#: gdk.c:63:2
msgid ""
"The #GDK_WINDOWING_WIN32 macro is defined if the Win32 backend is supported."
msgstr ""

#. used by: gdk_threads_enter:
#: gdk.c:631:4
msgid ""
"This macro marks the beginning of a critical section in which GDK and GTK+ "
"functions can be called safely and without causing race conditions.  Only "
"one thread at a time can be in such a critial section."
msgstr ""

#. used by: gdk_threads_leave:
#: gdk.c:646:1
msgid "Leaves a critical region begun with gdk_threads_enter()."
msgstr ""

#. used by: GDK_WINDOWING_WIN32:
#: gdk.c:66:1
msgid "Use this macro to guard code that is specific to the Win32 backend."
msgstr ""

#. used by: gdk_threads_init:
#: gdk.c:672:3
msgid ""
"Initializes GDK so that it can be used from multiple threads in conjunction "
"with gdk_threads_enter() and gdk_threads_leave(). g_thread_init() must be "
"called previous to this function."
msgstr ""

#. used by: gdk_threads_init:
#: gdk.c:676:2
msgid ""
"This call must be made before any use of the main loop from GTK+; to be "
"safe, call it before gtk_init()."
msgstr ""

#. used by: gdk_threads_set_lock_functions: (skip)
#: gdk.c:694:1
msgid "@enter_fn:   function called to guard GDK"
msgstr ""

#. used by: gdk_threads_set_lock_functions: (skip)
#: gdk.c:695:1
msgid "@leave_fn: function called to release the guard"
msgstr ""

#. used by: gdk_threads_set_lock_functions: (skip)
#: gdk.c:697:7
msgid ""
"Allows the application to replace the standard method that GDK uses to "
"protect its data structures. Normally, GDK creates a single #GMutex that is "
"locked by gdk_threads_enter(), and released by gdk_threads_leave(); using "
"this function an application provides, instead, a function @enter_fn that is "
"called by gdk_threads_enter() and a function @leave_fn that is called by "
"gdk_threads_leave()."
msgstr ""

#. used by: gdk_threads_set_lock_functions: (skip)
#: gdk.c:705:3
msgid ""
"The functions must provide at least same locking functionality as the "
"default implementation, but can also do extra application specific "
"processing."
msgstr ""

#. used by: gdk_threads_set_lock_functions: (skip)
#: gdk.c:709:4
msgid ""
"As an example, consider an application that has its own recursive lock that "
"when held, holds the GTK+ lock as well. When GTK+ unlocks the GTK+ lock when "
"entering a recursive main loop, the application must temporarily release its "
"lock as well."
msgstr ""

#. used by: gdk_threads_set_lock_functions: (skip)
#: gdk.c:714:1
msgid "Most threaded GTK+ apps won't need to use this method."
msgstr ""

#. used by: gdk_threads_set_lock_functions: (skip)
#: gdk.c:716:2
msgid ""
"This method must be called before gdk_threads_init(), and cannot be called "
"multiple times."
msgstr ""

#. used by: gdk_threads_set_lock_functions: (skip)
#: gdk.c:719:1
msgid "Since: 2.4"
msgstr ""

#. used by: GDK_WINDOWING_QUARTZ:
#: gdk.c:72:2
msgid ""
"The #GDK_WINDOWING_QUARTZ macro is defined if the Quartz backend is "
"supported."
msgstr ""

#. used by: GDK_WINDOWING_QUARTZ:
#: gdk.c:75:1
msgid "Use this macro to guard code that is specific to the Quartz backend."
msgstr ""

#. used by: gdk_threads_add_idle_full:
#: gdk.c:762:2
msgid ""
"@priority: the priority of the idle source. Typically this will be in the "
"range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE"
msgstr ""

#. used by: gdk_threads_add_idle_full:
#: gdk.c:766:1
msgid ""
"@notify: (allow-none):   function to call when the idle is removed, or %NULL"
msgstr ""

#. used by: gdk_threads_add_idle_full:
#: gdk.c:768:3
msgid ""
"Adds a function to be called whenever there are no higher priority events "
"pending.  If the function returns %FALSE it is automatically removed from "
"the list of event sources and will not be called again."
msgstr ""

#. used by: gdk_threads_add_idle_full:
#: gdk.c:772:5
msgid ""
"This variant of g_idle_add_full() calls @function with the GDK lock held. It "
"can be thought of a MT-safe version for GTK+ widgets for the following use "
"case, where you have to worry about idle_callback() running in thread A and "
"accessing @self after it has been finalized in thread B:"
msgstr ""

#. used by: gdk_threads_add_idle_full:
#: gdk.c:812:2
msgid "Since: 2.12 Rename to: gdk_threads_add_idle"
msgstr ""

#. used by: gdk_threads_add_idle: (skip)
#: gdk.c:841:2
msgid ""
"A wrapper for the common usage of gdk_threads_add_idle_full() assigning the "
"default priority, #G_PRIORITY_DEFAULT_IDLE."
msgstr ""

#. used by: gdk_threads_add_idle: (skip)
#: gdk.c:844:1
msgid "See gdk_threads_add_idle_full()."
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_idle: (skip)
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout: (skip)
#: gdk.c:848:1 gdk.c:955:1
msgid "Since: 2.12"
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_seconds_full:
#: gdk.c:861:2 gdk.c:969:2
msgid ""
"@priority: the priority of the timeout source. Typically this will be in the "
"range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE."
msgstr ""

#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout_full:
#. #-#-#-#-#  gdk.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_threads_add_timeout: (skip)
#: gdk.c:863:2 gdk.c:943:2
msgid ""
"@interval: the time between calls to the function, in milliseconds "
"(1/1000ths of a second)"
msgstr ""

#. used by: gdk_threads_add_timeout_full:
#: gdk.c:867:1
msgid ""
"@notify: (allow-none):   function to call when the timeout is removed, or "
"%NULL"
msgstr ""

#. used by: gdk_threads_add_timeout_full:
#: gdk.c:869:6
msgid ""
"Sets a function to be called at regular intervals holding the GDK lock, with "
"the given priority.  The function is called repeatedly until it returns "
"%FALSE, at which point the timeout is automatically destroyed and the "
"function will not be called again.  The @notify function is called when the "
"timeout is destroyed.  The first call to the function will be at the end of "
"the first @interval."
msgstr ""

#. used by: gdk_threads_add_timeout_full:
#: gdk.c:876:5
msgid ""
"Note that timeout functions may be delayed, due to the processing of other "
"event sources. Thus they should not be relied on for precise timing. After "
"each call to the timeout function, the time of the next timeout is "
"recalculated based on the current time and the given interval (it does not "
"try to 'catch up' time lost in delays)."
msgstr ""

#. used by: gdk_threads_add_timeout_full:
#: gdk.c:882:2
msgid ""
"This variant of g_timeout_add_full() can be thought of a MT-safe version for "
"GTK+ widgets for the following use case:"
msgstr ""

#. used by: gdk_threads_add_timeout_full:
#: gdk.c:915:2
msgid "Since: 2.12 Rename to: gdk_threads_add_timeout"
msgstr ""

#. used by: gdk_threads_add_timeout: (skip)
#: gdk.c:948:2
msgid ""
"A wrapper for the common usage of gdk_threads_add_timeout_full() assigning "
"the default priority, #G_PRIORITY_DEFAULT."
msgstr ""

#. used by: gdk_threads_add_timeout: (skip)
#: gdk.c:951:1
msgid "See gdk_threads_add_timeout_full()."
msgstr ""

#. used by: gdk_threads_add_timeout_seconds_full:
#: gdk.c:974:1
msgid ""
"@notify: (allow-none): function to call when the timeout is removed, or %NULL"
msgstr ""

#. used by: gdk_threads_add_timeout_seconds_full:
#: gdk.c:976:3
msgid ""
"A variant of gdk_threads_add_timeout_full() with second-granularity. See "
"g_timeout_add_seconds_full() for a discussion of why it is a good idea to "
"use this function if you don't need finer granularity."
msgstr ""

#. used by: gdk_threads_add_timeout_seconds_full:
#: gdk.c:982:2
msgid "Since: 2.14 Rename to: gdk_threads_add_timeout_seconds"
msgstr ""
