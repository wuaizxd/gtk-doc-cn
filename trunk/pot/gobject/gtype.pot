# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 21:05-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_interface_add_prerequisite:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_add_interface_static:
#: gtype.c:1522:1 gtype.c:2790:1
msgid "@interface_type: #GType value of an interface type."
msgstr ""

#. used by: g_type_interface_add_prerequisite:
#: gtype.c:1523:1
msgid ""
"@prerequisite_type: #GType value of an interface or instantiatable type."
msgstr ""

#. used by: g_type_interface_add_prerequisite:
#: gtype.c:1525:5
msgid ""
"Adds @prerequisite_type to the list of prerequisites of @interface_type. "
"This means that any type implementing @interface_type must also implement "
"@prerequisite_type. Prerequisites can be thought of as an alternative to "
"interface derivation (which GType doesn't support). An interface can have at "
"most one instantiatable prerequisite type."
msgstr ""

#. used by: g_type_interface_prerequisites:
#: gtype.c:1608:1
msgid "@interface_type: an interface type"
msgstr ""

#. used by: g_type_interface_prerequisites:
#: gtype.c:1609:2
msgid ""
"@n_prerequisites: (out) (allow-none): location to return the number of "
"prerequisites, or %NULL"
msgstr ""

#. used by: g_type_interface_prerequisites:
#: gtype.c:1612:1
msgid "Returns the prerequisites of an interfaces type."
msgstr ""

#. used by: g_type_interface_prerequisites:
#: gtype.c:1614:1
msgid "Since: 2.2"
msgstr ""

#. used by: g_type_interface_prerequisites:
#: gtype.c:1616:3
msgid ""
"Returns: (array length=n_prerequisites) (transfer full): a newly-allocated "
"zero-terminated array of #GType containing the prerequisites of "
"@interface_type"
msgstr ""

#. used by: g_type_create_instance: (skip)
#: gtype.c:1824:1
msgid "@type: An instantiatable type to create an instance for."
msgstr ""

#. used by: g_type_create_instance: (skip)
#: gtype.c:1826:13
msgid ""
"Creates and initializes an instance of @type if @type is valid and can be "
"instantiated. The type system only performs basic allocation and structure "
"setups for instances: actual instance creation should happen through "
"functions supplied by the type's fundamental type implementation.  So use of "
"g_type_create_instance() is reserved for implementators of fundamental types "
"only. E.g. instances of the #GObject hierarchy should be created via "
"g_object_new() and <emphasis>never</emphasis> directly through "
"g_type_create_instance() which doesn't handle things like singleton objects "
"or object construction.  Note: Do <emphasis>not</emphasis> use this "
"function, unless you're implementing a fundamental type. Also language "
"bindings should <emphasis>not</emphasis> use this function but g_object_new"
"() instead."
msgstr ""

#. used by: g_type_create_instance: (skip)
#: gtype.c:1840:2
msgid ""
"Returns: An allocated and initialized instance, subject to further treatment "
"by the fundamental type implementation."
msgstr ""

#. used by: g_type_free_instance:
#: gtype.c:1898:1
msgid "@instance: an instance of a type."
msgstr ""

#. used by: g_type_free_instance:
#: gtype.c:1900:2
msgid ""
"Frees an instance of a type, returning it to the instance pool for the type, "
"if there is one."
msgstr ""

#. used by: g_type_free_instance:
#: gtype.c:1903:2
msgid ""
"Like g_type_create_instance(), this function is reserved for implementors of "
"fundamental types."
msgstr ""

#. used by: g_type_add_class_cache_func: (skip)
#: gtype.c:2435:1
msgid "@cache_data: data to be passed to @cache_func"
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_add_class_cache_func: (skip)
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_remove_class_cache_func: (skip)
#: gtype.c:2436:1 gtype.c:2465:1
msgid "@cache_func: a #GTypeClassCacheFunc"
msgstr ""

#. used by: g_type_add_class_cache_func: (skip)
#: gtype.c:2438:7
msgid ""
"Adds a #GTypeClassCacheFunc to be called before the reference count of a "
"class goes from one to zero. This can be used to prevent premature class "
"destruction. All installed #GTypeClassCacheFunc functions will be chained "
"until one of them returns %TRUE. The functions have to check the class id "
"passed in to figure whether they actually want to cache the class of this "
"type, since all classes are routed through the same #GTypeClassCacheFunc "
"chain."
msgstr ""

#. used by: g_type_remove_class_cache_func: (skip)
#: gtype.c:2464:1
msgid "@cache_data: data that was given when adding @cache_func"
msgstr ""

#. used by: g_type_remove_class_cache_func: (skip)
#: gtype.c:2467:3
msgid ""
"Removes a previously installed #GTypeClassCacheFunc. The cache maintained by "
"@cache_func has to be empty when calling g_type_remove_class_cache_func() to "
"avoid leaks."
msgstr ""

#. used by: g_type_add_interface_check: (skip)
#: gtype.c:2503:1
msgid "@check_data: data to pass to @check_func"
msgstr ""

#. used by: g_type_add_interface_check: (skip)
#: gtype.c:2504:2
msgid "@check_func: function to be called after each interface is initialized."
msgstr ""

#. used by: g_type_add_interface_check: (skip)
#: gtype.c:2507:3
msgid ""
"Adds a function to be called after an interface vtable is initialized for "
"any class (i.e. after the @interface_init member of #GInterfaceInfo has been "
"called)."
msgstr ""

#. used by: g_type_add_interface_check: (skip)
#: gtype.c:2511:5
msgid ""
"This function is useful when you want to check an invariant that depends on "
"the interfaces of a class. For instance, the implementation of #GObject uses "
"this facility to check that an object implements all of the properties that "
"are defined on its interfaces."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GTypeInterfaceCheckFunc:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_ABSTRACT_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_ABSTRACT_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE_EXTENDED:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_IMPLEMENT_INTERFACE:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_add_interface_check: (skip)
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_remove_interface_check: (skip)
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_default_interface_ref:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_default_interface_peek:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_default_interface_unref:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_class_add_private:
#: gtype.c:2517:1 gtype.c:2543:1 gtype.c:3168:1 gtype.c:3218:1 gtype.c:3252:1
#: gtype.c:4452:1 gtype.h:1274:1 gtype.h:1289:1 gtype.h:1303:1 gtype.h:1319:1
#: gtype.h:1382:1 gtype.h:1436:1 gtype.h:919:1
msgid "Since: 2.4"
msgstr ""

#. used by: g_type_remove_interface_check: (skip)
#: gtype.c:2537:1
msgid "@check_data: callback data passed to g_type_add_interface_check()"
msgstr ""

#. used by: g_type_remove_interface_check: (skip)
#: gtype.c:2538:1
msgid "@check_func: callback function passed to g_type_add_interface_check()"
msgstr ""

#. used by: g_type_remove_interface_check: (skip)
#: gtype.c:2540:2
msgid ""
"Removes an interface check function added with g_type_add_interface_check()."
msgstr ""

#. used by: g_type_register_fundamental:
#: gtype.c:2577:1
msgid "@type_id: A predefined type identifier."
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_fundamental:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_static_simple: (skip)
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_static:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_dynamic:
#: gtype.c:2578:1 gtype.c:2647:1 gtype.c:2691:1 gtype.c:2746:1
msgid "@type_name: 0-terminated string used as the name of the new type."
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_fundamental:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_static:
#: gtype.c:2579:1 gtype.c:2692:1
msgid "@info: The #GTypeInfo structure for this type."
msgstr ""

#. used by: g_type_register_fundamental:
#: gtype.c:2580:1
msgid "@finfo: The #GTypeFundamentalInfo structure for this type."
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_fundamental:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_static_simple: (skip)
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_static:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_dynamic:
#: gtype.c:2581:1 gtype.c:2652:1 gtype.c:2693:1 gtype.c:2748:1
msgid "@flags: Bitwise combination of #GTypeFlags values."
msgstr ""

#. used by: g_type_register_fundamental:
#: gtype.c:2583:6
msgid ""
"Registers @type_id as the predefined identifier and @type_name as the name "
"of a fundamental type.  The type system uses the information contained in "
"the #GTypeInfo structure pointed to by @info and the #GTypeFundamentalInfo "
"structure pointed to by @finfo to manage the type and its instances.  The "
"value of @flags determines additional characteristics of the fundamental "
"type."
msgstr ""

#. used by: g_type_register_fundamental:
#: gtype.c:2590:1
msgid "Returns: The predefined type identifier."
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_static_simple: (skip)
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_static:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_dynamic:
#: gtype.c:2646:1 gtype.c:2690:1 gtype.c:2745:1
msgid "@parent_type: Type from which this type will be derived."
msgstr ""

#. used by: g_type_register_static_simple: (skip)
#: gtype.c:2648:1
msgid "@class_size: Size of the class structure (see #GTypeInfo)"
msgstr ""

#. used by: g_type_register_static_simple: (skip)
#: gtype.c:2649:1
msgid ""
"@class_init: Location of the class initialization function (see #GTypeInfo)"
msgstr ""

#. used by: g_type_register_static_simple: (skip)
#: gtype.c:2650:1
msgid "@instance_size: Size of the instance structure (see #GTypeInfo)"
msgstr ""

#. used by: g_type_register_static_simple: (skip)
#: gtype.c:2651:1
msgid ""
"@instance_init: Location of the instance initialization function (see "
"#GTypeInfo)"
msgstr ""

#. used by: g_type_register_static_simple: (skip)
#: gtype.c:2654:4
msgid ""
"Registers @type_name as the name of a new static type derived from "
"@parent_type.  The value of @flags determines the nature (e.g. abstract or "
"not) of the type. It works by filling a #GTypeInfo struct and calling "
"g_type_register_static()."
msgstr ""

#. used by: g_type_register_static_simple: (skip)
#: gtype.c:2659:1
msgid "Since: 2.12"
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_static_simple: (skip)
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_register_static:
#: gtype.c:2661:1 gtype.c:2701:1
msgid "Returns: The new type identifier."
msgstr ""

#. used by: g_type_register_static:
#: gtype.c:2695:5
msgid ""
"Registers @type_name as the name of a new static type derived from "
"@parent_type.  The type system uses the information contained in the "
"#GTypeInfo structure pointed to by @info to manage the type and its "
"instances (if not abstract).  The value of @flags determines the nature (e."
"g. abstract or not) of the type."
msgstr ""

#. used by: g_type_register_dynamic:
#: gtype.c:2747:1
msgid "@plugin: The #GTypePlugin structure to retrieve the #GTypeInfo from."
msgstr ""

#. used by: g_type_register_dynamic:
#: gtype.c:2750:5
msgid ""
"Registers @type_name as the name of a new dynamic type derived from "
"@parent_type.  The type system uses the information contained in the "
"#GTypePlugin structure pointed to by @plugin to manage the type and its "
"instances (if not abstract).  The value of @flags determines the nature (e."
"g. abstract or not) of the type."
msgstr ""

#. used by: g_type_register_dynamic:
#: gtype.c:2756:1
msgid ""
"Returns: The new type identifier or #G_TYPE_INVALID if registration failed."
msgstr ""

#. used by: g_type_add_interface_static:
#: gtype.c:2789:1
msgid "@instance_type: #GType value of an instantiable type."
msgstr ""

#. used by: g_type_add_interface_static:
#: gtype.c:2791:2
msgid ""
"@info: The #GInterfaceInfo structure for this (@instance_type, "
"@interface_type) combination."
msgstr ""

#. used by: g_type_add_interface_static:
#: gtype.c:2794:3
msgid ""
"Adds the static @interface_type to @instantiable_type.  The information "
"contained in the #GTypeInterfaceInfo structure pointed to by @info is used "
"to manage the relationship."
msgstr ""

#. used by: g_type_add_interface_dynamic:
#: gtype.c:2826:1
msgid "@instance_type: the #GType value of an instantiable type."
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_add_interface_dynamic:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_interface_get_plugin:
#: gtype.c:2827:1 gtype.c:3863:1
msgid "@interface_type: the #GType value of an interface type."
msgstr ""

#. used by: g_type_add_interface_dynamic:
#: gtype.c:2828:1
msgid ""
"@plugin: the #GTypePlugin structure to retrieve the #GInterfaceInfo from."
msgstr ""

#. used by: g_type_add_interface_dynamic:
#: gtype.c:2830:3
msgid ""
"Adds the dynamic @interface_type to @instantiable_type. The information "
"contained in the #GTypePlugin structure pointed to by @plugin is used to "
"manage the relationship."
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_class_ref:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_class_peek:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_class_peek_static:
#: gtype.c:2864:1 gtype.c:2982:1 gtype.c:3012:1
msgid "@type: Type ID of a classed type."
msgstr ""

#. used by: g_type_class_ref:
#: gtype.c:2866:3
msgid ""
"Increments the reference count of the class structure belonging to @type. "
"This function will demand-create the class if it doesn't exist already."
msgstr ""

#. used by: g_type_class_ref:
#: gtype.c:2870:2
msgid ""
"Returns: (type GObject.TypeClass) (transfer none): The #GTypeClass structure "
"for the given type ID."
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_class_unref:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_class_unref_uncached: (skip)
#: gtype.c:2930:2 gtype.c:2956:2
msgid ""
"@g_class: (type GObject.TypeClass): The #GTypeClass structure to unreference."
msgstr ""

#. used by: g_type_class_unref:
#: gtype.c:2933:4
msgid ""
"Decrements the reference count of the class structure being passed in. Once "
"the last reference count of a class has been released, classes may be "
"finalized by the type system, so further dereferencing of a class pointer "
"after g_type_class_unref() are invalid."
msgstr ""

#. used by: g_type_class_unref_uncached: (skip)
#: gtype.c:2959:4
msgid ""
"A variant of g_type_class_unref() for use in #GTypeClassCacheFunc "
"implementations. It unreferences a class without consulting the chain of "
"#GTypeClassCacheFunc<!-- -->s, avoiding the recursion which would occur "
"otherwise."
msgstr ""

#. used by: g_type_class_peek:
#: gtype.c:2984:4
msgid ""
"This function is essentially the same as g_type_class_ref(), except that the "
"classes reference count isn't incremented. As a consequence, this function "
"may return %NULL if the class of the type passed in does not currently exist "
"(hasn't been referenced before)."
msgstr ""

#. used by: g_type_class_peek:
#: gtype.c:2989:3
msgid ""
"Returns: (type GObject.TypeClass) (transfer none): The #GTypeClass structure "
"for the given type ID or %NULL if the class does not currently exist."
msgstr ""

#. used by: g_type_class_peek_static:
#: gtype.c:3014:2
msgid ""
"A more efficient version of g_type_class_peek() which works only for static "
"types."
msgstr ""

#. used by: g_type_class_peek_static:
#: gtype.c:3017:4
msgid ""
"Since: 2.4 Returns: (type GObject.TypeClass) (transfer none): The "
"#GTypeClass structure for the given type ID or %NULL if the class does not "
"currently exist or is dynamically loaded."
msgstr ""

#. used by: g_type_class_peek_parent:
#: gtype.c:3042:2
msgid ""
"@g_class: (type GObject.TypeClass): The #GTypeClass structure to retrieve "
"the parent class for."
msgstr ""

#. used by: g_type_class_peek_parent:
#: gtype.c:3045:6
msgid ""
"This is a convenience function often needed in class initializers. It "
"returns the class structure of the immediate parent type of the class passed "
"in.  Since derived classes hold a reference count on their parent classes as "
"long as they are instantiated, the returned class will always exist. This "
"function is essentially equivalent to:"
msgstr ""

#. used by: g_type_class_peek_parent:
#: gtype.c:3056:2
msgid ""
"Returns: (type GObject.TypeClass) (transfer none): The parent class of "
"@g_class."
msgstr ""

#. used by: g_type_interface_peek:
#: gtype.c:3085:1
msgid "@instance_class: (type GObject.TypeClass): A #GTypeClass structure."
msgstr ""

#. used by: g_type_interface_peek:
#: gtype.c:3086:1
msgid "@iface_type: An interface ID which this class conforms to."
msgstr ""

#. used by: g_type_interface_peek:
#: gtype.c:3088:2
msgid ""
"Returns the #GTypeInterface structure of an interface to which the passed in "
"class conforms."
msgstr ""

#. used by: g_type_interface_peek:
#: gtype.c:3091:3
msgid ""
"Returns: (type GObject.TypeInterface) (transfer none): The GTypeInterface "
"structure of iface_type if implemented by @instance_class, %NULL otherwise"
msgstr ""

#. used by: g_type_interface_peek_parent:
#: gtype.c:3118:1
msgid "@g_iface: (type GObject.TypeInterface): A #GTypeInterface structure."
msgstr ""

#. used by: g_type_interface_peek_parent:
#: gtype.c:3120:4
msgid ""
"Returns the corresponding #GTypeInterface structure of the parent type of "
"the instance type to which @g_iface belongs. This is useful when deriving "
"the implementation of an interface from the parent type and then possibly "
"overriding some methods."
msgstr ""

#. used by: g_type_interface_peek_parent:
#: gtype.c:3125:4
msgid ""
"Returns: (transfer none) (type GObject.TypeInterface): The corresponding "
"#GTypeInterface structure of the parent type of the instance type to which "
"@g_iface belongs, or %NULL if the parent type doesn't conform to the "
"interface."
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_default_interface_ref:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_default_interface_peek:
#: gtype.c:3154:1 gtype.c:3213:1
msgid "@g_type: an interface type"
msgstr ""

#. used by: g_type_default_interface_ref:
#: gtype.c:3156:2
msgid ""
"Increments the reference count for the interface type @g_type, and returns "
"the default interface vtable for the type."
msgstr ""

#. used by: g_type_default_interface_ref:
#: gtype.c:3159:8
msgid ""
"If the type is not currently in use, then the default vtable for the type "
"will be created and initalized by calling the base interface init and "
"default vtable init functions for the type (the @<structfield>base_init</"
"structfield> and <structfield>class_init</structfield> members of "
"#GTypeInfo). Calling g_type_default_interface_ref() is useful when you want "
"to make sure that signals and properties for an interface have been "
"installed."
msgstr ""

#. used by: g_type_default_interface_ref:
#: gtype.c:3170:3
msgid ""
"Returns: (type GObject.TypeInterface) (transfer none): the default vtable "
"for the interface; call g_type_default_interface_unref() when you are done "
"using the interface."
msgstr ""

#. used by: g_type_default_interface_peek:
#: gtype.c:3215:2
msgid ""
"If the interface type @g_type is currently in use, returns its default "
"interface vtable."
msgstr ""

#. used by: g_type_default_interface_peek:
#: gtype.c:3220:3
msgid ""
"Returns: (type GObject.TypeInterface) (transfer none): the default vtable "
"for the interface, or %NULL if the type is not currently in use."
msgstr ""

#. used by: g_type_default_interface_unref:
#: gtype.c:3241:3
msgid ""
"@g_iface: (type GObject.TypeInterface): the default vtable structure for a "
"interface, as returned by g_type_default_interface_ref()"
msgstr ""

#. used by: g_type_default_interface_unref:
#: gtype.c:3245:6
msgid ""
"Decrements the reference count for the type corresponding to the interface "
"default vtable @g_iface. If the type is dynamic, then when no one is using "
"the interface and all references have been released, the finalize function "
"for the interface's default vtable (the <structfield>class_finalize</"
"structfield> member of #GTypeInfo) will be called."
msgstr ""

#. used by: g_type_name:
#: gtype.c:3272:1
msgid "@type: Type to return name for."
msgstr ""

#. used by: g_type_name:
#: gtype.c:3274:5
msgid ""
"Get the unique name that is assigned to a type ID.  Note that this function "
"(like all other GType API) cannot cope with invalid type IDs. "
"%G_TYPE_INVALID may be passed to this function, as may be any other validly "
"registered type ID, but randomized type IDs should not be passed in and will "
"most likely lead to a crash."
msgstr ""

#. used by: g_type_name:
#: gtype.c:3280:1
msgid "Returns: Static type name or %NULL."
msgstr ""

#. used by: g_type_qname:
#: gtype.c:3296:1
msgid "@type: Type to return quark of type name for."
msgstr ""

#. used by: g_type_qname:
#: gtype.c:3298:1
msgid "Get the corresponding quark of the type IDs name."
msgstr ""

#. used by: g_type_qname:
#: gtype.c:3300:1
msgid "Returns: The type names quark or 0."
msgstr ""

#. used by: g_type_from_name:
#: gtype.c:3314:1
msgid "@name: Type name to lookup."
msgstr ""

#. used by: g_type_from_name:
#: gtype.c:3316:4
msgid ""
"Lookup the type ID from a given type name, returning 0 if no type has been "
"registered under this name (this is the preferred method to find out by name "
"whether a specific type has been registered yet)."
msgstr ""

#. used by: g_type_from_name:
#: gtype.c:3321:1
msgid "Returns: Corresponding type ID or 0."
msgstr ""

#. used by: g_type_parent:
#: gtype.c:3344:1
msgid "@type: The derived type."
msgstr ""

#. used by: g_type_parent:
#: gtype.c:3346:2
msgid ""
"Return the direct parent type of the passed in type.  If the passed in type "
"has no parent, i.e. is a fundamental type, 0 is returned."
msgstr ""

#. used by: g_type_parent:
#: gtype.c:3349:1
msgid "Returns: The parent type."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_FUNDAMENTAL:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_FUNDAMENTAL:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_DERIVED:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_INTERFACE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_CLASSED:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_INSTANTIATABLE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_DERIVABLE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_DEEP_DERIVABLE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_ABSTRACT:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_VALUE_ABSTRACT:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_VALUE_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_HAS_VALUE_TABLE:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_depth:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_value_table_peek: (skip)
#: gtype.c:3363:1 gtype.c:4147:1 gtype.h:262:1 gtype.h:271:1 gtype.h:282:1
#: gtype.h:297:1 gtype.h:306:1 gtype.h:316:1 gtype.h:326:1 gtype.h:336:1
#: gtype.h:34:1 gtype.h:347:1 gtype.h:358:1 gtype.h:367:1
msgid "@type: A #GType value."
msgstr ""

#. used by: g_type_depth:
#: gtype.c:3365:2
msgid ""
"Returns the length of the ancestry of the passed in type. This includes the "
"type itself, so that e.g. a fundamental type has depth 1."
msgstr ""

#. used by: g_type_depth:
#: gtype.c:3368:1
msgid "Returns: The depth of @type."
msgstr ""

#. used by: g_type_next_base:
#: gtype.c:3382:1
msgid "@leaf_type: Descendant of @root_type and the type to be returned."
msgstr ""

#. used by: g_type_next_base:
#: gtype.c:3383:1
msgid "@root_type: Immediate parent of the returned type."
msgstr ""

#. used by: g_type_next_base:
#: gtype.c:3385:7
msgid ""
"Given a @leaf_type and a @root_type which is contained in its anchestry, "
"return the type that @root_type is the immediate parent of.  In other words, "
"this function determines the type that is derived directly from @root_type "
"which is also a base class of @leaf_type.  Given a root type and a leaf "
"type, this function can be used to determine the types and order in which "
"the leaf type is descended from the root type."
msgstr ""

#. used by: g_type_next_base:
#: gtype.c:3393:1
msgid "Returns: Immediate child of @root_type and anchestor of @leaf_type."
msgstr ""

#. used by: g_type_is_a:
#: gtype.c:3480:1
msgid "@type: Type to check anchestry for."
msgstr ""

#. used by: g_type_is_a:
#: gtype.c:3481:1
msgid ""
"@is_a_type: Possible anchestor of @type or interface @type could conform to."
msgstr ""

#. used by: g_type_is_a:
#: gtype.c:3483:3
msgid ""
"If @is_a_type is a derivable type, check whether @type is a descendant of "
"@is_a_type.  If @is_a_type is an interface, check whether @type conforms to "
"it."
msgstr ""

#. used by: g_type_is_a:
#: gtype.c:3487:1
msgid "Returns: %TRUE if @type is_a @is_a_type holds true."
msgstr ""

#. used by: g_type_children:
#: gtype.c:3505:1
msgid "@type: The parent type."
msgstr ""

#. used by: g_type_children:
#: gtype.c:3506:2
msgid ""
"@n_children: (out) (allow-none): Optional #guint pointer to contain the "
"number of child types."
msgstr ""

#. used by: g_type_children:
#: gtype.c:3509:2
msgid ""
"Return a newly allocated and 0-terminated array of type IDs, listing the "
"child types of @type. The return value has to be g_free()ed after use."
msgstr ""

#. used by: g_type_children:
#: gtype.c:3512:2
msgid ""
"Returns: (array length=n_children) (transfer full): Newly allocated and 0-"
"terminated array of child types."
msgstr ""

#. used by: g_type_interfaces:
#: gtype.c:3548:1
msgid "@type: The type to list interface types for."
msgstr ""

#. used by: g_type_interfaces:
#: gtype.c:3549:2
msgid ""
"@n_interfaces: (out) (allow-none): Optional #guint pointer to contain the "
"number of interface types."
msgstr ""

#. used by: g_type_interfaces:
#: gtype.c:3552:3
msgid ""
"Return a newly allocated and 0-terminated array of type IDs, listing the "
"interface types that @type conforms to. The return value has to be g_free()"
"ed after use."
msgstr ""

#. used by: g_type_interfaces:
#: gtype.c:3556:2
msgid ""
"Returns: (array length=n_interfaces) (transfer full): Newly allocated and 0-"
"terminated array of interface types."
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_get_qdata:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_set_qdata:
#: gtype.c:3649:1 gtype.c:3720:1
msgid "@type: a #GType"
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_get_qdata:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_set_qdata:
#: gtype.c:3650:1 gtype.c:3721:1
msgid "@quark: a #GQuark id to identify the data"
msgstr ""

#. used by: g_type_get_qdata:
#: gtype.c:3652:2
msgid ""
"Obtains data which has previously been attached to @type with "
"g_type_set_qdata()."
msgstr ""

#. used by: g_type_get_qdata:
#: gtype.c:3655:3
msgid ""
"Note that this does not take subtyping into account; data attached to one "
"type with g_type_set_qdata() cannot be retrieved from a subtype using "
"g_type_get_qdata()."
msgstr ""

#. used by: g_type_get_qdata:
#: gtype.c:3659:1
msgid "Returns: (transfer none): the data, or %NULL if no data was found"
msgstr ""

#. used by: g_type_set_qdata:
#: gtype.c:3722:1
msgid "@data: the data"
msgstr ""

#. used by: g_type_set_qdata:
#: gtype.c:3724:1
msgid "Attaches arbitrary data to a type."
msgstr ""

#. used by: g_type_query:
#: gtype.c:3764:1
msgid "@type: the #GType value of a static, classed type."
msgstr ""

#. used by: g_type_query:
#: gtype.c:3765:2
msgid ""
"@query: (out caller-allocates): A user provided structure that is filled in "
"with constant values upon success."
msgstr ""

#. used by: g_type_query:
#: gtype.c:3768:6
msgid ""
"Queries the type system for information about a specific type. This function "
"will fill in a user-provided structure to hold type-specific information. If "
"an invalid #GType is passed in, the @type member of the #GTypeQuery is 0. "
"All members filled into the #GTypeQuery structure should be considered "
"constant and have to be left untouched."
msgstr ""

#. used by: g_type_get_plugin:
#: gtype.c:3842:1
msgid "@type: The #GType to retrieve the plugin for."
msgstr ""

#. used by: g_type_get_plugin:
#: gtype.c:3844:2
msgid ""
"Returns the #GTypePlugin structure for @type or %NULL if @type does not have "
"a #GTypePlugin structure."
msgstr ""

#. used by: g_type_get_plugin:
#: gtype.c:3847:2
msgid ""
"Returns: (transfer none): The corresponding plugin if @type is a dynamic "
"type, %NULL otherwise."
msgstr ""

#. used by: g_type_interface_get_plugin:
#: gtype.c:3862:1
msgid "@instance_type: the #GType value of an instantiatable type."
msgstr ""

#. used by: g_type_interface_get_plugin:
#: gtype.c:3865:4
msgid ""
"Returns the #GTypePlugin structure for the dynamic interface @interface_type "
"which has been added to @instance_type, or %NULL if @interface_type has not "
"been added to @instance_type or does not have a #GTypePlugin structure. See "
"g_type_add_interface_dynamic()."
msgstr ""

#. used by: g_type_interface_get_plugin:
#: gtype.c:3870:2
msgid ""
"Returns: (transfer none): the #GTypePlugin for the dynamic interface "
"@interface_type of @instance_type."
msgstr ""

#. used by: SECTION:gtype
#: gtype.c:39:2
msgid ""
"@short_description: The GLib Runtime type identification and management "
"system"
msgstr ""

#. used by: g_type_fundamental_next:
#: gtype.c:3912:4
msgid ""
"Returns the next free fundamental type id which can be used to register a "
"new fundamental type with g_type_register_fundamental(). The returned type "
"ID represents the highest currently registered fundamental type identifier."
msgstr ""

#. used by: g_type_fundamental_next:
#: gtype.c:3917:2
msgid ""
"Returns: The nextmost fundamental type ID to be registered, or 0 if the type "
"system ran out of fundamental type IDs."
msgstr ""

#. used by: g_type_fundamental:
#: gtype.c:3934:1
msgid "@type_id: valid type ID"
msgstr ""

#. used by: g_type_fundamental:
#: gtype.c:3936:2
msgid ""
"Internal function, used to extract the fundamental type ID portion. use "
"G_TYPE_FUNDAMENTAL() instead."
msgstr ""

#. used by: g_type_fundamental:
#: gtype.c:3939:1
msgid "Returns: fundamental type ID"
msgstr ""

#. used by: g_type_check_instance:
#: gtype.c:4051:1
msgid "@instance: A valid #GTypeInstance structure."
msgstr ""

#. used by: g_type_check_instance:
#: gtype.c:4053:2
msgid ""
"Private helper function to aid implementation of the G_TYPE_CHECK_INSTANCE() "
"macro."
msgstr ""

#. used by: g_type_check_instance:
#: gtype.c:4056:1
msgid "@Returns:  #TRUE if @instance is valid, #FALSE otherwise."
msgstr ""

#. used by: SECTION:gtype
#: gtype.c:41:1
msgid "@title:Type Information"
msgstr ""

#. used by: g_type_value_table_peek: (skip)
#: gtype.c:4149:4
msgid ""
"Returns the location of the #GTypeValueTable associated with @type. "
"<emphasis>Note that this function should only be used from source code that "
"implements or has internal knowledge of the implementation of @type.</"
"emphasis>"
msgstr ""

#. used by: g_type_value_table_peek: (skip)
#: gtype.c:4154:2
msgid ""
"Returns: Location of the #GTypeValueTable associated with @type or %NULL if "
"there is no #GTypeValueTable associated with @type."
msgstr ""

#. used by: g_type_init_with_debug_flags:
#: gtype.c:4259:2
msgid ""
"@debug_flags: Bitwise combination of #GTypeDebugFlags values for debugging "
"purposes."
msgstr ""

#. used by: g_type_init_with_debug_flags:
#: gtype.c:4262:1
msgid "Similar to g_type_init(), but additionally sets debug flags."
msgstr ""

#. used by: SECTION:gtype
#: gtype.c:43:5
msgid ""
"The GType API is the foundation of the GObject system.  It provides the "
"facilities for registering and managing all fundamental data types, user-"
"defined object and interface types.  Before using any GType or GObject "
"functions, g_type_init() must be called to initialize the type system."
msgstr ""

#. used by: g_type_init:
#: gtype.c:4377:4
msgid ""
"Prior to any use of the type system, g_type_init() has to be called to "
"initialize the type system and assorted other code portions (such as the "
"various fundamental type implementations or the signal system)."
msgstr ""

#. used by: g_type_init:
#: gtype.c:4382:1
msgid "Since version 2.24 this also initializes the thread system"
msgstr ""

#. used by: g_type_class_add_private:
#: gtype.c:4392:1
msgid "@g_class: class structure for an instantiatable type"
msgstr ""

#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_class_add_private:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_add_class_private:
#: gtype.c:4393:1 gtype.c:4557:1
msgid "@private_size: size of private structure."
msgstr ""

#. used by: g_type_class_add_private:
#: gtype.c:4395:1
msgid "Registers a private structure for an instantiatable type."
msgstr ""

#. used by: g_type_class_add_private:
#: gtype.c:4397:4
msgid ""
"When an object is allocated, the private structures for the type and all of "
"its parent types are allocated sequentially in the same memory block as the "
"public structures."
msgstr ""

#. used by: g_type_class_add_private:
#: gtype.c:4402:2
msgid ""
"Note that the accumulated size of the private structures of a type and all "
"its parent types cannot excced 64kB."
msgstr ""

#. used by: g_type_class_add_private:
#: gtype.c:4405:3
msgid ""
"This function should be called in the type's class_init() function. The "
"private structure can be retrieved using the G_TYPE_INSTANCE_GET_PRIVATE() "
"macro."
msgstr ""

#. used by: g_type_class_add_private:
#: gtype.c:4409:5
msgid ""
"The following example shows attaching a private structure "
"<structname>MyObjectPrivate</structname> to an object <structname>MyObject</"
"structname> defined in the standard GObject fashion. type's class_init() "
"function."
msgstr ""

#. used by: g_type_add_class_private:
#: gtype.c:4556:1
msgid "@class_type: GType of an classed type."
msgstr ""

#. used by: g_type_add_class_private:
#: gtype.c:4559:8
msgid ""
"Registers a private class structure for a classed type; when the class is "
"allocated, the private structures for the class and all of its parent types "
"are allocated sequentially in the same memory block as the public "
"structures. This function should be called in the type's get_type() function "
"after the type is registered. The private structure can be retrieved using "
"the G_TYPE_CLASS_GET_PRIVATE() macro."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_INTERFACE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_INTERFACE_WITH_CODE:
#. #-#-#-#-#  gtype.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_type_add_class_private:
#: gtype.c:4568:1 gtype.h:1401:1 gtype.h:1420:1
msgid "Since: 2.24"
msgstr ""

#. used by: SECTION:gtype
#: gtype.c:49:18
msgid ""
"For type creation and registration purposes, all types fall into one of two "
"categories: static or dynamic.  Static types are never loaded or unloaded at "
"run-time as dynamic types may be.  Static types are created with "
"g_type_register_static() that gets type specific information passed in via a "
"#GTypeInfo structure. Dynamic types are created with g_type_register_dynamic"
"() which takes a #GTypePlugin structure instead. The remaining type "
"information (the #GTypeInfo structure) is retrieved during runtime through "
"#GTypePlugin and the g_type_plugin_*() API. These registration functions are "
"usually called only once from a function whose only purpose is to return the "
"type identifier for a specific class.  Once the type (or class or interface) "
"is registered, it may be instantiated, inherited, or implemented depending "
"on exactly what sort of type it is. There is also a third registration "
"function for registering fundamental types called g_type_register_fundamental"
"() which requires both a #GTypeInfo structure and a #GTypeFundamentalInfo "
"structure but it is seldom used since most fundamental types are predefined "
"rather than user-defined."
msgstr ""

#. used by: SECTION:gtype
#: gtype.c:68:5
msgid ""
"A final word about type names. Such an identifier needs to be at least three "
"characters long. There is no upper length limit. The first character needs "
"to be a letter (a-z or A-Z) or an underscore '_'. Subsequent characters can "
"be letters, numbers or any of '-_+'."
msgstr ""

#. used by: GTypeFundamentalInfo:
#: gtype.h:1008:1
msgid ""
"@type_flags: #GTypeFundamentalFlags describing the characteristics of the "
"fundamental type"
msgstr ""

#. used by: G_TYPE_UINT:
#: gtype.h:101:1
msgid "The fundamental type corresponding to #guint."
msgstr ""

#. used by: GTypeFundamentalInfo:
#: gtype.h:1010:2
msgid ""
"A structure that provides information to the type system which is used "
"specifically for managing fundamental types."
msgstr ""

#. used by: GInterfaceInfo:
#: gtype.h:1019:1
msgid "@interface_init: location of the interface initialization function"
msgstr ""

#. used by: GInterfaceInfo:
#: gtype.h:1020:1
msgid "@interface_finalize: location of the interface finalization function"
msgstr ""

#. used by: GInterfaceInfo:
#: gtype.h:1021:1
msgid ""
"@interface_data: user-supplied data passed to the interface init/finalize "
"functions"
msgstr ""

#. used by: GInterfaceInfo:
#: gtype.h:1023:2
msgid ""
"A structure that provides information to the type system which is used "
"specifically for managing interface types."
msgstr ""

#. used by: GTypeValueTable:
#: gtype.h:1034:11
msgid ""
"@value_init: Default initialize @values contents by poking values directly "
"into the value->data array. The data array of the #GValue passed into this "
"function was zero-filled with <function>memset()</function>, so no care has "
"to be taken to free any old contents. E.g. for the implementation of a "
"string value that may never be %NULL, the implementation might look like: |"
"[ value->data[0].v_pointer = g_strdup (\"\"); ]|"
msgstr ""

#. used by: GTypeValueTable:
#: gtype.h:1045:9
msgid ""
"@value_free: Free any old contents that might be left in the data array of "
"the passed in @value. No resources may remain allocated through the #GValue "
"contents after this function returns. E.g. for our above string type: |[ // "
"only free strings without a specific flag for static storage if (!(value-"
">data[1].v_uint & G_VALUE_NOCOPY_CONTENTS)) g_free (value->data[0]."
"v_pointer); ]|"
msgstr ""

#. used by: GTypeValueTable:
#: gtype.h:1054:10
msgid ""
"@value_copy: @dest_value is a #GValue with zero-filled data section and "
"@src_value is a properly setup #GValue of same or derived type. The purpose "
"of this function is to copy the contents of @src_value into @dest_value in a "
"way, that even after @src_value has been freed, the contents of @dest_value "
"remain valid. String type example: |[ dest_value->data[0].v_pointer = "
"g_strdup (src_value->data[0].v_pointer); ]|"
msgstr ""

#. used by: GTypeValueTable:
#: gtype.h:1064:6
msgid ""
"@value_peek_pointer: If the value contents fit into a pointer, such as "
"objects or strings, return this pointer, so the caller can peek at the "
"current contents. To extend on our above string example: |[ return value-"
">data[0].v_pointer; ]|"
msgstr ""

#. used by: G_TYPE_LONG:
#: gtype.h:107:1
msgid "The fundamental type corresponding to #glong."
msgstr ""

#. used by: GTypeValueTable:
#: gtype.h:1070:22
msgid ""
"@collect_format: A string format describing how to collect the contents of "
"this value bit-by-bit. Each character in the format represents an argument "
"to be collected, and the characters themselves indicate the type of the "
"argument. Currently supported arguments are: <variablelist> "
"<varlistentry><term /><listitem><para> 'i' - Integers. passed as "
"collect_values[].v_int. </para></listitem></varlistentry> "
"<varlistentry><term /><listitem><para> 'l' - Longs. passed as collect_values"
"[].v_long. </para></listitem></varlistentry> <varlistentry><term /"
"><listitem><para> 'd' - Doubles. passed as collect_values[].v_double. </"
"para></listitem></varlistentry> <varlistentry><term /><listitem><para> 'p' - "
"Pointers. passed as collect_values[].v_pointer. </para></listitem></"
"varlistentry> </variablelist> It should be noted that for variable argument "
"list construction, ANSI C promotes every type smaller than an integer to an "
"int, and floats to doubles. So for collection of short int or char, 'i' "
"needs to be used, and for collection of floats 'd'."
msgstr ""

#. used by: GTypeValueTable:
#: gtype.h:1092:67
msgid ""
"@collect_value: The collect_value() function is responsible for converting "
"the values collected from a variable argument list into contents suitable "
"for storage in a GValue. This function should setup @value similar to "
"value_init(); e.g. for a string value that does not allow %NULL pointers, it "
"needs to either spew an error, or do an implicit conversion by storing an "
"empty string. The @value passed in to this function has a zero-filled data "
"array, so just like for value_init() it is guaranteed to not contain any old "
"contents that might need freeing. @n_collect_values is exactly the string "
"length of @collect_format, and @collect_values is an array of unions "
"#GTypeCValue with length @n_collect_values, containing the collected values "
"according to @collect_format. @collect_flags is an argument provided as a "
"hint by the caller. It may contain the flag %G_VALUE_NOCOPY_CONTENTS "
"indicating, that the collected value contents may be considered \"static\" "
"for the duration of the @value lifetime. Thus an extra copy of the contents "
"stored in @collect_values is not required for assignment to @value. For our "
"above string example, we continue with: |[ if (!collect_values[0].v_pointer) "
"value->data[0].v_pointer = g_strdup (\"\"); else if (collect_flags & "
"G_VALUE_NOCOPY_CONTENTS) { value->data[0].v_pointer = collect_values[0]."
"v_pointer; // keep a flag for the value_free() implementation to not free "
"this string value->data[1].v_uint = G_VALUE_NOCOPY_CONTENTS; } else value-"
">data[0].v_pointer = g_strdup (collect_values[0].v_pointer); return NULL; ]| "
"It should be noted, that it is generally a bad idea to follow the "
"#G_VALUE_NOCOPY_CONTENTS hint for reference counted types. Due to reentrancy "
"requirements and reference count assertions performed by the #GSignal code, "
"reference counts should always be incremented for reference counted contents "
"stored in the value->data array. To deviate from our string example for a "
"moment, and taking a look at an exemplary implementation for collect_value() "
"of #GObject: |[ if (collect_values[0].v_pointer) { GObject *object = "
"G_OBJECT (collect_values[0].v_pointer); // never honour "
"G_VALUE_NOCOPY_CONTENTS for ref-counted types value->data[0].v_pointer = "
"g_object_ref (object); return NULL; } else return g_strdup_printf (\"Object "
"passed as invalid NULL pointer\"); } ]| The reference count for valid "
"objects is always incremented, regardless of @collect_flags. For invalid "
"objects, the example returns a newly allocated string without altering "
"@value. Upon success, collect_value() needs to return %NULL. If, however, an "
"error condition occurred, collect_value() may spew an error by returning a "
"newly allocated non-%NULL string, giving a suitable description of the error "
"condition. The calling code makes no assumptions about the @value contents "
"being valid upon error returns, @value is simply thrown away without further "
"freeing. As such, it is a good idea to not allocate #GValue contents, prior "
"to returning an error, however, collect_values() is not obliged to return a "
"correctly setup @value for error returns, simply because any non-%NULL "
"return is considered a fatal condition so further program behaviour is "
"undefined."
msgstr ""

#. used by: G_TYPE_ULONG:
#: gtype.h:113:1
msgid "The fundamental type corresponding to #gulong."
msgstr ""

#. used by: GTypeValueTable:
#: gtype.h:1159:3
msgid ""
"@lcopy_format: Format description of the arguments to collect for "
"@lcopy_value, analogous to @collect_format. Usually, @lcopy_format string "
"consists only of 'p's to provide lcopy_value() with pointers to storage "
"locations."
msgstr ""

#. used by: GTypeValueTable:
#: gtype.h:1162:33
msgid ""
"@lcopy_value: This function is responsible for storing the @value contents "
"into arguments passed through a variable argument list which got collected "
"into @collect_values according to @lcopy_format. @n_collect_values equals "
"the string length of @lcopy_format, and @collect_flags may contain "
"%G_VALUE_NOCOPY_CONTENTS. In contrast to collect_value(), lcopy_value() is "
"obliged to always properly support %G_VALUE_NOCOPY_CONTENTS. Similar to "
"collect_value() the function may prematurely abort by returning a newly "
"allocated string describing an error condition. To complete the string "
"example: |[ gchar **string_p = collect_values[0].v_pointer; if (!string_p) "
"return g_strdup_printf (\"string location passed as NULL\"); if "
"(collect_flags & G_VALUE_NOCOPY_CONTENTS) *string_p = value->data[0]."
"v_pointer; else *string_p = g_strdup (value->data[0].v_pointer); ]| And an "
"illustrative version of lcopy_value() for reference-counted types: |"
"[ GObject **object_p = collect_values[0].v_pointer; if (!object_p) return "
"g_strdup_printf (\"object location passed as NULL\"); if (!value->data[0]."
"v_pointer) *object_p = NULL; else if (collect_flags & "
"G_VALUE_NOCOPY_CONTENTS) /&ast; always honour &ast;/ *object_p = value->data"
"[0].v_pointer; else *object_p = g_object_ref (value->data[0].v_pointer); "
"return NULL; ]|"
msgstr ""

#. used by: G_TYPE_INT64:
#: gtype.h:119:1
msgid "The fundamental type corresponding to #gint64."
msgstr ""

#. used by: GTypeValueTable:
#: gtype.h:1196:2
msgid ""
"The #GTypeValueTable provides the functions required by the #GValue "
"implementation, to serve as a container for values of a type."
msgstr ""

#. used by: G_TYPE_UINT64:
#: gtype.h:125:1
msgid "The fundamental type corresponding to #guint64."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_ABSTRACT_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_ABSTRACT_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE_EXTENDED:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_INTERFACE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_INTERFACE_WITH_CODE:
#: gtype.h:1264:1 gtype.h:1279:1 gtype.h:1294:1 gtype.h:1308:1 gtype.h:1324:1
#: gtype.h:1388:1 gtype.h:1407:1
msgid "@TN: The name of the new type, in Camel case."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_ABSTRACT_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_ABSTRACT_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE_EXTENDED:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_INTERFACE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_INTERFACE_WITH_CODE:
#: gtype.h:1265:2 gtype.h:1295:2 gtype.h:1309:2 gtype.h:1325:2 gtype.h:1389:1
#: gtype.h:1408:1
msgid ""
"@t_n: The name of the new type, in lowercase, with words separated by '_'."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_ABSTRACT_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_ABSTRACT_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE_EXTENDED:
#: gtype.h:1267:1 gtype.h:1281:1 gtype.h:1297:1 gtype.h:1311:1 gtype.h:1327:1
msgid "@T_P: The #GType of the parent type."
msgstr ""

#. used by: G_DEFINE_TYPE:
#: gtype.h:1269:4
msgid ""
"A convenience macro for type implementations, which declares a class "
"initialization function, an instance initialization function (see #GTypeInfo "
"for information about these) and a static variable named @t_n<!-- --"
">_parent_class pointing to the parent class. Furthermore, it defines a "
"*_get_type() function. See G_DEFINE_TYPE_EXTENDED() for an example."
msgstr ""

#. used by: G_DEFINE_TYPE_WITH_CODE:
#: gtype.h:1280:1
msgid ""
"@t_n: The name of the new type in lowercase, with words separated by '_'."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_TYPE_EXTENDED:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_INTERFACE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_POINTER_TYPE_WITH_CODE:
#: gtype.h:1282:1 gtype.h:1329:1 gtype.h:1411:1 gtype.h:1529:1 gtype.h:1597:1
msgid "@_C_: Custom code that gets inserted in the *_get_type() function."
msgstr ""

#. used by: G_DEFINE_TYPE_WITH_CODE:
#: gtype.h:1284:4
msgid ""
"A convenience macro for type implementations. Similar to G_DEFINE_TYPE(), "
"but allows you to insert custom code into the *_get_type() function, e.g. "
"interface implementations via G_IMPLEMENT_INTERFACE(). See "
"G_DEFINE_TYPE_EXTENDED() for an example."
msgstr ""

#. used by: G_DEFINE_ABSTRACT_TYPE:
#: gtype.h:1299:3
msgid ""
"A convenience macro for type implementations. Similar to G_DEFINE_TYPE(), "
"but defines an abstract type. See G_DEFINE_TYPE_EXTENDED() for an example."
msgstr ""

#. used by: G_TYPE_ENUM:
#: gtype.h:131:1
msgid "The fundamental type from which all enumeration types are derived."
msgstr ""

#. used by: G_DEFINE_ABSTRACT_TYPE_WITH_CODE:
#: gtype.h:1312:1
msgid ""
"@_C_: Custom code that gets inserted in the @type_name_get_type() function."
msgstr ""

#. used by: G_DEFINE_ABSTRACT_TYPE_WITH_CODE:
#: gtype.h:1314:4
msgid ""
"A convenience macro for type implementations. Similar to "
"G_DEFINE_TYPE_WITH_CODE(), but defines an abstract type and allows you to "
"insert custom code into the *_get_type() function, e.g. interface "
"implementations via G_IMPLEMENT_INTERFACE(). See G_DEFINE_TYPE_EXTENDED() "
"for an example."
msgstr ""

#. used by: G_DEFINE_TYPE_EXTENDED:
#: gtype.h:1328:1
msgid "@_f_: #GTypeFlags to pass to g_type_register_static()"
msgstr ""

#. used by: G_DEFINE_TYPE_EXTENDED:
#: gtype.h:1331:2
msgid ""
"The most general convenience macro for type implementations, on which "
"G_DEFINE_TYPE(), etc are based."
msgstr ""

#. used by: G_TYPE_FLAGS:
#: gtype.h:137:1
msgid "The fundamental type from which all flags types are derived."
msgstr ""

#. used by: G_DEFINE_TYPE_EXTENDED:
#: gtype.h:1379:2
msgid ""
"the instance and class structure and the definitions of the instance and "
"class init functions."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_INTERFACE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_INTERFACE_WITH_CODE:
#: gtype.h:1390:2 gtype.h:1409:2
msgid ""
"@T_P: The #GType of the prerequisite type for the interface, or 0 "
"(%G_TYPE_INVALID) for no prerequisite type."
msgstr ""

#. used by: G_DEFINE_INTERFACE:
#: gtype.h:1393:3
msgid ""
"A convenience macro for #GTypeInterface definitions, which declares a "
"default vtable initialization function and defines a *_get_type() function."
msgstr ""

#. used by: G_DEFINE_INTERFACE:
#: gtype.h:1397:3
msgid ""
"The macro expects the interface initialization function to have the name "
"<literal>t_n ## _default_init</literal>, and the interface structure to have "
"the name <literal>TN ## Interface</literal>."
msgstr ""

#. used by: G_DEFINE_INTERFACE_WITH_CODE:
#: gtype.h:1413:6
msgid ""
"A convenience macro for #GTypeInterface definitions. Similar to "
"G_DEFINE_INTERFACE(), but allows you to insert custom code into the "
"*_get_type() function, e.g. additional interface implementations via "
"G_IMPLEMENT_INTERFACE(), or additional prerequisite types. See "
"G_DEFINE_TYPE_EXTENDED() for a similar example using G_DEFINE_TYPE_WITH_CODE"
"()."
msgstr ""

#. used by: G_IMPLEMENT_INTERFACE:
#: gtype.h:1426:1
msgid "@TYPE_IFACE: The #GType of the interface to add"
msgstr ""

#. used by: G_IMPLEMENT_INTERFACE:
#: gtype.h:1427:1
msgid "@iface_init: The interface init function"
msgstr ""

#. used by: G_IMPLEMENT_INTERFACE:
#: gtype.h:1429:3
msgid ""
"A convenience macro to ease interface addition in the @_C_ section of "
"G_DEFINE_TYPE_WITH_CODE() or G_DEFINE_ABSTRACT_TYPE_WITH_CODE(). See "
"G_DEFINE_TYPE_EXTENDED() for an example."
msgstr ""

#. used by: G_TYPE_FLOAT:
#: gtype.h:143:1
msgid "The fundamental type corresponding to #gfloat."
msgstr ""

#. used by: G_IMPLEMENT_INTERFACE:
#: gtype.h:1433:2
msgid ""
"Note that this macro can only be used together with the G_DEFINE_TYPE_* "
"macros, since it depends on variable names from those macros."
msgstr ""

#. used by: G_TYPE_DOUBLE:
#: gtype.h:149:1
msgid "The fundamental type corresponding to #gdouble."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_POINTER_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_POINTER_TYPE_WITH_CODE:
#: gtype.h:1510:1 gtype.h:1524:1 gtype.h:1582:1 gtype.h:1594:1
msgid "@TypeName: The name of the new type, in Camel case."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_POINTER_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_POINTER_TYPE_WITH_CODE:
#: gtype.h:1511:2 gtype.h:1525:2 gtype.h:1583:2 gtype.h:1595:2
msgid ""
"@type_name: The name of the new type, in lowercase, with words separated by "
"'_'."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE_WITH_CODE:
#: gtype.h:1513:1 gtype.h:1527:1
msgid "@copy_func: the #GBoxedCopyFunc for the new type"
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE_WITH_CODE:
#: gtype.h:1514:1 gtype.h:1528:1
msgid "@free_func: the #GBoxedFreeFunc for the new type"
msgstr ""

#. used by: G_DEFINE_BOXED_TYPE:
#: gtype.h:1516:2
msgid ""
"A convenience macro for boxed type implementations, which defines a "
"type_name_get_type() function registering the boxed type."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_VARIANT:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_BOXED_TYPE_WITH_CODE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_POINTER_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_DEFINE_POINTER_TYPE_WITH_CODE:
#: gtype.h:1519:1 gtype.h:1536:1 gtype.h:1589:1 gtype.h:1603:1 gtype.h:197:1
msgid "Since: 2.26"
msgstr ""

#. used by: G_DEFINE_BOXED_TYPE_WITH_CODE:
#: gtype.h:1531:4
msgid ""
"A convenience macro for boxed type implementations. Similar to "
"G_DEFINE_BOXED_TYPE(), but allows to insert custom code into the "
"type_name_get_type() function, e.g. to register value transformations with "
"g_value_register_transform_func()."
msgstr ""

#. used by: G_TYPE_STRING:
#: gtype.h:155:1
msgid "The fundamental type corresponding to nul-terminated C strings."
msgstr ""

#. used by: G_DEFINE_POINTER_TYPE:
#: gtype.h:1586:2
msgid ""
"A convenience macro for pointer type implementations, which defines a "
"type_name_get_type() function registering the pointer type."
msgstr ""

#. used by: G_DEFINE_POINTER_TYPE_WITH_CODE:
#: gtype.h:1599:3
msgid ""
"A convenience macro for pointer type implementations. Similar to "
"G_DEFINE_POINTER_TYPE(), but allows to insert custom code into the "
"type_name_get_type() function."
msgstr ""

#. used by: G_TYPE_POINTER:
#: gtype.h:161:1
msgid "The fundamental type corresponding to #gpointer."
msgstr ""

#. used by: G_TYPE_BOXED:
#: gtype.h:167:1
msgid "The fundamental type from which all boxed types are derived."
msgstr ""

#. used by: G_TYPE_FLAG_RESERVED_ID_BIT:
#: gtype.h:1729:1
msgid "A bit in the type number that's supposed to be left untouched."
msgstr ""

#. used by: G_TYPE_PARAM:
#: gtype.h:173:1
msgid "The fundamental type from which all #GParamSpec types are derived."
msgstr ""

#. used by: G_TYPE_OBJECT:
#: gtype.h:179:1
msgid "The fundamental type for #GObject."
msgstr ""

#. used by: G_TYPE_VARIANT:
#: gtype.h:185:1
msgid "The fundamental type corresponding to #GVariant."
msgstr ""

#. used by: G_TYPE_VARIANT:
#: gtype.h:187:2
msgid ""
"All floating #GVariant instances passed through the #GType system are "
"consumed."
msgstr ""

#. used by: G_TYPE_VARIANT:
#: gtype.h:190:3
msgid ""
"Note that callbacks in closures, and signal handlers for signals of return "
"type %G_TYPE_VARIANT, must never return floating variants."
msgstr ""

#. used by: G_TYPE_VARIANT:
#: gtype.h:194:2
msgid ""
"Note: GLib 2.24 did include a boxed type with this name. It was replaced "
"with this fundamental type in 2.26."
msgstr ""

#. used by: G_TYPE_FUNDAMENTAL_SHIFT:
#: gtype.h:209:1
msgid "Shift value used in converting numbers to type IDs."
msgstr ""

#. used by: G_TYPE_MAKE_FUNDAMENTAL:
#: gtype.h:214:1
msgid "@x: the fundamental type number."
msgstr ""

#. used by: G_TYPE_MAKE_FUNDAMENTAL:
#: gtype.h:216:3
msgid ""
"Get the type ID for the fundamental type number @x. Use "
"g_type_fundamental_next() instead of this macro to create new fundamental "
"types."
msgstr ""

#. used by: G_TYPE_MAKE_FUNDAMENTAL:
#: gtype.h:220:1
msgid "Returns: the GType"
msgstr ""

#. used by: G_TYPE_RESERVED_GLIB_FIRST:
#: gtype.h:226:2
msgid ""
"First fundamental type number to create a new fundamental type id with "
"G_TYPE_MAKE_FUNDAMENTAL() reserved for GLib."
msgstr ""

#. used by: G_TYPE_RESERVED_GLIB_LAST:
#: gtype.h:233:1
msgid "Last fundamental type number reserved for GLib."
msgstr ""

#. used by: G_TYPE_RESERVED_BSE_FIRST:
#: gtype.h:239:2
msgid ""
"First fundamental type number to create a new fundamental type id with "
"G_TYPE_MAKE_FUNDAMENTAL() reserved for BSE."
msgstr ""

#. used by: G_TYPE_RESERVED_BSE_LAST:
#: gtype.h:246:1
msgid "Last fundamental type number reserved for BSE."
msgstr ""

#. used by: G_TYPE_RESERVED_USER_FIRST:
#: gtype.h:252:2
msgid ""
"First available fundamental type number to create new fundamental type id "
"with G_TYPE_MAKE_FUNDAMENTAL()."
msgstr ""

#. used by: G_TYPE_IS_FUNDAMENTAL:
#: gtype.h:264:1
msgid "Checks if @type is a fundamental type."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_FUNDAMENTAL:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_DERIVED:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_INTERFACE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_CLASSED:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_INSTANTIATABLE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_DERIVABLE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_DEEP_DERIVABLE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_ABSTRACT:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_VALUE_ABSTRACT:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_IS_VALUE_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_HAS_VALUE_TABLE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_INSTANCE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_INSTANCE_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_CLASS_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_VALUE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_VALUE_TYPE:
#: gtype.h:266:1 gtype.h:277:1 gtype.h:292:1 gtype.h:301:1 gtype.h:311:1
#: gtype.h:321:1 gtype.h:331:1 gtype.h:342:1 gtype.h:353:1 gtype.h:362:1
#: gtype.h:371:1 gtype.h:467:1 gtype.h:492:1 gtype.h:548:1 gtype.h:560:1
#: gtype.h:573:1
msgid "Returns: %TRUE on success."
msgstr ""

#. used by: G_TYPE_IS_DERIVED:
#: gtype.h:273:3
msgid ""
"Checks if @type is derived (or in object-oriented terminology: inherited) "
"from another type (this holds true for all non-fundamental types)."
msgstr ""

#. used by: G_TYPE_IS_INTERFACE:
#: gtype.h:284:7
msgid ""
"Checks if @type is an interface type. An interface type provides a pure API, "
"the implementation of which is provided by another type (which is then said "
"to conform to the interface).  GLib interfaces are somewhat analogous to "
"Java interfaces and C++ classes containing only pure virtual functions, with "
"the difference that GType interfaces are not derivable (but see "
"g_type_interface_add_prerequisite() for an alternative)."
msgstr ""

#. used by: G_TYPE_IS_CLASSED:
#: gtype.h:299:1
msgid "Checks if @type is a classed type."
msgstr ""

#. used by: G_TYPE_IS_INSTANTIATABLE:
#: gtype.h:308:2
msgid ""
"Checks if @type can be instantiated.  Instantiation is the process of "
"creating an instance (object) of this type."
msgstr ""

#. used by: G_TYPE_IS_DERIVABLE:
#: gtype.h:318:2
msgid ""
"Checks if @type is a derivable type.  A derivable type can be used as the "
"base class of a flat (single-level) class hierarchy."
msgstr ""

#. used by: G_TYPE_IS_DEEP_DERIVABLE:
#: gtype.h:328:2
msgid ""
"Checks if @type is a deep derivable type.  A deep derivable type can be used "
"as the base class of a deep (multi-level) class hierarchy."
msgstr ""

#. used by: G_TYPE_IS_ABSTRACT:
#: gtype.h:338:3
msgid ""
"Checks if @type is an abstract type.  An abstract type can not be "
"instantiated and is normally used as an abstract base class for derived "
"classes."
msgstr ""

#. used by: G_TYPE_IS_VALUE_ABSTRACT:
#: gtype.h:349:3
msgid ""
"Checks if @type is an abstract value type.  An abstract value type "
"introduces a value table, but can't be used for g_value_init() and is "
"normally used as an abstract base type for derived value types."
msgstr ""

#. used by: G_TYPE_FUNDAMENTAL:
#: gtype.h:36:3
msgid ""
"The fundamental type which is the ancestor of @type. Fundamental types are "
"types that serve as ultimate bases for the derived types, thus they are the "
"roots of distinct inheritance hierarchies."
msgstr ""

#. used by: G_TYPE_IS_VALUE_TYPE:
#: gtype.h:360:1
msgid "Checks if @type is a value type and can be used with g_value_init()."
msgstr ""

#. used by: G_TYPE_HAS_VALUE_TABLE:
#: gtype.h:369:1
msgid "Checks if @type has a #GTypeValueTable."
msgstr ""

#. used by: GType:
#: gtype.h:381:2
msgid ""
"A numerical value which represents the unique identifier of a registered "
"type."
msgstr ""

#. used by: GTypeClass:
#: gtype.h:407:1
msgid "An opaque structure used as the base of all classes."
msgstr ""

#. used by: GTypeInstance:
#: gtype.h:417:1
msgid "An opaque structure used as the base of all type instances."
msgstr ""

#. used by: GTypeInterface:
#: gtype.h:427:1
msgid "An opaque structure used as the base of all interface types."
msgstr ""

#. used by: GTypeQuery:
#: gtype.h:437:1
msgid "@type: the #GType value of the type."
msgstr ""

#. used by: GTypeQuery:
#: gtype.h:438:1
msgid "@type_name: the name of the type."
msgstr ""

#. used by: GTypeQuery:
#: gtype.h:439:1
msgid "@class_size: the size of the class structure."
msgstr ""

#. used by: G_TYPE_FUNDAMENTAL_MAX:
#: gtype.h:44:2
msgid ""
"An integer constant that represents the number of identifiers reserved for "
"types that are assigned at compile-time."
msgstr ""

#. used by: GTypeQuery:
#: gtype.h:440:1
msgid "@instance_size: the size of the instance structure."
msgstr ""

#. used by: GTypeQuery:
#: gtype.h:442:2
msgid ""
"A structure holding information for a specific type. It is filled in by the "
"g_type_query() function."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_INSTANCE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_INSTANCE_CAST:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_INSTANCE_TYPE:
#: gtype.h:460:1 gtype.h:472:1 gtype.h:485:1
msgid "@instance: Location of a #GTypeInstance structure."
msgstr ""

#. used by: G_TYPE_CHECK_INSTANCE:
#: gtype.h:462:2
msgid ""
"Checks if @instance is a valid #GTypeInstance structure, otherwise issues a "
"warning and returns %FALSE."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_INSTANCE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_INSTANCE_CAST:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_INSTANCE_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_INSTANCE_GET_CLASS:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_INSTANCE_GET_INTERFACE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_CLASS_CAST:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_CLASS_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_VALUE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_VALUE_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_FROM_INSTANCE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_FROM_CLASS:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_FROM_INTERFACE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_INSTANCE_GET_PRIVATE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CLASS_GET_PRIVATE:
#: gtype.h:465:1 gtype.h:480:1 gtype.h:490:1 gtype.h:507:1 gtype.h:520:1
#: gtype.h:535:1 gtype.h:546:1 gtype.h:558:1 gtype.h:571:1 gtype.h:582:1
#: gtype.h:593:1 gtype.h:604:1 gtype.h:620:1 gtype.h:637:1
msgid "This macro should only be used in type implementations."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_INSTANCE_CAST:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_CLASS_CAST:
#: gtype.h:473:1 gtype.h:528:1
msgid "@g_type: The type to be returned."
msgstr ""

#. used by: G_TYPE_CHECK_INSTANCE_CAST:
#: gtype.h:474:1
msgid "@c_type: The corresponding C type of @g_type."
msgstr ""

#. used by: G_TYPE_CHECK_INSTANCE_CAST:
#: gtype.h:476:3
msgid ""
"Checks that @instance is an instance of the type identified by @g_type and "
"issues a warning if this is not the case. Returns @instance casted to a "
"pointer to @c_type."
msgstr ""

#. used by: G_TYPE_CHECK_INSTANCE_TYPE:
#: gtype.h:486:1
msgid "@g_type: The type to be checked"
msgstr ""

#. used by: G_TYPE_CHECK_INSTANCE_TYPE:
#: gtype.h:488:1
msgid "Checks if @instance is an instance of the type identified by @g_type."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_INSTANCE_GET_CLASS:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_INSTANCE_GET_INTERFACE:
#: gtype.h:497:1 gtype.h:514:1
msgid "@instance: Location of the #GTypeInstance structure."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_CLASS:
#: gtype.h:498:1
msgid "@g_type: The #GType of the class to be returned."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_CLASS:
#: gtype.h:499:1
msgid "@c_type: The C type of the class structure."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_CLASS:
#: gtype.h:501:2
msgid ""
"Get the class structure of a given @instance, casted to a specified ancestor "
"type @g_type of the instance."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_CLASS:
#: gtype.h:504:2
msgid ""
"Note that while calling a GInstanceInitFunc(), the class pointer gets "
"modified, so it might not always return the expected pointer."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_CLASS:
#: gtype.h:509:1
msgid "Returns: a pointer to the class structure"
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_INTERFACE:
#: gtype.h:515:1
msgid "@g_type: The #GType of the interface to be returned."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_INTERFACE:
#: gtype.h:516:1
msgid "@c_type: The C type of the interface structure."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_INTERFACE:
#: gtype.h:518:1
msgid "Get the interface structure for interface @g_type of a given @instance."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_INTERFACE:
#: gtype.h:522:1
msgid "Returns: a pointer to the interface structure"
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_CLASS_CAST:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_CLASS_TYPE:
#: gtype.h:527:1 gtype.h:540:1
msgid "@g_class: Location of a #GTypeClass structure."
msgstr ""

#. used by: G_TYPE_CHECK_CLASS_CAST:
#: gtype.h:529:1
msgid "@c_type: The corresponding C type of class structure of @g_type."
msgstr ""

#. used by: G_TYPE_CHECK_CLASS_CAST:
#: gtype.h:531:3
msgid ""
"Checks that @g_class is a class structure of the type identified by @g_type "
"and issues a warning if this is not the case. Returns @g_class casted to a "
"pointer to @c_type."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_CLASS_TYPE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_VALUE_TYPE:
#: gtype.h:541:1 gtype.h:566:1
msgid "@g_type: The type to be checked."
msgstr ""

#. used by: G_TYPE_CHECK_CLASS_TYPE:
#: gtype.h:543:2
msgid ""
"Checks if @g_class is a class structure of the type identified by @g_type."
msgstr ""

#. used by: G_TYPE_INVALID:
#: gtype.h:55:2
msgid ""
"An invalid #GType used as error return value in some functions which return "
"a #GType."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_VALUE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CHECK_VALUE_TYPE:
#: gtype.h:553:1 gtype.h:565:1
msgid "@value: a #GValue"
msgstr ""

#. used by: G_TYPE_CHECK_VALUE:
#: gtype.h:555:2
msgid "Checks if @value has been initialized to hold values of a value type."
msgstr ""

#. used by: G_TYPE_CHECK_VALUE_TYPE:
#: gtype.h:568:2
msgid "Checks if @value has been initialized to hold values of type @g_type."
msgstr ""

#. used by: G_TYPE_FROM_INSTANCE:
#: gtype.h:578:1
msgid "@instance: Location of a valid #GTypeInstance structure."
msgstr ""

#. used by: G_TYPE_FROM_INSTANCE:
#: gtype.h:580:1
msgid "Get the type identifier from a given @instance structure."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_FROM_INSTANCE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_FROM_CLASS:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_FROM_INTERFACE:
#: gtype.h:584:1 gtype.h:595:1 gtype.h:606:1
msgid "Returns: the #GType"
msgstr ""

#. used by: G_TYPE_FROM_CLASS:
#: gtype.h:589:1
msgid "@g_class: Location of a valid #GTypeClass structure."
msgstr ""

#. used by: G_TYPE_FROM_CLASS:
#: gtype.h:591:1
msgid "Get the type identifier from a given @class structure."
msgstr ""

#. used by: G_TYPE_FROM_INTERFACE:
#: gtype.h:600:1
msgid "@g_iface: Location of a valid #GTypeInterface structure."
msgstr ""

#. used by: G_TYPE_FROM_INTERFACE:
#: gtype.h:602:1
msgid "Get the type identifier from a given @interface structure."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_PRIVATE:
#: gtype.h:612:1
msgid "@instance: the instance of a type deriving from @private_type."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_INSTANCE_GET_PRIVATE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CLASS_GET_PRIVATE:
#: gtype.h:613:1 gtype.h:630:1
msgid "@g_type: the type identifying which private data to retrieve."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_INSTANCE_GET_PRIVATE:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_TYPE_CLASS_GET_PRIVATE:
#: gtype.h:614:1 gtype.h:631:1
msgid "@c_type: The C type for the private structure."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_PRIVATE:
#: gtype.h:616:3
msgid ""
"Gets the private structure for a particular type. The private structure must "
"have been registered in the class_init function with g_type_class_add_private"
"()."
msgstr ""

#. used by: G_TYPE_NONE:
#: gtype.h:62:2
msgid ""
"A fundamental type which is used as a replacement for the C <literal>void</"
"literal> return type."
msgstr ""

#. used by: G_TYPE_INSTANCE_GET_PRIVATE:
#: gtype.h:622:2
msgid "Since: 2.4 Returns: a pointer to the private data structure."
msgstr ""

#. used by: G_TYPE_CLASS_GET_PRIVATE:
#: gtype.h:629:1
msgid "@klass: the class of a type deriving from @private_type."
msgstr ""

#. used by: G_TYPE_CLASS_GET_PRIVATE:
#: gtype.h:633:3
msgid ""
"Gets the private class structure for a particular type. The private "
"structure must have been registered in the get_type() function with "
"g_type_add_class_private()."
msgstr ""

#. used by: G_TYPE_CLASS_GET_PRIVATE:
#: gtype.h:639:2
msgid "Since: 2.24 Returns: a pointer to the private data structure."
msgstr ""

#. used by: GTypeDebugFlags:
#: gtype.h:646:1
msgid "@G_TYPE_DEBUG_NONE: Print no messages."
msgstr ""

#. used by: GTypeDebugFlags:
#: gtype.h:647:1
msgid "@G_TYPE_DEBUG_OBJECTS: Print messages about object bookkeeping."
msgstr ""

#. used by: GTypeDebugFlags:
#: gtype.h:648:1
msgid "@G_TYPE_DEBUG_SIGNALS: Print messages about signal emissions."
msgstr ""

#. used by: GTypeDebugFlags:
#: gtype.h:649:1
msgid "@G_TYPE_DEBUG_MASK: Mask covering all debug flags."
msgstr ""

#. used by: GTypeDebugFlags:
#: gtype.h:651:5
msgid ""
"The <type>GTypeDebugFlags</type> enumeration values can be passed to "
"g_type_init_with_debug_flags() to trigger debugging messages during runtime. "
"Note that the messages can also be triggered by setting the "
"<envar>GOBJECT_DEBUG</envar> environment variable to a ':'-separated list of "
"\"objects\" and \"signals\"."
msgstr ""

#. used by: G_TYPE_INTERFACE:
#: gtype.h:69:1
msgid "The fundamental type from which all interfaces are derived."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GBaseInitFunc:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GClassInitFunc:
#: gtype.h:710:1 gtype.h:735:1
msgid "@g_class: The #GTypeClass structure to initialize."
msgstr ""

#. used by: GBaseInitFunc:
#: gtype.h:712:8
msgid ""
"A callback function used by the type system to do base initialization of the "
"class structures of derived types. It is called as part of the "
"initialization process of all derived classes and should reallocate or reset "
"all dynamic class members copied over from the parent class. For example, "
"class members (such as strings) that are not sufficiently handled by a plain "
"memory copy of the parent class into the derived class have to be altered. "
"See GClassInitFunc() for a discussion of the class intialization process."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GBaseFinalizeFunc:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GClassFinalizeFunc:
#: gtype.h:724:1 gtype.h:841:1
msgid "@g_class: The #GTypeClass structure to finalize."
msgstr ""

#. used by: GBaseFinalizeFunc:
#: gtype.h:726:5
msgid ""
"A callback function used by the type system to finalize those portions of a "
"derived types class structure that were setup from the corresponding "
"GBaseInitFunc() function. Class finalization basically works the inverse way "
"in which class intialization is performed. See GClassInitFunc() for a "
"discussion of the class intialization process."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GClassInitFunc:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GClassFinalizeFunc:
#: gtype.h:736:1 gtype.h:842:1
msgid ""
"@class_data: The @class_data member supplied via the #GTypeInfo structure."
msgstr ""

#. used by: GClassInitFunc:
#: gtype.h:738:33
msgid ""
"A callback function used by the type system to initialize the class of a "
"specific type. This function should initialize all static class members. The "
"initialization process of a class involves: <itemizedlist> <listitem><para> "
"\t1 - Copying common members from the parent class over to the \tderived "
"class structure. </para></listitem> <listitem><para> \t2 -  Zero "
"initialization of the remaining members not copied \tover from the parent "
"class. </para></listitem> <listitem><para> \t3 - Invocation of the "
"GBaseInitFunc() initializers of all parent \ttypes and the class' type. </"
"para></listitem> <listitem><para> \t4 - Invocation of the class' "
"GClassInitFunc() initializer. </para></listitem> </itemizedlist> Since "
"derived classes are partially initialized through a memory copy of the "
"parent class, the general rule is that GBaseInitFunc() and GBaseFinalizeFunc"
"() should take care of necessary reinitialization and release of those class "
"members that were introduced by the type that specified these GBaseInitFunc"
"()/GBaseFinalizeFunc(). GClassInitFunc() should only care about initializing "
"static class members, while dynamic class members (such as allocated strings "
"or reference counted resources) are better handled by a GBaseInitFunc() for "
"this type, so proper initialization of the dynamic class members is "
"performed for class initialization of derived types as well. An example may "
"help to correspond the intend of the different class initializers:"
msgstr ""

#. used by: G_TYPE_CHAR:
#: gtype.h:75:3
msgid ""
"The fundamental type corresponding to #gchar. The type designated by "
"G_TYPE_CHAR is unconditionally an 8-bit signed integer. This may or may not "
"be the same type a the C type \"gchar\"."
msgstr ""

#. used by: GClassInitFunc:
#: gtype.h:816:20
msgid ""
"TypeAClass (derived classes reference their parent classes, see "
"g_type_class_ref() on this). Initialization of TypeAClass roughly involves "
"zero-initializing its fields, then calling its GBaseInitFunc() "
"type_a_base_class_init() to allocate its dynamic members (dynamic_string), "
"and finally calling its GClassInitFunc() type_a_class_init() to initialize "
"its static members (static_integer). The first step in the initialization "
"process of TypeBClass is then a plain memory copy of the contents of "
"TypeAClass into TypeBClass and zero-initialization of the remaining fields "
"in TypeBClass. The dynamic members of TypeAClass within TypeBClass now need "
"reinitialization which is performed by calling type_a_base_class_init() with "
"an argument of TypeBClass. After that, the GBaseInitFunc() of TypeBClass, "
"type_b_base_class_init() is called to allocate the dynamic members of "
"TypeBClass (dynamic_gstring), and finally the GClassInitFunc() of "
"TypeBClass, type_b_class_init(), is called to complete the initialization "
"process with the static members (static_float). Corresponding finalization "
"counter parts to the GBaseInitFunc() functions have to be provided to "
"release allocated resources at class finalization time."
msgstr ""

#. used by: G_TYPE_UCHAR:
#: gtype.h:83:1
msgid "The fundamental type corresponding to #guchar."
msgstr ""

#. used by: GClassFinalizeFunc:
#: gtype.h:844:7
msgid ""
"A callback function used by the type system to finalize a class. This "
"function is rarely needed, as dynamically allocated class resources should "
"be handled by GBaseInitFunc() and GBaseFinalizeFunc(). Also, specification "
"of a GClassFinalizeFunc() in the #GTypeInfo structure of a static type is "
"invalid, because classes of static types will never be finalized (they are "
"artificially kept alive when their reference count drops to zero)."
msgstr ""

#. used by: GInstanceInitFunc:
#: gtype.h:856:1
msgid "@instance: The instance to initialize."
msgstr ""

#. used by: GInstanceInitFunc:
#: gtype.h:857:1
msgid "@g_class: The class of the type the instance is created for."
msgstr ""

#. used by: GInstanceInitFunc:
#: gtype.h:859:7
msgid ""
"A callback function used by the type system to initialize a new instance of "
"a type. This function initializes all instance members and allocates any "
"resources required by it. Initialization of a derived instance involves "
"calling all its parent types instance initializers, so the class member of "
"the instance is altered during its initialization to always point to the "
"class that belongs to the type the current initializer was introduced for."
msgstr ""

#. used by: GInterfaceInitFunc:
#: gtype.h:871:1
msgid "@g_iface: The interface structure to initialize."
msgstr ""

#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GInterfaceInitFunc:
#. #-#-#-#-#  gtype.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GInterfaceFinalizeFunc:
#: gtype.h:872:1 gtype.h:883:1
msgid ""
"@iface_data: The @interface_data supplied via the #GInterfaceInfo structure."
msgstr ""

#. used by: GInterfaceInitFunc:
#: gtype.h:874:3
msgid ""
"A callback function used by the type system to initialize a new interface.  "
"This function should initialize all internal data and allocate any resources "
"required by the interface."
msgstr ""

#. used by: GInterfaceFinalizeFunc:
#: gtype.h:882:1
msgid "@g_iface: The interface structure to finalize."
msgstr ""

#. used by: GInterfaceFinalizeFunc:
#: gtype.h:885:3
msgid ""
"A callback function used by the type system to finalize an interface. This "
"function should destroy any internal data and release any resources "
"allocated by the corresponding GInterfaceInitFunc() function."
msgstr ""

#. used by: G_TYPE_BOOLEAN:
#: gtype.h:89:1
msgid "The fundamental type corresponding to #gboolean."
msgstr ""

#. used by: GTypeClassCacheFunc:
#: gtype.h:893:1
msgid ""
"@cache_data: data that was given to the g_type_add_class_cache_func() call"
msgstr ""

#. used by: GTypeClassCacheFunc:
#: gtype.h:894:1
msgid "@g_class: The #GTypeClass structure which is unreferenced"
msgstr ""

#. used by: GTypeClassCacheFunc:
#: gtype.h:896:5
msgid ""
"A callback function which is called when the reference count of a class "
"drops to zero. It may use g_type_class_ref() to prevent the class from being "
"freed. You should not call g_type_class_unref() from a #GTypeClassCacheFunc "
"function to prevent infinite recursion, use g_type_class_unref_uncached() "
"instead."
msgstr ""

#. used by: GTypeClassCacheFunc:
#: gtype.h:902:3
msgid ""
"The functions have to check the class id passed in to figure whether they "
"actually want to cache the class of this type, since all classes are routed "
"through the same #GTypeClassCacheFunc chain."
msgstr ""

#. used by: GTypeClassCacheFunc:
#: gtype.h:906:2
msgid ""
"Returns: %TRUE to stop further #GTypeClassCacheFunc<!-- -->s from being "
"called, %FALSE to continue."
msgstr ""

#. used by: GTypeInterfaceCheckFunc:
#: gtype.h:913:1
msgid "@check_data: data passed to g_type_add_interface_check()."
msgstr ""

#. used by: GTypeInterfaceCheckFunc:
#: gtype.h:914:1
msgid "@g_iface: the interface that has been initialized"
msgstr ""

#. used by: GTypeInterfaceCheckFunc:
#: gtype.h:916:2
msgid ""
"A callback called after an interface vtable is initialized. See "
"g_type_add_interface_check()."
msgstr ""

#. used by: GTypeFundamentalFlags:
#: gtype.h:925:1
msgid "@G_TYPE_FLAG_CLASSED: Indicates a classed type."
msgstr ""

#. used by: GTypeFundamentalFlags:
#: gtype.h:926:1
msgid ""
"@G_TYPE_FLAG_INSTANTIATABLE: Indicates an instantiable type (implies "
"classed)."
msgstr ""

#. used by: GTypeFundamentalFlags:
#: gtype.h:927:1
msgid "@G_TYPE_FLAG_DERIVABLE: Indicates a flat derivable type."
msgstr ""

#. used by: GTypeFundamentalFlags:
#: gtype.h:928:1
msgid ""
"@G_TYPE_FLAG_DEEP_DERIVABLE: Indicates a deep derivable type (implies "
"derivable)."
msgstr ""

#. used by: GTypeFundamentalFlags:
#: gtype.h:930:2
msgid ""
"Bit masks used to check or determine specific characteristics of a "
"fundamental type."
msgstr ""

#. used by: GTypeFlags:
#: gtype.h:942:2
msgid ""
"@G_TYPE_FLAG_ABSTRACT: Indicates an abstract type. No instances can be "
"created for an abstract type."
msgstr ""

#. used by: GTypeFlags:
#: gtype.h:944:3
msgid ""
"@G_TYPE_FLAG_VALUE_ABSTRACT: Indicates an abstract value type, i.e. a type "
"that introduces a value table, but can't be used for g_value_init()."
msgstr ""

#. used by: GTypeFlags:
#: gtype.h:948:1
msgid "Bit masks used to check or determine characteristics of a type."
msgstr ""

#. used by: G_TYPE_INT:
#: gtype.h:95:1
msgid "The fundamental type corresponding to #gint."
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:957:1
msgid ""
"@class_size: Size of the class structure (required for interface, classed "
"and instantiatable types)."
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:958:1
msgid "@base_init: Location of the base initialization function (optional)."
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:959:1
msgid "@base_finalize: Location of the base finalization function (optional)."
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:960:6
msgid ""
"@class_init: Location of the class initialization function for classed and "
"instantiatable types. Location of the default vtable inititalization "
"function for interface types. (optional) This function is used both to fill "
"in virtual functions in the class or default vtable, and to do type-specific "
"setup such as registering signals and object properties."
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:966:3
msgid ""
"@class_finalize: Location of the class finalization function for classed and "
"instantiatable types. Location fo the default vtable finalization function "
"for interface types. (optional)"
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:969:1
msgid ""
"@class_data: User-supplied data passed to the class init/finalize functions."
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:970:1
msgid ""
"@instance_size: Size of the instance (object) structure (required for "
"instantiatable types only)."
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:971:1
msgid ""
"@n_preallocs: Prior to GLib 2.10, it specified the number of pre-allocated "
"(cached) instances to reserve memory for (0 indicates no caching). Since "
"GLib 2.10, it is ignored, since instances are allocated with the <link "
"linkend=\"glib-Memory-Slices\">slice allocator</link> now."
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:972:1
msgid ""
"@instance_init: Location of the instance initialization function (optional, "
"for instantiatable types only)."
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:973:2
msgid ""
"@value_table: A #GTypeValueTable function table for generic handling of "
"GValues of this type (usually only useful for fundamental types)."
msgstr ""

#. used by: GTypeInfo:
#: gtype.h:976:8
msgid ""
"This structure is used to provide the type system with the information "
"required to initialize and destruct (finalize) a type's class and its "
"instances. The initialized structure is passed to the g_type_register_static"
"() function (or is copied into the provided #GTypeInfo structure in the "
"g_type_plugin_complete_type_info()). The type system will perform a deep "
"copy of this structure, so its memory does not need to be persistent across "
"invocation of g_type_register_static()."
msgstr ""
