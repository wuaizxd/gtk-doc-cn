<!-- ##### SECTION Title ##### -->
引用计数和内存管理 (Reference Counting and Memory Mangement)

<!-- ##### SECTION Short_Description ##### -->

引用计数和内存管理所用到的函数。

<!-- ##### SECTION Long_Description ##### -->
  <para>
    #GdkPixbuf 结构是(计算)引用计数的。这意味着一个应用程序可以在代码的很
    多不同的地方共享一个pixbuf。当程序的一个片段需要保持对一个pixbuf 的指针
    时，应该通过调用 g_object_ref() 来对其增加一个引用。当它不再需要这个
    pixbuf时，因该通过调用 g_object_unref() 来对其减少一个引用。当引用计数
    减小到0时该pixbuf被销毁。新创建的 #GdkPixbuf 结构的引用计数为1。
  </para>

  <note>
    <para>
      因为现在的 #GdkPixbuf 是集成于 #GObject，所以不再推荐使用
       gdk_pixbuf_ref() 和 gdk_pixbuf_unref()，而推荐使用
       g_object_ref() 和 g_object_unref ()。
    </para>
  </note>

  <para>
    <emphasis>析构(Finalizing)</emphasis>一个pixbuf的意思是释放它的
    像素数据进而释放这个 #GdkPixbuf 结构本身。大多数创建 #GdkPixbuf 结构
    的库函数都通过自己创建像素数据且定义释放这些像素数据的方法；不用担心这个。
    唯一的可以让你指定如何释放像素数据的函数是 gdk_pixbuf_new_from_data()。
    因为你为其传递了一个预分配(pre-allocated)的像素缓冲区，所以你必须页指定
    该如何将其释放。这个由 #GdkPixbufDestroyNotify 类型的函数来完成。当一个
    由 gdk_pixbuf_new_from_data() 创建的pixbuf析构(finalize)时，你的销
    毁通知函数将被调用，而且它的责任是释放像素数组。
  </para>

<!-- ##### SECTION See_Also ##### -->
  <para>
    #GdkPixbuf, gdk_pixbuf_new_from_data().
  </para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### FUNCTION gdk_pixbuf_ref ##### -->
  <para>

  </para>

@pixbuf: 
@Returns: 


<!-- ##### FUNCTION gdk_pixbuf_unref ##### -->
<para>

</para>

@pixbuf: 


<!-- ##### USER_FUNCTION GdkPixbufDestroyNotify ##### -->
  <para>
    用这个类型的函数来负责释放一个pixbuf的像素数组。gdk_pixbuf_new_from_data()
    函数需要传递一个预分配(pre-allocated)像素数组来创建一个pixbuf；在这种情况下
    需要传递一个 #GdkPixbufDestroyNotify 函数用来当这个pixbuf析构(finalize)时
    释放像素数组。
  </para>

@pixels: 将要被析构的pixbuf的像素数组。
@data: User closure data.


