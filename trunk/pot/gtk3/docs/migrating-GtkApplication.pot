msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-04-14 19:53+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: migrating-GtkApplication.xml:0(None)
msgid "translator-credits"
msgstr ""

#: migrating-GtkApplication.xml:107(para)
msgid ""
"While libunique expects you to check for an already running instance "
"yourself and activate it manually, GApplication handles all this on its own "
"in g_application_run(). If you still need to find out if there is a running "
"instance of your application, use g_application_get_is_remote() instead of "
"unique_app_is_running()."
msgstr ""

#: migrating-GtkApplication.xml:116(title)
msgid "Commands and Messages"
msgstr ""

#: migrating-GtkApplication.xml:117(para)
msgid ""
"libunique lets you send messages with commands to a running instance using "
"unique_app_send_message(). The commands can be either predefined or custom. "
"Some of the predefined libunique commands have equivalents in GApplication. "
"Instead of sending the %UNIQUE_ACTIVATE command, call g_application_activate"
"(), instead of sending the %UNIQUE_OPEN command, call g_application_open(). "
"The %UNIQUE_NEW and %UNIQUE_CLOSE and user-defined commands don't have "
"direct replacement at this time."
msgstr ""

#: migrating-GtkApplication.xml:128(para)
msgid ""
"As a replacement for custom commands, GApplication implements the "
"#GActionGroup interface and lets you add a group of actions with "
"g_application_set_action_group(). The actions can then be invoked, either by "
"using the D-Bus interface for #GAction directly, or by calling "
"g_action_group_activate_action() from another instance of the GApplication. "
"The #GApplication documentation contains an example for using GApplication "
"with actions."
msgstr ""

#: migrating-GtkApplication.xml:138(para)
msgid ""
"For more complex needs, GApplication supports passing entire commandlines to "
"the running instance."
msgstr ""

#: migrating-GtkApplication.xml:15(para)
msgid ""
"Starting with GLib 2.26, D-Bus support has been integrated into GIO in the "
"form of GDBus, and #GApplication has been added to provide the same level of "
"application support as libunique."
msgstr ""

#: migrating-GtkApplication.xml:21(title)
msgid "A unique application"
msgstr ""

#: migrating-GtkApplication.xml:22(para)
msgid ""
"Here is a simple application using libunique: <placeholder-1/> The same "
"application using GtkApplication: <placeholder-2/>"
msgstr ""

#: migrating-GtkApplication.xml:23(programlisting)
#, no-wrap
msgid ""
"\n"
"int\n"
"main (int argc, char *argv[])\n"
"{\n"
"  UniqueApp *app;\n"
"  GtkWidget *window;\n"
"\n"
"  gtk_init (&amp;argc, &amp;argv);\n"
"\n"
"  app = unique_app_new (\"org.gtk.TestApplication\", NULL);\n"
"\n"
"  if (unique_app_is_running (app))\n"
"    {\n"
"      UniqueResponse response;\n"
"\n"
"      response = unique_app_send_message (app, UNIQUE_ACTIVATE, NULL);\n"
"      g_object_unref (app);\n"
"\n"
"      return response == UNIQUE_RESPONSE_OK ? 0 : 1;\n"
"    }\n"
"\n"
"  window = create_my_window ();\n"
"\n"
"  unique_app_watch_window (app, GTK_WINDOW (window));\n"
"\n"
"  gtk_widget_show (window);\n"
"\n"
"  gtk_main ();\n"
"\n"
"  g_object_unref (app);\n"
"\n"
"  return 0;\n"
"}\n"
msgstr ""

#: migrating-GtkApplication.xml:58(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"activate (GtkApplication *app)\n"
"{\n"
"  GList *list;\n"
"  GtkWidget *window;\n"
"\n"
"  list = gtk_application_get_windows (app);\n"
"\n"
"  if (list)\n"
"    {\n"
"      gtk_window_present (GTK_WINDOW (list-&gt;data));\n"
"    }\n"
"  else\n"
"    {\n"
"      window = create_my_window ();\n"
"      gtk_window_set_application (GTK_WINDOW (window), app);\n"
"      gtk_widget_show (window);\n"
"    }\n"
"}\n"
"\n"
"int\n"
"main (int argc, char *argv[])\n"
"{\n"
"  GtkApplication *app;\n"
"  gint status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.TestApplication\", 0);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"\n"
"  status = g_application_run (app);\n"
"\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: migrating-GtkApplication.xml:7(title)
msgid "Migrating from libunique to GApplication or GtkApplication"
msgstr ""

#: migrating-GtkApplication.xml:9(para)
msgid ""
"libunique offers 'unique application' support as well as ways to communicate "
"with a running application instance. This is implemented in various ways, "
"either using D-Bus, or socket-based communication."
msgstr ""

#: migrating-GtkApplication.xml:97(title)
msgid "Uniqueness"
msgstr ""

#: migrating-GtkApplication.xml:98(para)
msgid ""
"Instead of creating a #UniqueApp with unique_app_new(), create a "
"#GApplication with g_application_new() or a #GtkApplication with "
"gtk_application_new(). The @name that was used with unique_app_new() is very "
"likely usable as the @application_id for g_application_new() without any "
"changes, and GtkApplication passes the <envar>DESKTOP_STARTUP_ID</envar> "
"environment variable automatically."
msgstr ""
