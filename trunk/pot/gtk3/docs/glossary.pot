msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-04-15 23:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: glossary.xml:0(None)
msgid "translator-credits"
msgstr ""

#: glossary.xml:104(para)
msgid ""
"Ellipsization is the process of replacing some part of a text by an ellipsis "
"(usually \"...\") to make the text fit in a smaller space. Pango can "
"ellipsize text at the beginning, at the end or in the middle."
msgstr ""

#: glossary.xml:11(para)
msgid ""
"The final size of a <glossterm linkend=\"widget\">widget</glossterm> within "
"its <glossterm linkend=\"parent\">parent</glossterm>. For example, a widget "
"may request a minimum size of 20&times;20 pixels, but its parent may decide "
"to allocate 50&times;20 pixels for it instead."
msgstr ""

#: glossary.xml:114(glossterm)
msgid "event"
msgstr ""

#: glossary.xml:116(para)
msgid ""
"Events are the way in which GDK informs GTK+ about external events like "
"pointer motion, button clicks, key presses, etc."
msgstr ""

#: glossary.xml:124(glossterm) glossary.xml:83(glossterm)
msgid "geometry"
msgstr ""

#: glossary.xml:126(para)
msgid ""
"A <glossterm linkend=\"widget\">widget's</glossterm> position and size. "
"Within its parent, this is called the widget's <glossterm linkend="
"\"allocation\">allocation</glossterm>."
msgstr ""

#: glossary.xml:135(glossterm) glossary.xml:310(glossterm)
msgid "mapping"
msgstr ""

#: glossary.xml:137(para)
msgid ""
"This is the step in a <glossterm linkend=\"widget\">widget's</glossterm> "
"life cycle where it actually shows the GdkWindows it created when it was "
"<glossterm linkend=\"realization\">realized</glossterm>. When a widget is "
"mapped, it must turn on its %GTK_MAPPED <link linkend=\"GtkWidgetFlags"
"\">flag</link>."
msgstr ""

#: glossary.xml:146(para)
msgid ""
"Note that due to the asynchronous nature of the X window system, a widget's "
"window may not appear on the screen immediatly after one calls "
"gdk_window_show(): you must wait for the corresponding map <glossterm "
"linkend=\"event\">event</glossterm> to be received. You can do this with the "
"<link linkend=\"GtkWidget-map-event\"><methodname>GtkWidget::map-event</"
"methodname> signal</link>."
msgstr ""

#: glossary.xml:160(glossterm) glossary.xml:326(glossterm)
msgid "model column"
msgstr ""

#: glossary.xml:162(para)
msgid ""
"A column in a tree model, holding data of a certain type. The types which "
"can be stored in the columns of a model have to be specified when the model "
"is constructed, see e.g. gtk_list_store_new()."
msgstr ""

#: glossary.xml:169(glossterm) glossary.xml:319(glossterm)
msgid "view column"
msgstr ""

#: glossary.xml:175(glossterm) glossary.xml:62(glossseealso)
msgid "model-view widget"
msgstr ""

#: glossary.xml:177(para)
msgid ""
"These widgets follow the well-known model-view pattern, which separates the "
"data (the model) to be displayed from the component which does the actual "
"visualization (the view). Examples of this pattern in GTK+ are the "
"#GtkTreeView/#GtkTreeModel and #GtkTextView/#GtkTextBuffer"
msgstr ""

#: glossary.xml:183(para)
msgid ""
"One important advantage of this pattern is that it is possible to display "
"the same model in multiple views; another one that the separation of the "
"model allows a great deal of flexibility, as demonstrated by e.g. "
"#GtkTreeModelSort or #GtkTreeModelFilter."
msgstr ""

#: glossary.xml:193(glossterm)
msgid "no-window widget"
msgstr ""

#: glossary.xml:195(para)
msgid ""
"A widget that does not have a GdkWindow of its own on which to draw its "
"contents, but rather shares its <glossterm linkend=\"parent\">parent's</"
"glossterm>. This can be tested with the gtk_widget_get_has_window() "
"function. See <xref linkend=\"window-no-window-widgets\"/> for a detailed "
"description of this flag."
msgstr ""

#: glossary.xml:20(glossterm) glossary.xml:251(glossterm)
msgid "requisition"
msgstr ""

#: glossary.xml:207(glossterm)
msgid "parent"
msgstr ""

#: glossary.xml:209(para)
msgid ""
"A <glossterm linkend=\"widget\">widget's</glossterm> parent is the "
"<glossterm linkend=\"container\">container</glossterm> inside which it "
"resides."
msgstr ""

#: glossary.xml:218(glossterm) glossary.xml:315(glossterm)
msgid "realization"
msgstr ""

#: glossary.xml:220(para)
msgid ""
"This is the step in a <glossterm linkend=\"widget\">widget's</glossterm> "
"life cycle where it creates its own GdkWindow, or otherwise associates "
"itself with its <glossterm linkend=\"parent\">parent's</glossterm> "
"GdkWindow. If the widget has its own window, then it must also attach a "
"<glossterm linkend=\"style\">style</glossterm> to it. A widget becomes "
"unrealized by destroying its associated GdkWindow. When a widget is "
"realized, it must turn on its %GTK_REALIZED <link linkend=\"GtkWidgetFlags"
"\">flag</link>."
msgstr ""

#: glossary.xml:232(para)
msgid ""
"Widgets that don't own the GdkWindow on which they draw are called "
"<glossterm linkend=\"no-window\">no-window widgets</glossterm>. This can be "
"tested with the gtk_widget_get_has_window() function. Normally, these "
"widgets draw on their parent's GdkWindow."
msgstr ""

#: glossary.xml:239(para)
msgid ""
"Note that when a widget creates a window in its <link linkend=\"gtkwidget-"
"realize\"><methodname>::realize()</methodname></link> handler, it does not "
"actually show the window. That is, the window's structure is just created in "
"memory. The widget actually shows the window when it gets <glossterm linkend="
"\"mapping\">mapped</glossterm>."
msgstr ""

#: glossary.xml:253(para)
msgid ""
"The size requisition of a <glossterm linkend=\"widget\">widget</glossterm> "
"is the minimum amount of space it requests from its <glossterm linkend="
"\"parent\">parent</glossterm>. Once the parent computes the widget's final "
"size, it gives it its <glossterm linkend=\"allocation\">size allocation</"
"glossterm>."
msgstr ""

#: glossary.xml:26(glossterm)
msgid "bin"
msgstr ""

#: glossary.xml:262(glossterm) glossary.xml:9(glossterm)
msgid "allocation"
msgstr ""

#: glossary.xml:268(glossterm)
msgid "screen"
msgstr ""

#: glossary.xml:270(para)
msgid ""
"GDK inherited the concept of screen from the X window system, which "
"considers a screen to be a rectangular area, on which applications may place "
"their windows. Screens under X may have quite dissimilar <glossterm linkend="
"\"visual\">visuals</glossterm>. Each screen can stretch across multiple "
"physical monitors."
msgstr ""

#: glossary.xml:277(para)
msgid "In GDK, screens are represented by #GdkScreen objects."
msgstr ""

#: glossary.xml:28(para)
msgid ""
"A <glossterm linkend=\"container\">container</glossterm> that can hold at "
"most one child widget. The base class for bins is #GtkBin."
msgstr ""

#: glossary.xml:284(glossterm)
msgid "style"
msgstr ""

#: glossary.xml:286(para)
msgid ""
"A style encapsulates what GTK+ needs to know in order to draw a widget. "
"Styles can be modified with <link linkend=\"gtk-Resource-Files\">resource "
"files</link>."
msgstr ""

#: glossary.xml:295(glossterm)
msgid "toplevel"
msgstr ""

#: glossary.xml:297(para)
msgid ""
"A <glossterm linkend=\"widget\">widget</glossterm> that does not require a "
"<glossterm linkend=\"parent\">parent</glossterm> container. The only "
"toplevel widgets in GTK+ are #GtkWindow and widgets derived from it."
msgstr ""

#: glossary.xml:303(glossterm) glossary.xml:34(glossterm)
#: glossary.xml:365(glossterm) glossary.xml:67(glossterm)
msgid "container"
msgstr ""

#: glossary.xml:309(glossterm)
msgid "unmap"
msgstr ""

#: glossary.xml:314(glossterm)
msgid "unrealize"
msgstr ""

#: glossary.xml:321(para)
msgid ""
"A displayed column in a tree view, represented by a #GtkTreeViewColumn "
"object."
msgstr ""

#: glossary.xml:332(glossterm)
msgid "visual"
msgstr ""

#: glossary.xml:334(para)
msgid ""
"A visual describes how color information is stored in pixels. A <glossterm "
"linkend=\"screen\">screen</glossterm> may support multiple visuals. On "
"modern hardware, the most common visuals are truecolor visuals, which store "
"a fixed number of bits (typically 8) for the red, green and blue components "
"of a color."
msgstr ""

#: glossary.xml:341(para)
msgid ""
"On ancient hardware, one may still meet indexed visuals, which store color "
"information as an index into a color map, or even monochrome visuals."
msgstr ""

#: glossary.xml:350(glossterm) glossary.xml:82(glossterm)
msgid "widget"
msgstr ""

#: glossary.xml:352(para)
msgid ""
"A control in a graphical user interface. Widgets can draw themselves and "
"process events from the mouse and keyboard. Widget types include buttons, "
"menus, text entry lines, and lists. Widgets can be arranged into <glossterm "
"linkend=\"container\">containers</glossterm>, and these take care of "
"assigning the <glossterm linkend=\"geometry\">geometry</glossterm> of the "
"widgets: every widget thus has a parent except those widgets which are "
"<glossterm linkend=\"toplevel\">toplevels</glossterm>. The base class for "
"widgets is #GtkWidget."
msgstr ""

#: glossary.xml:40(glossterm)
msgid "child"
msgstr ""

#: glossary.xml:42(para)
msgid ""
"A <glossterm linkend=\"container\">container's</glossterm> child is a "
"<glossterm linkend=\"widget\">widget</glossterm> contained inside it."
msgstr ""

#: glossary.xml:51(glossterm)
msgid "column"
msgstr ""

#: glossary.xml:53(para)
msgid ""
"GTK+ contains several widgets which display data in columns, e.g. the "
"#GtkTreeView. These <glossterm linkend=\"view-column\">view columns</"
"glossterm> in the tree view are represented by #GtkTreeViewColumn objects "
"inside GTK+. They should not be confused with <glossterm linkend=\"model-"
"column\">model columns</glossterm> which are used to organize the data in "
"tree models."
msgstr ""

#: glossary.xml:6(title)
msgid "Glossary"
msgstr ""

#: glossary.xml:69(para)
msgid ""
"A <glossterm linkend=\"widget\">widget</glossterm> that contains other "
"widgets; in that case, the container is the <emphasis>parent</emphasis> of "
"the <emphasis>child</emphasis> widgets. Some containers don't draw anything "
"on their own, but rather just organize their children's <glossterm linkend="
"\"geometry\">geometry</glossterm>; for example, #GtkVBox lays out its "
"children vertically without painting anything on its own. Other containers "
"include decorative elements; for example, #GtkFrame contains the frame's "
"child and a label in addition to the shaded frame it draws. The base class "
"for containers is #GtkContainer."
msgstr ""

#: glossary.xml:89(glossterm)
msgid "display"
msgstr ""

#: glossary.xml:91(para)
msgid ""
"GDK inherited the concept of display from the X window system, which "
"considers a display to be the combination of a keyboard, a pointing device "
"and one or more <glossterm linkend=\"screen\">screens</glossterm>. "
"Applications open a display to show windows and interact with the user. In "
"GDK, a display is represented by a #GdkDisplay."
msgstr ""
