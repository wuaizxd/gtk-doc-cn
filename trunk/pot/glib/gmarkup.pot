# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 10:05-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. used by: g_markup_parse_context_parse:
#: gmarkup.c:1000:1
msgid "@text_len: length of @text in bytes"
msgstr ""

#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_parse:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_end_parse:
#: gmarkup.c:1001:1 gmarkup.c:1684:1
msgid "@error: return location for a #GError"
msgstr ""

#. used by: g_markup_parse_context_parse:
#: gmarkup.c:1003:1
msgid "Feed some data to the #GMarkupParseContext."
msgstr ""

#. used by: g_markup_parse_context_parse:
#: gmarkup.c:1005:8
msgid ""
"The data need not be valid UTF-8; an error will be signaled if it's invalid. "
"The data need not be an entire document; you can feed a document into the "
"parser incrementally, via multiple calls to this function. Typically, as you "
"receive data from a network connection or file, you feed each received chunk "
"of data into this function, aborting the process if an error occurs. Once an "
"error is reported, no further data may be fed to the #GMarkupParseContext; "
"all errors are fatal."
msgstr ""

#. used by: g_markup_parse_context_parse:
#: gmarkup.c:1014:1
msgid "Return value: %FALSE if an error occurred, %TRUE on success"
msgstr ""

#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_free:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_parse:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_end_parse:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_get_element:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_get_element_stack:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_get_position:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_get_user_data:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_push:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_pop:
#: gmarkup.c:1683:1 gmarkup.c:1810:1 gmarkup.c:1835:1 gmarkup.c:1862:1
#: gmarkup.c:1887:1 gmarkup.c:1909:1 gmarkup.c:2052:1 gmarkup.c:280:1
#: gmarkup.c:998:1
msgid "@context: a #GMarkupParseContext"
msgstr ""

#. used by: g_markup_parse_context_end_parse:
#: gmarkup.c:1686:2
msgid ""
"Signals to the #GMarkupParseContext that all data has been fed into the "
"parse context with g_markup_parse_context_parse()."
msgstr ""

#. used by: g_markup_parse_context_end_parse:
#: gmarkup.c:1689:2
msgid ""
"This function reports an error if the document isn't complete, for example "
"if elements are still open."
msgstr ""

#. used by: g_markup_parse_context_end_parse:
#: gmarkup.c:1692:1
msgid "Return value: %TRUE on success, %FALSE if an error was set"
msgstr ""

#. used by: g_markup_parse_context_get_element:
#: gmarkup.c:1812:1
msgid "Retrieves the name of the currently open element."
msgstr ""

#. used by: g_markup_parse_context_get_element:
#: gmarkup.c:1814:3
msgid ""
"If called from the start_element or end_element handlers this will give the "
"element_name as passed to those functions. For the parent elements, see "
"g_markup_parse_context_get_element_stack()."
msgstr ""

#. used by: g_markup_parse_context_get_element:
#: gmarkup.c:1818:1
msgid "Returns: the name of the currently open element, or %NULL"
msgstr ""

#. used by: g_markup_parse_context_get_element:
#: gmarkup.c:1820:1
msgid "Since: 2.2"
msgstr ""

#. used by: g_markup_parse_context_get_element_stack:
#: gmarkup.c:1837:1
msgid "Retrieves the element stack from the internal state of the parser."
msgstr ""

#. used by: g_markup_parse_context_get_element_stack:
#: gmarkup.c:1839:4
msgid ""
"The returned #GSList is a list of strings where the first item is the "
"currently open tag (as would be returned by "
"g_markup_parse_context_get_element()) and the next item is its immediate "
"parent."
msgstr ""

#. used by: g_markup_parse_context_get_element_stack:
#: gmarkup.c:1844:4
msgid ""
"This function is intended to be used in the start_element and end_element "
"handlers where g_markup_parse_context_get_element() would merely return the "
"name of the element that is being processed."
msgstr ""

#. used by: g_markup_parse_context_get_element_stack:
#: gmarkup.c:1849:1
msgid "Returns: the element stack, which must not be modified"
msgstr ""

#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_get_element_stack:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_collect_attributes:
#: gmarkup.c:1851:1 gmarkup.c:2607:1
msgid "Since: 2.16"
msgstr ""

#. used by: g_markup_parse_context_get_position:
#: gmarkup.c:1863:1
msgid "@line_number: (allow-none): return location for a line number, or %NULL"
msgstr ""

#. used by: g_markup_parse_context_get_position:
#: gmarkup.c:1864:1
msgid ""
"@char_number: (allow-none): return location for a char-on-line number, or "
"%NULL"
msgstr ""

#. used by: g_markup_parse_context_get_position:
#: gmarkup.c:1866:4
msgid ""
"Retrieves the current line number and the number of the character on that "
"line. Intended for use in error messages; there are no strict semantics for "
"what constitutes the \"current\" line number other than \"the best number we "
"could come up with for error messages.\""
msgstr ""

#. used by: g_markup_parse_context_get_user_data:
#: gmarkup.c:1889:1
msgid "Returns the user_data associated with @context."
msgstr ""

#. used by: g_markup_parse_context_get_user_data:
#: gmarkup.c:1891:3
msgid ""
"This will either be the user_data that was provided to "
"g_markup_parse_context_new() or to the most recent call of "
"g_markup_parse_context_push()."
msgstr ""

#. used by: g_markup_parse_context_get_user_data:
#: gmarkup.c:1895:3
msgid ""
"Returns: the provided user_data. The returned data belongs to the markup "
"context and will be freed when g_markup_context_free() is called."
msgstr ""

#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_get_user_data:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_push:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_pop:
#: gmarkup.c:1899:1 gmarkup.c:2028:1 gmarkup.c:2070:1
msgid "Since: 2.18"
msgstr ""

#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_new:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_push:
#: gmarkup.c:1910:1 gmarkup.c:202:1
msgid "@parser: a #GMarkupParser"
msgstr ""

#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_new:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_push:
#: gmarkup.c:1911:1 gmarkup.c:204:1
msgid "@user_data: user data to pass to #GMarkupParser functions"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1913:1
msgid "Temporarily redirects markup data to a sub-parser."
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1915:4
msgid ""
"This function may only be called from the start_element handler of a "
"#GMarkupParser. It must be matched with a corresponding call to "
"g_markup_parse_context_pop() in the matching end_element handler (except in "
"the case that the parser aborts due to an error)."
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1920:5
msgid ""
"All tags, text and other data between the matching tags is redirected to the "
"subparser given by @parser. @user_data is used as the user_data for that "
"parser. @user_data is also passed to the error callback in the event that an "
"error occurs. This includes errors that occur in subparsers of the subparser."
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1926:8
msgid ""
"The end tag matching the start tag for which this call was made is handled "
"by the previous parser (which is given its own user_data) which is why "
"g_markup_parse_context_pop() is provided to allow \"one last access\" to the "
"@user_data provided to this function. In the case of error, the @user_data "
"provided here is passed directly to the error callback of the subparser and "
"g_markup_parse_context() should not be called. In either case, if @user_data "
"was allocated then it ought to be freed from both of these locations."
msgstr ""

#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_push:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_parse_context_pop:
#: gmarkup.c:1935:4 gmarkup.c:2063:4
msgid ""
"This function is not intended to be directly called by users interested in "
"invoking subparsers. Instead, it is intended to be used by the subparsers "
"themselves to implement a higher-level interface."
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1940:2
msgid ""
"As an example, see the following implementation of a simple parser that "
"counts the number of tags encountered."
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1943:5
msgid "|[ typedef struct { gint tag_count; } CounterData;"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1949:9
msgid ""
"static void counter_start_element (GMarkupParseContext  *context, const "
"gchar          *element_name, const gchar         **attribute_names, const "
"gchar         **attribute_values, gpointer              user_data, "
"GError              **error) { CounterData *data = user_data;"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1959:2
msgid "data->tag_count++; }"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1962:6
msgid ""
"static void counter_error (GMarkupParseContext *context, GError              "
"*error, gpointer             user_data) { CounterData *data = user_data;"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1969:2
msgid "g_slice_free (CounterData, data); }"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1972:9
msgid ""
"static GMarkupParser counter_subparser = { counter_start_element, NULL, "
"NULL, NULL, counter_error }; ]|"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1982:2
msgid ""
"In order to allow this parser to be easily used as a subparser, the "
"following interface is provided:"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1985:5
msgid ""
"|[ void start_counting (GMarkupParseContext *context) { CounterData *data = "
"g_slice_new (CounterData);"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1991:3
msgid ""
"data->tag_count = 0; g_markup_parse_context_push (context, "
"&counter_subparser, data); }"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:1995:5
msgid ""
"gint end_counting (GMarkupParseContext *context) { CounterData *data = "
"g_markup_parse_context_pop (context); int result;"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:2001:2
msgid "result = data->tag_count; g_slice_free (CounterData, data);"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:2004:3
msgid "return result; } ]|"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:2008:1
msgid "The subparser would then be used as follows:"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:2010:5
msgid ""
"|[ static void start_element (context, element_name, ...) { if (strcmp "
"(element_name, \"count-these\") == 0) start_counting (context);"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:2016:2
msgid "/&ast; else, handle other tags... &ast;/ }"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:2019:4
msgid ""
"static void end_element (context, element_name, ...) { if (strcmp "
"(element_name, \"count-these\") == 0) g_print (\"Counted %d tags\\n\", "
"end_counting (context));"
msgstr ""

#. used by: g_markup_parse_context_push:
#: gmarkup.c:2024:3
msgid "/&ast; else, handle other tags... &ast;/ } ]|"
msgstr ""

#. used by: g_markup_parse_context_new:
#: gmarkup.c:203:1
msgid "@flags: one or more #GMarkupParseFlags"
msgstr ""

#. used by: g_markup_parse_context_new:
#: gmarkup.c:205:2
msgid ""
"@user_data_dnotify: user data destroy notifier called when the parse context "
"is freed"
msgstr ""

#. used by: g_markup_parse_context_pop:
#: gmarkup.c:2054:1
msgid "Completes the process of a temporary sub-parser redirection."
msgstr ""

#. used by: g_markup_parse_context_pop:
#: gmarkup.c:2056:6
msgid ""
"This function exists to collect the user_data allocated by a matching call "
"to g_markup_parse_context_push(). It must be called in the end_element "
"handler corresponding to the start_element handler during which "
"g_markup_parse_context_push() was called. You must not call this function "
"from the error callback -- the @user_data is provided directly to the "
"callback in that case."
msgstr ""

#. used by: g_markup_parse_context_pop:
#: gmarkup.c:2068:1
msgid "Returns: the user data passed to g_markup_parse_context_push()"
msgstr ""

#. used by: g_markup_parse_context_new:
#: gmarkup.c:208:5
msgid ""
"Creates a new parse context. A parse context is used to parse marked-up "
"documents. You can feed any number of documents into a context, as long as "
"no errors occur; once an error occurs, the parse context can't continue to "
"parse text (you have to free it and create a new parse context)."
msgstr ""

#. used by: g_markup_parse_context_new:
#: gmarkup.c:214:1
msgid "Return value: a new #GMarkupParseContext"
msgstr ""

#. used by: g_markup_escape_text:
#: gmarkup.c:2149:1
msgid "@text: some valid UTF-8 text"
msgstr ""

#. used by: g_markup_escape_text:
#: gmarkup.c:2150:1
msgid "@length: length of @text in bytes, or -1 if the text is nul-terminated"
msgstr ""

#. used by: g_markup_escape_text:
#: gmarkup.c:2152:4
msgid ""
"Escapes text so that the markup parser will parse it verbatim. Less than, "
"greater than, ampersand, etc. are replaced with the corresponding entities. "
"This function would typically be used when writing out a file to be parsed "
"with the markup parser."
msgstr ""

#. used by: g_markup_escape_text:
#: gmarkup.c:2157:3
msgid ""
"Note that this function doesn't protect whitespace and line endings from "
"being processed according to the XML rules for normalization of line endings "
"and attribute values."
msgstr ""

#. used by: g_markup_escape_text:
#: gmarkup.c:2161:5
msgid ""
"Note also that this function will produce character references in the range "
"of &amp;#x1; ... &amp;#x1f; for all control sequences except for tabstop, "
"newline and carriage return.  The character references in this range are not "
"valid XML 1.0, but they are valid XML 1.1 and will be accepted by the "
"GMarkup parser."
msgstr ""

#. used by: g_markup_escape_text:
#: gmarkup.c:2167:1
msgid "Return value: a newly allocated string with the escaped text"
msgstr ""

#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_vprintf_escaped:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_printf_escaped:
#: gmarkup.c:2315:1 gmarkup.c:2455:1
msgid "@format: printf() style format string"
msgstr ""

#. used by: g_markup_vprintf_escaped:
#: gmarkup.c:2316:1
msgid "@args: variable argument list, similar to vprintf()"
msgstr ""

#. used by: g_markup_vprintf_escaped:
#: gmarkup.c:2318:3
msgid ""
"Formats the data in @args according to @format, escaping all string and "
"character arguments in the fashion of g_markup_escape_text(). See "
"g_markup_printf_escaped()."
msgstr ""

#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_vprintf_escaped:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_printf_escaped:
#: gmarkup.c:2322:2 gmarkup.c:2477:2
msgid ""
"Return value: newly allocated result from formatting operation. Free with "
"g_free()."
msgstr ""

#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_vprintf_escaped:
#. #-#-#-#-#  gmarkup.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_markup_printf_escaped:
#: gmarkup.c:2325:1 gmarkup.c:2480:1
msgid "Since: 2.4"
msgstr ""

#. used by: g_markup_printf_escaped:
#: gmarkup.c:2456:1
msgid "@Varargs: the arguments to insert in the format string"
msgstr ""

#. used by: g_markup_printf_escaped:
#: gmarkup.c:2458:6
msgid ""
"Formats arguments according to @format, escaping all string and character "
"arguments in the fashion of g_markup_escape_text(). This is useful when you "
"want to insert literal strings into XML-style markup output, without having "
"to worry that the strings might themselves contain markup."
msgstr ""

#. used by: g_markup_printf_escaped:
#: gmarkup.c:2465:11
msgid ""
"|[ const char *store = \"Fortnum &amp; Mason\"; const char *item = \"Tea\"; "
"char *output; &nbsp; output = g_markup_printf_escaped (\"&lt;purchase&gt;\" "
"\"&lt;store&gt;&percnt;s&lt;/store&gt;\" \"&lt;item&gt;&percnt;s&lt;/item&gt;"
"\" \"&lt;/purchase&gt;\", store, item); ]|"
msgstr ""

#. used by: GMarkupCollectType:
#: gmarkup.c:2530:2
msgid ""
"@G_MARKUP_COLLECT_INVALID: used to terminate the list of attributes to "
"collect"
msgstr ""

#. used by: GMarkupCollectType:
#: gmarkup.c:2532:4
msgid ""
"@G_MARKUP_COLLECT_STRING: collect the string pointer directly from the "
"attribute_values[] array. Expects a parameter of type (const char **). If "
"%G_MARKUP_COLLECT_OPTIONAL is specified and the attribute isn't present then "
"the pointer will be set to %NULL"
msgstr ""

#. used by: GMarkupCollectType:
#: gmarkup.c:2536:3
msgid ""
"@G_MARKUP_COLLECT_STRDUP: as with %G_MARKUP_COLLECT_STRING, but expects a "
"parameter of type (char **) and g_strdup()s the returned pointer. The "
"pointer must be freed with g_free()"
msgstr ""

#. used by: GMarkupCollectType:
#: gmarkup.c:2539:5
msgid ""
"@G_MARKUP_COLLECT_BOOLEAN: expects a parameter of type (gboolean *) and "
"parses the attribute value as a boolean. Sets %FALSE if the attribute isn't "
"present. Valid boolean values consist of (case-insensitive) \"false\", \"f"
"\", \"no\", \"n\", \"0\" and \"true\", \"t\", \"yes\", \"y\", \"1\""
msgstr ""

#. used by: GMarkupCollectType:
#: gmarkup.c:2544:4
msgid ""
"@G_MARKUP_COLLECT_TRISTATE: as with %G_MARKUP_COLLECT_BOOLEAN, but in the "
"case of a missing attribute a value is set that compares equal to neither "
"%FALSE nor %TRUE G_MARKUP_COLLECT_OPTIONAL is implied"
msgstr ""

#. used by: GMarkupCollectType:
#: gmarkup.c:2548:3
msgid ""
"@G_MARKUP_COLLECT_OPTIONAL: can be bitwise ORed with the other fields. If "
"present, allows the attribute not to appear. A default value is set "
"depending on what value type is used"
msgstr ""

#. used by: GMarkupCollectType:
#: gmarkup.c:2552:3
msgid ""
"A mixed enumerated type and flags field. You must specify one type (string, "
"strdup, boolean, tristate).  Additionally, you may  optionally bitwise OR "
"the type with the flag %G_MARKUP_COLLECT_OPTIONAL."
msgstr ""

#. used by: GMarkupCollectType:
#: gmarkup.c:2556:2
msgid ""
"It is likely that this enum will be extended in the future to support other "
"types."
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2562:1
msgid "@element_name: the current tag name"
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2563:1
msgid "@attribute_names: the attribute names"
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2564:1
msgid "@attribute_values: the attribute values"
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2565:1
msgid "@error: a pointer to a #GError or %NULL"
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2566:1
msgid "@first_type: the #GMarkupCollectType of the first attribute"
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2567:1
msgid "@first_attr: the name of the first attribute"
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2568:3
msgid ""
"@...: a pointer to the storage location of the first attribute (or %NULL), "
"followed by more types names and pointers, ending with "
"%G_MARKUP_COLLECT_INVALID"
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2572:3
msgid ""
"Collects the attributes of the element from the data passed to the "
"#GMarkupParser start_element function, dealing with common error conditions "
"and supporting boolean values."
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2576:2
msgid ""
"This utility function is not required to write a parser but can save a lot "
"of typing."
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2579:3
msgid ""
"The @element_name, @attribute_names, @attribute_values and @error parameters "
"passed to the start_element callback should be passed unmodified to this "
"function."
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2583:4
msgid ""
"Following these arguments is a list of \"supported\" attributes to collect. "
"It is an error to specify multiple attributes with the same name. If any "
"attribute not in the list appears in the @attribute_names array then an "
"unknown attribute error will result."
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2588:2
msgid ""
"The #GMarkupCollectType field allows specifying the type of collection to "
"perform and if a given attribute must appear or is optional."
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2591:1
msgid "The attribute name is simply the name of the attribute to collect."
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2593:3
msgid ""
"The pointer should be of the appropriate type (see the descriptions under "
"#GMarkupCollectType) and may be %NULL in case a particular attribute is to "
"be allowed but ignored."
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2597:7
msgid ""
"This function deals with issuing errors for missing attributes (of type "
"%G_MARKUP_ERROR_MISSING_ATTRIBUTE), unknown attributes (of type "
"%G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE) and duplicate attributes (of type "
"%G_MARKUP_ERROR_INVALID_CONTENT) as well as parse errors for boolean-valued "
"attributes (again of type %G_MARKUP_ERROR_INVALID_CONTENT). In all of these "
"cases %FALSE will be returned and @error will be set as appropriate."
msgstr ""

#. used by: g_markup_collect_attributes:
#: gmarkup.c:2605:1
msgid "Return value: %TRUE if successful"
msgstr ""

#. used by: g_markup_parse_context_free:
#: gmarkup.c:282:1
msgid "Frees a #GMarkupParseContext."
msgstr ""

#. used by: g_markup_parse_context_free:
#: gmarkup.c:284:2
msgid ""
"This function can't be called from inside one of the #GMarkupParser "
"functions or while a subparser is pushed."
msgstr ""

#. used by: SECTION:markup
#: gmarkup.c:40:1
msgid "@Title: Simple XML Subset Parser"
msgstr ""

#. used by: SECTION:markup
#: gmarkup.c:41:1
msgid "@Short_description: parses a subset of XML"
msgstr ""

#. used by: SECTION:markup
#: gmarkup.c:42:2
msgid ""
"@See_also: <ulink url=\"http://www.w3.org/TR/REC-xml/\">XML Specification</"
"ulink>"
msgstr ""

#. used by: SECTION:markup
#: gmarkup.c:45:9
msgid ""
"The \"GMarkup\" parser is intended to parse a simple markup format that's a "
"subset of XML. This is a small, efficient, easy-to-use parser. It should not "
"be used if you expect to interoperate with other applications generating "
"full-scale XML. However, it's very useful for application data files, config "
"files, etc. where you know your application will be the only one writing the "
"file. Full-scale XML parsers should be able to parse the subset used by "
"GMarkup, so you can easily migrate to full-scale XML at a later time if the "
"need arises."
msgstr ""

#. used by: SECTION:markup
#: gmarkup.c:55:7
msgid ""
"GMarkup is not guaranteed to signal an error on all invalid XML; the parser "
"may accept documents that an XML parser would not. However, XML documents "
"which are not well-formed<footnote id=\"wellformed\">Being wellformed is a "
"weaker condition than being valid. See the <ulink url=\"http://www.w3.org/TR/"
"REC-xml/\">XML specification</ulink> for definitions of these terms.</"
"footnote> are not considered valid GMarkup documents."
msgstr ""

#. used by: SECTION:markup
#: gmarkup.c:63:8
msgid ""
"Simplifications to XML include: <itemizedlist> <listitem>Only UTF-8 encoding "
"is allowed</listitem> <listitem>No user-defined entities</listitem> "
"<listitem>Processing instructions, comments and the doctype declaration are "
"\"passed through\" but are not interpreted in any way</listitem> "
"<listitem>No DTD or validation.</listitem> </itemizedlist>"
msgstr ""

#. used by: SECTION:markup
#: gmarkup.c:72:10
msgid ""
"The markup format does support: <itemizedlist> <listitem>Elements</listitem> "
"<listitem>Attributes</listitem> <listitem>5 standard entities: <literal>&amp;"
"amp; &amp;lt; &amp;gt; &amp;quot; &amp;apos;</literal> </listitem> "
"<listitem>Character references</listitem> <listitem>Sections marked as "
"CDATA</listitem> </itemizedlist>"
msgstr ""

#. used by: g_markup_parse_context_parse:
#: gmarkup.c:999:1
msgid "@text: chunk of text to parse"
msgstr ""

#. used by: GMarkupParseContext:
#: gmarkup.h:102:2
msgid ""
"A parse context is used to parse a stream of bytes that you expect to "
"contain marked-up text."
msgstr ""

#. used by: GMarkupParseContext:
#: gmarkup.h:105:2
msgid ""
"See g_markup_parse_context_new(), #GMarkupParser, and so on for more details."
msgstr ""

#. used by: GMarkupParser:
#: gmarkup.h:113:2
msgid ""
"@start_element: Callback to invoke when the opening tag of an element is "
"seen."
msgstr ""

#. used by: GMarkupParser:
#: gmarkup.h:115:3
msgid ""
"@end_element: Callback to invoke when the closing tag of an element is seen. "
"Note that this is also called for empty tags like <literal>&lt;empty/&gt;</"
"literal>."
msgstr ""

#. used by: GMarkupParser:
#: gmarkup.h:118:5
msgid ""
"@text: Callback to invoke when some text is seen (text is always inside an "
"element). Note that the text of an element may be spread over multiple calls "
"of this function. If the %G_MARKUP_TREAT_CDATA_AS_TEXT flag is set, this "
"function is also called for the content of CDATA marked sections."
msgstr ""

#. used by: GMarkupParser:
#: gmarkup.h:123:5
msgid ""
"@passthrough: Callback to invoke for comments, processing instructions and "
"doctype declarations; if you're re-writing the parsed document, write the "
"passthrough text back out in the same position. If the "
"%G_MARKUP_TREAT_CDATA_AS_TEXT flag is not set, this function is also called "
"for CDATA marked sections."
msgstr ""

#. used by: GMarkupParser:
#: gmarkup.h:128:1
msgid "@error: Callback to invoke when an error occurs."
msgstr ""

#. used by: GMarkupParser:
#: gmarkup.h:130:7
msgid ""
"Any of the fields in #GMarkupParser can be %NULL, in which case they will be "
"ignored. Except for the @error function, any of these callbacks can set an "
"error; in particular the %G_MARKUP_ERROR_UNKNOWN_ELEMENT, "
"%G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE, and %G_MARKUP_ERROR_INVALID_CONTENT "
"errors are intended to be set from these callbacks. If you set an error from "
"a callback, g_markup_parse_context_parse() will report that error back to "
"its caller."
msgstr ""

#. used by: GMarkupError:
#: gmarkup.h:37:11
msgid ""
"@G_MARKUP_ERROR_BAD_UTF8: text being parsed was not valid UTF-8 "
"@G_MARKUP_ERROR_EMPTY: document contained nothing, or only whitespace "
"@G_MARKUP_ERROR_PARSE: document was ill-formed "
"@G_MARKUP_ERROR_UNKNOWN_ELEMENT: error should be set by #GMarkupParser "
"functions; element wasn't known @G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE: error "
"should be set by #GMarkupParser functions; attribute wasn't known "
"@G_MARKUP_ERROR_INVALID_CONTENT: error should be set by #GMarkupParser "
"functions; content was invalid @G_MARKUP_ERROR_MISSING_ATTRIBUTE: error "
"should be set by #GMarkupParser functions; a required attribute was missing"
msgstr ""

#. used by: GMarkupError:
#: gmarkup.h:49:1
msgid "Error codes returned by markup parsing."
msgstr ""

#. used by: G_MARKUP_ERROR:
#: gmarkup.h:68:3
msgid ""
"Error domain for markup parsing. Errors in this domain will be from the "
"#GMarkupError enumeration. See #GError for information on error domains."
msgstr ""

#. used by: GMarkupParseFlags:
#: gmarkup.h:78:1
msgid "@G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG: flag you should not use"
msgstr ""

#. used by: GMarkupParseFlags:
#: gmarkup.h:79:5
msgid ""
"@G_MARKUP_TREAT_CDATA_AS_TEXT: When this flag is set, CDATA marked sections "
"are not passed literally to the @passthrough function of the parser. "
"Instead, the content of the section (without the <literal>&lt;![CDATA[</"
"literal> and <literal>]]&gt;</literal>) is passed to the @text function. "
"This flag was added in GLib 2.12"
msgstr ""

#. used by: GMarkupParseFlags:
#: gmarkup.h:84:5
msgid ""
"@G_MARKUP_PREFIX_ERROR_POSITION: Normally errors caught by GMarkup itself "
"have line/column information prefixed to them to let the caller know the "
"location of the error. When this flag is set the location information is "
"also prefixed to errors generated by the #GMarkupParser implementation "
"functions"
msgstr ""

#. used by: GMarkupParseFlags:
#: gmarkup.h:90:1
msgid "Flags that affect the behaviour of the parser."
msgstr ""
