msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-04-15 23:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: getting_started.xml:0(None)
msgid "translator-credits"
msgstr ""

#: getting_started.xml:102(para)
msgid ""
"In the long tradition of programming languages and libraries, it is called "
"<emphasis>Hello, World</emphasis>."
msgstr ""

#: getting_started.xml:110(title)
msgid "Hello World in GTK+"
msgstr ""

#: getting_started.xml:113(fallback) getting_started.xml:144(fallback)
#: getting_started.xml:182(fallback) getting_started.xml:203(fallback)
#: getting_started.xml:209(fallback) getting_started.xml:28(fallback)
msgid "FIXME: MISSING XINCLUDE CONTENT"
msgstr ""

#: getting_started.xml:120(title)
msgid "Packing"
msgstr ""

#: getting_started.xml:122(para)
msgid ""
"When creating an application, you'll want to put more than one widget inside "
"a window. Our first helloworld example only used one widget so we could "
"simply use a gtk_container_add() call to \"pack\" the widget into the "
"window. But when you want to put more than one widget into a window, it it "
"becomes important to control how each widget is positioned and sized. This "
"is where packing comes in."
msgstr ""

#: getting_started.xml:129(para)
msgid ""
"GTK+ comes with a large variety of <firstterm>layout containers</firstterm> "
"whose purpose it is to control the layout of the child widgets that are "
"added to them. See <xref linkend=\"LayoutContainers\"/> for an overview."
msgstr ""

#: getting_started.xml:133(para)
msgid ""
"The following example shows how the GtkGrid container lets you arrange "
"several buttons:"
msgstr ""

#: getting_started.xml:141(title)
msgid "Packing buttons"
msgstr ""

#: getting_started.xml:151(title)
msgid "Drawing"
msgstr ""

#: getting_started.xml:153(para)
msgid ""
"Many widgets, like buttons, do all their drawing themselves. You just tell "
"them the label you want to see, and they figure out what font to use, draw "
"the button outline and focus rectangle, etc. Sometimes, it is necessary to "
"do some custom drawing. In that case, a #GtkDrawingArea might be the right "
"widget to use. It offers a canvas on which you can draw by connecting to the "
"#GtkWidget::draw signal."
msgstr ""

#: getting_started.xml:16(title)
msgid "Basics"
msgstr ""

#: getting_started.xml:161(para)
msgid ""
"The contents of a widget often need to be partially or fully redrawn, e.g. "
"when another window is moved and uncovers part of the widget, or when tie "
"window containing it is resized. It is also possible to explicitly cause "
"part or all of the widget to be redrawn, by calling gtk_widget_queue_draw() "
"or its variants. GTK+ takes care of most of the details by providing a ready-"
"to-use cairo context to the ::draw signal handler."
msgstr ""

#: getting_started.xml:169(para)
msgid ""
"The following example shows a ::draw signal handler. It is a bit more "
"complicated than the previous examples, since it also demonstrates input "
"event handling by means of ::button-press and ::motion-notify handlers."
msgstr ""

#: getting_started.xml:179(title)
msgid "Drawing in response to input"
msgstr ""

#: getting_started.xml:18(para)
msgid ""
"To begin our introduction to GTK, we'll start with the simplest program "
"possible. This program will create an empty 200x200 pixel window:"
msgstr ""

#: getting_started.xml:189(title)
msgid "Building interfaces"
msgstr ""

#: getting_started.xml:191(para)
msgid ""
"When construcing a more complicated user interface, with dozens or hundreds "
"of widgets, doing all the setup work in C code is cumbersome, and making "
"changes becomes next to impossible."
msgstr ""

#: getting_started.xml:195(para)
msgid ""
"Thankfully, GTK+ supports the separation of user interface layout from your "
"business logic, by using UI descriptions in an XML format that can be parsed "
"by the #GtkBuilder class."
msgstr ""

#: getting_started.xml:199(example)
msgid ""
"<placeholder-1/><placeholder-2/> The builder.ui file looks like this: "
"<placeholder-3/>"
msgstr ""

#: getting_started.xml:200(title)
msgid "Packing buttons with GtkBuilder"
msgstr ""

#: getting_started.xml:214(para)
msgid ""
"Note that GtkBuilder can also be used to construct objects that are not "
"widgets, such as tree models, adjustments, etc. That is the reason the "
"method we use here is called gtk_builder_get_object() and returns a GObject* "
"instead of a GtkWidget*."
msgstr ""

#: getting_started.xml:220(para)
msgid ""
"Normally, you would pass a full path to gtk_builder_add_from_file() to make "
"the execution of your program independent of the current directory. A common "
"location to install UI descriptions and similar data is <filename>/usr/share/"
"<replaceable>appname</replaceable></filename>."
msgstr ""

#: getting_started.xml:227(para)
msgid ""
"It is also possible to embed the UI description in the source code as a "
"string and use gtk_builder_add_from_string() to load it. But keeping the UI "
"description in a separate file has several advantages: It is then possible "
"to make minor adjustments to the UI without recompiling your program, and, "
"more importantly, graphical UI editors such as <ulink url=\"http://glade."
"gnome.org\">glade</ulink> can load the file and allow you to create and "
"modify your UI by point-and-click."
msgstr ""

#: getting_started.xml:32(para)
msgid "You can compile the program above with GCC using:"
msgstr ""

#: getting_started.xml:35(literal)
msgid ""
"gcc `pkg-config --cflags gtk+-3.0` -o window-default window-default.c `pkg-"
"config --libs gtk+-3.0`"
msgstr ""

#: getting_started.xml:38(para)
msgid ""
"For more information on how to compile a GTK+ application, please refer to "
"the <link linkend=\"gtk-compiling\">Compiling GTK+ Applications</link> "
"section in this reference."
msgstr ""

#: getting_started.xml:42(para)
msgid ""
"All GTK+ applications will, of course, include <filename>gtk/gtk.h</"
"filename>, which declares functions, types and macros required by GTK+ "
"applications."
msgstr ""

#: getting_started.xml:46(para)
msgid ""
"Even if GTK+ installs multiple header files, only the top-level "
"<filename>gtk/gtk.h</filename> header can be directly included by third "
"party code. The compiler will abort with an error if any other header is "
"directly included."
msgstr ""

#: getting_started.xml:51(para)
msgid ""
"We then proceed into the <function>main</function>() function of the "
"application, and we declare a <varname>window</varname> variable as a "
"pointer of type #GtkWidget."
msgstr ""

#: getting_started.xml:55(para)
msgid ""
"The following line will call gtk_init(), which is the initialization "
"function for GTK+; this function will set up GTK+, the type system, the "
"connection to the windowing environment, etc. The gtk_init() takes as "
"arguments the pointers to the command line arguments counter and string "
"array; this allows GTK+ to parse specific command line arguments that "
"control the behavior of GTK+ itself. The parsed arguments will be removed "
"from the array, leaving the unrecognized ones for your application to parse."
msgstr ""

#: getting_started.xml:6(title)
msgid "Getting Started with GTK+"
msgstr ""

#: getting_started.xml:64(para)
msgid ""
"For more information on which command line arguments GTK+ recognizes, please "
"refer to the <link linkend=\"gtk-running\">Running GTK+ Applications</link> "
"section in this reference."
msgstr ""

#: getting_started.xml:68(para)
msgid ""
"The call to gtk_window_new() will create a new #GtkWindow and store it "
"inside the <varname>window</varname> variable. The type of the window is "
"%GTK_WINDOW_TOPLEVEL, which means that the #GtkWindow will be managed by the "
"windowing system: it will have a frame, a title bar and window controls, "
"depending on the platform."
msgstr ""

#: getting_started.xml:74(para)
msgid ""
"In order to terminate the application when the #GtkWindow is destroyed, we "
"connect the #GtkWidget::destroy signal to the gtk_main_quit() function. This "
"function will terminate the GTK+ main loop started by calling gtk_main() "
"later. The #GtkWidget::destroy signal is emitted when a widget is destroyed, "
"either by explicitly calling gtk_widget_destroy() or when the widget is "
"unparented. Top-level #GtkWindows are also destroyed when the Close window "
"control button is clicked."
msgstr ""

#: getting_started.xml:8(para)
msgid ""
"This chapter is contains some tutorial information to get you started with "
"GTK+ programming. It assumes that you have GTK+, its dependencies and a C "
"compiler installed and ready to use. If you need to build GTK+ itself first, "
"refer to the <link linkend=\"gtk-compiling\">Compiling the GTK+ libraries</"
"link> section in this reference."
msgstr ""

#: getting_started.xml:82(para)
msgid ""
"#GtkWidgets are hidden by default. By calling gtk_widget_show() on a "
"#GtkWidget we are asking GTK+ to set the visibility attribute so that it can "
"be displayed. All this work is done after the main loop has been started."
msgstr ""

#: getting_started.xml:87(para)
msgid ""
"The last line of interest is the call to gtk_main(). This function will "
"start the GTK+ main loop and will block the control flow of the main() until "
"the gtk_main_quit() function is called."
msgstr ""

#: getting_started.xml:91(para)
msgid ""
"While the program is running, GTK+ is receiving <firstterm>events</"
"firstterm>. These are typically input events caused by the user interacting "
"with your program, but also things like messages from the window manager or "
"other applications. GTK+ processes these and as a result, "
"<firstterm>signals</firstterm> may be emitted on your widgets. Connecting "
"handlers for these signals is how you normally make your program do "
"something in response to user input."
msgstr ""

#: getting_started.xml:99(para)
msgid ""
"The following example is slightly more complex, and tries to showcase some "
"of the capabilities of GTK+."
msgstr ""
