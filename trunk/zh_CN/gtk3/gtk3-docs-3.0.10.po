# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
#
#
# wei  <weihuoya@126.com>, 2011
msgid ""
msgstr ""
"Project-Id-Version: GTK+ Reference Manual\n"
"Report-Msgid-Bugs-To: http://code.google.com/p/gtk-doc-cn/issues\n"
"POT-Creation-Date: 2011-06-02 18:21+0800\n"
"PO-Revision-Date: 2011-06-02 18:29+0800\n"
"Last-Translator: weihuoya <weihuoya@126.com>\n"
"Language-Team: Chinese (China) <gtk-doc-cn@googlegroups.com>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0\n"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: building.sgml:0(None) compiling.sgml:0(None) drawing-model.xml:0(None)
#: getting_started.xml:0(None) glossary.xml:0(None) gtk-docs.sgml:0(None)
#: gtk-query-immodules-3.0.xml:0(None) gtk-update-icon-cache.xml:0(None)
#: migrating-2to3.xml:0(None) migrating-GtkApplication.xml:0(None)
#: migrating-GtkStyleContext.xml:0(None) migrating-checklist.sgml:0(None)
#: osx.sgml:0(None) overview.xml:0(None) question_index.sgml:0(None)
#: resources.sgml:0(None) running.sgml:0(None) text_widget.sgml:0(None)
#: tree_widget.sgml:0(None) visual_index.xml:0(None) windows.sgml:0(None)
#: x11.sgml:0(None)
msgid "translator-credits"
msgstr ""

#: building.sgml:110(programlisting)
#, no-wrap
msgid ""
"\n"
"      CPPFLAGS=\"-I/opt/gtk/include\"\n"
"      LDFLAGS=\"-L/opt/gtk/lib\"\n"
"      PKG_CONFIG_PATH=\"/opt/gtk/lib/pkgconfig\"\n"
"      export CPPFLAGS LDFLAGS PKG_CONFIG_PATH\n"
"    "
msgstr ""

#: building.sgml:116(para)
msgid ""
"You may also need to set the <envar>LD_LIBRARY_PATH</envar> environment "
"variable so the systems dynamic linker can find the newly installed "
"libraries, and the <envar>PATH</envar> environment program so that utility "
"binaries installed by the various libraries will be found."
msgstr ""

#: building.sgml:123(programlisting)
#, no-wrap
msgid ""
"\n"
"      LD_LIBRARY_PATH=\"/opt/gtk/lib\"\n"
"      PATH=\"/opt/gtk/bin:$PATH\"\n"
"      export LD_LIBRARY_PATH PATH\n"
"    "
msgstr ""

#: building.sgml:13(refname)
msgid "Compiling the GTK+ Libraries"
msgstr ""

#: building.sgml:130(title)
msgid "Dependencies"
msgstr ""

#: building.sgml:131(para)
msgid ""
"Before you can compile the GTK+ widget toolkit, you need to have various "
"other tools and libraries installed on your system. The two tools needed "
"during the build process (as differentiated from the tools used in when "
"creating GTK+ mentioned above such as <application>autoconf</application>) "
"are <command>pkg-config</command> and GNU make."
msgstr ""

#: building.sgml:14(refpurpose)
msgid "How to compile GTK+ itself"
msgstr ""

#: building.sgml:141(para)
msgid ""
"<ulink url=\"http://pkg-config.freedesktop.org\">pkg-config</ulink> is a "
"tool for tracking the compilation flags needed for libraries that are used "
"by the GTK+ libraries. (For each library, a small <literal>.pc</literal> "
"text file is installed in a standard location that contains the compilation "
"flags needed for that library along with version number information.)"
msgstr ""

#: building.sgml:152(para)
msgid ""
"The GTK+ makefiles will mostly work with different versions of "
"<command>make</command>, however, there tends to be a few incompatibilities, "
"so the GTK+ team recommends installing <ulink url=\"http://www.gnu.org/"
"software/make\">GNU make</ulink> if you don't already have it on your system "
"and using it. (It may be called <command>gmake</command> rather than "
"<command>make</command>.)"
msgstr ""

#: building.sgml:163(para)
msgid ""
"Some of the libraries that GTK+ depends on are maintained by by the GTK+ "
"team: GLib, GdkPixbuf, Pango, and ATK. Other libraries are maintained "
"separately."
msgstr ""

#: building.sgml:170(para)
msgid ""
"The GLib library provides core non-graphical functionality such as high "
"level data types, Unicode manipulation, and an object and type system to C "
"programs. It is available from the <ulink url=\"ftp://ftp.gtk.org/pub/glib/"
"\">GTK+ FTP site</ulink>."
msgstr ""

#: building.sgml:179(para)
msgid ""
"<ulink url=\"http://www.pango.org\">Pango</ulink> is a library for "
"internationalized text handling. It is available from the <ulink url=\"ftp://"
"ftp.gtk.org/pub/pango/\">GTK+ FTP site</ulink>."
msgstr ""

#: building.sgml:187(para)
msgid ""
"ATK is the Accessibility Toolkit. It provides a set of generic interfaces "
"allowing accessibility technologies such as screen readers to interact with "
"a graphical user interface. It is available from the <ulink url=\"ftp://ftp."
"gtk.org/pub/atk/\">GTK+ FTP site</ulink>."
msgstr ""

#: building.sgml:19(title)
msgid "Building GTK+ on UNIX-like systems"
msgstr ""

#: building.sgml:196(para)
msgid ""
"The <ulink url=\"http://www.gnu.org/software/libiconv/\">GNU libiconv "
"library</ulink> is needed to build GLib if your system doesn't have the "
"<function>iconv()</function> function for doing conversion between character "
"encodings. Most modern systems should have <function>iconv()</function>."
msgstr ""

#: building.sgml:20(para)
msgid ""
"This chapter covers building and installing GTK+ on UNIX and UNIX-like "
"systems such as Linux. Compiling GTK+ on Microsoft Windows is different in "
"detail and somewhat more difficult to get going since the necessary tools "
"aren't included with the operating system."
msgstr ""

#: building.sgml:206(para)
msgid ""
"The libintl library from the <ulink url=\"http://www.gnu.org/software/"
"gettext/\">GNU gettext package</ulink> is needed if your system doesn't have "
"the <function>gettext()</function> functionality for handling message "
"translation databases."
msgstr ""

#: building.sgml:215(para)
msgid ""
"The libraries from the X window system are needed to build Pango and GTK+. "
"You should already have these installed on your system, but it's possible "
"that you'll need to install the development environment for these libraries "
"that your operating system vendor provides."
msgstr ""

#: building.sgml:224(para)
msgid ""
"The <ulink url=\"http://www.fontconfig.org\">fontconfig</ulink> library "
"provides Pango with a standard way of locating fonts and matching them "
"against font names."
msgstr ""

#: building.sgml:231(para)
msgid ""
"<ulink url=\"http://www.cairographics.org\">Cairo</ulink> is a graphics "
"library that supports vector graphics and image compositing. Both Pango and "
"GTK+ use cairo for all of their drawing."
msgstr ""

#: building.sgml:239(para)
msgid ""
"The GdkPixbuf library provides facilities for loading images in a variety of "
"file formats."
msgstr ""

#: building.sgml:245(para)
msgid ""
"<ulink url=\"http://live.gnome.org/GObjectIntrospection\">gobject-"
"introspection</ulink> is a framework for making introspection data available "
"to language bindings."
msgstr ""

#: building.sgml:252(para)
msgid ""
"The <ulink url=\"http://www.freedesktop.org/wiki/Software/shared-mime-info"
"\">shared-mime-info</ulink> package is not a hard dependency of GTK+, but it "
"contains definitions for mime types that are used by GIO and, indirectly, by "
"GTK+. gdk-pixbuf will use GIO for mime type detection if possible. For this "
"to work, shared-mime-info needs to be installed and <envar>XDG_DATA_DIRS</"
"envar> set accordingly at configure time. Otherwise, gdk-pixbuf falls back "
"to its built-in mime type detection."
msgstr ""

#: building.sgml:265(title)
msgid "Building and testing GTK+"
msgstr ""

#: building.sgml:266(para)
msgid ""
"First make sure that you have the necessary external dependencies installed: "
"<command>pkg-config</command>, GNU make, the JPEG, PNG, and TIFF libraries, "
"FreeType, and, if necessary, libiconv and libintl. To get detailed "
"information about building these packages, see the documentation provided "
"with the individual packages. On a Linux system, it's quite likely you'll "
"have all of these installed already except for <command>pkg-config</command>."
msgstr ""

#: building.sgml:27(para)
msgid ""
"Before we get into the details of how to compile GTK+, we should mention "
"that in many cases, binary packages of GTK+ prebuilt for your operating "
"system will be available, either from your operating system vendor or from "
"independent sources. If such a set of packages is available, installing it "
"will get you programming with GTK+ much faster than building it yourself. In "
"fact, you may well already have GTK+ installed on your system already."
msgstr ""

#: building.sgml:276(para)
msgid ""
"Then build and install the GTK+ libraries in the order: GLib, Pango, ATK, "
"then GTK+. For each library, follow the steps of <literal>configure</"
"literal>, <literal>make</literal>, <literal>make install</literal> mentioned "
"above. If you're lucky, this will all go smoothly, and you'll be ready to "
"<link linkend=\"gtk-compiling\">start compiling your own GTK+ applications</"
"link>. You can test your GTK+ installation by running the <command>gtk3-"
"demo</command> program that GTK+ installs."
msgstr ""

#: building.sgml:287(para)
msgid ""
"If one of the <filename>configure</filename> scripts fails or running "
"<command>make</command> fails, look closely at the error messages printed; "
"these will often provide useful information as to what went wrong. When "
"<filename>configure</filename> fails, extra information, such as errors that "
"a test compilation ran into, is found in the file <filename>config.log</"
"filename>. Looking at the last couple of hundred lines in this file will "
"frequently make clear what went wrong. If all else fails, you can ask for "
"help on the gtk-list mailing list. See <xref linkend=\"gtk-resources\"/> for "
"more information."
msgstr ""

#: building.sgml:301(title)
msgid "Extra Configuration Options"
msgstr ""

#: building.sgml:303(para)
msgid ""
"In addition to the normal options, the <command>configure</command> script "
"for the GTK+ library supports a number of additional arguments. (Command "
"line arguments for the other GTK+ libraries are described in the "
"documentation distributed with the those libraries.) "
"<cmdsynopsis><command>configure</command><sbr/><group><arg>--disable-"
"modules</arg><arg>--enable-modules</arg></group><sbr/><group><arg>--with-"
"included-immodules=MODULE1,MODULE2,...</arg></group><sbr/><group><arg>--"
"enable-debug=[no/minimum/yes]</arg></group><sbr/><group><arg>--disable-"
"Bsymbolic</arg><arg>--enable-Bsymbolic</arg></group><sbr/><group><arg>--"
"disable-xkb</arg><arg>--enable-xkb</arg></group><sbr/><group><arg>--disable-"
"xinerama</arg><arg>--enable-xinerama</arg></group><sbr/><group><arg>--"
"disable-gtk-doc</arg><arg>--enable-gtk-doc</arg></group><sbr/><group><arg>--"
"disable-cups</arg><arg>--enable-cups</arg></group><sbr/><group><arg>--"
"disable-papi</arg><arg>--enable-papi</arg></group><sbr/><group><arg>--enable-"
"xinput</arg><arg>--disable-xinput</arg></group><sbr/><group><arg>--enable-"
"packagekit</arg><arg>--disable-packagekit</arg></group><sbr/><group><arg>--"
"enable-x11-backend</arg><arg>--disable-x11-backend</arg><arg>--enable-win32-"
"backend</arg><arg>--disable-win32-backend</arg><arg>--enable-quartz-backend</"
"arg><arg>--disable-quartz-backend</arg></group><sbr/><group><arg>--enable-"
"introspection=[no/auto/yes]</arg></group><sbr/><group><arg>--enable-gtk2-"
"dependency</arg><arg>--disable-gtk2-dependency</arg></group></cmdsynopsis>"
msgstr ""

#: building.sgml:37(para)
msgid ""
"On UNIX-like systems GTK+ uses the standard GNU build system, using "
"<application>autoconf</application> for package configuration and resolving "
"portability issues, <application>automake</application> for building "
"makefiles that comply with the GNU Coding Standards, and "
"<application>libtool</application> for building shared libraries on multiple "
"platforms."
msgstr ""

#: building.sgml:387(title)
msgid ""
"<systemitem>--disable-modules</systemitem> and <systemitem>--enable-modules</"
"systemitem>"
msgstr ""

#: building.sgml:390(para)
msgid ""
"Normally GTK+ will try to build the input method modules as little shared "
"libraries that are loaded on demand. The <systemitem>--disable-modules</"
"systemitem> argument indicates that they should all be built statically into "
"the GTK+ library instead. This is useful for people who need to produce "
"statically-linked binaries. If neither <systemitem>--disable-modules</"
"systemitem> nor <systemitem>--enable-modules</systemitem> is specified, then "
"the <command>configure</command> script will try to auto-detect whether "
"shared modules work on your system."
msgstr ""

#: building.sgml:405(systemitem)
msgid "--with-included-immodules"
msgstr ""

#: building.sgml:407(para)
msgid ""
"This option allows you to specify which input method modules you want to "
"include directly into the GTK+ shared library, as opposed to building them "
"as loadable modules."
msgstr ""

#: building.sgml:415(systemitem)
msgid "--enable-debug"
msgstr ""

#: building.sgml:417(para)
msgid ""
"Turns on various amounts of debugging support. Setting this to 'no' disables "
"g_assert(), g_return_if_fail(), g_return_val_if_fail() and all cast checks "
"between different object types. Setting it to 'minimum' disables only cast "
"checks. Setting it to 'yes' enables <link linkend=\"GTK-Debug-Options"
"\">runtime debugging</link>. The default is 'minimum'. Note that 'no' is "
"fast, but dangerous as it tends to destabilize even mostly bug-free software "
"by changing the effect of many bugs from simple warnings into fatal crashes. "
"Thus <option>--enable-debug=no</option> should <emphasis>not</emphasis> be "
"used for stable releases of GTK+."
msgstr ""

#: building.sgml:432(title)
msgid ""
"<systemitem>--disable-Bsymbolic</systemitem> and <systemitem>--enable-"
"Bsymbolic</systemitem>"
msgstr ""

#: building.sgml:434(para)
msgid ""
"The option <systemitem>--disable-Bsymbolic</systemitem> turns off the use of "
"the -Bsymbolic-functions linker flag. This is only necessary if you want to "
"override GTK+ functions by using <envar>LD_PRELOAD</envar>."
msgstr ""

#: building.sgml:443(title)
msgid ""
"<systemitem>--enable-explicit-deps</systemitem> and <systemitem>--disable-"
"explicit-deps</systemitem>"
msgstr ""

#: building.sgml:445(para)
msgid ""
"If <systemitem>--enable-explicit-deps</systemitem> is specified then GTK+ "
"will write the full set of libraries that GTK+ depends upon into its "
"<literal>.pc</literal> files to be used when programs depending on GTK+ are "
"linked. Otherwise, GTK+ only will include the GTK+ libraries themselves, and "
"will depend on system library dependency facilities to bring in the other "
"libraries. By default GTK+ will disable explicit dependencies unless it "
"detects that they are needed on the system. (If you specify <systemitem>--"
"enable-static</systemitem> to force building of static libraries, then "
"explicit dependencies will be written since library dependencies don't work "
"for static libraries.) Specifying <systemitem>--enable-explicit-deps</"
"systemitem> or <systemitem>--enable-static</systemitem> can cause "
"compatibility problems when libraries that GTK+ depends upon change their "
"versions, and should be avoided if possible."
msgstr ""

#: building.sgml:46(para)
msgid ""
"If you are building GTK+ from the distributed source packages, then you "
"won't need these tools installed; the necessary pieces of the tools are "
"already included in the source packages. But it's useful to know a bit about "
"how packages that use these tools work. A source package is distributed as a "
"<literal>tar.gz</literal> or <literal>tar.bz2</literal> file which you "
"unpack into a directory full of the source files as follows:"
msgstr ""

#: building.sgml:468(title)
msgid ""
"<systemitem>--disable-xkb</systemitem> and <systemitem>--enable-xkb</"
"systemitem>"
msgstr ""

#: building.sgml:471(para)
msgid ""
"By default the <command>configure</command> script will try to auto-detect "
"whether the XKB extension is supported by the X libraries GTK+ is linked "
"with. These options can be used to explicitly control whether GTK+ will "
"support the XKB extension."
msgstr ""

#: building.sgml:481(title)
msgid ""
"<systemitem>--disable-xinerama</systemitem> and <systemitem>--enable-"
"xinerama</systemitem>"
msgstr ""

#: building.sgml:484(para)
msgid ""
"By default the <command>configure</command> script will try to link against "
"the Xinerama libraries if they are found. These options can be used to "
"explicitly control whether Xinerama should be used."
msgstr ""

#: building.sgml:493(title)
msgid ""
"<systemitem>--disable-xinput</systemitem> and <systemitem>--enable-xinput</"
"systemitem>"
msgstr ""

#: building.sgml:495(para)
msgid ""
"Controls whether GTK+ is built with support for the XInput or XInput2 "
"extension. These extensions provide an extended interface to input devices "
"such as graphics tablets. When this support is compiled in, specially "
"written GTK+ programs can get access to subpixel positions, multiple "
"simultaneous input devices, and extra \"axes\" provided by the device such "
"as pressure and tilt information."
msgstr ""

#: building.sgml:508(title)
msgid ""
"<systemitem>--disable-gtk-doc</systemitem> and <systemitem>--enable-gtk-doc</"
"systemitem>"
msgstr ""

#: building.sgml:511(para)
msgid ""
"The <application>gtk-doc</application> package is used to generate the "
"reference documentation included with GTK+. By default support for "
"<application>gtk-doc</application> is disabled because it requires various "
"extra dependencies to be installed. If you have <application>gtk-doc</"
"application> installed and are modifying GTK+, you may want to enable "
"<application>gtk-doc</application> support by passing in <systemitem>--"
"enable-gtk-doc</systemitem>. If not enabled, pre-generated HTML files "
"distributed with GTK+ will be installed."
msgstr ""

#: building.sgml:527(title)
msgid ""
"<systemitem>--disable-cups</systemitem> and <systemitem>--enable-cups</"
"systemitem>"
msgstr ""

#: building.sgml:530(para)
msgid ""
"By default the <command>configure</command> script will try to build the "
"cups print backend if the cups libraries are found. These options can be "
"used to explicitly control whether the cups print backend should be built."
msgstr ""

#: building.sgml:539(title)
msgid ""
"<systemitem>--disable-papi</systemitem> and <systemitem>--enable-papi</"
"systemitem>"
msgstr ""

#: building.sgml:542(para)
msgid ""
"By default the <command>configure</command> script will try to build the "
"papi print backend if the papi libraries are found. These options can be "
"used to explicitly control whether the papi print backend should be built."
msgstr ""

#: building.sgml:55(programlisting)
#, no-wrap
msgid ""
"\n"
"      tar xvfz gtk+-3.0.0.tar.gz\n"
"      tar xvfj gtk+-3.0.0.tar.bz2\n"
"    "
msgstr ""

#: building.sgml:551(title)
msgid ""
"<systemitem>--disable-packagekit</systemitem> and <systemitem>--enable-"
"packagekit</systemitem>"
msgstr ""

#: building.sgml:553(para)
msgid ""
"By default the <command>configure</command> script will try to build the "
"PackageKit support for the open-with dialog if the PackageKit libraries are "
"found. These options can be used to explicitly control whether PackageKit "
"support should be built."
msgstr ""

#: building.sgml:563(title)
msgid ""
"<systemitem>--enable-x11-backend</systemitem>, <systemitem>--disable-x11-"
"backend</systemitem>, <systemitem>--enable-win32-backend</systemitem>, "
"<systemitem>--disable-win32-backend</systemitem>, <systemitem>--enable-"
"quartz-backend</systemitem>, and <systemitem>--disable-quartz-backend</"
"systemitem>"
msgstr ""

#: building.sgml:570(para)
msgid ""
"Enables specific backends for GDK. If none of these options are given, the "
"x11 backend will be enabled by default, unless the platform is Windows, in "
"which case the default is win32. If any backend is explicitly enabled or "
"disabled, no other platform will be enabled automatically. Other supported "
"backends are the quartz backend for OS X."
msgstr ""

#: building.sgml:581(systemitem)
msgid "--enable-introspection"
msgstr ""

#: building.sgml:583(para)
msgid "Build with or without introspection support. The default is 'auto'."
msgstr ""

#: building.sgml:59(para)
msgid ""
"In the toplevel directory that is created, there will be a shell script "
"called <filename>configure</filename> which you then run to take the "
"template makefiles called <filename>Makefile.in</filename> in the package "
"and create makefiles customized for your operating system. The "
"<filename>configure</filename> script can be passed various command line "
"arguments to determine how the package is built and installed. The most "
"commonly useful argument is the <systemitem>--prefix</systemitem> argument "
"which determines where the package is installed. To install a package in "
"<filename>/opt/gtk</filename> you would run configure as:"
msgstr ""

#: building.sgml:590(title)
msgid ""
"<systemitem>--enable-gtk2-dependency</systemitem> or <systemitem>--disable-"
"gtk2-dependency</systemitem>"
msgstr ""

#: building.sgml:593(para)
msgid ""
"Whether to rely on an exiting gtk-update-icon-cache utility instead of "
"building our own. Distributions which are shipping both GTK+ 2.x and GTK+ 3 "
"may want to use this option to avoid file conflicts between these packages. "
"The default is to build gtk-update-icon-cache."
msgstr ""

#: building.sgml:7(refentrytitle)
msgid "Compiling the GTK+ libraries"
msgstr ""

#: building.sgml:72(programlisting)
#, no-wrap
msgid ""
"\n"
"      ./configure --prefix=/opt/gtk\n"
"    "
msgstr ""

#: building.sgml:75(para)
msgid ""
"A full list of options can be found by running <filename>configure</"
"filename> with the <systemitem>--help</systemitem> argument. In general, the "
"defaults are right and should be trusted. After you've run "
"<filename>configure</filename>, you then run the <command>make</command> "
"command to build the package and install it."
msgstr ""

#: building.sgml:8(manvolnum) compiling.sgml:8(manvolnum)
#: drawing-model.xml:8(manvolnum) osx.sgml:8(manvolnum)
#: question_index.sgml:8(manvolnum) resources.sgml:8(manvolnum)
#: running.sgml:8(manvolnum) text_widget.sgml:8(manvolnum)
#: tree_widget.sgml:8(manvolnum) windows.sgml:8(manvolnum)
#: x11.sgml:8(manvolnum)
msgid "3"
msgstr "3"

#: building.sgml:84(programlisting)
#, no-wrap
msgid ""
"\n"
"      make\n"
"      make install\n"
"    "
msgstr ""

#: building.sgml:88(para)
msgid ""
"If you don't have permission to write to the directory you are installing "
"in, you may have to change to root temporarily before running <literal>make "
"install</literal>. Also, if you are installing in a system directory, on "
"some systems (such as Linux), you will need to run <command>ldconfig</"
"command> after <literal>make install</literal> so that the newly installed "
"libraries will be found."
msgstr ""

#: building.sgml:9(refmiscinfo) compiling.sgml:9(refmiscinfo)
#: drawing-model.xml:9(refmiscinfo) osx.sgml:9(refmiscinfo)
#: running.sgml:9(refmiscinfo) text_widget.sgml:9(refmiscinfo)
#: tree_widget.sgml:9(refmiscinfo) windows.sgml:9(refmiscinfo)
#: x11.sgml:9(refmiscinfo)
msgid "GTK Library"
msgstr "GTK库"

#: building.sgml:97(para)
msgid ""
"Several environment variables are useful to pass to set before running "
"configure. <envar>CPPFLAGS</envar> contains options to pass to the C "
"compiler, and is used to tell the compiler where to look for include files. "
"The <envar>LDFLAGS</envar> variable is used in a similar fashion for the "
"linker. Finally the <envar>PKG_CONFIG_PATH</envar> environment variable "
"contains a search path that <command>pkg-config</command> (see below) uses "
"when looking for for file describing how to compile programs using different "
"libraries. If you were installing GTK+ and it's dependencies into <filename>/"
"opt/gtk</filename>, you might want to set these variables as:"
msgstr ""

#: compiling.sgml:13(refname) compiling.sgml:7(refentrytitle)
msgid "Compiling GTK+ Applications"
msgstr "编译 GTK+ 程序"

#: compiling.sgml:14(refpurpose)
msgid "How to compile your GTK+ application"
msgstr "怎样编译你的 GTK+ 程序"

#: compiling.sgml:20(title)
msgid "Compiling GTK+ Applications on UNIX"
msgstr "在 UNIX 环境下编译 GTK+ "

#: compiling.sgml:22(para)
msgid ""
"To compile a GTK+ application, you need to tell the compiler where to find "
"the GTK+ header files and libraries. This is done with the <literal>pkg-"
"config</literal> utility."
msgstr ""
"编译 GTK+ 程序，你需要告诉编译器，GTK+ 的头文件和库文件在哪儿。这些都可以用 "
"<literal>pkg-config</literal> 帮你"

#: compiling.sgml:27(para)
msgid ""
"The following interactive shell session demonstrates how <literal>pkg-"
"config</literal> is used (the actual output on your system may be "
"different): <placeholder-1/>"
msgstr ""

#: compiling.sgml:31(programlisting)
#, no-wrap
msgid ""
"\n"
"$ pkg-config --cflags gtk+-3.0\n"
" -pthread -I/usr/include/gtk-3.0 -I/usr/lib64/gtk-3.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12\n"
"$ pkg-config --libs gtk+-3.0\n"
" -pthread -lgtk-3 -lgdk-3 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lgdk_pixbuf-2.0 -lpangocairo-1.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0\n"
msgstr ""

#: compiling.sgml:38(para)
msgid ""
"The simplest way to compile a program is to use the \"backticks\" feature of "
"the shell. If you enclose a command in backticks (<emphasis>not single "
"quotes</emphasis>), then its output will be substituted into the command "
"line before execution. So to compile a GTK+ Hello, World, you would type the "
"following: <placeholder-1/>"
msgstr ""

#: compiling.sgml:44(programlisting)
#, no-wrap
msgid ""
"\n"
"$ cc `pkg-config --cflags --libs gtk+-3.0` hello.c -o hello\n"
msgstr ""
"\n"
"$ cc `pkg-config --cflags --libs gtk+-3.0` hello.c -o hello\n"

#: compiling.sgml:49(para)
msgid ""
"If you want to make sure that your program doesn't use any deprecated "
"functions, you can define the preprocessor symbol GTK_DISABLE_DEPRECATED by "
"using the command line option <literal>-DGTK_DISABLE_DEPRECATED=1</literal>. "
"There are similar symbols GDK_DISABLE_DEPRECATED, "
"GDK_PIXBUF_DISABLE_DEPRECATED and G_DISABLE_DEPRECATED for GDK, GdkPixbuf "
"and GLib."
msgstr ""

#: compiling.sgml:58(para)
msgid ""
"If you want to make sure that your program doesn't use any functions which "
"may be problematic in a multihead setting, you can define the preprocessor "
"symbol GDK_MULTIHEAD_SAFE by using the command line option <literal>-"
"DGTK_MULTIHEAD_SAFE=1</literal>."
msgstr ""

#: compiling.sgml:65(para)
msgid ""
"Similarly, if you want to make sure that your program doesn't use any "
"functions which may be problematic in a multidevice setting, you can define "
"the preprocessor symbol GDK_MULTIDEVICE_SAFE by using the command line "
"option <literal>-DGTK_MULTIDEVICE_SAFE=1</literal>."
msgstr ""

#: compiling.sgml:73(title)
msgid "Useful autotools macros"
msgstr "使用 autotools 宏"

#: compiling.sgml:75(para)
msgid ""
"GTK+ provides various macros for easily checking version and backends "
"supported. The macros are <placeholder-1/>"
msgstr ""

#: compiling.sgml:80(term)
msgid ""
"AM_PATH_GTK_3_0([minimum-version], [if-found], [if-not-found], [modules])"
msgstr ""

#: compiling.sgml:81(listitem)
msgid ""
"This macro should be used to check that GTK+ is installed and available for "
"compilation. The four arguments are optional, and they are: <placeholder-1/"
">, the minimum version of GTK+ required for compilation; <placeholder-2/>, "
"the action to perform if a valid version of GTK+ has been found; "
"<placeholder-3/>, the action to perform if a valid version of GTK+ has not "
"been found; <placeholder-4/>, a list of modules to be checked along with GTK"
"+."
msgstr ""

#: compiling.sgml:83(emphasis) compiling.sgml:93(emphasis)
msgid "minimum-version"
msgstr ""

#: compiling.sgml:84(emphasis) compiling.sgml:94(emphasis)
msgid "if-found"
msgstr ""

#: compiling.sgml:86(emphasis) compiling.sgml:94(emphasis)
msgid "if-not-found"
msgstr ""

#: compiling.sgml:87(emphasis) running.sgml:170(term)
msgid "modules"
msgstr ""

#: compiling.sgml:91(term)
msgid ""
"GTK_CHECK_BACKEND([backend-name], [minimum-version], [if-found], [if-not-"
"found])"
msgstr ""

#: compiling.sgml:92(listitem)
msgid ""
"This macro should be used to check if a specific backend is supported by GTK"
"+. The <placeholder-1/>, <placeholder-2/> and <placeholder-3/> arguments are "
"optional."
msgstr ""

#: drawing-model.xml:109(para)
msgid ""
"In principle, each widget could have a <classname>GdkWindow</classname> of "
"its own. With such a scheme, the drawing cycle would be trivial: when GDK "
"notifies the GTK layer about an exposure event for a <classname>GdkWindow</"
"classname>, the GTK layer would simply emit the <link linkend=\"GtkWidget-"
"expose-event\">expose-event signal</link> for that widget. The widget's "
"expose event handler would subsequently repaint the widget. No further work "
"would be necessary; the windowing system would generate exposure events for "
"each window that needs it, and then each corresponding widget would draw "
"itself in turn."
msgstr ""

#: drawing-model.xml:123(para)
msgid ""
"However, in practice it is convenient to have widgets which do not have a "
"<classname>GdkWindow</classname> of their own, but rather share the one from "
"their parent widget. Such widgets have called "
"<function>gtk_widget_set_has_window</function> to disable it; this can be "
"tested easily with the <link linkend=\"gtk-widget-get-has-window"
"\"><function>gtk_widget_get_has_window()</function></link> function. As "
"such, these are called <firstterm>no-window widgets</firstterm>."
msgstr ""

#: drawing-model.xml:13(refname) drawing-model.xml:7(refentrytitle)
msgid "The GTK+ Drawing Model"
msgstr ""

#: drawing-model.xml:134(para)
msgid "No-window widgets are useful for various reasons:"
msgstr ""

#: drawing-model.xml:14(refpurpose)
msgid "The GTK+ drawing model in detail"
msgstr ""

#: drawing-model.xml:140(para)
msgid ""
"Some widgets may want the parent's background to show through, even when "
"they draw on parts of it. For example, consider a theme that uses textured "
"backgrounds, such as gradients or repeating patterns. If each widget had its "
"own window, and in turn its own gradient background, labels would look bad "
"because there would be a visible break with respect to their surroundings. "
"<xref linkend=\"figure-windowed-label\"/> shows this undesirable effect."
msgstr ""

#: drawing-model.xml:151(title)
msgid "Windowed label vs. no-window label"
msgstr ""

#: drawing-model.xml:158(para)
msgid ""
"Reducing the number of windows creates less traffic between GTK+ and the "
"underlying windowing system, especially when getting events."
msgstr ""

#: drawing-model.xml:165(para)
msgid ""
"On the other hand, widgets that would benefit from having a \"hard\" "
"clipping region may find it more convenient to create their own windows. "
"Also, widgets which want to receive events resulting from user interaction "
"may find it convenient to use windows of their own as well. Widgets may have "
"more than one window if they want to define different regions for capturing "
"events."
msgstr ""

#: drawing-model.xml:176(title)
msgid "Hierarchical drawing"
msgstr ""

#: drawing-model.xml:178(para)
msgid ""
"When the GTK layer receives an exposure event from GDK, it finds the widget "
"that corresponds to the window which received the event. By definition, this "
"corresponds to a widget that has the <constant>GTK_NO_WINDOW</constant> flag "
"turned <emphasis>off</emphasis> (otherwise, the widget wouldn't own the "
"window!). First this widget paints its background, and then, if it is a "
"container widget, it tells each of its <constant>GTK_NO_WINDOW</constant> "
"children to paint themselves. This process is applied recursively for all "
"the <constant>GTK_NO_WINDOW</constant> descendants of the original widget."
msgstr ""

#: drawing-model.xml:192(para)
msgid ""
"Note that this process does not get propagated to widgets which have windows "
"of their own, that is, to widgets which have the <constant>GTK_NO_WINDOW</"
"constant> flag turned off. If such widgets require redrawing, then the "
"windowing system will already have sent exposure events to their "
"corresponding windows. As such, there is no need to <firstterm>propagate</"
"firstterm> the exposure to them on the GTK+ side."
msgstr ""

#: drawing-model.xml:203(para)
msgid ""
"<xref linkend=\"figure-hierarchical-drawing\"/> shows how a simple toplevel "
"window would paint itself when it contains only <constant>GTK_NO_WINDOW</"
"constant> descendants: <placeholder-1/>"
msgstr ""

#: drawing-model.xml:21(title)
msgid "Overview of the drawing model"
msgstr ""

#: drawing-model.xml:210(para)
msgid ""
"The outermost, thick rectangle is a toplevel <link linkend=\"GtkWindow"
"\"><classname>GtkWindow</classname></link>, which is not a "
"<constant>GTK_NO_WINDOW</constant> widget &mdash; as such, it does receive "
"its exposure event as it comes from GDK. First the <classname>GtkWindow</"
"classname> would paint its own background. Then, it would ask its only child "
"to paint itself, numbered 2."
msgstr ""

#: drawing-model.xml:221(para)
msgid ""
"The dotted rectangle represents a <link linkend=\"GtkVBox"
"\"><classname>GtkVBox</classname></link>, which has been made the sole child "
"of the <classname>GtkWindow</classname>. Boxes are just layout containers "
"that do not paint anything by themselves, so this <classname>GtkVBox</"
"classname> would draw nothing, but rather ask its children to draw "
"themselves. The children are numbered 3 and 6."
msgstr ""

#: drawing-model.xml:23(para)
msgid ""
"This chapter describes the GTK+ drawing model in detail. If you are "
"interested in the procedure which GTK+ follows to draw its widgets and "
"windows, you should read this chapter; this will be useful to know if you "
"decide to implement your own widgets. This chapter will also clarify the "
"reasons behind the ways certain things are done in GTK+; for example, why "
"you cannot change the background color of all widgets with the same method."
msgstr ""

#: drawing-model.xml:233(para)
msgid ""
"The thin rectangle is a <link linkend=\"GtkFrame\"><classname>GtkFrame</"
"classname></link>, which has two children: a label for the frame, numbered "
"4, and another label inside, numbered 5. First the frame would draw its own "
"beveled box, then ask the frame label and its internal child to draw "
"themselves."
msgstr ""

#: drawing-model.xml:243(para)
msgid ""
"The frame label has no children, so it just draws its text: \"Frame&nbsp;"
"Label\"."
msgstr ""

#: drawing-model.xml:248(para)
msgid ""
"The internal label has no children, so it just draws its text: \"This is "
"some text inside the frame!\"."
msgstr ""

#: drawing-model.xml:254(para)
msgid ""
"The dotted rectangle represents a <link linkend=\"GtkHBox"
"\"><classname>GtkHBox</classname></link>. Again, this does not draw anything "
"by itself, but rather asks its children to draw themselves. The children are "
"numbered 7 and 9."
msgstr ""

#: drawing-model.xml:262(para)
msgid ""
"The thin rectangle is a <link linkend=\"GtkButton\"><classname>GtkButton</"
"classname></link> with a single child, numbered 8. First the button would "
"draw its beveled box, and then it would ask its child to draw itself."
msgstr ""

#: drawing-model.xml:270(para)
msgid ""
"This is a text label which has no children, so it just draws its own text: "
"\"Cancel\"."
msgstr ""

#: drawing-model.xml:276(para)
msgid ""
"Similar to number 7, this is a button with a single child, numbered 10. "
"First the button would draw its beveled box, and then it would ask its child "
"to draw itself."
msgstr ""

#: drawing-model.xml:283(para)
msgid ""
"Similar to number 8, this is a text label which has no children, so it just "
"draws its own text: \"OK\"."
msgstr ""

#: drawing-model.xml:292(title)
msgid "Hierarchical drawing order"
msgstr ""

#: drawing-model.xml:297(para)
msgid ""
"To avoid the flickering that would result from each widget drawing itself in "
"turn, GTK+ uses a double-buffering mechanism. The following sections "
"describe this mechanism in detail."
msgstr ""

#: drawing-model.xml:305(title)
msgid "Notes on drawing no-window widgets"
msgstr ""

#: drawing-model.xml:307(para)
msgid ""
"Remember that the coordinates in a <link linkend=\"GdkEventExpose"
"\">GdkEventExpose</link> are relative to the <classname>GdkWindow</"
"classname> that received the event, <emphasis>not</emphasis> to the widget "
"whose expose-event handler is being called. If your widget owns the window, "
"then these coordinates are probably what you expect. However, if you have a "
"<constant>GTK_NO_WINDOW</constant> widget that shares its parent's window, "
"then the event's coordinates will be offset by your widget's allocation: "
"remember that the allocation is always relative to the parent "
"<emphasis>window</emphasis> of the widget, not to the parent "
"<emphasis>widget</emphasis> itself."
msgstr ""

#: drawing-model.xml:322(para)
msgid ""
"For example, if you have a no-window widget whose allocation is {&nbsp;x=5,"
"&nbsp;y=6, <replaceable>width</replaceable>,&nbsp;<replaceable>height</"
"replaceable>&nbsp;}, then your drawing origin should be at (5,&nbsp;6), not "
"at (0,&nbsp;0)."
msgstr ""

#: drawing-model.xml:33(para)
msgid ""
"Programs that run in a windowing system generally create rectangular regions "
"in the screen called <firstterm>windows</firstterm>. Traditional windowing "
"systems do not automatically save the graphical content of windows, and "
"instead ask client programs to repaint those windows whenever it is needed. "
"For example, if a window that is stacked below other windows gets raised to "
"the top, then a client program has to repaint the area that was previously "
"obscured. When the windowing system asks a client program to redraw part of "
"a window, it sends an <firstterm>exposure event</firstterm> to the program "
"for that window."
msgstr ""

#: drawing-model.xml:332(title)
msgid "Drawing over child windows"
msgstr ""

#: drawing-model.xml:334(para)
msgid ""
"When you draw on a <classname>GdkWindow</classname>, your drawing gets "
"clipped by any child windows that it may intersect. Sometimes you need to "
"draw over your child windows as well; for example, when drawing a drag-"
"handle to resize something. In this case, turn on the <link linkend=\"GDK-"
"INCLUDE-INFERIORS:CAPS\">GDK_INCLUDE_INFERIORS</link> subwindow mode for the "
"<link linkend=\"gdk-Graphics-Contexts\">GdkGC</link> which you use for "
"drawing."
msgstr ""

#: drawing-model.xml:349(title)
msgid "Double buffering"
msgstr ""

#: drawing-model.xml:351(para)
msgid ""
"When the GTK layer receives an exposure event from GDK, it first finds the "
"<literal>!<constant>GTK_NO_WINDOW</constant></literal> widget that "
"corresponds to the event's window. Then, it emits the <link linkend="
"\"GtkWidget-expose-event\">expose-event signal</link> for that widget. As "
"described above, that widget will first draw its background, and then ask "
"each of its <constant>GTK_NO_WINDOW</constant> children to draw themselves."
msgstr ""

#: drawing-model.xml:361(para)
msgid ""
"If each of the drawing calls made by each subwidget's <literal>expose-event</"
"literal> handler were sent directly to the windowing system, flicker could "
"result. This is because areas may get redrawn repeatedly: the background, "
"then decorative frames, then text labels, etc. To avoid flicker, GTK+ "
"employs a <firstterm>double buffering</firstterm> system at the GDK level. "
"Widgets normally don't know that they are drawing to an off-screen buffer; "
"they just issue their normal drawing commands, and the buffer gets sent to "
"the windowing system when all drawing operations are done."
msgstr ""

#. FIXME: figure with a timeline of non-double-buffered and
#.          double-buffered paints:
#.
#.          onscreen:
#.          [garbage]
#.          [background]
#.          [button-frame]
#.          [icon]
#.          [label]
#.
#.
#.          onscreen:             offscreen:
#.          [garbage]
#.                                [background]
#.                                [button-frame]
#.                                [icon]
#.                                [label]
#.          [final result]
#: drawing-model.xml:393(para)
msgid ""
"Two basic functions in GDK form the core of the double-buffering mechanism: "
"<link linkend=\"gdk_window_begin_paint_region"
"\"><function>gdk_window_begin_paint_region()</function></link> and <link "
"linkend=\"gdk_window_end_paint\"><function>gdk_window_end_paint()</"
"function></link>. The first function tells a <classname>GdkWindow</"
"classname> to create a temporary off-screen buffer for drawing. All "
"subsequent drawing operations to this window get automatically redirected to "
"that buffer. The second function actually paints the buffer onto the on-"
"screen window, and frees the buffer."
msgstr ""

#: drawing-model.xml:407(title)
msgid "Automatic double buffering"
msgstr ""

#: drawing-model.xml:409(para)
msgid ""
"It would be inconvenient for all widgets to call "
"<function>gdk_window_begin_paint_region()</function> and "
"<function>gdk_window_end_paint()</function> at the beginning and end of "
"their expose-event handlers."
msgstr ""

#: drawing-model.xml:416(para)
msgid ""
"To make this easier, most GTK+ widgets have the "
"<constant>GTK_DOUBLE_BUFFERED</constant><link linkend=\"GtkWidgetFlags"
"\">widget flag</link> turned on by default. When GTK+ encounters such a "
"widget, it automatically calls <function>gdk_window_begin_paint_region()</"
"function> before emitting the expose-event signal for the widget, and then "
"it calls <function>gdk_window_end_paint()</function> after the signal has "
"been emitted. This is convenient for most widgets, as they do not need to "
"worry about creating their own temporary drawing buffers or about calling "
"those functions."
msgstr ""

#: drawing-model.xml:430(para)
msgid ""
"However, some widgets may prefer to disable this kind of automatic double "
"buffering and do things on their own. To do this, turn off the "
"<constant>GTK_DOUBLE_BUFFERED</constant> flag in your widget's constructor."
msgstr ""

#: drawing-model.xml:438(title)
msgid "Disabling automatic double buffering"
msgstr ""

#: drawing-model.xml:440(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"my_widget_init (MyWidget *widget)\n"
"{\n"
"  ...\n"
"\n"
"  gtk_widget_set_double_buffered (widget, FALSE);\n"
"\n"
"  ...\n"
"}\n"
"\t"
msgstr ""

#: drawing-model.xml:453(para)
msgid ""
"When is it convenient to disable double buffering? Generally, this is the "
"case only if your widget gets drawn in such a way that the different drawing "
"operations do not overlap each other. For example, this may be the case for "
"a simple image viewer: it can just draw the image in a single operation. "
"This would <emphasis>not</emphasis> be the case with a word processor, since "
"it will need to draw and over-draw the page's background, then the "
"background for highlighted text, and then the text itself."
msgstr ""

#: drawing-model.xml:465(para)
msgid ""
"Even if you turn off the <constant>GTK_DOUBLE_BUFFERED</constant> flag on a "
"widget, you can still call <function>gdk_window_begin_paint_region()</"
"function> and <function>gdk_window_end_paint()</function> by hand to use "
"temporary drawing buffers."
msgstr ""

#: drawing-model.xml:47(para)
msgid ""
"Here, \"windows\" means \"rectangular regions with automatic clipping\", "
"instead of \"toplevel application windows\". Most windowing systems support "
"nested windows, where the contents of child windows get clipped by the "
"boundaries of their parents. Although GTK+ and GDK in particular may run on "
"a windowing system with no such notion of nested windows, GDK presents the "
"illusion of being under such a system. A toplevel window may contain many "
"subwindows and sub-subwindows, for example, one for the menu bar, one for "
"the document area, one for each scrollbar, and one for the status bar. In "
"addition, controls that receive user input, such as clickable buttons, are "
"likely to have their own subwindows as well."
msgstr ""

#: drawing-model.xml:477(title)
msgid "App-paintable widgets"
msgstr ""

#: drawing-model.xml:479(para)
msgid ""
"Generally, applications use the pre-defined widgets in GTK+ and they do not "
"draw extra things on top of them (the exception being "
"<classname>GtkDrawingArea</classname>). However, applications may sometimes "
"find it convenient to draw directly on certain widgets like toplevel windows "
"or event boxes. When this is the case, GTK+ needs to be told not to "
"overwrite your drawing afterwards, when the window gets to drawing its "
"default contents."
msgstr ""

#: drawing-model.xml:490(para)
msgid ""
"<classname>GtkWindow</classname> and <classname>GtkEventBox</classname> are "
"the only two widgets which will draw their default contents unless you turn "
"on the <constant>GTK_APP_PAINTABLE</constant><link linkend=\"GtkWidgetFlags"
"\">widget flag</link>. If you turn on this flag, then they will not draw "
"their contents and let you do it instead."
msgstr ""

#: drawing-model.xml:500(para)
msgid ""
"The expose-event handler for <classname>GtkWindow</classname> is implemented "
"effectively like this:"
msgstr ""

#: drawing-model.xml:505(programlisting)
#, no-wrap
msgid ""
"\n"
"static gint\n"
"gtk_window_expose (GtkWidget      *widget,\n"
"\t\t   GdkEventExpose *event)\n"
"{\n"
"  if (!gtk_widget_get_app_paintable (widget))\n"
"    gtk_paint_flat_box (widget-&gt;style, widget-&gt;window, GTK_STATE_NORMAL, \n"
"                        GTK_SHADOW_NONE, event-&gt;area, widget, \"base\", 0, 0, -1, -1);\n"
"\n"
"  if (GTK_WIDGET_CLASS (gtk_window_parent_class)-&gt;expose_event)\n"
"    return GTK_WIDGET_CLASS (gtk_window_parent_class)-&gt;expose_event (widget, event);\n"
"\n"
"  return FALSE;\n"
"}\n"
"    "
msgstr ""

#: drawing-model.xml:521(para)
msgid ""
"The expose-event handler for <classname>GtkEventBox</classname> is "
"implemented in a similar fashion."
msgstr ""

#: drawing-model.xml:526(para)
msgid ""
"Since the <link linkend=\"GtkWidget-expose-event\">expose-event signal</"
"link> runs user-connected handlers <emphasis>before</emphasis> the widget's "
"default handler, what happens is this:"
msgstr ""

#: drawing-model.xml:535(para)
msgid ""
"Your own expose-event handler gets run. It paints something on the window or "
"the event box."
msgstr ""

#: drawing-model.xml:542(para)
msgid ""
"The widget's default expose-event handler gets run. If "
"<constant>GTK_APP_PAINTABLE</constant> is turned off (this is the default), "
"<emphasis>your drawing will be overwritten</emphasis>. If that flag is "
"turned on, the widget will not draw its default contents and preserve your "
"drawing instead."
msgstr ""

#: drawing-model.xml:553(para)
msgid ""
"The expose-event handler for the parent class gets run. Since both "
"<classname>GtkWindow</classname> and <classname>GtkEventBox</classname> are "
"descendants of <classname>GtkContainer</classname>, their no-window children "
"will be asked to draw themselves recursively, as described in <xref linkend="
"\"hierarchical-drawing\"/>."
msgstr ""

#: drawing-model.xml:565(title)
msgid "Summary of app-paintable widgets"
msgstr ""

#: drawing-model.xml:567(para)
msgid ""
"Turn on the <constant>GTK_APP_PAINTABLE</constant> flag if you intend to "
"draw your own content directly on a <classname>GtkWindow</classname> and "
"<classname>GtkEventBox</classname>. You seldom need to draw on top of other "
"widgets, and <classname>GtkDrawingArea</classname> ignores this flag, as it "
"<emphasis>is</emphasis> intended to be drawn on."
msgstr ""

#: drawing-model.xml:62(para)
msgid ""
"Generally, the drawing cycle begins when GTK+ receives an exposure event "
"from the underlying windowing system: if the user drags a window over "
"another one, the windowing system will tell the underlying window that it "
"needs to repaint itself. The drawing cycle can also be initiated when a "
"widget itself decides that it needs to update its display. For example, when "
"the user types a character in a <link linkend=\"GtkEntry"
"\"><classname>GtkEntry</classname></link> widget, the entry asks GTK+ to "
"queue a redraw operation for itself."
msgstr ""

#: drawing-model.xml:75(para)
msgid ""
"The following sections describe how GTK+ decides which widgets need to be "
"repainted, and how widgets work internally in terms of the resources they "
"use from the windowing system."
msgstr ""

#: drawing-model.xml:82(title)
msgid "Window and no-window widgets"
msgstr ""

#: drawing-model.xml:84(para)
msgid ""
"A <link linkend=\"GdkWindow\"><classname>GdkWindow</classname></link> "
"represents a window from the underlying windowing system on which GTK+ is "
"running. For example, on X11 it corresponds to a <type>Window</type>; on "
"Win32, it corresponds to a <type>HANDLE</type>. The windowing system "
"generates events for these windows. The GDK interface to the windowing "
"system translates such native events into <link linkend=\"GdkEvent"
"\"><structname>GdkEvent</structname></link> structures and sends them on to "
"the GTK layer. In turn, the GTK layer finds the widget that corresponds to a "
"particular <classname>GdkWindow</classname> and emits the corresponding "
"event signals on that widget."
msgstr ""

#: drawing-model.xml:98(para)
msgid ""
"When the program needs to redraw a region of a <classname>GdkWindow</"
"classname>, GDK generates an event of type <link linkend=\"GDK_EVENT_EXPOSE"
"\"><constant>GDK_EVENT_EXPOSE</constant></link> for that window. The GTK+ "
"widget layer in turn finds the widget that corresponds to that window, and "
"emits the <link linkend=\"GtkWidget-expose-event\">expose-event signal</"
"link> for that widget."
msgstr ""

#: getting_started.xml:102(para)
msgid ""
"In the long tradition of programming languages and libraries, it is called "
"<emphasis>Hello, World</emphasis>."
msgstr "编程传统<emphasis>Hello, World</emphasis>."

#: getting_started.xml:110(title)
msgid "Hello World in GTK+"
msgstr "Hello World （GTK+ 版）"

#: getting_started.xml:113(fallback) getting_started.xml:144(fallback)
#: getting_started.xml:182(fallback) getting_started.xml:203(fallback)
#: getting_started.xml:209(fallback) getting_started.xml:28(fallback)
msgid "FIXME: MISSING XINCLUDE CONTENT"
msgstr ""

#: getting_started.xml:120(title)
msgid "Packing"
msgstr ""

#: getting_started.xml:122(para)
msgid ""
"When creating an application, you'll want to put more than one widget inside "
"a window. Our first helloworld example only used one widget so we could "
"simply use a gtk_container_add() call to \"pack\" the widget into the "
"window. But when you want to put more than one widget into a window, it it "
"becomes important to control how each widget is positioned and sized. This "
"is where packing comes in."
msgstr ""

#: getting_started.xml:129(para)
msgid ""
"GTK+ comes with a large variety of <firstterm>layout containers</firstterm> "
"whose purpose it is to control the layout of the child widgets that are "
"added to them. See <xref linkend=\"LayoutContainers\"/> for an overview."
msgstr ""

#: getting_started.xml:133(para)
msgid ""
"The following example shows how the GtkGrid container lets you arrange "
"several buttons:"
msgstr "下面的例子中，将展示怎样用 GtkGrid 容器布置按钮："

#: getting_started.xml:141(title)
msgid "Packing buttons"
msgstr ""

#: getting_started.xml:151(title)
msgid "Drawing"
msgstr ""

#: getting_started.xml:153(para)
msgid ""
"Many widgets, like buttons, do all their drawing themselves. You just tell "
"them the label you want to see, and they figure out what font to use, draw "
"the button outline and focus rectangle, etc. Sometimes, it is necessary to "
"do some custom drawing. In that case, a #GtkDrawingArea might be the right "
"widget to use. It offers a canvas on which you can draw by connecting to the "
"#GtkWidget::draw signal."
msgstr ""

#: getting_started.xml:16(title)
msgid "Basics"
msgstr "基础"

#: getting_started.xml:161(para)
msgid ""
"The contents of a widget often need to be partially or fully redrawn, e.g. "
"when another window is moved and uncovers part of the widget, or when tie "
"window containing it is resized. It is also possible to explicitly cause "
"part or all of the widget to be redrawn, by calling gtk_widget_queue_draw() "
"or its variants. GTK+ takes care of most of the details by providing a ready-"
"to-use cairo context to the ::draw signal handler."
msgstr ""

#: getting_started.xml:169(para)
msgid ""
"The following example shows a ::draw signal handler. It is a bit more "
"complicated than the previous examples, since it also demonstrates input "
"event handling by means of ::button-press and ::motion-notify handlers."
msgstr ""

#: getting_started.xml:179(title)
msgid "Drawing in response to input"
msgstr ""

#: getting_started.xml:18(para)
msgid ""
"To begin our introduction to GTK, we'll start with the simplest program "
"possible. This program will create an empty 200x200 pixel window:"
msgstr ""
"现在开始介绍GTK ，我们先以一个简单的程序开始，这个程序将建立一个内容为空 "
"200*200像素的窗口:"

#: getting_started.xml:189(title)
msgid "Building interfaces"
msgstr ""

#: getting_started.xml:191(para)
msgid ""
"When construcing a more complicated user interface, with dozens or hundreds "
"of widgets, doing all the setup work in C code is cumbersome, and making "
"changes becomes next to impossible."
msgstr ""

#: getting_started.xml:195(para)
msgid ""
"Thankfully, GTK+ supports the separation of user interface layout from your "
"business logic, by using UI descriptions in an XML format that can be parsed "
"by the #GtkBuilder class."
msgstr ""

#: getting_started.xml:199(example)
msgid ""
"<placeholder-1/><placeholder-2/> The builder.ui file looks like this: "
"<placeholder-3/>"
msgstr ""

#: getting_started.xml:200(title)
msgid "Packing buttons with GtkBuilder"
msgstr ""

#: getting_started.xml:214(para)
msgid ""
"Note that GtkBuilder can also be used to construct objects that are not "
"widgets, such as tree models, adjustments, etc. That is the reason the "
"method we use here is called gtk_builder_get_object() and returns a GObject* "
"instead of a GtkWidget*."
msgstr ""

#: getting_started.xml:220(para)
msgid ""
"Normally, you would pass a full path to gtk_builder_add_from_file() to make "
"the execution of your program independent of the current directory. A common "
"location to install UI descriptions and similar data is <filename>/usr/share/"
"<replaceable>appname</replaceable></filename>."
msgstr ""

#: getting_started.xml:227(para)
msgid ""
"It is also possible to embed the UI description in the source code as a "
"string and use gtk_builder_add_from_string() to load it. But keeping the UI "
"description in a separate file has several advantages: It is then possible "
"to make minor adjustments to the UI without recompiling your program, and, "
"more importantly, graphical UI editors such as <ulink url=\"http://glade."
"gnome.org\">glade</ulink> can load the file and allow you to create and "
"modify your UI by point-and-click."
msgstr ""

#: getting_started.xml:32(para)
msgid "You can compile the program above with GCC using:"
msgstr "你可以由以下的gcc命令编译这个程序:"

#: getting_started.xml:35(literal)
msgid ""
"gcc `pkg-config --cflags gtk+-3.0` -o window-default window-default.c `pkg-"
"config --libs gtk+-3.0`"
msgstr ""
"gcc `pkg-config --cflags gtk+-3.0` -o window-default window-default.c `pkg-"
"config --libs gtk+-3.0`"

#: getting_started.xml:38(para)
msgid ""
"For more information on how to compile a GTK+ application, please refer to "
"the <link linkend=\"gtk-compiling\">Compiling GTK+ Applications</link> "
"section in this reference."
msgstr ""
"关于更多编译一个gtk+应用程序的信息，请引用<link linkend=\"gtk-compiling\">编"
"译GTK+ 应用程序</link>。"

#: getting_started.xml:42(para)
msgid ""
"All GTK+ applications will, of course, include <filename>gtk/gtk.h</"
"filename>, which declares functions, types and macros required by GTK+ "
"applications."
msgstr ""
"任何的gtk+版本都是可以的。包含<filename>gtk/gtk.h</filename>, 里面声明了gtk"
"+应用程序需要的函数声明和类型还有宏。"

#: getting_started.xml:46(para)
msgid ""
"Even if GTK+ installs multiple header files, only the top-level "
"<filename>gtk/gtk.h</filename> header can be directly included by third "
"party code. The compiler will abort with an error if any other header is "
"directly included."
msgstr ""
"可能gtk+的安装需要多个头文件，但仅需要包含顶层头<filename>gtk/gtk.h</"
"filename>到第三方代码中就可以了，当直接包含了其他的头，编译器会中止和出现错误"
"信息。"

#: getting_started.xml:51(para)
msgid ""
"We then proceed into the <function>main</function>() function of the "
"application, and we declare a <varname>window</varname> variable as a "
"pointer of type #GtkWidget."
msgstr ""
"我们在<function>main</function>()函数中处理这个程序，定义一个 #GtkWidget 类型"
"指针的<varname>window</varname>变量。"

#: getting_started.xml:55(para)
msgid ""
"The following line will call gtk_init(), which is the initialization "
"function for GTK+; this function will set up GTK+, the type system, the "
"connection to the windowing environment, etc. The gtk_init() takes as "
"arguments the pointers to the command line arguments counter and string "
"array; this allows GTK+ to parse specific command line arguments that "
"control the behavior of GTK+ itself. The parsed arguments will be removed "
"from the array, leaving the unrecognized ones for your application to parse."
msgstr ""
"接着的一行，我们将调用GTK+的初始化函数gtk_init()；这个函数将会为GTK+建立起类"
"型系统，到窗体环境的连接等等。gtk_init()将由命令行所传递的参数作为自己的参"
"数，这样就可由GTK+来解析一些特殊的命令行参数以控制GTK+自己的行为。被解析的参"
"数将会从字符串中被删除，只留下那些GTK+无法识别的参数以供应用程序去解析。"

#: getting_started.xml:6(title)
msgid "Getting Started with GTK+"
msgstr "开始使用GTK+"

#: getting_started.xml:64(para)
msgid ""
"For more information on which command line arguments GTK+ recognizes, please "
"refer to the <link linkend=\"gtk-running\">Running GTK+ Applications</link> "
"section in this reference."
msgstr ""
"若想获得更多关于GTK+可识别的参数的信息，请参考本文档中<link linkend=\"gtk-"
"running\">运行GTK+应用程序</link> 一章。"

#: getting_started.xml:68(para)
msgid ""
"The call to gtk_window_new() will create a new #GtkWindow and store it "
"inside the <varname>window</varname> variable. The type of the window is "
"%GTK_WINDOW_TOPLEVEL, which means that the #GtkWindow will be managed by the "
"windowing system: it will have a frame, a title bar and window controls, "
"depending on the platform."
msgstr ""

#: getting_started.xml:74(para)
msgid ""
"In order to terminate the application when the #GtkWindow is destroyed, we "
"connect the #GtkWidget::destroy signal to the gtk_main_quit() function. This "
"function will terminate the GTK+ main loop started by calling gtk_main() "
"later. The #GtkWidget::destroy signal is emitted when a widget is destroyed, "
"either by explicitly calling gtk_widget_destroy() or when the widget is "
"unparented. Top-level #GtkWindows are also destroyed when the Close window "
"control button is clicked."
msgstr ""

#: getting_started.xml:8(para)
msgid ""
"This chapter is contains some tutorial information to get you started with "
"GTK+ programming. It assumes that you have GTK+, its dependencies and a C "
"compiler installed and ready to use. If you need to build GTK+ itself first, "
"refer to the <link linkend=\"gtk-compiling\">Compiling the GTK+ libraries</"
"link> section in this reference."
msgstr ""
"这个文章中包含一个GTK+编程的入门教程，这里有个前提是你已经把GTK+环境配置好"
"了，如已经准备好它的依赖库 和 C 编译器.如果你想先编译gtk+,可以参考 <link "
"linkend=\"gtk-compiling\">编译 GTK+ 库</link>相关章节。"

#: getting_started.xml:82(para)
msgid ""
"#GtkWidgets are hidden by default. By calling gtk_widget_show() on a "
"#GtkWidget we are asking GTK+ to set the visibility attribute so that it can "
"be displayed. All this work is done after the main loop has been started."
msgstr ""

#: getting_started.xml:87(para)
msgid ""
"The last line of interest is the call to gtk_main(). This function will "
"start the GTK+ main loop and will block the control flow of the main() until "
"the gtk_main_quit() function is called."
msgstr ""

#: getting_started.xml:91(para)
msgid ""
"While the program is running, GTK+ is receiving <firstterm>events</"
"firstterm>. These are typically input events caused by the user interacting "
"with your program, but also things like messages from the window manager or "
"other applications. GTK+ processes these and as a result, "
"<firstterm>signals</firstterm> may be emitted on your widgets. Connecting "
"handlers for these signals is how you normally make your program do "
"something in response to user input."
msgstr ""

#: getting_started.xml:99(para)
msgid ""
"The following example is slightly more complex, and tries to showcase some "
"of the capabilities of GTK+."
msgstr ""

#: glossary.xml:104(para)
msgid ""
"Ellipsization is the process of replacing some part of a text by an ellipsis "
"(usually \"...\") to make the text fit in a smaller space. Pango can "
"ellipsize text at the beginning, at the end or in the middle."
msgstr ""

#: glossary.xml:11(para)
msgid ""
"The final size of a <glossterm linkend=\"widget\">widget</glossterm> within "
"its <glossterm linkend=\"parent\">parent</glossterm>. For example, a widget "
"may request a minimum size of 20&times;20 pixels, but its parent may decide "
"to allocate 50&times;20 pixels for it instead."
msgstr ""

#: glossary.xml:114(glossterm)
msgid "event"
msgstr ""

#: glossary.xml:116(para)
msgid ""
"Events are the way in which GDK informs GTK+ about external events like "
"pointer motion, button clicks, key presses, etc."
msgstr ""

#: glossary.xml:124(glossterm) glossary.xml:83(glossterm)
#: running.sgml:174(term)
msgid "geometry"
msgstr "geometry"

#: glossary.xml:126(para)
msgid ""
"A <glossterm linkend=\"widget\">widget's</glossterm> position and size. "
"Within its parent, this is called the widget's <glossterm linkend="
"\"allocation\">allocation</glossterm>."
msgstr ""

#: glossary.xml:135(glossterm) glossary.xml:310(glossterm)
msgid "mapping"
msgstr ""

#: glossary.xml:137(para)
msgid ""
"This is the step in a <glossterm linkend=\"widget\">widget's</glossterm> "
"life cycle where it actually shows the GdkWindows it created when it was "
"<glossterm linkend=\"realization\">realized</glossterm>. When a widget is "
"mapped, it must turn on its %GTK_MAPPED <link linkend=\"GtkWidgetFlags"
"\">flag</link>."
msgstr ""

#: glossary.xml:146(para)
msgid ""
"Note that due to the asynchronous nature of the X window system, a widget's "
"window may not appear on the screen immediatly after one calls "
"gdk_window_show(): you must wait for the corresponding map <glossterm "
"linkend=\"event\">event</glossterm> to be received. You can do this with the "
"<link linkend=\"GtkWidget-map-event\"><methodname>GtkWidget::map-event</"
"methodname> signal</link>."
msgstr ""

#: glossary.xml:160(glossterm) glossary.xml:326(glossterm)
msgid "model column"
msgstr ""

#: glossary.xml:162(para)
msgid ""
"A column in a tree model, holding data of a certain type. The types which "
"can be stored in the columns of a model have to be specified when the model "
"is constructed, see e.g. gtk_list_store_new()."
msgstr ""

#: glossary.xml:169(glossterm) glossary.xml:319(glossterm)
msgid "view column"
msgstr ""

#: glossary.xml:175(glossterm) glossary.xml:62(glossseealso)
msgid "model-view widget"
msgstr ""

#: glossary.xml:177(para)
msgid ""
"These widgets follow the well-known model-view pattern, which separates the "
"data (the model) to be displayed from the component which does the actual "
"visualization (the view). Examples of this pattern in GTK+ are the "
"#GtkTreeView/#GtkTreeModel and #GtkTextView/#GtkTextBuffer"
msgstr ""

#: glossary.xml:183(para)
msgid ""
"One important advantage of this pattern is that it is possible to display "
"the same model in multiple views; another one that the separation of the "
"model allows a great deal of flexibility, as demonstrated by e.g. "
"#GtkTreeModelSort or #GtkTreeModelFilter."
msgstr ""

#: glossary.xml:193(glossterm)
msgid "no-window widget"
msgstr ""

#: glossary.xml:195(para)
msgid ""
"A widget that does not have a GdkWindow of its own on which to draw its "
"contents, but rather shares its <glossterm linkend=\"parent\">parent's</"
"glossterm>. This can be tested with the gtk_widget_get_has_window() "
"function. See <xref linkend=\"window-no-window-widgets\"/> for a detailed "
"description of this flag."
msgstr ""

#: glossary.xml:20(glossterm) glossary.xml:251(glossterm)
msgid "requisition"
msgstr ""

#: glossary.xml:207(glossterm)
msgid "parent"
msgstr ""

#: glossary.xml:209(para)
msgid ""
"A <glossterm linkend=\"widget\">widget's</glossterm> parent is the "
"<glossterm linkend=\"container\">container</glossterm> inside which it "
"resides."
msgstr ""

#: glossary.xml:218(glossterm) glossary.xml:315(glossterm)
msgid "realization"
msgstr ""

#: glossary.xml:220(para)
msgid ""
"This is the step in a <glossterm linkend=\"widget\">widget's</glossterm> "
"life cycle where it creates its own GdkWindow, or otherwise associates "
"itself with its <glossterm linkend=\"parent\">parent's</glossterm> "
"GdkWindow. If the widget has its own window, then it must also attach a "
"<glossterm linkend=\"style\">style</glossterm> to it. A widget becomes "
"unrealized by destroying its associated GdkWindow. When a widget is "
"realized, it must turn on its %GTK_REALIZED <link linkend=\"GtkWidgetFlags"
"\">flag</link>."
msgstr ""

#: glossary.xml:232(para)
msgid ""
"Widgets that don't own the GdkWindow on which they draw are called "
"<glossterm linkend=\"no-window\">no-window widgets</glossterm>. This can be "
"tested with the gtk_widget_get_has_window() function. Normally, these "
"widgets draw on their parent's GdkWindow."
msgstr ""

#: glossary.xml:239(para)
msgid ""
"Note that when a widget creates a window in its <link linkend=\"gtkwidget-"
"realize\"><methodname>::realize()</methodname></link> handler, it does not "
"actually show the window. That is, the window's structure is just created in "
"memory. The widget actually shows the window when it gets <glossterm linkend="
"\"mapping\">mapped</glossterm>."
msgstr ""

#: glossary.xml:253(para)
msgid ""
"The size requisition of a <glossterm linkend=\"widget\">widget</glossterm> "
"is the minimum amount of space it requests from its <glossterm linkend="
"\"parent\">parent</glossterm>. Once the parent computes the widget's final "
"size, it gives it its <glossterm linkend=\"allocation\">size allocation</"
"glossterm>."
msgstr ""

#: glossary.xml:26(glossterm)
msgid "bin"
msgstr ""

#: glossary.xml:262(glossterm) glossary.xml:9(glossterm)
msgid "allocation"
msgstr ""

#: glossary.xml:268(glossterm)
msgid "screen"
msgstr ""

#: glossary.xml:270(para)
msgid ""
"GDK inherited the concept of screen from the X window system, which "
"considers a screen to be a rectangular area, on which applications may place "
"their windows. Screens under X may have quite dissimilar <glossterm linkend="
"\"visual\">visuals</glossterm>. Each screen can stretch across multiple "
"physical monitors."
msgstr ""

#: glossary.xml:277(para)
msgid "In GDK, screens are represented by #GdkScreen objects."
msgstr ""

#: glossary.xml:28(para)
msgid ""
"A <glossterm linkend=\"container\">container</glossterm> that can hold at "
"most one child widget. The base class for bins is #GtkBin."
msgstr ""

#: glossary.xml:284(glossterm)
msgid "style"
msgstr ""

#: glossary.xml:286(para)
msgid ""
"A style encapsulates what GTK+ needs to know in order to draw a widget. "
"Styles can be modified with <link linkend=\"gtk-Resource-Files\">resource "
"files</link>."
msgstr ""

#: glossary.xml:295(glossterm)
msgid "toplevel"
msgstr ""

#: glossary.xml:297(para)
msgid ""
"A <glossterm linkend=\"widget\">widget</glossterm> that does not require a "
"<glossterm linkend=\"parent\">parent</glossterm> container. The only "
"toplevel widgets in GTK+ are #GtkWindow and widgets derived from it."
msgstr ""

#: glossary.xml:303(glossterm) glossary.xml:34(glossterm)
#: glossary.xml:365(glossterm) glossary.xml:67(glossterm)
msgid "container"
msgstr ""

#: glossary.xml:309(glossterm)
msgid "unmap"
msgstr ""

#: glossary.xml:314(glossterm)
msgid "unrealize"
msgstr ""

#: glossary.xml:321(para)
msgid ""
"A displayed column in a tree view, represented by a #GtkTreeViewColumn "
"object."
msgstr ""

#: glossary.xml:332(glossterm)
msgid "visual"
msgstr ""

#: glossary.xml:334(para)
msgid ""
"A visual describes how color information is stored in pixels. A <glossterm "
"linkend=\"screen\">screen</glossterm> may support multiple visuals. On "
"modern hardware, the most common visuals are truecolor visuals, which store "
"a fixed number of bits (typically 8) for the red, green and blue components "
"of a color."
msgstr ""

#: glossary.xml:341(para)
msgid ""
"On ancient hardware, one may still meet indexed visuals, which store color "
"information as an index into a color map, or even monochrome visuals."
msgstr ""

#: glossary.xml:350(glossterm) glossary.xml:82(glossterm)
msgid "widget"
msgstr ""

#: glossary.xml:352(para)
msgid ""
"A control in a graphical user interface. Widgets can draw themselves and "
"process events from the mouse and keyboard. Widget types include buttons, "
"menus, text entry lines, and lists. Widgets can be arranged into <glossterm "
"linkend=\"container\">containers</glossterm>, and these take care of "
"assigning the <glossterm linkend=\"geometry\">geometry</glossterm> of the "
"widgets: every widget thus has a parent except those widgets which are "
"<glossterm linkend=\"toplevel\">toplevels</glossterm>. The base class for "
"widgets is #GtkWidget."
msgstr ""

#: glossary.xml:40(glossterm)
msgid "child"
msgstr ""

#: glossary.xml:42(para)
msgid ""
"A <glossterm linkend=\"container\">container's</glossterm> child is a "
"<glossterm linkend=\"widget\">widget</glossterm> contained inside it."
msgstr ""

#: glossary.xml:51(glossterm)
msgid "column"
msgstr ""

#: glossary.xml:53(para)
msgid ""
"GTK+ contains several widgets which display data in columns, e.g. the "
"#GtkTreeView. These <glossterm linkend=\"view-column\">view columns</"
"glossterm> in the tree view are represented by #GtkTreeViewColumn objects "
"inside GTK+. They should not be confused with <glossterm linkend=\"model-"
"column\">model columns</glossterm> which are used to organize the data in "
"tree models."
msgstr ""

#: glossary.xml:6(title)
msgid "Glossary"
msgstr ""

#: glossary.xml:69(para)
msgid ""
"A <glossterm linkend=\"widget\">widget</glossterm> that contains other "
"widgets; in that case, the container is the <emphasis>parent</emphasis> of "
"the <emphasis>child</emphasis> widgets. Some containers don't draw anything "
"on their own, but rather just organize their children's <glossterm linkend="
"\"geometry\">geometry</glossterm>; for example, #GtkVBox lays out its "
"children vertically without painting anything on its own. Other containers "
"include decorative elements; for example, #GtkFrame contains the frame's "
"child and a label in addition to the shaded frame it draws. The base class "
"for containers is #GtkContainer."
msgstr ""

#: glossary.xml:89(glossterm) x11.sgml:49(replaceable)
msgid "display"
msgstr ""

#: glossary.xml:91(para)
msgid ""
"GDK inherited the concept of display from the X window system, which "
"considers a display to be the combination of a keyboard, a pointing device "
"and one or more <glossterm linkend=\"screen\">screens</glossterm>. "
"Applications open a display to show windows and interact with the user. In "
"GDK, a display is represented by a #GdkDisplay."
msgstr ""

#: gtk-docs.sgml:109(title)
msgid "Buttons and Toggles"
msgstr "按钮和开关"

#: gtk-docs.sgml:11(title)
msgid "GTK+ 3 Reference Manual"
msgstr "GTK+ 3 参考手册"

#: gtk-docs.sgml:12(releaseinfo)
msgid ""
"This document is for the GTK+ 3 library, version 3.0.10 . The latest "
"versions can be found online at <ulink role=\"online-location\" url=\"http://"
"library.gnome.org/devel/gtk3/\">http://library.gnome.org/devel/gtk3/</"
"ulink>. If you are looking for the older GTK+ 2 series of libraries, see "
"<ulink role=\"online-location\" url=\"http://library.gnome.org/devel/gtk/"
"\">http://library.gnome.org/devel/gtk/</ulink>."
msgstr ""
"GTK+ 3 当前版本: 3.0.10, 最新在线文档请浏览这里：<ulink role=\"online-location"
"\" url=\"http://library.gnome.org/devel/gtk3/\">http://library.gnome.org/"
"devel/gtk3/</ulink>.要查看旧的GTK+ 2.x 版本请浏览这里：<ulink role=\"online-"
"location\" url=\"http://library.gnome.org/devel/gtk/\">http://library.gnome."
"org/devel/gtk/</ulink>."

#: gtk-docs.sgml:121(title)
msgid "Numeric/Text Data Entry"
msgstr "数字/文本数据输入项"

#: gtk-docs.sgml:133(title)
msgid "Multiline Text Editor"
msgstr "多行文本编辑器"

#: gtk-docs.sgml:144(title)
msgid "Tree, List and Icon Grid Widgets"
msgstr "树、列表和图标网格构件"

#: gtk-docs.sgml:175(title)
msgid "Menus, Combo Box, Toolbar"
msgstr "菜单、组合框和工具栏"

#: gtk-docs.sgml:199(title)
msgid "Action-based menus and toolbars"
msgstr "基于行为的菜单和工具栏"

#: gtk-docs.sgml:210(title)
msgid "Selectors (Color/File/Font)"
msgstr "选择器(Color/File/Font)"

#: gtk-docs.sgml:22(title)
msgid "GTK+ Overview"
msgstr "GTK+概述"

#: gtk-docs.sgml:226(title)
msgid "Layout Containers"
msgstr "布局容器"

#: gtk-docs.sgml:248(title)
msgid "Ornaments"
msgstr "装饰"

#: gtk-docs.sgml:256(title)
msgid "Scrolling"
msgstr "滚动"

#: gtk-docs.sgml:265(title)
msgid "Printing"
msgstr "打印"

#: gtk-docs.sgml:278(title)
msgid "Miscellaneous"
msgstr "杂项"

#: gtk-docs.sgml:294(title)
msgid "Abstract Base Classes"
msgstr ""

#: gtk-docs.sgml:305(title)
msgid "Cross-process Embedding"
msgstr ""

#: gtk-docs.sgml:311(title)
msgid "Recently Used Documents"
msgstr "最近使用文档"

#: gtk-docs.sgml:321(title)
msgid "Choosing from installed applications"
msgstr ""

#: gtk-docs.sgml:329(title)
msgid "Interface builder"
msgstr ""

#: gtk-docs.sgml:335(title)
msgid "Application support"
msgstr "应用程序支持"

#: gtk-docs.sgml:341(title)
msgid "Migrating from Previous Versions of GTK+"
msgstr "从GTK+的旧版本迁移程序"

#: gtk-docs.sgml:344(para)
msgid ""
"This part describes what you need to change in programs use older versions "
"of GTK+ so that they can use the new features. It also mentions how to "
"convert applications using widgets found in the libgnomeui library to use "
"their counterparts in GTK+."
msgstr ""

#: gtk-docs.sgml:360(title)
msgid "GTK+ Tools"
msgstr "GTK+ 工具"

#: gtk-docs.sgml:368(title)
msgid "Index of all symbols"
msgstr "所有符号索引"

#: gtk-docs.sgml:372(title)
msgid "Index of deprecated symbols"
msgstr "已过时符号索引"

#: gtk-docs.sgml:376(title)
msgid "Index of new symbols in 3.0"
msgstr "3.0版本中的新符号索引"

#: gtk-docs.sgml:38(title)
msgid "GTK+ Core Reference"
msgstr "GTK+核心参考"

#: gtk-docs.sgml:55(title)
msgid "Theming in GTK+"
msgstr "GTK+中的主题"

#: gtk-docs.sgml:72(title)
msgid "GTK+ Widgets and Objects"
msgstr "GTK+构件和对象"

#: gtk-docs.sgml:75(title)
msgid "Object Hierarchy"
msgstr "类层次树"

#: gtk-docs.sgml:80(title)
msgid "Widget Gallery"
msgstr "构件画廊"

#: gtk-docs.sgml:85(title)
msgid "Windows"
msgstr "窗口"

#: gtk-docs.sgml:97(title)
msgid "Display Widgets"
msgstr "显示构件"

#: gtk-query-immodules-3.0.xml:10(refmiscinfo)
#: gtk-update-icon-cache.xml:10(refmiscinfo)
msgid "User Commands"
msgstr ""

#: gtk-query-immodules-3.0.xml:14(refname)
#: gtk-query-immodules-3.0.xml:20(command)
#: gtk-query-immodules-3.0.xml:8(refentrytitle)
msgid "gtk-query-immodules-3.0"
msgstr ""

#: gtk-query-immodules-3.0.xml:15(refpurpose)
msgid "Input method module registration utility"
msgstr ""

#: gtk-query-immodules-3.0.xml:21(arg) gtk-query-immodules-3.0.xml:51(term)
msgid "--update-cache"
msgstr ""

#: gtk-query-immodules-3.0.xml:22(arg) running.sgml:35(replaceable)
msgid "module"
msgstr "module"

#: gtk-query-immodules-3.0.xml:26(title) gtk-update-icon-cache.xml:31(title)
msgid "Description"
msgstr ""

#: gtk-query-immodules-3.0.xml:27(para)
msgid ""
"<command>gtk-query-immodules-3.0</command> collects information about "
"loadable input method modules for GTK+ and writes it to the default cache "
"file location, or to <filename>stdout</filename>."
msgstr ""

#: gtk-query-immodules-3.0.xml:32(para)
msgid ""
"If called without arguments, it looks for modules in the GTK+ input method "
"module path."
msgstr ""

#: gtk-query-immodules-3.0.xml:36(para)
msgid ""
"If called with arguments, it looks for the specified modules. The arguments "
"may be absolute or relative paths."
msgstr ""

#: gtk-query-immodules-3.0.xml:40(para)
msgid ""
"Normally, the output of <command>gtk-query-immodules-3.0</command> is "
"written to <filename><replaceable>libdir</replaceable>/gtk-3.0/3.0.0/"
"immodules.cache</filename>, where GTK+ looks for it by default. If it is "
"written to some other location, the environment variable <link linkend=\"gtk-"
"im-module-file\"><envar>GTK_IM_MODULE_FILE</envar></link> can be set to "
"point GTK+ at the file."
msgstr ""

#: gtk-query-immodules-3.0.xml:48(title) gtk-update-icon-cache.xml:52(title)
msgid "Options"
msgstr ""

#: gtk-query-immodules-3.0.xml:52(para)
msgid ""
"Write the output to the default cache location instead of <filename>stdout</"
"filename>"
msgstr ""

#: gtk-query-immodules-3.0.xml:58(title)
msgid "Environment"
msgstr ""

#: gtk-query-immodules-3.0.xml:59(para)
msgid ""
"The environment variable <link linkend=\"gtk-path\"><envar>GTK_PATH</envar></"
"link> can be used to prepend directories to the input method module path."
msgstr ""

#: gtk-query-immodules-3.0.xml:65(title) gtk-update-icon-cache.xml:102(title)
msgid "Bugs"
msgstr ""

#: gtk-query-immodules-3.0.xml:66(para) gtk-update-icon-cache.xml:103(para)
msgid "None known yet."
msgstr ""

#: gtk-query-immodules-3.0.xml:9(manvolnum)
#: gtk-update-icon-cache.xml:9(manvolnum)
msgid "1"
msgstr ""

#: gtk-update-icon-cache.xml:14(refname) gtk-update-icon-cache.xml:20(command)
#: gtk-update-icon-cache.xml:8(refentrytitle)
msgid "gtk-update-icon-cache"
msgstr ""

#: gtk-update-icon-cache.xml:15(refpurpose)
msgid "Icon theme caching utility"
msgstr ""

#: gtk-update-icon-cache.xml:21(arg) gtk-update-icon-cache.xml:55(term)
msgid "--force"
msgstr ""

#: gtk-update-icon-cache.xml:22(arg) gtk-update-icon-cache.xml:62(term)
msgid "--ignore-theme-index"
msgstr ""

#: gtk-update-icon-cache.xml:23(arg) gtk-update-icon-cache.xml:72(term)
msgid "--index-only"
msgstr ""

#: gtk-update-icon-cache.xml:24(arg)
msgid "--source <arg choice=\"plain\"><placeholder-1/></arg>"
msgstr ""

#: gtk-update-icon-cache.xml:24(replaceable)
msgid "NAME"
msgstr ""

#: gtk-update-icon-cache.xml:25(arg) gtk-update-icon-cache.xml:87(term)
msgid "--quiet"
msgstr ""

#: gtk-update-icon-cache.xml:26(arg) gtk-update-icon-cache.xml:94(term)
msgid "--validate"
msgstr ""

#: gtk-update-icon-cache.xml:27(replaceable)
msgid "PATH"
msgstr ""

#: gtk-update-icon-cache.xml:32(para)
msgid ""
"<command>gtk-update-icon-cache</command> creates mmapable cache files for "
"icon themes."
msgstr ""

#: gtk-update-icon-cache.xml:36(para)
msgid ""
"It expects to be given the <replaceable>PATH</replaceable> to a icon theme "
"directory containing an <filename>index.theme</filename>, e.g. <filename>/"
"usr/share/icons/hicolor</filename>, and writes a <filename>icon-theme.cache</"
"filename> containing cached information about the icons in the directory "
"tree below the given directory."
msgstr ""

#: gtk-update-icon-cache.xml:43(para)
msgid ""
"GTK+ can use the cache files created by <command>gtk-update-icon-cache</"
"command> to avoid a lot of system call and disk seek overhead when the "
"application starts. Since the format of the cache files allows them to be "
"mmaped shared between multiple applications, the overall memory consumption "
"is reduced as well."
msgstr ""

#: gtk-update-icon-cache.xml:56(term)
msgid "-f"
msgstr ""

#: gtk-update-icon-cache.xml:57(para)
msgid "Overwrite an existing cache file even if it appears to be uptodate."
msgstr ""

#: gtk-update-icon-cache.xml:63(term)
msgid "-t"
msgstr ""

#: gtk-update-icon-cache.xml:64(para)
msgid ""
"Don't check for the existence of <filename>index.theme</filename> in the "
"icon theme directory. Without this option, <command>gtk-update-icon-cache</"
"command> refuses to create an icon cache in a directory which does not "
"appear to be the toplevel directory of an icon theme."
msgstr ""

#: gtk-update-icon-cache.xml:73(term)
msgid "-i"
msgstr ""

#: gtk-update-icon-cache.xml:74(para)
msgid "Don't include image data in the cache."
msgstr ""

#: gtk-update-icon-cache.xml:79(term)
msgid "--source"
msgstr ""

#: gtk-update-icon-cache.xml:80(term)
msgid "-c"
msgstr ""

#: gtk-update-icon-cache.xml:81(para)
msgid ""
"Output a C header file declaring a constant <replaceable>NAME</replaceable> "
"with the contents of the icon cache."
msgstr ""

#: gtk-update-icon-cache.xml:88(term)
msgid "-q"
msgstr ""

#: gtk-update-icon-cache.xml:89(para)
msgid "Turn off verbose output."
msgstr ""

#: gtk-update-icon-cache.xml:95(term)
msgid "-v"
msgstr ""

#: gtk-update-icon-cache.xml:96(para)
msgid "Validate existing icon cache."
msgstr ""

#: migrating-2to3.xml:1001(title)
msgid "A simple ::draw function"
msgstr ""

#: migrating-2to3.xml:1002(programlisting)
#, no-wrap
msgid ""
"\n"
"gboolean\n"
"gtk_arrow_draw (GtkWidget *widget,\n"
"                cairo_t   *cr)\n"
"{\n"
"  GtkStyleContext *context;\n"
"  gint x, y;\n"
"  gint width, height;\n"
"  gint extent;\n"
"\n"
"  context = gtk_widget_get_style_context (widget);\n"
"\n"
"  width = gtk_widget_get_allocated_width (widget);\n"
"  height = gtk_widget_get_allocated_height (widget);\n"
"\n"
"  extent = MIN (width - 2 * PAD, height - 2 * PAD);\n"
"  x = PAD;\n"
"  y = PAD;\n"
"\n"
"  gtk_render_arrow (context, rc, G_PI / 2, x, y, extent);\n"
"}\n"
"    "
msgstr ""

#: migrating-2to3.xml:101(para)
msgid ""
"To ensure that your application does not have problems with this, you define "
"the preprocessor symbol <literal>GSEAL_ENABLE</literal> while building your "
"application against GTK+ 2.x. This will make the compiler catch all uses of "
"direct access to struct fields so that you can go through them one by one "
"and replace them with a call to an accessor function instead. <placeholder-1/"
">"
msgstr ""

#: migrating-2to3.xml:1028(title)
msgid "GtkProgressBar orientation"
msgstr ""

#: migrating-2to3.xml:1030(para)
msgid ""
"In GTK+ 2.x, #GtkProgressBar and #GtkCellRendererProgress were using the "
"GtkProgressBarOrientation enumeration to specify their orientation and "
"direction. In GTK+ 3, both the widget and the cell renderer implement "
"#GtkOrientable, and have an additional 'inverted' property to determine "
"their direction. Therefore, a call to gtk_progress_bar_set_orientation() "
"needs to be replaced by a pair of calls to gtk_orientable_set_orientation() "
"and gtk_progress_bar_set_inverted(). The following values correspond: "
"<table><tgroup cols=\"3\"><colspec colname=\"1\"/><colspec colname=\"2\"/"
"><colspec colname=\"3\"/><thead><row><entry>GTK+ 2.x</entry><entry namest="
"\"2\" nameend=\"3\">GTK+ 3</entry></"
"row><row><entry>GtkProgressBarOrientation</entry><entry>GtkOrientation</"
"entry><entry>inverted</entry></row></"
"thead><tbody><row><entry>GTK_PROGRESS_LEFT_TO_RIGHT</"
"entry><entry>GTK_ORIENTATION_HORIZONTAL</entry><entry>FALSE</entry></"
"row><row><entry>GTK_PROGRESS_RIGHT_TO_LEFT</"
"entry><entry>GTK_ORIENTATION_HORIZONTAL</entry><entry>TRUE</entry></"
"row><row><entry>GTK_PROGRESS_TOP_TO_BOTTOM</"
"entry><entry>GTK_ORIENTATION_VERTICAL</entry><entry>FALSE</entry></"
"row><row><entry>GTK_PROGRESS_BOTTOM_TO_TOP</"
"entry><entry>GTK_ORIENTATION_VERTICAL</entry><entry>TRUE</entry></row></"
"tbody></tgroup></table>"
msgstr ""

#: migrating-2to3.xml:1060(title)
msgid "Check your expand and fill flags"
msgstr ""

#: migrating-2to3.xml:1062(para)
msgid ""
"The behaviour of expanding widgets has changed slightly in GTK+ 3, compared "
"to GTK+ 2.x. It is now 'inherited', i.e. a container that has an expanding "
"child is considered expanding itself. This is often the desired behaviour. "
"In places where you don't want this to happen, setting the container "
"explicity as not expanding will stop the expand flag of the child from being "
"inherited. See gtk_widget_set_hexpand() and gtk_widget_set_vexpand()."
msgstr ""

#: migrating-2to3.xml:1071(para)
msgid ""
"If you experience sizing problems with widgets in ported code, carefully "
"check the #GtkBox::expand and #GtkBox::fill flags of your boxes."
msgstr ""

#: migrating-2to3.xml:1079(title)
msgid "Scrolling changes"
msgstr ""

#: migrating-2to3.xml:108(programlisting)
#, no-wrap
msgid ""
"\n"
"    make CFLAGS+=\"-DGSEAL_ENABLE\"\n"
"    "
msgstr ""

#: migrating-2to3.xml:1081(para)
msgid ""
"The default values for the #GtkScrolledWindow:hscrollbar-policy and "
"#GtkScrolledWindow:vscrollbar-policy properties have been changed from "
"'never' to 'automatic'. If your application was relying on the default "
"value, you will have explicitly set it explicitly."
msgstr ""

#: migrating-2to3.xml:1088(para)
msgid ""
"The ::set-scroll-adjustments signal on GtkWidget has been replaced by the "
"#GtkScrollable interface which must be implemented by a widget that wants to "
"be placed in a #GtkScrolledWindow. Instead of emitting ::set-scroll-"
"adjustments, the scrolled window simply sets the #GtkScrollable::hadjustment "
"and #GtkScrollable::vadjustment properties."
msgstr ""

#: migrating-2to3.xml:1098(title)
msgid "GtkObject is gone"
msgstr ""

#: migrating-2to3.xml:1100(para)
msgid ""
"GtkObject has been removed in GTK+ 3. Its remaining functionality, the ::"
"destroy signal, has been moved to GtkWidget. If you have non-widget classes "
"that are directly derived from GtkObject, you have to make them derive from "
"#GInitiallyUnowned (or, if you don't need the floating functionality, "
"#GObject). If you have widgets that override the destroy class handler, you "
"have to adjust your class_init function, since destroy is now a member of "
"GtkWidgetClass: <placeholder-1/> becomes <placeholder-2/> In the unlikely "
"case that you have a non-widget class that is derived from GtkObject and "
"makes use of the destroy functionality, you have to implement ::destroy "
"yourself."
msgstr ""

#: migrating-2to3.xml:1108(programlisting)
#, no-wrap
msgid ""
"\n"
"      GtkObjectClass *object_class = GTK_OBJECT_CLASS (class);\n"
"\n"
"      object_class-&gt;destroy = my_destroy;\n"
"      "
msgstr ""

#: migrating-2to3.xml:1114(programlisting)
#, no-wrap
msgid ""
"\n"
"      GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (class);\n"
"\n"
"      widget_class-&gt;destroy = my_destroy;\n"
"      "
msgstr ""

#: migrating-2to3.xml:1126(title)
msgid "GtkEntryCompletion signal parameters"
msgstr ""

#: migrating-2to3.xml:1128(para)
msgid ""
"The #GtkEntryCompletion::match-selected and #GtkEntryCompletion::cursor-on-"
"match signals were erroneously given the internal filter model instead of "
"the users model. This oversight has been fixed in GTK+ 3; if you have "
"handlers for these signals, they will likely need slight adjustments."
msgstr ""

#: migrating-2to3.xml:1138(title)
msgid "Resize grips"
msgstr ""

#: migrating-2to3.xml:1140(para)
msgid ""
"The resize grip functionality has been moved from #GtkStatusbar to "
"#GtkWindow. Any window can now have resize grips, regardless whether it has "
"a statusbar or not. The functions gtk_statusbar_set_has_resize_grip() and "
"gtk_statusbar_get_has_resize_grip() have disappeared, and instead there are "
"now gtk_window_set_has_resize_grip() and gtk_window_get_has_resize_grip()."
msgstr ""

#: migrating-2to3.xml:115(title)
msgid "Replace GDK_&lt;keyname&gt; with GDK_KEY_&lt;keyname&gt;"
msgstr ""

#: migrating-2to3.xml:1151(title)
msgid "Prevent mixed linkage"
msgstr ""

#: migrating-2to3.xml:1152(para)
msgid ""
"Linking against GTK+ 2.x and GTK+ 3 in the same process is problematic and "
"can lead to hard-to-diagnose crashes. The gtk_init() function in both GTK+ "
"2.22 and in GTK+ 3 tries to detect this situation and abort with a "
"diagnostic message, but this check is not 100% reliable (e.g. if the "
"problematic linking happens only in loadable modules)."
msgstr ""

#: migrating-2to3.xml:1159(para)
msgid ""
"Direct linking of your application against both versions of GTK+ is easy to "
"avoid; the problem gets harder when your application is using libraries that "
"are themselves linked against some version of GTK+. In that case, you have "
"to verify that you are using a version of the library that is linked against "
"GTK+ 3."
msgstr ""

#: migrating-2to3.xml:1166(para)
msgid ""
"If you are using packages provided by a distributor, it is likely that "
"parallel installable versions of the library exist for GTK+ 2.x and GTK+ 3, "
"e.g for vte, check for vte3; for webkitgtk look for webkitgtk3, and so on."
msgstr ""

#: migrating-2to3.xml:117(para)
msgid ""
"Key constants have gained a <literal>_KEY_</literal> infix. For example, "
"<literal>GDK_a</literal> is now <literal>GDK_KEY_a</literal>. In GTK+ 2, the "
"old names continue to be available. In GTK+ 3 however, the old names will "
"require an explicit include of the <literal>gdkkeysyms-compat.h</literal> "
"header."
msgstr ""

#: migrating-2to3.xml:1175(title)
msgid "Install GTK+ modules in the right place"
msgstr ""

#: migrating-2to3.xml:1176(para)
msgid ""
"Some software packages install loadable GTK+ modules such as theme engines, "
"gdk-pixbuf loaders or input methods. Since GTK+ 3 is parallel-installable "
"with GTK+ 2.x, the two GTK+ versions have separate locations for their "
"loadable modules. The location for GTK+ 2.x is "
"<filename><replaceable>libdir</replaceable>/gtk-2.0</filename> (and its "
"subdirectories), for GTK+ 3 the location is <filename><replaceable>libdir</"
"replaceable>/gtk-3.0</filename> (and its subdirectories)."
msgstr ""

#: migrating-2to3.xml:1186(para)
msgid ""
"For some kinds of modules, namely input methods and pixbuf loaders, GTK+ "
"keeps a cache file with extra information about the modules. For GTK+ 2.x, "
"these cache files are located in <filename><replaceable>sysconfdir</"
"replaceable>/gtk-2.0</filename>. For GTK+ 3, they have been moved to "
"<filename><replaceable>libdir</replaceable>/gtk-3.0/3.0.0/</filename>. The "
"commands that create these cache files have been renamed with a -3 suffix to "
"make them parallel-installable."
msgstr ""

#: migrating-2to3.xml:1196(para)
msgid ""
"Note that GTK+ modules often link against libgtk, libgdk-pixbuf, etc. If "
"that is the case for your module, you have to be careful to link the GTK+ 2."
"x version of your module against the 2.x version of the libraries, and the "
"GTK+ 3 version against hte 3.x versions. Loading a module linked against "
"libgtk 2.x into an application using GTK+ 3 will lead to unhappiness and "
"must be avoided."
msgstr ""

#: migrating-2to3.xml:128(title)
msgid "Use GIO for launching applications"
msgstr ""

#: migrating-2to3.xml:129(para)
msgid ""
"The <literal>gdk_spawn</literal> family of functions has been deprecated in "
"GDK 2.24 and removed from GDK 3. Various replacements exist; the best "
"replacement depends on the circumstances: <placeholder-1/>"
msgstr ""

#: migrating-2to3.xml:134(listitem)
msgid ""
"If you are opening a document or URI by launching a command like "
"<placeholder-1/> or <placeholder-2/>, it is best to just use gtk_show_uri(); "
"as an added benefit, your application will henceforth respect the users "
"preference for what application to use."
msgstr ""

#: migrating-2to3.xml:135(literal)
msgid "firefox http://my-favourite-website.com"
msgstr ""

#: migrating-2to3.xml:136(literal)
msgid "gnome-open ghelp:epiphany"
msgstr ""

#: migrating-2to3.xml:139(listitem)
msgid ""
"If you are launching a regular, installed application that has a desktop "
"file, it is best to use GIOs #GAppInfo with a suitable launch context. "
"<placeholder-1/> Remember that you have to include <placeholder-2/> and use "
"the <placeholder-3/> pkg-config file when using g_desktop_app_info_new()."
msgstr ""

#: migrating-2to3.xml:142(programlisting)
#, no-wrap
msgid ""
"\n"
"        GAppInfo *info;\n"
"        GAppLaunchContext *context;\n"
"        GError *error = NULL;\n"
"\n"
"        info = (GAppInfo*) g_desktop_app_info_new (\"epiphany.desktop\");\n"
"        context = (GAppLaunchContext*) gdk_display_get_app_launch_context (display);\n"
"        g_app_info_launch (info, NULL, context, &amp;error);\n"
"\n"
"        if (error)\n"
"          {\n"
"            g_warning (\"Failed to launch epiphany: %s\", error-&gt;message);\n"
"            g_error_free (error);\n"
"          }\n"
"\n"
"        g_object_unref (info);\n"
"        g_object_unref (context);\n"
"        "
msgstr ""

#: migrating-2to3.xml:161(filename)
msgid "gio/gdesktopappinfo.h"
msgstr ""

#: migrating-2to3.xml:162(filename)
msgid "gio-unix-2.0"
msgstr ""

#: migrating-2to3.xml:165(listitem)
msgid ""
"If you are launching a custom commandline, you can still use "
"g_app_info_launch() with a GAppInfo that is constructed with "
"g_app_info_create_from_commandline(), or you can use the more lowlevel "
"<placeholder-1/> family of functions (e.g. g_spawn_command_line_async()), "
"and pass <placeholder-2/> in the environment. gdk_screen_make_display_name() "
"can be used to find the right value for the <placeholder-3/> environment "
"variable."
msgstr ""

#: migrating-2to3.xml:168(literal)
msgid "g_spawn"
msgstr ""

#: migrating-2to3.xml:169(envar) migrating-2to3.xml:171(envar)
msgid "DISPLAY"
msgstr ""

#: migrating-2to3.xml:179(title)
msgid "Use cairo for drawing"
msgstr ""

#: migrating-2to3.xml:180(para)
msgid ""
"In GTK+ 3, the GDK drawing API (which closely mimics the X drawing API, "
"which is itself modeled after PostScript) has been removed. All drawing in "
"GTK+ 3 is done via cairo."
msgstr ""

#: migrating-2to3.xml:185(para)
msgid ""
"The #GdkGC and #GdkImage objects, as well as all the functions using them, "
"are gone. This includes the <literal>gdk_draw</literal> family of functions "
"like gdk_draw_rectangle() and gdk_draw_drawable(). As #GdkGC is roughly "
"equivalent to #cairo_t and #GdkImage was used for drawing images to "
"GdkWindows, which cairo supports automatically, a transition is usually "
"straightforward."
msgstr ""

#: migrating-2to3.xml:193(para)
msgid ""
"The following examples show a few common drawing idioms used by applications "
"that have been ported to use cairo and how the code was replaced."
msgstr ""

#: migrating-2to3.xml:199(title)
msgid "Drawing a GdkPixbuf onto a GdkWindow"
msgstr ""

#: migrating-2to3.xml:20(title)
msgid "Preparation in GTK+ 2.x"
msgstr ""

#: migrating-2to3.xml:200(para)
msgid ""
"Drawing a pixbuf onto a drawable used to be done like this: <placeholder-1/> "
"Doing the same thing with cairo: <placeholder-2/> Note that very similar "
"code can be used when porting code using GdkPixmap to #cairo_surface_t by "
"calling cairo_set_source_surface() instead of gdk_cairo_set_source_pixbuf()."
msgstr ""

#: migrating-2to3.xml:202(programlisting)
#, no-wrap
msgid ""
"\n"
"gdk_draw_pixbuf (window,\n"
"                 gtk_widget_get_style (widget)-&gt;black_gc,\n"
"                 pixbuf,\n"
"                 0, 0\n"
"                 x, y,\n"
"                 gdk_pixbuf_get_width (pixbuf),\n"
"                 gdk_pixbuf_get_height (pixbuf),\n"
"                 GDK_RGB_DITHER_NORMAL,\n"
"                 0, 0);\n"
"           "
msgstr ""

#: migrating-2to3.xml:214(programlisting)
#, no-wrap
msgid ""
"\n"
"cairo_t *cr = gdk_cairo_create (window);\n"
"gdk_cairo_set_source_pixbuf (cr, pixbuf, x, y);\n"
"cairo_paint (cr);\n"
"cairo_destroy (cr);\n"
"           "
msgstr ""

#: migrating-2to3.xml:22(para)
msgid ""
"The steps outlined in the following sections assume that your application is "
"working with GTK+ 2.24, which is the final stable release of GTK+ 2.x. It "
"includes all the necessary APIs and tools to help you port your application "
"to GTK+ 3. If you are still using an older version of GTK+ 2.x, you should "
"first get your application to build and work with 2.24."
msgstr ""

#: migrating-2to3.xml:227(title)
msgid "Drawing a tiled GdkPixmap to a GdkWindow"
msgstr ""

#: migrating-2to3.xml:228(para)
msgid ""
"Tiled pixmaps are often used for drawing backgrounds. Old code looked "
"something like this: <placeholder-1/> The equivalent cairo code to draw a "
"tiled surface looks like this: <placeholder-2/> The surface here can be "
"either an image surface or a X surface, and can either be created on the "
"spot or kept around for caching purposes. Another alternative is to use "
"pixbufs instead of surfaces with gdk_cairo_set_source_pixbuf() instead of "
"cairo_set_source_surface()."
msgstr ""

#: migrating-2to3.xml:231(programlisting)
#, no-wrap
msgid ""
"\n"
"GdkGCValues gc_values;\n"
"GdkGC *gc;\n"
"\n"
"/* setup */\n"
"gc = gtk_widget_get_style (widget)-&gt;black_gc;\n"
"gdk_gc_set_tile (gc, pixmap);\n"
"gdk_gc_set_fill (gc, GDK_TILED);\n"
"gdk_gc_set_ts_origin (gc, x_origin, y_origin);\n"
"/* use */\n"
"gdk_draw_rectangle (window, gc, TRUE, 0, 0, width, height);\n"
"/* restore */\n"
"gdk_gc_set_tile (gc, NULL);\n"
"gdk_gc_set_fill (gc, GDK_SOLID);\n"
"gdk_gc_set_ts_origin (gc, 0, 0);\n"
"          "
msgstr ""

#: migrating-2to3.xml:249(programlisting)
#, no-wrap
msgid ""
"\n"
"cairo_t *cr;\n"
"cairo_surface_t *surface;\n"
"\n"
"surface = ...\n"
"cr = gdk_cairo_create (window);\n"
"cairo_set_source_surface (cr, surface, x_origin, y_origin);\n"
"cairo_pattern_set_extend (cairo_get_source (cr), CAIRO_EXTEND_REPEAT);\n"
"cairo_rectangle (cr, 0, 0, width, height);\n"
"cairo_fill (cr);\n"
"cairo_destroy (cr);\n"
"          "
msgstr ""

#: migrating-2to3.xml:268(title)
msgid "Drawing a PangoLayout to a clipped area"
msgstr ""

#: migrating-2to3.xml:269(para)
msgid ""
"Drawing layouts clipped is often used to avoid overdraw or to allow drawing "
"selections. Code would have looked like this: <placeholder-1/> With cairo, "
"the same effect can be achieved using: <placeholder-2/> Clipping using "
"cairo_clip() is of course not restricted to text rendering and can be used "
"everywhere where GC clips were used. And using gdk_cairo_set_source_color() "
"with style colors should be used in all the places where a style’s GC was "
"used to achieve a particular color."
msgstr ""

#: migrating-2to3.xml:272(programlisting)
#, no-wrap
msgid ""
"\n"
"GdkGC *gc;\n"
"\n"
"/* setup */\n"
"gc = gtk_widget_get_style (widget)-&gt;text_gc[state];\n"
"gdk_gc_set_clip_rectangle (gc, &amp;area);\n"
"/* use */\n"
"gdk_draw_layout (drawable, gc, x, y, layout);\n"
"/* restore */\n"
"gdk_gc_set_clip_rectangle (gc, NULL);\n"
"          "
msgstr ""

#: migrating-2to3.xml:284(programlisting)
#, no-wrap
msgid ""
"\n"
"GtkStyleContext *context;\n"
"GtkStateFlags flags;\n"
"GdkRGBA rgba;\n"
"cairo_t *cr;\n"
"\n"
"cr = gdk_cairo_create (drawable);\n"
"/* clip */\n"
"gdk_cairo_rectangle (cr, &amp;area);\n"
"cairo_clip (cr);\n"
"/* set the correct source color */\n"
"context = gtk_widget_get_style_context (widget));\n"
"state = gtk_widget_get_state_flags (widget);\n"
"gtk_style_context_get_color (context, state, &amp;rgba);\n"
"gdk_cairo_set_source_rgba (cr, &amp;rgba);\n"
"/* draw the text */\n"
"cairo_move_to (cr, x, y);\n"
"pango_cairo_show_layout (cr, layout);\n"
"cairo_destroy (cr);\n"
"          "
msgstr ""

#: migrating-2to3.xml:312(title)
msgid "What should you be aware of ?"
msgstr ""

#: migrating-2to3.xml:313(title)
msgid "No more stippling"
msgstr ""

#: migrating-2to3.xml:314(para)
msgid ""
"Stippling is the usage of a bi-level mask, called a #GdkBitmap. It was often "
"used to achieve a checkerboard effect. You can use cairo_mask() to achieve "
"this effect. To get a checkerbox mask, you can use code like this: "
"<placeholder-1/> Note that stippling looks very outdated in UIs, and is "
"rarely used in modern applications. All properties that made use of "
"stippling have been removed from GTK+ 3. Most prominently, stippling is "
"absent from text rendering, in particular #GtkTextTag."
msgstr ""

#: migrating-2to3.xml:319(programlisting)
#, no-wrap
msgid ""
"\n"
"static cairo_pattern_t *\n"
"gtk_color_button_get_checkered (void)\n"
"{\n"
"    /* need to respect pixman's stride being a multiple of 4 */\n"
"    static unsigned char data[8] = { 0xFF, 0x00, 0x00, 0x00,\n"
"                                     0x00, 0xFF, 0x00, 0x00 };\n"
"    cairo_surface_t *surface;\n"
"    cairo_pattern_t *pattern;\n"
"\n"
"    surface = cairo_image_surface_create_for_data (data,\n"
"                                                   CAIRO_FORMAT_A8,\n"
"                                                   2, 2,\n"
"                                                   4);\n"
"    pattern = cairo_pattern_create_for_surface (surface);\n"
"    cairo_surface_destroy (surface);\n"
"    cairo_pattern_set_extend (pattern, CAIRO_EXTEND_REPEAT);\n"
"    cairo_pattern_set_filter (pattern, CAIRO_FILTER_NEAREST);\n"
"\n"
"    return pattern;\n"
"}\n"
"          "
msgstr ""

#: migrating-2to3.xml:32(title)
msgid "Do not include individual headers"
msgstr ""

#: migrating-2to3.xml:33(para)
msgid ""
"With GTK+ 2.x it was common to include just the header files for a few "
"widgets that your application was using, which could lead to problems with "
"missing definitions, etc. GTK+ 3 tightens the rules about which header files "
"you are allowed to include directly. The allowed header files are are "
"<placeholder-1/> (these relative paths are assuming that you are using the "
"include paths that are specified in the gtk+-2.0.pc file, as returned by "
"<literal>pkg-config --cflags gtk+-2.0.pc</literal>.)"
msgstr ""

#: migrating-2to3.xml:347(title)
msgid "Using the target also as source or mask"
msgstr ""

#: migrating-2to3.xml:348(para)
msgid ""
"The gdk_draw_drawable() function allowed using the same drawable as source "
"and target. This was often used to achieve a scrolling effect. Cairo does "
"not allow this yet. You can however use cairo_push_group() to get a "
"different intermediate target that you can copy to. So you can replace this "
"code: <placeholder-1/> By using this code: <placeholder-2/> The surface here "
"can be either an image surface or a X surface, and can either be created on "
"the spot or kept around for caching purposes. Another alternative is to use "
"pixbufs instead of surfaces with gdk_cairo_set_source_pixbuf() instead of "
"cairo_set_source_surface()."
msgstr ""

#: migrating-2to3.xml:354(programlisting)
#, no-wrap
msgid ""
"\n"
"gdk_draw_drawable (pixmap,\n"
"                   gc,\n"
"                   pixmap,\n"
"                   area.x + dx, area.y + dy,\n"
"                   area.x, area.y,\n"
"                   area.width, area.height);\n"
"          "
msgstr ""

#: migrating-2to3.xml:363(programlisting)
#, no-wrap
msgid ""
"\n"
"cairo_t *cr = cairo_create (surface);\n"
"/* clipping restricts the intermediate surface's size, so it's a good idea\n"
" * to use it. */\n"
"gdk_cairo_rectangle (cr, &amp;area);\n"
"cairo_clip (cr);\n"
"/* Now push a group to change the target */\n"
"cairo_push_group (cr);\n"
"cairo_set_source_surface (cr, surface, dx, dy);\n"
"cairo_paint (cr);\n"
"/* Now copy the intermediate target back */\n"
"cairo_pop_group_to_source (cr);\n"
"cairo_paint (cr);\n"
"cairo_destroy (cr);\n"
"          "
msgstr ""

#: migrating-2to3.xml:383(para)
msgid ""
"The cairo developers plan to add self-copies in the future to allow exactly "
"this effect, so you might want to keep up on cairo development to be able to "
"change your code."
msgstr ""

#: migrating-2to3.xml:389(title)
msgid ""
"Using pango_cairo_show_layout() instead of gdk_draw_layout_with_colors()"
msgstr ""

#: migrating-2to3.xml:390(para)
msgid ""
"GDK provided a way to ignore the color attributes of text and use a "
"hardcoded text color with the gdk_draw_layout_with_colors() function. This "
"is often used to draw text shadows or selections. Pango’s cairo support does "
"not yet provide this functionality. If you use Pango layouts that change "
"colors, the easiest way to achieve a similar effect is using "
"pango_cairo_layout_path() and cairo_fill() instead of "
"gdk_draw_layout_with_colors(). Note that this results in a slightly uglier-"
"looking text, as subpixel anti-aliasing is not supported."
msgstr ""

#: migrating-2to3.xml:407(title)
msgid "Changes that need to be done at the time of the switch"
msgstr ""

#: migrating-2to3.xml:409(para)
msgid ""
"This section outlines porting tasks that you need to tackle when you get to "
"the point that you actually build your application against GTK+ 3. Making it "
"possible to prepare for these in GTK+ 2.24 would have been either impossible "
"or impractical."
msgstr ""

#: migrating-2to3.xml:41(filename)
msgid "gtk/gtk.h"
msgstr ""

#: migrating-2to3.xml:417(title)
msgid "Replace size_request by get_preferred_width/height"
msgstr ""

#: migrating-2to3.xml:419(para)
msgid ""
"The request-phase of the traditional GTK+ geometry management has been "
"replaced by a more flexible height-for-width system, which is described in "
"detail in the API documentation (see <xref linkend=\"geometry-management\"/"
">). As a consequence, the ::size-request signal and vfunc has been removed "
"from #GtkWidgetClass. The replacement for size_request() can take several "
"levels of sophistication: <placeholder-1/>"
msgstr ""

#: migrating-2to3.xml:42(listitem)
msgid "for GTK"
msgstr ""

#: migrating-2to3.xml:429(para)
msgid ""
"As a minimal replacement to keep current functionality, you can simply "
"implement the #GtkWidgetClass.get_preferred_width() and #GtkWidgetClass."
"get_preferred_height() vfuncs by calling your existing size_request() "
"function. So you go from <placeholder-1/><placeholder-2/><placeholder-3/"
"><placeholder-4/><placeholder-5/>"
msgstr ""

#: migrating-2to3.xml:434(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"my_widget_class_init (MyWidgetClass *class)\n"
"{\n"
"  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (class);\n"
"\n"
"  /* ... */\n"
"\n"
"  widget_class-&gt;size_request = my_widget_size_request;\n"
"\n"
"  /* ... */\n"
"}\n"
"        "
msgstr ""

#: migrating-2to3.xml:447(para)
msgid "to something that looks more like this:"
msgstr ""

#: migrating-2to3.xml:45(filename)
msgid "gtk/gtkunixprint.h"
msgstr ""

#: migrating-2to3.xml:450(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"my_widget_get_preferred_width (GtkWidget *widget,\n"
"                               gint      *minimal_width,\n"
"                               gint      *natural_width)\n"
"{\n"
"  GtkRequisition requisition;\n"
"\n"
"  my_widget_size_request (widget, &amp;requisition);\n"
"\n"
"  *minimal_width = *natural_width = requisition.width;\n"
"}\n"
"\n"
"static void\n"
"my_widget_get_preferred_height (GtkWidget *widget,\n"
"                                gint      *minimal_height,\n"
"                                gint      *natural_height)\n"
"{\n"
"  GtkRequisition requisition;\n"
"\n"
"  my_widget_size_request (widget, &amp;requisition);\n"
"\n"
"  *minimal_height = *natural_height = requisition.height;\n"
"}\n"
"\n"
" /* ... */\n"
"\n"
"static void\n"
"my_widget_class_init (MyWidgetClass *class)\n"
"{\n"
"  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (class);\n"
"\n"
"  /* ... */\n"
"\n"
"  widget_class-&gt;get_preferred_width = my_widget_get_preferred_width;\n"
"  widget_class-&gt;get_preferred_height = my_widget_get_preferred_height;\n"
"\n"
"  /* ... */\n"
"\n"
"}\n"
"        "
msgstr ""

#: migrating-2to3.xml:46(listitem)
msgid "for low-level, UNIX-specific printing functions"
msgstr ""

#: migrating-2to3.xml:49(filename)
msgid "gdk/gdk.h"
msgstr ""

#: migrating-2to3.xml:491(para)
msgid ""
"Sometimes you can make things a little more streamlined by replacing your "
"existing size_request() implementation by one that takes an orientation "
"parameter:"
msgstr ""

#: migrating-2to3.xml:496(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"my_widget_get_preferred_size (GtkWidget      *widget,\n"
"                              GtkOrientation  orientation,\n"
"                               gint          *minimal_size,\n"
"                               gint          *natural_size)\n"
"{\n"
"\n"
"  /* do things that are common for both orientations ... */\n"
"\n"
"  if (orientation == GTK_ORIENTATION_HORIZONTAL)\n"
"    {\n"
"      /* do stuff that only applies to width... */\n"
"\n"
"      *minimal_size = *natural_size = ...\n"
"    }\n"
"  else\n"
"   {\n"
"      /* do stuff that only applies to height... */\n"
"\n"
"      *minimal_size = *natural_size = ...\n"
"   }\n"
"}\n"
"\n"
"static void\n"
"my_widget_get_preferred_width (GtkWidget *widget,\n"
"                               gint      *minimal_width,\n"
"                               gint      *natural_width)\n"
"{\n"
"  my_widget_get_preferred_size (widget,\n"
"                                GTK_ORIENTATION_HORIZONTAL,\n"
"                                minimal_width,\n"
"                                natural_width);\n"
"}\n"
"\n"
"static void\n"
"my_widget_get_preferred_height (GtkWidget *widget,\n"
"                                gint      *minimal_height,\n"
"                                gint      *natural_height)\n"
"{\n"
"  my_widget_get_preferred_size (widget,\n"
"                                GTK_ORIENTATION_VERTICAL,\n"
"                                minimal_height,\n"
"                                natural_height);\n"
"}\n"
"\n"
" /* ... */\n"
"          "
msgstr ""

#: migrating-2to3.xml:50(listitem)
msgid "for GDK"
msgstr ""

#: migrating-2to3.xml:53(filename)
msgid "gdk/gdkx.h"
msgstr ""

#: migrating-2to3.xml:54(listitem)
msgid "for GDK functions that are X11-specific"
msgstr ""

#: migrating-2to3.xml:547(para)
msgid ""
"If your widget can cope with a small size, but would appreciate getting some "
"more space (a common example would be that it contains ellipsizable labels), "
"you can do that by making your #GtkWidgetClass.get_preferred_width() / "
"#GtkWidgetClass.get_preferred_height() functions return a smaller value for "
"@minimal than for @natural. For @minimal, you probably want to return the "
"same value that your size_request() function returned before (since "
"size_request() was defined as returning the minimal size a widget can work "
"with). A simple way to obtain good values for @natural, in the case of "
"containers, is to use gtk_widget_get_preferred_width() and "
"gtk_widget_get_preferred_height() on the children of the container, as in "
"the following example: <placeholder-1/>"
msgstr ""

#: migrating-2to3.xml:561(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"gtk_fixed_get_preferred_height (GtkWidget *widget,\n"
"                                gint      *minimum,\n"
"                                gint      *natural)\n"
"{\n"
"  GtkFixed *fixed = GTK_FIXED (widget);\n"
"  GtkFixedPrivate *priv = fixed-&gt;priv;\n"
"  GtkFixedChild *child;\n"
"  GList *children;\n"
"  gint child_min, child_nat;\n"
"\n"
"  *minimum = 0;\n"
"  *natural = 0;\n"
"\n"
"  for (children = priv-&gt;children; children; children = children-&gt;next)\n"
"    {\n"
"      child = children-&gt;data;\n"
"\n"
"      if (!gtk_widget_get_visible (child-&gt;widget))\n"
"        continue;\n"
"\n"
"      gtk_widget_get_preferred_height (child-&gt;widget, &amp;child_min, &amp;child_nat);\n"
"\n"
"      *minimum = MAX (*minimum, child-&gt;y + child_min);\n"
"      *natural = MAX (*natural, child-&gt;y + child_nat);\n"
"    }\n"
"}\n"
"          "
msgstr ""

#: migrating-2to3.xml:57(filename)
msgid "gdk/gdkwin32.h"
msgstr ""

#: migrating-2to3.xml:58(listitem)
msgid "for GDK functions that are Windows-specific"
msgstr ""

#: migrating-2to3.xml:593(para)
msgid ""
"Note that the #GtkWidgetClass.get_preferred_width() / #GtkWidgetClass."
"get_preferred_height() functions only allow you to deal with one dimension "
"at a time. If your size_request() handler is doing things that involve both "
"width and height at the same time (e.g. limiting the aspect ratio), you will "
"have to implement #GtkWidgetClass.get_preferred_height_for_width() and "
"#GtkWidgetClass.get_preferred_width_for_height()."
msgstr ""

#: migrating-2to3.xml:605(para)
msgid ""
"To make full use of the new capabilities of the height-for-width geometry "
"management, you need to additionally implement the #GtkWidgetClass."
"get_preferred_height_for_width() and #GtkWidgetClass."
"get_preferred_width_for_height(). For details on these functions, see <xref "
"linkend=\"geometry-management\"/>."
msgstr ""

#: migrating-2to3.xml:618(title)
msgid "Replace GdkRegion by cairo_region_t"
msgstr ""

#: migrating-2to3.xml:620(para)
msgid ""
"Starting with version 1.10, cairo provides a region API that is equivalent "
"to the GDK region API (which was itself copied from the X server). "
"Therefore, the region API has been removed in GTK+ 3."
msgstr ""

#: migrating-2to3.xml:625(para)
msgid ""
"Porting your application to the cairo region API should be a straight find-"
"and-replace task. Please refer to the following table: <table><tgroup cols="
"\"2\"><placeholder-1/><thead><row><entry>GDK</entry><entry>cairo</entry></"
"row></thead><tbody><row><entry>#GdkRegion</entry><entry>#cairo_region_t</"
"entry></row><row><entry>#GdkRectangle</entry><entry>#cairo_rectangle_int_t</"
"entry></row><row><entry>gdk_rectangle_intersect()</entry><entry>this "
"function is still there</entry></row><row><entry>gdk_rectangle_union()</"
"entry><entry>this function is still there</entry></"
"row><row><entry>gdk_region_new()</entry><entry>cairo_region_create()</"
"entry></row><row><entry>gdk_region_copy()</entry><entry>cairo_region_copy()</"
"entry></row><row><entry>gdk_region_destroy()</"
"entry><entry>cairo_region_destroy()</entry></"
"row><row><entry>gdk_region_rectangle()</"
"entry><entry>cairo_region_create_rectangle()</entry></"
"row><row><entry>gdk_region_get_clipbox()</"
"entry><entry>cairo_region_get_extents()</entry></"
"row><row><entry>gdk_region_get_rectangles()</"
"entry><entry>cairo_region_num_rectangles() and cairo_region_get_rectangle()</"
"entry></row><row><entry>gdk_region_empty()</"
"entry><entry>cairo_region_is_empty()</entry></"
"row><row><entry>gdk_region_equal()</entry><entry>cairo_region_equal()</"
"entry></row><row><entry>gdk_region_point_in()</"
"entry><entry>cairo_region_contains_point()</entry></"
"row><row><entry>gdk_region_rect_in()</"
"entry><entry>cairo_region_contains_rectangle()</entry></"
"row><row><entry>gdk_region_offset()</entry><entry>cairo_region_translate()</"
"entry></row><row><entry>gdk_region_union_with_rect()</"
"entry><entry>cairo_region_union_rectangle()</entry></"
"row><row><entry>gdk_region_intersect()</entry><entry>cairo_region_intersect()"
"</entry></row><row><entry>gdk_region_union()</entry><entry>cairo_region_union"
"()</entry></row><row><entry>gdk_region_subtract()</"
"entry><entry>cairo_region_subtract()</entry></row><row><entry>gdk_region_xor"
"()</entry><entry>cairo_region_xor()</entry></"
"row><row><entry>gdk_region_shrink()</entry><entry>no replacement</entry></"
"row><row><entry>gdk_region_polygon()</entry><entry>no replacement, use cairo "
"paths instead</entry></row></tbody></tgroup></table>"
msgstr ""

#: migrating-2to3.xml:630(title)
msgid "GdkRegion to cairo_region_t"
msgstr ""

#: migrating-2to3.xml:65(para)
msgid ""
"To check that your application only includes the allowed headers, you can "
"use defines to disable inclusion of individual headers, as follows: "
"<placeholder-1/>"
msgstr ""

#: migrating-2to3.xml:665(title)
msgid "Replace GdkPixmap by cairo surfaces"
msgstr ""

#: migrating-2to3.xml:666(para)
msgid ""
"The #GdkPixmap object and related functions have been removed. In the cairo-"
"centric world of GTK+ 3, cairo surfaces take over the role of pixmaps."
msgstr ""

#: migrating-2to3.xml:672(title)
msgid "Creating custom cursors"
msgstr ""

#: migrating-2to3.xml:673(para)
msgid ""
"One place where pixmaps were commonly used is to create custom cursors: "
"<placeholder-1/> The same can be achieved without pixmaps, by drawing onto "
"an image surface: <placeholder-2/>"
msgstr ""

#: migrating-2to3.xml:676(programlisting)
#, no-wrap
msgid ""
"\n"
"GdkCursor *cursor;\n"
"GdkPixmap *pixmap;\n"
"cairo_t *cr;\n"
"GdkColor fg = { 0, 0, 0, 0 };\n"
"\n"
"pixmap = gdk_pixmap_new (NULL, 1, 1, 1);\n"
"\n"
"cr = gdk_cairo_create (pixmap);\n"
"cairo_rectangle (cr, 0, 0, 1, 1);\n"
"cairo_fill (cr);\n"
"cairo_destroy (cr);\n"
"\n"
"cursor = gdk_cursor_new_from_pixmap (pixmap, pixmap, &amp;fg, &amp;fg, 0, 0);\n"
"\n"
"g_object_unref (pixmap);\n"
"      "
msgstr ""

#: migrating-2to3.xml:69(programlisting)
#, no-wrap
msgid ""
"\n"
"    make CFLAGS+=\"-DGTK_DISABLE_SINGLE_INCLUDES\"\n"
"    "
msgstr ""

#: migrating-2to3.xml:695(programlisting)
#, no-wrap
msgid ""
"\n"
"GdkCursor *cursor;\n"
"cairo_surface_t *s;\n"
"cairo_t *cr;\n"
"GdkPixbuf *pixbuf;\n"
"\n"
"s = cairo_image_surface_create (CAIRO_FORMAT_A1, 3, 3);\n"
"cr = cairo_create (s);\n"
"cairo_arc (cr, 1.5, 1.5, 1.5, 0, 2 * M_PI);\n"
"cairo_fill (cr);\n"
"cairo_destroy (cr);\n"
"\n"
"pixbuf = gdk_pixbuf_get_from_surface (NULL, s,\n"
"                                      0, 0, 0, 0,\n"
"                                      3, 3);\n"
"\n"
"cairo_surface_destroy (s);\n"
"\n"
"cursor = gdk_cursor_new_from_pixbuf (display, pixbuf, 0, 0);\n"
"\n"
"g_object_unref (pixbuf);\n"
"      "
msgstr ""

#: migrating-2to3.xml:7(title)
msgid "Migrating from GTK+ 2.x to GTK+ 3"
msgstr ""

#: migrating-2to3.xml:722(title)
msgid "Replace GdkColormap by GdkVisual"
msgstr ""

#: migrating-2to3.xml:723(para)
msgid ""
"For drawing with cairo, it is not necessary to allocate colors, and a "
"#GdkVisual provides enough information for cairo to handle colors in "
"'native' surfaces. Therefore, #GdkColormap and related functions have been "
"removed in GTK+ 3, and visuals are used instead. The colormap-handling "
"functions of #GtkWidget (gtk_widget_set_colormap(), etc) have been removed "
"and gtk_widget_set_visual() has been added."
msgstr ""

#: migrating-2to3.xml:731(title)
msgid "Setting up a translucent window"
msgstr ""

#: migrating-2to3.xml:732(para)
msgid ""
"You might have a screen-changed handler like the following to set up a "
"translucent window with an alpha-channel:"
msgstr ""

#: migrating-2to3.xml:735(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"on_alpha_screen_changed (GtkWidget *widget,\n"
"                         GdkScreen *old_screen,\n"
"                         GtkWidget *label)\n"
"{\n"
"  GdkScreen *screen = gtk_widget_get_screen (widget);\n"
"  GdkColormap *colormap = gdk_screen_get_rgba_colormap (screen);\n"
"\n"
"  if (colormap == NULL)\n"
"    colormap = gdk_screen_get_default_colormap (screen);\n"
"\n"
"  gtk_widget_set_colormap (widget, colormap);\n"
"}\n"
"    "
msgstr ""

#: migrating-2to3.xml:750(para)
msgid "With visuals instead of colormaps, this will look as follows:"
msgstr ""

#: migrating-2to3.xml:753(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"on_alpha_screen_changed (GtkWindow *window,\n"
"                         GdkScreen *old_screen,\n"
"                         GtkWidget *label)\n"
"{\n"
"  GdkScreen *screen = gtk_widget_get_screen (GTK_WIDGET (window));\n"
"  GdkVisual *visual = gdk_screen_get_rgba_visual (screen);\n"
"\n"
"  if (visual == NULL)\n"
"    visual = gdk_screen_get_system_visual (screen);\n"
"\n"
"  gtk_widget_set_visual (window, visual);\n"
"}\n"
"    "
msgstr ""

#: migrating-2to3.xml:76(title)
msgid "Do not use deprecated symbols"
msgstr ""

#: migrating-2to3.xml:77(para)
msgid ""
"Over the years, a number of functions, and in some cases, entire widgets "
"have been deprecated. These deprecations are clearly spelled out in the API "
"reference, with hints about the recommended replacements. The API reference "
"also includes an <link linkend=\"api-index-deprecated\">index</link> of all "
"deprecated symbols."
msgstr ""

#: migrating-2to3.xml:772(title)
msgid "GdkDrawable is gone"
msgstr ""

#: migrating-2to3.xml:774(para)
msgid ""
"#GdkDrawable has been removed in GTK+ 3, together with #GdkPixmap and "
"#GdkImage. The only remaining drawable class is #GdkWindow. For dealing with "
"image data, you should use a #cairo_surface_t or a #GdkPixbuf."
msgstr ""

#: migrating-2to3.xml:781(para)
msgid ""
"GdkDrawable functions that are useful with windows have been replaced by "
"corresponding GdkWindow functions: <table><placeholder-1/><tgroup cols="
"\"2\"><thead><row><entry>GDK 2.x</entry><entry>GDK 3</entry></row></"
"thead><tbody><row><entry>gdk_drawable_get_visual()</"
"entry><entry>gdk_window_get_visual()</entry></"
"row><row><entry>gdk_drawable_get_size()</entry><entry>gdk_window_get_width() "
"gdk_window_get_height()</entry></row><row><entry>gdk_pixbuf_get_from_drawable"
"()</entry><entry>gdk_pixbuf_get_from_window()</entry></"
"row><row><entry>gdk_drawable_get_clip_region()</"
"entry><entry>gdk_window_get_clip_region()</entry></"
"row><row><entry>gdk_drawable_get_visible_region()</"
"entry><entry>gdk_window_get_visible_region()</entry></row></tbody></tgroup></"
"table>"
msgstr ""

#: migrating-2to3.xml:785(title)
msgid "GdkDrawable to GdkWindow"
msgstr ""

#: migrating-2to3.xml:804(title)
msgid "Event filtering"
msgstr ""

#: migrating-2to3.xml:806(para)
msgid ""
"If your application uses the low-level event filtering facilities in GDK, "
"there are some changes you need to be aware of."
msgstr ""

#: migrating-2to3.xml:811(para)
msgid ""
"The special-purpose GdkEventClient events and the "
"gdk_add_client_message_filter() and gdk_display_add_client_message_filter() "
"functions have been removed. Receiving X11 ClientMessage events is still "
"possible, using the general gdk_window_add_filter() API. A client message "
"filter like <placeholder-1/> then looks like this: <placeholder-2/> One "
"advantage of using an event filter is that you can actually remove the "
"filter when you don't need it anymore, using gdk_window_remove_filter()."
msgstr ""

#: migrating-2to3.xml:815(programlisting)
#, no-wrap
msgid ""
"\n"
"static GdkFilterReturn\n"
"message_filter (GdkXEvent *xevent, GdkEvent *event, gpointer data)\n"
"{\n"
"  XClientMessageEvent *evt = (XClientMessageEvent *)xevent;\n"
"\n"
"  /* do something with evt ... */\n"
"}\n"
"\n"
" ...\n"
"\n"
"message_type = gdk_atom_intern (\"MANAGER\", FALSE);\n"
"gdk_display_add_client_message_filter (display, message_type, message_filter, NULL);\n"
msgstr ""

#: migrating-2to3.xml:830(programlisting)
#, no-wrap
msgid ""
"\n"
"static GdkFilterReturn\n"
"event_filter (GdkXEvent *xevent, GdkEvent *event, gpointer data)\n"
"{\n"
"  XClientMessageEvent *evt;\n"
"  GdkAtom message_type;\n"
"\n"
"  if (((XEvent *)xevent)-&gt;type != ClientMessage)\n"
"    return GDK_FILTER_CONTINUE;\n"
"\n"
"  evt = (XClientMessageEvent *)xevent;\n"
"  message_type = XInternAtom (evt-&gt;display, \"MANAGER\", FALSE);\n"
"\n"
"  if (evt-&gt;message_type != message_type)\n"
"    return GDK_FILTER_CONTINUE;\n"
"\n"
"  /* do something with evt ... */\n"
"}\n"
"\n"
" ...\n"
"\n"
"gdk_window_add_filter (NULL, message_filter, NULL);\n"
msgstr ""

#: migrating-2to3.xml:85(para)
msgid ""
"To verify that your program does not use any deprecated symbols, you can use "
"defines to remove deprecated symbols from the header files, as follows: "
"<placeholder-1/>"
msgstr ""

#: migrating-2to3.xml:858(para)
msgid ""
"The other difference to be aware of when working with event filters in GTK+ "
"3 is that GDK now uses XI2 by default when available. That means that your "
"application does not receive core X11 key or button events. Instead, all "
"input events are delivered as XIDeviceEvents. As a short-term workaround for "
"this, you can force your application to not use XI2, with "
"gdk_disable_multidevice(). In the long term, you probably want to rewrite "
"your event filter to deal with XIDeviceEvents."
msgstr ""

#: migrating-2to3.xml:871(title)
msgid "Backend-specific code"
msgstr ""

#: migrating-2to3.xml:872(para)
msgid ""
"In GTK+ 2.x, GDK could only be compiled for one backend at a time, and the "
"%GDK_WINDOWING_X11 or %GDK_WINDOWING_WIN32 macros could be used to find out "
"which one you are dealing with: <placeholder-1/> In GTK+ 3, GDK can be built "
"with multiple backends, and currently used backend has to be determined at "
"runtime, typically using type-check macros on a #GdkDisplay or #GdkWindow. "
"You still need to use the #GDK_WINDOWING macros to only compile code "
"referring to supported backends: <placeholder-2/>"
msgstr ""

#: migrating-2to3.xml:876(programlisting)
#, no-wrap
msgid ""
"\n"
"#ifdef GDK_WINDOWING_X11\n"
"      if (timestamp != GDK_CURRENT_TIME)\n"
"        gdk_x11_window_set_user_time (gdk_window, timestamp);\n"
"#endif\n"
"#ifdef GDK_WINDOWING_WIN32\n"
"        /* ... win32 specific code ... */\n"
"#endif\n"
"      "
msgstr ""

#: migrating-2to3.xml:89(programlisting)
#, no-wrap
msgid ""
"\n"
"    make CFLAGS+=\"-DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED\"\n"
"    "
msgstr ""

#: migrating-2to3.xml:890(programlisting)
#, no-wrap
msgid ""
"\n"
"#ifdef GDK_WINDOWING_X11\n"
"      if (GDK_IS_X11_DISPLAY (display))\n"
"        {\n"
"          if (timestamp != GDK_CURRENT_TIME)\n"
"            gdk_x11_window_set_user_time (gdk_window, timestamp);\n"
"        }\n"
"      else\n"
"#endif\n"
"#ifdef GDK_WINDOWING_WIN32\n"
"      if (GDK_IS_WIN32_DISPLAY (display))\n"
"        {\n"
"          /* ... win32 specific code ... */\n"
"        }\n"
"      else\n"
"#endif\n"
"       {\n"
"         g_warning (\"Unsupported GDK backend\");\n"
"       }\n"
"      "
msgstr ""

#: migrating-2to3.xml:9(para)
msgid ""
"GTK+ 3 is a major new version of GTK+ that breaks both API and ABI compared "
"to GTK+ 2.x, which has remained API- and ABI-stable for a long time. "
"Thankfully, most of the changes are not hard to adapt to and there are a "
"number of steps that you can take to prepare your GTK+ 2.x application for "
"the switch to GTK+ 3. After that, there's a small number of adjustments that "
"you may have to do when you actually switch your application to build "
"against GTK+ 3."
msgstr ""

#: migrating-2to3.xml:911(para)
msgid ""
"If you used the pkg-config variable <varname>target</varname> to "
"conditionally build part of your project depending on the GDK backend, for "
"instance like this: <placeholder-1/> then you should now use the M4 macro "
"provided by GTK+ itself: <placeholder-2/>"
msgstr ""

#: migrating-2to3.xml:915(programlisting)
#, no-wrap
msgid ""
"\n"
"AM_CONDITIONAL(BUILD_X11, test `$PKG_CONFIG --variable=target gtk+-2.0` = \"x11\")\n"
"      "
msgstr ""

#: migrating-2to3.xml:919(programlisting)
#, no-wrap
msgid ""
"\n"
"GTK_CHECK_BACKEND([x11], [3.0.2], [have_x11=yes], [have_x11=no])\n"
"AM_CONDITIONAL(BUILD_x11, [test \"x$have_x11\" = \"xyes\"])\n"
"      "
msgstr ""

#: migrating-2to3.xml:927(title)
msgid "GtkPlug and GtkSocket"
msgstr ""

#: migrating-2to3.xml:929(para)
msgid ""
"The #GtkPlug and #GtkSocket widgets are now X11-specific, and you have to "
"include the <filename>&lt;gtk/gtkx.h&gt;</filename> header to use them. The "
"previous section about proper handling of backend-specific code applies, if "
"you care about other backends."
msgstr ""

#: migrating-2to3.xml:938(title)
msgid "The GtkWidget::draw signal"
msgstr ""

#: migrating-2to3.xml:939(para)
msgid ""
"The GtkWidget #GtkWidget::expose-event signal has been replaced by a new "
"#GtkWidget::draw signal, which takes a #cairo_t instead of an expose event. "
"The cairo context is being set up so that the origin at (0, 0) coincides "
"with the upper left corner of the widget, and is properly clipped."
msgstr ""

#: migrating-2to3.xml:946(para)
msgid ""
"In other words, the cairo context of the draw signal is set up in 'widget "
"coordinates', which is different from traditional expose event handlers, "
"which always assume 'window coordinates'."
msgstr ""

#: migrating-2to3.xml:950(para)
msgid ""
"The widget is expected to draw itself with its allocated size, which is "
"available via the new gtk_widget_get_allocated_width() and "
"gtk_widget_get_allocated_height() functions. It is not necessary to check "
"for GTK_WIDGET_IS_DRAWABLE(), since GTK+ already does this check before "
"emitting the #GtkWidget::draw signal."
msgstr ""

#: migrating-2to3.xml:957(para)
msgid ""
"There are some special considerations for widgets with multiple windows. "
"Expose events are window-specific, and widgets with multiple windows could "
"expect to get an expose event for each window that needs to be redrawn. "
"Therefore, multi-window expose event handlers typically look like this: "
"<placeholder-1/> In contrast, the #GtkWidget::draw signal handler may have "
"to draw multiple windows in one call. GTK+ has a convenience function "
"gtk_cairo_should_draw_window() that can be used to find out if a window "
"needs to be drawn. With that, the example above would look like this (note "
"that the 'else' is gone): <placeholder-2/> Another convenience function that "
"can help when implementing ::draw for multi-window widgets is "
"gtk_cairo_transform_to_window(), which transforms a cairo context from "
"widget-relative coordinates to window-relative coordinates."
msgstr ""

#: migrating-2to3.xml:96(title)
msgid "Use accessor functions instead of direct access"
msgstr ""

#: migrating-2to3.xml:963(programlisting)
#, no-wrap
msgid ""
"\n"
"      if (event-&gt;window == widget-&gt;window1)\n"
"        {\n"
"           /* ... draw window1 ... */\n"
"        }\n"
"      else if (event-&gt;window == widget-&gt;window2)\n"
"        {\n"
"           /* ... draw window2 ... */\n"
"        }\n"
"      ...\n"
"      "
msgstr ""

#: migrating-2to3.xml:97(para)
msgid ""
"GTK+ 3 removes many implementation details and struct members from its "
"public headers."
msgstr ""

#: migrating-2to3.xml:979(programlisting)
#, no-wrap
msgid ""
"\n"
"      if (gtk_cairo_should_draw_window (cr, widget-&gt;window1)\n"
"        {\n"
"           /* ... draw window1 ... */\n"
"        }\n"
"      if (gtk_cairo_should_draw_window (cr, widget-&gt;window2)\n"
"        {\n"
"           /* ... draw window2 ... */\n"
"        }\n"
"      ...\n"
"      "
msgstr ""

#: migrating-2to3.xml:995(para)
msgid ""
"All GtkStyle drawing functions (gtk_paint_box(), etc) have been changed to "
"take a #cairo_t instead of a window and a clip area. ::draw implementations "
"will usually just use the cairo context that has been passed in for this."
msgstr ""

#: migrating-GtkApplication.xml:107(para)
msgid ""
"While libunique expects you to check for an already running instance "
"yourself and activate it manually, GApplication handles all this on its own "
"in g_application_run(). If you still need to find out if there is a running "
"instance of your application, use g_application_get_is_remote() instead of "
"unique_app_is_running()."
msgstr ""

#: migrating-GtkApplication.xml:116(title)
msgid "Commands and Messages"
msgstr ""

#: migrating-GtkApplication.xml:117(para)
msgid ""
"libunique lets you send messages with commands to a running instance using "
"unique_app_send_message(). The commands can be either predefined or custom. "
"Some of the predefined libunique commands have equivalents in GApplication. "
"Instead of sending the %UNIQUE_ACTIVATE command, call g_application_activate"
"(), instead of sending the %UNIQUE_OPEN command, call g_application_open(). "
"The %UNIQUE_NEW and %UNIQUE_CLOSE and user-defined commands don't have "
"direct replacement at this time."
msgstr ""

#: migrating-GtkApplication.xml:128(para)
msgid ""
"As a replacement for custom commands, GApplication implements the "
"#GActionGroup interface and lets you add a group of actions with "
"g_application_set_action_group(). The actions can then be invoked, either by "
"using the D-Bus interface for #GAction directly, or by calling "
"g_action_group_activate_action() from another instance of the GApplication. "
"The #GApplication documentation contains an example for using GApplication "
"with actions."
msgstr ""

#: migrating-GtkApplication.xml:138(para)
msgid ""
"For more complex needs, GApplication supports passing entire commandlines to "
"the running instance."
msgstr ""

#: migrating-GtkApplication.xml:15(para)
msgid ""
"Starting with GLib 2.26, D-Bus support has been integrated into GIO in the "
"form of GDBus, and #GApplication has been added to provide the same level of "
"application support as libunique."
msgstr ""

#: migrating-GtkApplication.xml:21(title)
msgid "A unique application"
msgstr ""

#: migrating-GtkApplication.xml:22(para)
msgid ""
"Here is a simple application using libunique: <placeholder-1/> The same "
"application using GtkApplication: <placeholder-2/>"
msgstr ""

#: migrating-GtkApplication.xml:23(programlisting)
#, no-wrap
msgid ""
"\n"
"int\n"
"main (int argc, char *argv[])\n"
"{\n"
"  UniqueApp *app;\n"
"  GtkWidget *window;\n"
"\n"
"  gtk_init (&amp;argc, &amp;argv);\n"
"\n"
"  app = unique_app_new (\"org.gtk.TestApplication\", NULL);\n"
"\n"
"  if (unique_app_is_running (app))\n"
"    {\n"
"      UniqueResponse response;\n"
"\n"
"      response = unique_app_send_message (app, UNIQUE_ACTIVATE, NULL);\n"
"      g_object_unref (app);\n"
"\n"
"      return response == UNIQUE_RESPONSE_OK ? 0 : 1;\n"
"    }\n"
"\n"
"  window = create_my_window ();\n"
"\n"
"  unique_app_watch_window (app, GTK_WINDOW (window));\n"
"\n"
"  gtk_widget_show (window);\n"
"\n"
"  gtk_main ();\n"
"\n"
"  g_object_unref (app);\n"
"\n"
"  return 0;\n"
"}\n"
msgstr ""

#: migrating-GtkApplication.xml:58(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"activate (GtkApplication *app)\n"
"{\n"
"  GList *list;\n"
"  GtkWidget *window;\n"
"\n"
"  list = gtk_application_get_windows (app);\n"
"\n"
"  if (list)\n"
"    {\n"
"      gtk_window_present (GTK_WINDOW (list-&gt;data));\n"
"    }\n"
"  else\n"
"    {\n"
"      window = create_my_window ();\n"
"      gtk_window_set_application (GTK_WINDOW (window), app);\n"
"      gtk_widget_show (window);\n"
"    }\n"
"}\n"
"\n"
"int\n"
"main (int argc, char *argv[])\n"
"{\n"
"  GtkApplication *app;\n"
"  gint status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.TestApplication\", 0);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"\n"
"  status = g_application_run (app);\n"
"\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: migrating-GtkApplication.xml:7(title)
msgid "Migrating from libunique to GApplication or GtkApplication"
msgstr ""

#: migrating-GtkApplication.xml:9(para)
msgid ""
"libunique offers 'unique application' support as well as ways to communicate "
"with a running application instance. This is implemented in various ways, "
"either using D-Bus, or socket-based communication."
msgstr ""

#: migrating-GtkApplication.xml:97(title)
msgid "Uniqueness"
msgstr ""

#: migrating-GtkApplication.xml:98(para)
msgid ""
"Instead of creating a #UniqueApp with unique_app_new(), create a "
"#GApplication with g_application_new() or a #GtkApplication with "
"gtk_application_new(). The @name that was used with unique_app_new() is very "
"likely usable as the @application_id for g_application_new() without any "
"changes, and GtkApplication passes the <envar>DESKTOP_STARTUP_ID</envar> "
"environment variable automatically."
msgstr ""

#: migrating-GtkStyleContext.xml:100(member)
msgid "gtk_render_check(): Render checkboxes."
msgstr ""

#: migrating-GtkStyleContext.xml:103(member)
msgid "gtk_render_option(): Render radiobuttons."
msgstr ""

#: migrating-GtkStyleContext.xml:106(member)
msgid "gtk_render_arrow(): Renders an arrow pointing to a direction."
msgstr ""

#: migrating-GtkStyleContext.xml:109(member)
msgid ""
"gtk_render_expander(): Renders an expander indicator, such as in "
"#GtkExpander."
msgstr ""

#: migrating-GtkStyleContext.xml:113(member)
msgid ""
"gtk_render_focus(): Renders the indication that a widget has the keyboard "
"focus."
msgstr ""

#: migrating-GtkStyleContext.xml:117(member)
msgid "gtk_render_line(): Renders a line from one coordinate to another."
msgstr ""

#: migrating-GtkStyleContext.xml:120(member)
msgid "gtk_render_slider(): Renders a slider, such as in #GtkScale."
msgstr ""

#: migrating-GtkStyleContext.xml:123(member)
msgid ""
"gtk_render_extension(): Renders an extension that protrudes from a UI "
"element, such as a notebook tab."
msgstr ""

#: migrating-GtkStyleContext.xml:127(member)
msgid ""
"gtk_render_activity(): Renders an area displaying activity, be it a "
"progressbar or a spinner."
msgstr ""

#: migrating-GtkStyleContext.xml:131(member)
msgid "gtk_render_icon_pixbuf(): Renders an icon into a #GdkPixbuf."
msgstr ""

#: migrating-GtkStyleContext.xml:136(para)
msgid ""
"One of the main differences to #GtkStyle-based engines is that the rendered "
"widget is totally isolated from the theme engine, all style information is "
"meant to be retrieved from the #GtkThemingEngine API, or from the "
"#GtkWidgetPath obtained from gtk_theming_engine_get_path(), which fully "
"represents the rendered widget's hierarchy from a styling point of view."
msgstr ""

#: migrating-GtkStyleContext.xml:145(para)
msgid ""
"The detail string available in #GtkStyle-based engines has been replaced by "
"widget regions and style classes. Regions are a way for complex widgets to "
"associate different styles with different areas, such as even and odd rows "
"in a treeview. Style classes allow sharing of style information between "
"widgets, regardless of their type. Regions and style classes can be used in "
"style sheets to associate styles, and them engines can also access them. "
"There are several predefined classes and regions such as "
"%GTK_STYLE_CLASS_BUTTON or %GTK_STYLE_REGION_TAB in "
"<filename>gtkstylecontext.h</filename>, although custom widgets may define "
"their own, which themes may attempt to handle."
msgstr ""

#: migrating-GtkStyleContext.xml:162(title)
msgid "Extending the CSS parser"
msgstr ""

#: migrating-GtkStyleContext.xml:164(para)
msgid ""
"In #GtkStyle-based engines, #GtkRCStyle provided ways to extend the gtkrc "
"parser with engine-specific extensions. This has been replaced by "
"gtk_theming_engine_register_property(), which lets a theme engine register "
"new properties with an arbitrary type. While there is built-in support for "
"most basic types, it is possible to use a custom parser for the property."
msgstr ""

#: migrating-GtkStyleContext.xml:173(para)
msgid ""
"The installed properties depend on the #GtkThemeEngine::name property, so "
"they should be added in the <literal>constructed()</literal> vfunc. For "
"example, if an engine with the name \"Clearlooks\" installs a \"focus-color"
"\" property with the type #GdkRGBA, the property <literal>-Clearlooks-focus-"
"color</literal> will be registered and accepted in CSS like this: "
"<placeholder-1/>"
msgstr ""

#: migrating-GtkStyleContext.xml:18(title)
msgid "Migrating themes"
msgstr ""

#: migrating-GtkStyleContext.xml:180(programlisting)
#, no-wrap
msgid ""
"\n"
"      GtkEntry {\n"
"        -Clearlooks-focus-color: rgba(255, 0, 0, 1.0);\n"
"      }\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:187(para)
msgid ""
"Widget style properties also follow a similar syntax, with the widget type "
"name used as a prefix. For example, the #GtkWidget:focus-line-width style "
"property can be modified in CSS as <literal>-GtkWidget-focus-line-width</"
"literal>."
msgstr ""

#: migrating-GtkStyleContext.xml:196(title)
msgid "Using the CSS file format"
msgstr ""

#: migrating-GtkStyleContext.xml:198(para)
msgid ""
"The syntax of RC and CSS files formats is obviously different. The CSS-like "
"syntax will hopefully be much more familiar to many people, lowering the "
"barrier for custom theming."
msgstr ""

#: migrating-GtkStyleContext.xml:20(para)
msgid ""
"From GTK+ 3.0 on, theme engines must implement #GtkThemingEngine and be "
"installed in <filename>$libdir/gtk+-3.0/$GTK_VERSION/theming-engines</"
"filename>, and the files containing style information must be written in the "
"CSS-like format that is understood by #GtkCssProvider. For a theme named "
"\"Clearlooks\", the CSS file parsed by default is <filename>$datadir/themes/"
"Clearlooks/gtk-3.0/gtk.css</filename>, with possible variants such as the "
"dark theme being named <filename>gtk-dark.css</filename> in the same "
"directory."
msgstr ""

#: migrating-GtkStyleContext.xml:203(para)
msgid ""
"Instead of going through the syntax differences one-by-one, we will present "
"a more or less comprehensive example and discuss how it can be translated "
"into CSS:"
msgstr ""

#: migrating-GtkStyleContext.xml:210(title)
msgid "Sample RC code"
msgstr ""

#: migrating-GtkStyleContext.xml:211(programlisting)
#, no-wrap
msgid ""
"\n"
"        style \"default\" {\n"
"                xthickness = 1\n"
"                ythickness = 1\n"
"\n"
"                GtkButton::child-displacement-x = 1\n"
"                GtkButton::child-displacement-y = 1\n"
"                GtkCheckButton::indicator-size = 14\n"
"\n"
"                bg[NORMAL]        = @bg_color\n"
"                bg[PRELIGHT]      = shade (1.02, @bg_color)\n"
"                bg[SELECTED]      = @selected_bg_color\n"
"                bg[INSENSITIVE]   = @bg_color\n"
"                bg[ACTIVE]        = shade (0.9, @bg_color)\n"
"\n"
"                fg[NORMAL]        = @fg_color\n"
"                fg[PRELIGHT]      = @fg_color\n"
"                fg[SELECTED]      = @selected_fg_color\n"
"                fg[INSENSITIVE]   = darker (@bg_color)\n"
"                fg[ACTIVE]        = @fg_color\n"
"\n"
"                text[NORMAL]      = @text_color\n"
"                text[PRELIGHT]    = @text_color\n"
"                text[SELECTED]    = @selected_fg_color\n"
"                text[INSENSITIVE] = darker (@bg_color)\n"
"                text[ACTIVE]      = @selected_fg_color\n"
"\n"
"                base[NORMAL]      = @base_color\n"
"                base[PRELIGHT]    = shade (0.95, @bg_color)\n"
"                base[SELECTED]    = @selected_bg_color\n"
"                base[INSENSITIVE] = @bg_color\n"
"                base[ACTIVE]      = shade (0.9, @selected_bg_color)\n"
"\n"
"                engine \"clearlooks\" {\n"
"                        colorize_scrollbar = TRUE\n"
"                        style = CLASSIC\n"
"                }\n"
"        }\n"
"\n"
"        style \"tooltips\" {\n"
"                xthickness = 4\n"
"                ythickness = 4\n"
"\n"
"                bg[NORMAL]        = @tooltip_bg_color\n"
"                fg[NORMAL]        = @tooltip_fg_color\n"
"        }\n"
"\n"
"        style \"button\" {\n"
"                xthickness = 3\n"
"                ythickness = 3\n"
"\n"
"                bg[NORMAL]        = shade (1.04, @bg_color)\n"
"                bg[PRELIGHT]      = shade (1.06, @bg_color)\n"
"                bg[ACTIVE]        = shade (0.85, @bg_color)\n"
"        }\n"
"\n"
"        style \"entry\" {\n"
"                xthickness = 3\n"
"                ythickness = 3\n"
"\n"
"                bg[SELECTED] = mix (0.4, @selected_bg_color, @base_color)\n"
"                fg[SELECTED] = @text_color\n"
"\n"
"                engine \"clearlooks\" {\n"
"                        focus_color = shade (0.65, @selected_bg_color)\n"
"                }\n"
"        }\n"
"\n"
"        style \"other\" {\n"
"                bg[NORMAL] = &num;fff;\n"
"        }\n"
"\n"
"        class \"GtkWidget\" style \"default\"\n"
"        class \"GtkEntry\" style \"entry\"\n"
"        widget_class \"*&lt;GtkButton&gt;\" style \"button\"\n"
"        widget \"gtk-tooltip*\" style \"tooltips\"\n"
"        widget_class \"window-name.*.GtkButton\" style \"other\"\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:291(para)
msgid "would roughly translate to this CSS:"
msgstr ""

#: migrating-GtkStyleContext.xml:296(title)
msgid "CSS translation"
msgstr ""

#: migrating-GtkStyleContext.xml:297(programlisting)
#, no-wrap
msgid ""
"\n"
"        * {\n"
"          padding: 1;\n"
"          -GtkButton-child-displacement-x: 1;\n"
"          -GtkButton-child-displacement-y: 1;\n"
"          -GtkCheckButton-indicator-size: 14;\n"
"\n"
"          background-color: @bg_color;\n"
"          color: @fg_color;\n"
"\n"
"          -Clearlooks-colorize-scrollbar: true;\n"
"          -Clearlooks-style: classic;\n"
"        }\n"
"\n"
"        *:hover {\n"
"          background-color: shade (@bg_color, 1.02);\n"
"        }\n"
"\n"
"        *:selected {\n"
"          background-color: @selected_bg_color;\n"
"          color: @selected_fg_color;\n"
"        }\n"
"\n"
"        *:insensitive {\n"
"          color: shade (@bg_color, 0.7);\n"
"        }\n"
"\n"
"        *:active {\n"
"          background-color: shade (@bg_color, 0.9);\n"
"        }\n"
"\n"
"        .tooltip {\n"
"          padding: 4;\n"
"\n"
"          background-color: @tooltip_bg_color;\n"
"          color: @tooltip_fg_color;\n"
"        }\n"
"\n"
"        .button {\n"
"          padding: 3;\n"
"          background-color: shade (@bg_color, 1.04);\n"
"        }\n"
"\n"
"        .button:hover {\n"
"          background-color: shade (@bg_color, 1.06);\n"
"        }\n"
"\n"
"        .button:active {\n"
"          background-color: shade (@bg_color, 0.85);\n"
"        }\n"
"\n"
"        .entry {\n"
"          padding: 3;\n"
"\n"
"          background-color: @base_color;\n"
"          color: @text_color;\n"
"        }\n"
"\n"
"        .entry:selected {\n"
"          background-color: mix (@selected_bg_color, @base_color, 0.4);\n"
"          -Clearlooks-focus-color: shade (0.65, @selected_bg_color)\n"
"        }\n"
"\n"
"        /* The latter selector is an specification of the first,\n"
"           since any widget may use the same classes or names */\n"
"        &num;window-name .button,\n"
"        GtkWindow&num;window-name GtkButton.button {\n"
"          background-color: &num;fff;\n"
"        }\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:31(para)
msgid ""
"If your theme RC file was providing values for #GtkSettings, you can install "
"a <filename>settings.ini</filename> keyfile along with the <filename>gtk."
"css</filename> to provide theme-specific defaults for settings."
msgstr ""

#: migrating-GtkStyleContext.xml:369(para)
msgid ""
"One notable difference is the reduction from fg/bg/text/base colors to only "
"foreground/background, in exchange the widget is able to render its various "
"elements with different CSS classes, which can be themed independently."
msgstr ""

#: migrating-GtkStyleContext.xml:376(para)
msgid ""
"In the same vein, the light, dark and mid color variants that were available "
"in GtkStyle should be replaced by a combination of symbolic colors and "
"custom CSS, where necessary. text_aa should really not be used anywhere, "
"anyway, and the white and black colors that were available in GtkStyle can "
"just be replaced by literal GdkRGBA structs."
msgstr ""

#: migrating-GtkStyleContext.xml:38(para)
msgid ""
"Key themes have been converted to CSS syntax too. See the <link linkend="
"\"css-binding-set\">GtkCssProvider</link> documentation information about "
"the syntax. GTK+ looks for key themes in the file <filename>$datadir/themes/"
"<replaceable>theme</replaceable>/gtk-3.0/gtk-keys.css</filename>, where "
"<replaceable>theme</replaceable> is the current key theme name."
msgstr ""

#: migrating-GtkStyleContext.xml:385(para)
msgid ""
"Access to colors has also changed a bit. With #GtkStyle, the common way to "
"access colors is: <placeholder-1/> With #GtkStyleContext, you generally use "
"#GdkRGBA instead of #GdkColor and the code looks like this: <placeholder-2/> "
"Note that the memory handling here is different: gtk_style_context_get() "
"expects the address of a GdkRGBA* and returns a newly allocated struct, "
"gtk_style_context_lookup_color() expects the address of an existing struct, "
"and fills it."
msgstr ""

#: migrating-GtkStyleContext.xml:388(programlisting)
#, no-wrap
msgid ""
"\n"
"      GdkColor *color1;\n"
"      GdkColor color2;\n"
"\n"
"      color1 = &amp;style-&gt;bg[GTK_STATE_PRELIGHT];\n"
"      gtk_style_lookup_color (style, \"focus_color\", &amp;color2);\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:397(programlisting)
#, no-wrap
msgid ""
"\n"
"      GdkRGBA *color1;\n"
"      GdkRGBA  color2;\n"
"\n"
"      gtk_style_context_get (context, GTK_STATE_FLAG_PRELIGHT,\n"
"                             \"background-color\", &amp;color1,\n"
"                             NULL);\n"
"      gtk_style_context_lookup_color (context, \"focus_color\", &amp;color2);\n"
"\n"
"      ...\n"
"\n"
"      gdk_rgba_free (color1);\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:416(para)
msgid ""
"It is worth mentioning that the new file format does not support custom "
"keybindings nor stock icon mappings as the RC format did."
msgstr ""

#: migrating-GtkStyleContext.xml:423(title)
msgid "A checklist for widgets"
msgstr ""

#: migrating-GtkStyleContext.xml:425(para)
msgid ""
"When porting your widgets to use #GtkStyleContext, this checklist might be "
"useful."
msgstr ""

#: migrating-GtkStyleContext.xml:431(listitem)
msgid ""
"Replace #GtkWidget::style-set handlers with #GtkWidget::style-updated "
"handlers."
msgstr ""

#: migrating-GtkStyleContext.xml:437(para)
msgid ""
"Try to identify the role of what you're rendering with any number of "
"classes. This will replace the detail string. There is a predefined set of "
"CSS classes which you can reuse where appropriate. Doing so will give you "
"theming 'for free', whereas custom classes will require extra work in the "
"theme. Note that complex widgets are likely to need different styles when "
"rendering different parts, and style classes are one way to achieve this. "
"This could result in code like the following (simplified) examples:"
msgstr ""

#: migrating-GtkStyleContext.xml:449(title)
msgid "Setting a permanent CSS class"
msgstr ""

#: migrating-GtkStyleContext.xml:450(programlisting)
#, no-wrap
msgid ""
"\n"
"            static void\n"
"            gtk_button_init (GtkButton *button)\n"
"            {\n"
"              GtkStyleContext *context;\n"
"\n"
"              ...\n"
"\n"
"              context = gtk_widget_get_style_context (GTK_WIDGET (button));\n"
"\n"
"              /* Set the \"button\" class */\n"
"              gtk_style_context_add_class (context, GTK_STYLE_CLASS_BUTTON);\n"
"            }\n"
"          "
msgstr ""

#: migrating-GtkStyleContext.xml:466(para)
msgid "Or"
msgstr ""

#: migrating-GtkStyleContext.xml:471(title)
msgid "Using dynamic CSS classes for different elements"
msgstr ""

#: migrating-GtkStyleContext.xml:472(programlisting)
#, no-wrap
msgid ""
"\n"
"            static gboolean\n"
"            gtk_spin_button_draw (GtkSpinButton *spin,\n"
"                                  cairo_t       *cr)\n"
"            {\n"
"              GtkStyleContext *context;\n"
"\n"
"              ...\n"
"\n"
"              context = gtk_widget_get_style_context (GTK_WIDGET (spin));\n"
"\n"
"              gtk_style_context_save (context);\n"
"              gtk_style_context_add_class (context, GTK_STYLE_CLASS_ENTRY);\n"
"\n"
"              /* Call to entry draw impl with \"entry\" class */\n"
"              parent_class-&gt;draw (spin, cr);\n"
"\n"
"              gtk_style_context_restore (context);\n"
"              gtk_style_context_save (context);\n"
"\n"
"              /* Render up/down buttons with the \"button\" class */\n"
"              gtk_style_context_add_class (context, GTK_STYLE_CLASS_BUTTON);\n"
"              draw_up_button (spin, cr);\n"
"              draw_down_button (spin, cr);\n"
"\n"
"              gtk_style_context_restore (context);\n"
"\n"
"              ...\n"
"            }\n"
"          "
msgstr ""

#: migrating-GtkStyleContext.xml:48(title)
msgid "Migrating theme engines"
msgstr ""

#: migrating-GtkStyleContext.xml:50(para)
msgid ""
"Migrating a #GtkStyle based engine to a #GtkThemingEngine based one should "
"be straightforward for most of the vfuncs. Besides a cleanup in the "
"available paint methods and a simplification in the passed arguments (in "
"favor of #GtkStyleContext containing all the information), the available "
"render methods resemble those of #GtkStyle quite evidently. Notable "
"differences include:"
msgstr ""

#: migrating-GtkStyleContext.xml:504(para)
msgid ""
"Note that #GtkStyleContext only provides fg/bg colors, so text/base is done "
"through distinctive theming of the different classes. For example, an entry "
"would usually be black on white while a button would usually be black on "
"light grey."
msgstr ""

#: migrating-GtkStyleContext.xml:513(para)
msgid ""
"Replace all <literal>gtk_paint_*()</literal> calls with corresponding "
"<literal>gtk_render_*()</literal> calls."
msgstr ""

#: migrating-GtkStyleContext.xml:517(para)
msgid ""
"The most distinctive changes are the use of #GtkStateFlags to represent the "
"widget state and the lack of #GtkShadowType. Note that widget state is now "
"passed implicitly via the context, so to render in a certain state, you have "
"to temporarily set the state on the context, as in the following example:"
msgstr ""

#: migrating-GtkStyleContext.xml:525(title)
msgid "Rendering with a specific state"
msgstr ""

#: migrating-GtkStyleContext.xml:526(programlisting)
#, no-wrap
msgid ""
"\n"
"            gtk_style_context_save (context);\n"
"            gtk_style_context_set_state (context, GTK_STATE_FLAG_ACTIVE);\n"
"            gtk_render_check (context, cr, x, y, width, height);\n"
"            gtk_style_context_restore (context);\n"
"          "
msgstr ""

#: migrating-GtkStyleContext.xml:533(para)
msgid ""
"For gtk_render_check() and gtk_render_option(), the @shadow_type parameter "
"is replaced by the #GTK_STATE_FLAG_ACTIVE and #GTK_STATE_FLAG_INCONSISTENT "
"state flags. For things such as pressed/unpressed button states, "
"#GTK_STATE_FLAG_ACTIVE is used, and the CSS may style normal/active states "
"differently to render outset/inset borders, respectively."
msgstr ""

#: migrating-GtkStyleContext.xml:543(listitem)
msgid ""
"The various <placeholder-1/> functions to override colors or fonts for "
"individual widgets have been replaced by similar <placeholder-2/> functions."
msgstr ""

#: migrating-GtkStyleContext.xml:544(literal)
msgid "gtk_widget_modify_*()"
msgstr ""

#: migrating-GtkStyleContext.xml:546(literal)
msgid "gtk_widget_override_*()"
msgstr ""

#: migrating-GtkStyleContext.xml:549(listitem)
msgid ""
"It is no longer necessary to call gtk_widget_style_attach(), gtk_style_attach"
"(), gtk_style_detach() or gtk_widget_ensure_style()."
msgstr ""

#: migrating-GtkStyleContext.xml:554(listitem)
msgid ""
"Replace all uses of xthickness/ythickness. #GtkStyleContext uses the CSS box "
"model, and there are border-width/padding/margin properties to replace the "
"different applications of X and Y thickness. Note that all of this is merely "
"a guideline. Widgets may choose to follow it or not."
msgstr ""

#: migrating-GtkStyleContext.xml:564(title)
msgid "Parsing of custom resources"
msgstr ""

#: migrating-GtkStyleContext.xml:565(para)
msgid ""
"As a consequence of the RC format going away, calling gtk_rc_parse() or "
"gtk_rc_parse_string() won't have any effect on a widgets appearance. The way "
"to replace these calls is using a custom #GtkStyleProvider, either for an "
"individual widget through gtk_style_context_add_provider() or for all "
"widgets on a screen through gtk_style_context_add_provider_for_screen(). "
"Typically, the provider will be a #GtkCssProvider, which parse CSS "
"information from a file or from a string."
msgstr ""

#: migrating-GtkStyleContext.xml:575(title)
msgid "Using a custom GtkStyleProvider"
msgstr ""

#: migrating-GtkStyleContext.xml:576(programlisting)
#, no-wrap
msgid ""
"\n"
"        GtkStyleContext *context;\n"
"        GtkCssProvider *provider;\n"
"\n"
"        context = gtk_widget_get_style_context (widget);\n"
"        provider = gtk_css_provider_new ();\n"
"        gtk_css_provider_load_from_data (GTK_CSS_PROVIDER (provider),\n"
"                                         \".frame1 {\\n\"\n"
"                                         \"   border-image: url('gradient1.png') 10 10 10 10 stretch;\\n\"\n"
"                                         \"}\\n\", -1, NULL);\n"
"        gtk_style_context_add_provider (context,\n"
"                                        GTK_STYLE_PROVIDER (provider),\n"
"                                        GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);\n"
"        g_object_unref (provider);\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:592(para)
msgid ""
"Notice that you can also get style information from custom resources by "
"implementing the #GtkStyleProvider interface yourself. This is an advanced "
"feature that should be rarely used."
msgstr ""

#: migrating-GtkStyleContext.xml:6(title)
msgid "Theming changes"
msgstr ""

#: migrating-GtkStyleContext.xml:60(listitem)
msgid ""
"All variations of gtk_paint_box(), gtk_paint_flat_box(), gtk_paint_shadow(), "
"gtk_paint_box_gap() and gtk_paint_shadow_gap() are replaced by "
"gtk_render_background(), gtk_render_frame() and gtk_render_frame_gap(). The "
"first function renders frameless backgrounds and the last two render frames "
"in various forms."
msgstr ""

#: migrating-GtkStyleContext.xml:600(title)
msgid "Bonus points"
msgstr ""

#: migrating-GtkStyleContext.xml:602(para)
msgid ""
"There are some features in #GtkStyleContext that were not available in "
"#GtkStyle, or were made available over time for certain widgets through "
"extending the detail string in obscure ways. There is a lot more information "
"available when rendering UI elements, and it is accessible in more uniform, "
"less hacky ways. By going through this list you'll ensure your widget is a "
"good citizen in a fully themable user interface."
msgstr ""

#: migrating-GtkStyleContext.xml:612(listitem)
msgid ""
"If your widget renders a series of similar elements, such as tabs in a "
"#GtkNotebook or rows/column in a #GtkTreeView, consider adding regions "
"through gtk_style_context_add_region(). These regions can be referenced in "
"CSS and the :nth-child pseudo-class may be used to match the elements "
"depending on the flags passed. <placeholder-1/>"
msgstr ""

#: migrating-GtkStyleContext.xml:620(title)
msgid "Theming widget regions"
msgstr ""

#: migrating-GtkStyleContext.xml:621(programlisting)
#, no-wrap
msgid ""
"\n"
"            GtkNotebook tab {\n"
"              background-color: &num;f3329d;\n"
"            }\n"
"\n"
"            GtkTreeView row::nth-child (even) {\n"
"              background-color: &num;dddddd;\n"
"            }\n"
"          "
msgstr ""

#: migrating-GtkStyleContext.xml:634(para)
msgid ""
"If your container renders child widgets within different regions, make it "
"implement GtkContainer::get_path_for_child(). This function lets containers "
"assign a special #GtkWidgetPath to child widgets depending on their role/"
"region. This is necessary to extend the concept above throughout the widget "
"hierarchy."
msgstr ""

#: migrating-GtkStyleContext.xml:642(para)
msgid ""
"For example, a #GtkNotebook modifies the tab labels' #GtkWidgetPath so the "
"\"tab\" region is added. This makes it possible to theme tab labels through:"
msgstr ""

#: migrating-GtkStyleContext.xml:649(title)
msgid "Theming a widget within a parent container region"
msgstr ""

#: migrating-GtkStyleContext.xml:650(programlisting)
#, no-wrap
msgid ""
"\n"
"            GtkNotebook tab GtkLabel {\n"
"              font: Sans 8;\n"
"            }\n"
"          "
msgstr ""

#: migrating-GtkStyleContext.xml:659(listitem)
msgid ""
"If you intend several visual elements to look interconnected, make sure you "
"specify rendered elements' connection areas with "
"gtk_style_context_set_junction_sides(). It is of course up to the theme to "
"make use of this information or not."
msgstr ""

#: migrating-GtkStyleContext.xml:667(para)
msgid ""
"#GtkStyleContext supports implicit animations on state changes for the most "
"simple case out-of-the-box: widgets with a single animatable area, whose "
"state is changed with gtk_widget_set_state_flags() or "
"gtk_widget_unset_state_flags(). These functions trigger animated transitions "
"for the affected state flags. Examples of widgets for which this kind of "
"animation may be sufficient are #GtkButton or #GtkEntry."
msgstr ""

#: migrating-GtkStyleContext.xml:67(listitem)
msgid ""
"gtk_paint_resize_grip() has been subsumed by gtk_render_handle() with a "
"#GTK_STYLE_CLASS_GRIP class set in the style context."
msgstr ""

#: migrating-GtkStyleContext.xml:676(para)
msgid ""
"If your widget consists of more than a simple area, and these areas may be "
"rendered with different states, make sure to mark the rendered areas with "
"gtk_style_context_push_animatable_region() and "
"gtk_style_context_pop_animatable_region()."
msgstr ""

#: migrating-GtkStyleContext.xml:683(para)
msgid ""
"gtk_style_context_notify_state_change() may be used to trigger a transition "
"for a given state. The region ID will determine the animatable region that "
"is affected by this transition."
msgstr ""

#: migrating-GtkStyleContext.xml:71(listitem)
msgid ""
"gtk_paint_spinner() disappears in favor of gtk_render_activity() with a "
"#GTK_STYLE_CLASS_SPINNER class set in the style context."
msgstr ""

#: migrating-GtkStyleContext.xml:77(para)
msgid "The list of available render methods is:"
msgstr ""

#: migrating-GtkStyleContext.xml:8(para)
msgid ""
"In GTK+ 3.0, #GtkStyleContext was added to replace #GtkStyle and the theming "
"infrastructure available in 2.x. GtkStyleContext is an object similar in "
"spirit to GtkStyle, as it contains theming information, although in a more "
"complete and tokenized fashion. There are two aspects to switching to "
"GtkStyleContext: porting themes and theme engines, and porting applications, "
"libraries and widgets."
msgstr ""

#: migrating-GtkStyleContext.xml:82(member)
msgid "gtk_render_background(): Renders a widget/area background."
msgstr ""

#: migrating-GtkStyleContext.xml:85(member)
msgid ""
"gtk_render_frame(): Renders a frame border around the given rectangle. "
"Usually the detail of the border depends on the theme information, plus the "
"current widget state."
msgstr ""

#: migrating-GtkStyleContext.xml:90(member)
msgid "gtk_render_frame_gap(): Renders a frame border with a gap on one side."
msgstr ""

#: migrating-GtkStyleContext.xml:93(member)
msgid "gtk_render_layout(): Renders a #PangoLayout."
msgstr ""

#: migrating-GtkStyleContext.xml:96(member)
msgid ""
"gtk_render_handle(): Renders all kind of handles and resize grips, depending "
"on the style class."
msgstr ""

#: migrating-checklist.sgml:103(para)
msgid "Implement a handler for the #GtkWidget::popup-menu signal:"
msgstr ""

#: migrating-checklist.sgml:107(programlisting)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"my_widget_popup_menu_handler (GtkWidget *widget)\n"
"{\n"
"  do_popup_menu (widget, NULL);\n"
"  return TRUE;\n"
"}\n"
"        "
msgstr ""

#: migrating-checklist.sgml:119(para)
msgid ""
"If you do not pass a positioning function to gtk_menu_popup(), it will show "
"the menu at the mouse position by default. This is what you usually want "
"when the menu is shown as a result of pressing a mouse button. However, if "
"you press the <keycombo><keycap>Shift</keycap><keycap>F10</keycap></"
"keycombo> or <keycap>Menu</keycap> keys while the widget is focused, the "
"mouse cursor may not be near the widget at all. In the <link linkend="
"\"do_popup_menu\">example above</link>, you may want to provide your own "
"<link linkend=\"GtkMenuPositionFunc\">menu-positioning function</link> in "
"the case where the <parameter>event</parameter> is %NULL. This function "
"should compute the desired position for a menu when it is invoked through "
"the keyboard. For example, #GtkEntry aligns the top edge of its popup menu "
"with the bottom edge of the entry."
msgstr ""

#: migrating-checklist.sgml:139(para)
msgid ""
"For the standard key bindings to work, your widget must be able to take the "
"keyboard focus. In general, widgets should be fully usable through the "
"keyboard and not just the mouse. The very first step of this is to ensure "
"that your widget turns on the %GTK_CAN_FOCUS <link linkend=\"gtkwidgetflags"
"\">flag</link>."
msgstr ""

#: migrating-checklist.sgml:150(title)
msgid "Use GdkEventExpose.region"
msgstr ""

#: migrating-checklist.sgml:153(title) migrating-checklist.sgml:20(title)
#: migrating-checklist.sgml:217(title) migrating-checklist.sgml:288(title)
msgid "Why"
msgstr ""

#: migrating-checklist.sgml:154(para)
msgid ""
"The <structfield>region</structfield> field of <structname>GdkEventExpose</"
"structname> allows you to redraw less than the traditional "
"<structfield>GdkEventRegion.area</structfield>."
msgstr ""

#: migrating-checklist.sgml:161(para)
msgid ""
"In early GTK+ versions, the <structname>GdkEventExpose</structname> "
"structure only had an <structfield>area</structfield> field to let you "
"determine the region that you needed to redraw. In current GTK+, this field "
"still exists for compatibility and as a simple interface. However, there is "
"also a <structfield>region</structfield> field which contains a fine-grained "
"region. The <structfield>area</structfield> field is simply the bounding "
"rectangle of the <structfield>region</structfield>."
msgstr ""

#: migrating-checklist.sgml:17(title)
msgid "Implement GtkWidget::popup_menu"
msgstr ""

#: migrating-checklist.sgml:172(para)
msgid ""
"Widgets that are very expensive to re-render, such as an image editor, may "
"prefer to use the <structfield>GdkEventExpose.region</structfield> field to "
"paint as little as possible. Widgets that just use a few drawing primitives, "
"such as labels and buttons, may prefer to use the traditional "
"<structfield>GdkEventExpose.area</structfield> field for simplicity."
msgstr ""

#: migrating-checklist.sgml:182(para)
msgid ""
"Regions have an internal representation that is accessible as a list of "
"rectangles. To turn the <structfield>GdkEventExpose.region</structfield> "
"field into such a list, use gdk_region_get_rectangles():"
msgstr ""

#: migrating-checklist.sgml:189(programlisting)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"my_widget_expose_event_handler (GtkWidget *widget, GdkEventExpose *event)\n"
"{\n"
"  GdkRectangle *rects;\n"
"  int n_rects;\n"
"  int i;\n"
"\n"
"  gdk_region_get_rectangles (event-&gt;region, &amp;rects, &amp;n_rects);\n"
"\n"
"  for (i = 0; i &lt; n_rects; i++)\n"
"    {\n"
"      /* Repaint rectangle: (rects[i].x, rects[i].y),\n"
"       *                    (rects[i].width, rects[i].height)\n"
"       */\n"
"    }\n"
"\n"
"  g_free (rects);\n"
"\n"
"  return FALSE;\n"
"}\n"
"    "
msgstr ""

#: migrating-checklist.sgml:21(para)
msgid ""
"By handling this signal, you let widgets have context-sensitive menus that "
"can be invoked with the standard key bindings."
msgstr ""

#: migrating-checklist.sgml:214(title)
msgid "Test for modifier keys correctly"
msgstr ""

#: migrating-checklist.sgml:218(para)
msgid ""
"With gtk_accelerator_get_default_mod_mask() you can test for modifier keys "
"reliably; this way your key event handlers will work correctly even if "
"<keycap>NumLock</keycap> or <keycap>CapsLock</keycap> are activated."
msgstr ""

#: migrating-checklist.sgml:226(para)
msgid ""
"In a <structname>GdkEventKey</structname>, the <structfield>state</"
"structfield> field is a bit mask which indicates the modifier state at the "
"time the key was pressed. Modifiers are keys like <keycap>Control</keycap> "
"and <keycap>NumLock</keycap>. When implementing a #GtkWidget::key-press-"
"event handler, you should use gtk_accelerator_get_default_mod_mask() to test "
"against modifier keys. This function returns a bit mask which encompasses "
"all the modifiers which the user may be actively pressing, such as "
"<keycap>Control</keycap>, <keycap>Shift</keycap>, and <keycap>Alt</keycap>, "
"but ignores \"innocuous\" modifiers such as <keycap>NumLock</keycap> and "
"<keycap>CapsLock</keycap>."
msgstr ""

#: migrating-checklist.sgml:242(para)
msgid ""
"Say you want to see if <keycombo><keycap>Control</keycap><keycap>F10</"
"keycap></keycombo> was pressed. Doing a simple test like <literal>event-&gt;"
"keysym&nbsp;==&nbsp;GDK_F10 &amp;&amp; event-&gt;state&nbsp;==&nbsp;"
"GDK_CONTROL_MASK</literal> is not enough. If <keycap>CapsLock</keycap> is "
"pressed, then <structfield>event-&gt;state</structfield> will be equal to "
"<literal>GDK_CONTROL_MASK | GDK_LOCK_MASK</literal>, and the simple test "
"will fail. By taking the logical-and of <structfield>event-&gt;state</"
"structfield> and gtk_accelerator_get_default_mod_mask(), you can ignore the "
"modifiers which are not actively pressed by the user at the same time as the "
"base key."
msgstr ""

#: migrating-checklist.sgml:258(para)
msgid ""
"The following example correctly tests for <keycombo><keycap>Control</"
"keycap><keycap>F10</keycap></keycombo> being pressed."
msgstr ""

#: migrating-checklist.sgml:264(programlisting)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"my_widget_key_press_event_handler (GtkWidget *widget, GdkEventKey *event)\n"
"{\n"
"  GdkModifierType modifiers;\n"
"\n"
"  modifiers = gtk_accelerator_get_default_mod_mask ();\n"
"\n"
"  if (event-&gt;keysym == GDK_F10\n"
"      &amp;&amp; (event-&gt;state &amp; modifiers) == GDK_CONTROL_MASK)\n"
"    {\n"
"      g_print (\"Control-F10 was pressed\\n\");\n"
"      return TRUE;\n"
"    }\n"
"\n"
"  return FALSE;\n"
"}\n"
"    "
msgstr ""

#: migrating-checklist.sgml:28(para)
msgid ""
"The #GtkWidget::popup-menu signal instructs the widget for which it is "
"emitted to create a context-sensitive popup menu. By default, the <link "
"linkend=\"gtk-bindings\">key binding mechanism</link> is set to emit this "
"signal when the <keycombo><keycap>Shift</keycap><keycap>F10</keycap></"
"keycombo> or <keycap>Menu</keycap> keys are pressed while a widget has the "
"focus. If a widget in your application shows a popup menu when you press a "
"mouse button, you can make it work as well through the normal key binding "
"mechanism in the following fahion:"
msgstr ""

#: migrating-checklist.sgml:285(title)
msgid "Use named icons"
msgstr ""

#: migrating-checklist.sgml:289(para)
msgid ""
"Named icons automatically adapt to theme changes, giving your application a "
"much more integrated appearance."
msgstr ""

#: migrating-checklist.sgml:295(para)
msgid ""
"Named icons can be used for window icons (see gtk_window_set_icon_name()) "
"and images (see gtk_image_set_icon_name()). You can also use named icons for "
"drag-and-drop (see gtk_drag_source_set_icon_name()) and in treeview cells "
"(see the #GtkCellRendererPixbuf:icon-name property)."
msgstr ""

#: migrating-checklist.sgml:42(para)
msgid ""
"Write a function to create and show a popup menu. This function needs to "
"know the button number and the event's time to pass them to gtk_menu_popup"
"(). You can implement such a function like this:"
msgstr ""

#: migrating-checklist.sgml:49(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"do_popup_menu (GtkWidget *my_widget, GdkEventButton *event)\n"
"{\n"
"  GtkWidget *menu;\n"
"  int button, event_time;\n"
"\n"
"  menu = gtk_menu_new ();\n"
"  g_signal_connect (menu, \"deactivate\",\n"
"                    G_CALLBACK (gtk_widget_destroy), NULL);\n"
"\n"
"  /* ... add menu items ... */\n"
"\n"
"  if (event)\n"
"    {\n"
"      button = event-&gt;button;\n"
"      event_time = event-&gt;time;\n"
"    }\n"
"  else\n"
"    {\n"
"      button = 0;\n"
"      event_time = gtk_get_current_event_time ();\n"
"    }\n"
"\n"
"  gtk_menu_attach_to_widget (GTK_MENU (menu), my_widget, NULL);\n"
"  gtk_menu_popup (GTK_MENU (menu), NULL, NULL, NULL, NULL,\n"
"                  button, event_time);\n"
"}\n"
"        "
msgstr ""

#: migrating-checklist.sgml:6(title)
msgid "Migration Checklist"
msgstr ""

#: migrating-checklist.sgml:8(para)
msgid ""
"This chapter includes a checklist of things you need to do to ensure that "
"your programs are good citizens in the GTK+ world. By paying attention to "
"the points in the checklist, you ensure that many automatic features of GTK+ "
"will work correctly in your program."
msgstr ""

#: migrating-checklist.sgml:81(para)
msgid ""
"In your #GtkWidget::button-press-event handler, call this function when you "
"need to pop up a menu:"
msgstr ""

#: migrating-checklist.sgml:86(programlisting)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"my_widget_button_press_event_handler (GtkWidget *widget, GdkEventButton *event)\n"
"{\n"
"  /* Ignore double-clicks and triple-clicks */\n"
"  if (event-&gt;button == 3 &amp;&amp; event-&gt;type == GDK_BUTTON_PRESS)\n"
"    {\n"
"      do_popup_menu (widget, event);\n"
"      return TRUE;\n"
"    }\n"
"\n"
"  return FALSE;\n"
"}\n"
"        "
msgstr ""

#: osx.sgml:13(refname) osx.sgml:20(title) osx.sgml:7(refentrytitle)
msgid "Using GTK+ on Mac OS X"
msgstr ""

#: osx.sgml:14(refpurpose)
msgid "OS X-specific aspects of using GTK+"
msgstr ""

#: osx.sgml:22(para)
msgid ""
"The Mac OS X port of GTK+ is an implementation of GDK (and therefore GTK+) "
"on top of the Quarz API."
msgstr ""

#: osx.sgml:27(para)
msgid ""
"Currently, the Mac OS X port does not use any additional commandline options "
"or environment variables."
msgstr ""

#: osx.sgml:32(para)
msgid ""
"For up-to-date information about the current status of this port, see the "
"<ulink url=\"http://live.gnome.org/GTK+/OSX\">project page</ulink>."
msgstr ""

#: overview.xml:16(para)
msgid "GTK+ depends on the following libraries: <placeholder-1/>"
msgstr "GTK+ 依赖下列的库： <placeholder-1/>"

#: overview.xml:21(term)
msgid "GLib"
msgstr "GLib"

#: overview.xml:22(para)
msgid ""
"A general-purpose utility library, not specific to graphical user "
"interfaces. GLib provides many useful data types, macros, type conversions, "
"string utilities, file utilities, a main loop abstraction, and so on."
msgstr ""
"通用工具库，并不针对图形界面程序。GLib 提供了很多有用的 数据类型、宏、类型转"
"换、字符串工具、文件操作工具以及主循环的实现"

#: overview.xml:30(term)
msgid "GObject"
msgstr "GObject"

#: overview.xml:31(para)
msgid ""
"A library that provides a type system, a collection of fundamental types "
"including an object type, a signal system."
msgstr ""
"提供了一个类型系统 GType 和 一个基础类型集合（包括一个对象类型 GObject 和信号"
"系统GSignal）"

#: overview.xml:37(term)
msgid "GIO"
msgstr "GIO"

#: overview.xml:38(para)
msgid ""
"A modern, easy-to-use VFS API including abstractions for files, drives, "
"volumes, stream IO, as well as network programming and DBus communication."
msgstr ""

#: overview.xml:45(term)
msgid "cairo"
msgstr "cairo"

#: overview.xml:46(para)
msgid ""
"Cairo is a 2D graphics library with support for multiple output devices."
msgstr "2D 图形库，支持多"

#: overview.xml:52(term)
msgid "Pango"
msgstr "Pango"

#: overview.xml:53(para)
msgid ""
"Pango is a library for internationalized text handling. It centers around "
"the PangoLayout object, representing a paragraph of text. Pango provides the "
"engine for GtkTextView, GtkLabel, GtkEntry, and other widgets that display "
"text."
msgstr ""

#: overview.xml:6(para)
msgid ""
"GTK+ is a library for creating graphical user interfaces. It works on many "
"UNIX-like platforms, Windows, and OS X. GTK+ is released under the GNU "
"Library General Public License (GNU LGPL), which allows for flexible "
"licensing of client applications. GTK+ has a C-based object-oriented "
"architecture that allows for maximum flexibility. Bindings for many other "
"languages have been written, including C++, Objective-C, Guile/Scheme, Perl, "
"Python, TOM, Ada95, Free Pascal, and Eiffel."
msgstr ""

#: overview.xml:62(term)
msgid "ATK"
msgstr "ATK"

#: overview.xml:63(para)
msgid ""
"ATK is the Accessibility Toolkit. It provides a set of generic interfaces "
"allowing accessibility technologies to interact with a graphical user "
"interface. For example, a screen reader uses ATK to discover the text in an "
"interface and read it to blind users. GTK+ widgets have built-in support for "
"accessibility using the ATK framework."
msgstr ""

#: overview.xml:74(term)
msgid "GdkPixbuf"
msgstr "GdkPixbuf"

#: overview.xml:75(para)
msgid ""
"This is a small library which allows you to create GdkPixbuf (\"pixel buffer"
"\") objects from image data or image files. Use a GdkPixbuf in combination "
"with GtkImage to display images."
msgstr ""

#: overview.xml:83(term)
msgid "GDK"
msgstr "GDK"

#: overview.xml:84(para)
msgid ""
"GDK is the abstraction layer that allows GTK+ to support multiple windowing "
"systems. GDK provides window system facilities on X11, Windows, and OS X."
msgstr ""

#: overview.xml:92(term)
msgid "GTK+"
msgstr "GTK+"

#: overview.xml:93(para)
msgid ""
"The GTK+ library itself contains <firstterm>widgets</firstterm>, that is, "
"GUI components such as GtkButton or GtkTextView."
msgstr ""

#: question_index.sgml:104(para)
msgid ""
"For strings returned from functions, they will be declared \"const\" (using "
"#G_CONST_RETURN) if they should not be freed. Non-const strings should be "
"freed with g_free(). Arrays follow the same rule. If you find an "
"undocumented exception to the rules, please report a bug to <ulink url="
"\"http://bugzilla.gnome.org\">http://bugzilla.gnome.org</ulink>."
msgstr ""

#: question_index.sgml:117(para)
msgid ""
"Why does my program leak memory, if I destroy a widget immediately after "
"creating it ?"
msgstr ""

#: question_index.sgml:124(para)
msgid ""
"If <structname>GtkFoo</structname> isn't a toplevel window, then "
"<placeholder-1/> is a memory leak, because no one assumed the initial "
"floating reference. If you are using a widget and you aren't immediately "
"packing it into a container, then you probably want standard reference "
"counting, not floating reference counting."
msgstr ""

#: question_index.sgml:126(programlisting)
#, no-wrap
msgid ""
"\n"
" foo = gtk_foo_new ();\n"
" gtk_widget_destroy (foo);\n"
msgstr ""

#: question_index.sgml:13(refname) question_index.sgml:7(refentrytitle)
#: question_index.sgml:9(refmiscinfo)
msgid "Common Questions"
msgstr ""

#: question_index.sgml:136(para)
msgid ""
"To to get this, you must acquire a reference to the widget and drop the "
"floating reference (<quote>ref and sink</quote> in GTK+ parlance) after "
"creating it: <placeholder-1/> When you want to get rid of the widget, you "
"must call gtk_widget_destroy() to break any external connections to the "
"widget before dropping your reference: <placeholder-2/> When you immediately "
"add a widget to a container, it takes care of assuming the initial floating "
"reference and you don't have to worry about reference counting at all ... "
"just call gtk_widget_destroy() to get rid of the widget."
msgstr ""

#: question_index.sgml:14(refpurpose)
msgid "Find answers to common questions in the GTK+ manual"
msgstr ""

#: question_index.sgml:140(programlisting)
#, no-wrap
msgid ""
"\n"
" foo = gtk_foo_new ();\n"
" g_object_ref_sink (foo);\n"
msgstr ""

#: question_index.sgml:147(programlisting)
#, no-wrap
msgid ""
"\n"
" gtk_widget_destroy (foo);\n"
" g_object_unref (foo);\n"
msgstr ""

#: question_index.sgml:160(para)
msgid "How do I use GTK+ with threads?"
msgstr ""

#: question_index.sgml:166(para)
msgid ""
"This is covered in the <link linkend=\"gdk-Threads\">GDK threads "
"documentation</link>. See also the <link linkend=\"glib-Threads\">GThread</"
"link> documentation for portable threading primitives."
msgstr ""

#: question_index.sgml:177(para)
msgid "How do I internationalize a GTK+ program?"
msgstr ""

#: question_index.sgml:182(para)
msgid ""
"Most people use <ulink url=\"http://www.gnu.org/software/gettext/\">GNU "
"gettext</ulink>, already required in order to install GLib. On a UNIX or "
"Linux system with gettext installed, type <literal>info gettext</literal> to "
"read the documentation."
msgstr ""

#: question_index.sgml:188(para)
msgid ""
"The short checklist on how to use gettext is: call bindtextdomain() so "
"gettext can find the files containing your translations, call textdomain() "
"to set the default translation domain, call bind_textdomain_codeset() to "
"request that all translated strings are returned in UTF-8, then call gettext"
"() to look up each string to be translated in the default domain."
msgstr ""

#: question_index.sgml:195(para)
msgid ""
"<filename>gi18n.h</filename> provides the following shorthand macros for "
"convenience. Conventionally, people define macros as follows for "
"convenience: <placeholder-1/> You use N_() (N stands for no-op) to mark a "
"string for translation in a location where a function call to gettext() is "
"not allowed, such as in an array initializer. You eventually have to call "
"gettext() on the string to actually fetch the translation. _() both marks "
"the string for translation and actually translates it. The C_() macro (C "
"stands for context) adds an additional context to the string that is marked "
"for translation, which can help to disambiguate short strings that might "
"need different translations in different parts of your program."
msgstr ""

#: question_index.sgml:20(title)
msgid "Questions and Answers"
msgstr ""

#: question_index.sgml:200(programlisting)
#, no-wrap
msgid ""
"\n"
"  #define  _(x)     gettext (x)\n"
"  #define N_(x)     x\n"
"  #define C_(ctx,x) pgettext (ctx, x)\n"
msgstr ""

#: question_index.sgml:217(para)
msgid "Code using these macros ends up looking like this: <placeholder-1/>"
msgstr ""

#: question_index.sgml:22(para)
msgid ""
"This is an \"index\" of the reference manual organized by common \"How do "
"I...\" questions. If you aren't sure which documentation to read for the "
"question you have, this list is a good place to start."
msgstr ""

#: question_index.sgml:220(programlisting)
#, no-wrap
msgid ""
"\n"
" #include &lt;gi18n.h&gt;\n"
"\n"
" static const char *global_variable = N_(\"Translate this string\");\n"
"\n"
" static void\n"
" make_widgets (void)\n"
" {\n"
"    GtkWidget *label1;\n"
"    GtkWidget *label2;\n"
"\n"
"    label1 = gtk_label_new (_(\"Another string to translate\"));\n"
"    label2 = gtk_label_new (_(global_variable));\n"
"...\n"
msgstr ""

#: question_index.sgml:237(para)
msgid ""
"Libraries using gettext should use dgettext() instead of gettext(), which "
"allows them to specify the translation domain each time they ask for a "
"translation. Libraries should also avoid calling textdomain(), since they "
"will be specifying the domain instead of using the default."
msgstr ""

#: question_index.sgml:243(para)
msgid ""
"With the convention that the macro <literal>GETTEXT_PACKAGE</literal> is "
"defined to hold your libraries translation domain, <filename>gi18n-lib.h</"
"filename> can be included to provide the following convenience: "
"<placeholder-1/>"
msgstr ""

#: question_index.sgml:249(programlisting)
#, no-wrap
msgid ""
"\n"
"  #define _(x) dgettext (GETTEXT_PACKAGE, x)\n"
msgstr ""

#: question_index.sgml:259(para)
msgid "How do I use non-ASCII characters in GTK+ programs ?"
msgstr ""

#: question_index.sgml:265(para)
msgid ""
"GTK+ uses <ulink url=\"http://www.unicode.org\">Unicode</ulink> (more "
"exactly UTF-8) for all text. UTF-8 encodes each Unicode codepoint as a "
"sequence of one to six bytes and has a number of nice properties which make "
"it a good choice for working with Unicode text in C programs: <placeholder-1/"
"> More information about Unicode and UTF-8 can be found in the <ulink url="
"\"http://www.cl.cam.ac.uk/~mgk25/unicode.html\">UTF-8 and Unicode FAQ for "
"Unix/Linux</ulink>. GLib provides functions for converting strings between "
"UTF-8 and other encodings, see g_locale_to_utf8() and g_convert()."
msgstr ""

#: question_index.sgml:271(para)
msgid "ASCII characters are encoded by their familiar ASCII codepoints."
msgstr ""

#: question_index.sgml:274(para)
msgid "ASCII characters never appear as part of any other character."
msgstr ""

#: question_index.sgml:277(para)
msgid ""
"The zero byte doesn't occur as part of a character, so that UTF-8 strings "
"can be manipulated with the usual C library functions for handling zero-"
"terminated strings."
msgstr ""

#: question_index.sgml:289(para)
msgid ""
"Text coming from external sources (e.g. files or user input), has to be "
"converted to UTF-8 before being handed over to GTK+. The following example "
"writes the content of a IS0-8859-1 encoded text file to <literal>stdout</"
"literal>: <placeholder-1/>"
msgstr ""

#: question_index.sgml:294(programlisting)
#, no-wrap
msgid ""
"\n"
"gchar *text, *utf8_text;\n"
"gsize length;\n"
"GError *error = NULL;\n"
"\n"
"if (g_file_get_contents (filename, &amp;text, &amp;length, NULL))\n"
"  {\n"
"     utf8_text = g_convert (text, length, \"UTF-8\", \"ISO-8859-1\",\n"
"                            NULL, NULL, &amp;error);\n"
"     if (error != NULL)\n"
"       {\n"
"         fprintf (\"Couldn't convert file &percnt;s to UTF-8\\n\", filename);\n"
"         g_error_free (error);\n"
"       }\n"
"     else\n"
"       g_print (utf8_text);\n"
"  }\n"
"else\n"
"  fprintf (stderr, \"Unable to read file &percnt;s\\n\", filename);\n"
msgstr ""

#: question_index.sgml:30(title)
msgid "General"
msgstr ""

#: question_index.sgml:315(para)
msgid ""
"For string literals in the source code, there are several alternatives for "
"handling non-ASCII content: <placeholder-1/> Here is an example showing the "
"three approaches using the copyright sign &copy; which has Unicode and "
"ISO-8859-1 codepoint 169 and is represented in UTF-8 by the two bytes 194, "
"169, or <literal>\"\\302\\251\"</literal> as a string literal: "
"<placeholder-2/>"
msgstr ""

#: question_index.sgml:319(term)
msgid "direct UTF-8"
msgstr ""

#: question_index.sgml:320(para)
msgid ""
"If your editor and compiler are capable of handling UTF-8 encoded sources, "
"it is very convenient to simply use UTF-8 for string literals, since it "
"allows you to edit the strings in \"wysiwyg\". Note that choosing this "
"option may reduce the portability of your code."
msgstr ""

#: question_index.sgml:328(term)
msgid "escaped UTF-8"
msgstr ""

#: question_index.sgml:329(para)
msgid ""
"Even if your toolchain can't handle UTF-8 directly, you can still encode "
"string literals in UTF-8 by using octal or hexadecimal escapes like <literal>"
"\\212</literal> or <literal>\\xa8</literal> to encode each byte. This is "
"portable, but modifying the escaped strings is not very convenient. Be "
"careful when mixing hexadecimal escapes with ordinary text; <literal>"
"\"\\xa8abcd\"</literal> is a string of length 1 !"
msgstr ""

#: question_index.sgml:33(para)
msgid "How do I get started with GTK+?"
msgstr ""

#: question_index.sgml:339(term)
msgid "runtime conversion"
msgstr ""

#: question_index.sgml:340(para)
msgid ""
"If the string literals can be represented in an encoding which your "
"toolchain can handle (e.g. IS0-8859-1), you can write your source files in "
"that encoding and use g_convert() to convert the strings to UTF-8 at "
"runtime. Note that this has some runtime overhead, so you may want to move "
"the conversion out of inner loops."
msgstr ""

#: question_index.sgml:353(programlisting)
#, no-wrap
msgid ""
"\n"
"g_print (\"direct UTF-8: &copy;\");\n"
"g_print (\"escaped UTF-8: \\302\\251\");\n"
"text = g_convert (\"runtime conversion: &copy;\", -1, \"ISO-8859-1\", \"UTF-8\", NULL, NULL, NULL);\n"
"g_print(text);\n"
"g_free (text);\n"
msgstr ""

#: question_index.sgml:361(para)
msgid ""
"If you are using gettext() to localize your application, you need to call "
"bind_textdomain_codeset() to ensure that translated strings are returned in "
"UTF-8 encoding."
msgstr ""

#: question_index.sgml:37(para)
msgid ""
"The GTK+ <ulink url=\"http://www.gtk.org\">website</ulink> offers some "
"<ulink url=\"http://www.gtk.org/documentation\">tutorials</ulink> and other "
"documentation (most of it about GTK+ 2.x, but mostly still applicable). More "
"documentation ranging from whitepapers to online books can be found at the "
"<ulink url=\"http://library.gnome.org/devel/\">GNOME developer's site</"
"ulink>. After studying these materials you should be well prepared to come "
"back to this reference manual for details."
msgstr ""

#: question_index.sgml:370(para)
msgid "How do I use GTK+ with C++?"
msgstr ""

#: question_index.sgml:375(para)
msgid ""
"There are two ways to approach this. The GTK+ header files use the subset of "
"C that's also valid C++, so you can simply use the normal GTK+ API in a C++ "
"program. Alternatively, you can use a \"C++ binding\" such as <ulink url="
"\"http://gtkmm.sourceforge.net/\">gtkmm</ulink> which provides a native C++ "
"API."
msgstr ""

#: question_index.sgml:382(para)
msgid ""
"When using GTK+ directly, keep in mind that only functions can be connected "
"to signals, not methods. So you will need to use global functions or \"static"
"\" class functions for signal connections."
msgstr ""

#: question_index.sgml:387(para)
msgid ""
"Another common issue when using GTK+ directly is that C++ will not "
"implicitly convert an integer to an enumeration. This comes up when using "
"bitfields; in C you can write the following code: <placeholder-1/> while in C"
"++ you must write: <placeholder-2/> There are very few functions that "
"require this cast, however."
msgstr ""

#: question_index.sgml:393(programlisting)
#, no-wrap
msgid ""
"\n"
"  gdk_window_set_events (gdk_window,\n"
"                         GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK);\n"
msgstr ""

#: question_index.sgml:400(programlisting)
#, no-wrap
msgid ""
"\n"
"  gdk_window_set_events (gdk_window,\n"
"                         (GdkEventMask) GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK);\n"
msgstr ""

#: question_index.sgml:412(para)
msgid "How do I use GTK+ with other non-C languages?"
msgstr ""

#: question_index.sgml:417(para)
msgid ""
"See the <ulink url=\"http://www.gtk.org/bindings.html\">list of language "
"bindings</ulink> on <ulink url=\"http://www.gtk.org\">http://www.gtk.org</"
"ulink>."
msgstr ""

#: question_index.sgml:428(para)
msgid "How do I load an image or animation from a file?"
msgstr ""

#: question_index.sgml:434(para)
msgid ""
"To load an image file straight into a display widget, use "
"gtk_image_new_from_file() <placeholder-1/>. To load an image for another "
"purpose, use gdk_pixbuf_new_from_file(). To i load an animation, use "
"gdk_pixbuf_animation_new_from_file(). gdk_pixbuf_animation_new_from_file() "
"can also load non-animated images, so use it in combination with "
"gdk_pixbuf_animation_is_static_image() to load a file of unknown type."
msgstr ""

#: question_index.sgml:436(para)
msgid ""
"If the file load fails, gtk_image_new_from_file() will display no image "
"graphic &mdash; to detect a failed load yourself, use "
"gdk_pixbuf_new_from_file() directly, then gtk_image_new_from_pixbuf()."
msgstr ""

#: question_index.sgml:446(para)
msgid ""
"To load an image or animation file asynchronously (without blocking), use "
"#GdkPixbufLoader."
msgstr ""

#: question_index.sgml:455(para)
msgid "How do I draw text ?"
msgstr ""

#: question_index.sgml:460(para)
msgid ""
"To draw a piece of text, use a Pango layout and pango_cairo_show_layout(). "
"<placeholder-1/>"
msgstr ""

#: question_index.sgml:463(programlisting)
#, no-wrap
msgid ""
"\n"
" layout = gtk_widget_create_pango_layout (widget, text);\n"
" fontdesc = pango_font_description_from_string (\"Luxi Mono 12\");\n"
" pango_layout_set_font_description (layout, fontdesc);\n"
" pango_cairo_show_layout (cr, layout);\n"
" pango_font_description_free (fontdesc);\n"
" g_object_unref (layout);\n"
msgstr ""

#: question_index.sgml:474(para)
msgid ""
"See also the <ulink url=\"http://library.gnome.org/devel/pango/stable/pango-"
"Cairo-Rendering.html\">Cairo Rendering</ulink> section of <ulink url="
"\"http://library.gnome.org/devel/pango/stable/\">Pango manual</ulink>."
msgstr ""

#: question_index.sgml:485(para)
msgid "How do I measure the size of a piece of text ?"
msgstr ""

#: question_index.sgml:49(para)
msgid ""
"Where can I get help with GTK+, submit a bug report, or make a feature "
"request?"
msgstr ""

#: question_index.sgml:491(para)
msgid ""
"To obtain the size of a piece of text, use a Pango layout and "
"pango_layout_get_pixel_size(), using code like the following: <placeholder-1/"
">"
msgstr ""

#: question_index.sgml:495(programlisting)
#, no-wrap
msgid ""
"\n"
" layout = gtk_widget_create_pango_layout (widget, text);\n"
" fontdesc = pango_font_description_from_string (\"Luxi Mono 12\");\n"
" pango_layout_set_font_description (layout, fontdesc);\n"
" pango_layout_get_pixel_size (layout, &amp;width, &amp;height);\n"
" pango_font_description_free (fontdesc);\n"
" g_object_unref (layout);\n"
msgstr ""

#: question_index.sgml:506(para)
msgid ""
"See also the <ulink url=\"http://library.gnome.org/devel/pango/stable/pango-"
"Layout-Objects.html\">Layout Objects</ulink> section of <ulink url=\"http://"
"library.gnome.org/devel/pango/stable/\">Pango manual</ulink>."
msgstr ""

#: question_index.sgml:516(para)
msgid ""
"Why are types not registered if I use their <literal>GTK_TYPE_BLAH</literal> "
"macro ?"
msgstr ""

#: question_index.sgml:523(para)
msgid ""
"The <literal>GTK_TYPE_BLAH</literal> macros are defined as calls to "
"<literal>gtk_blah_get_type()</literal>, and the <literal>_get_type()</"
"literal> i functions are declared as %G_GNUC_CONST which allows the compiler "
"to optimize the call away if it appears that the value is not being used."
msgstr ""

#: question_index.sgml:530(para)
msgid ""
"A common workaround for this problem is to store the result in a volatile "
"variable, which keeps the compiler from optimizing the call away. "
"<placeholder-1/>"
msgstr ""

#: question_index.sgml:533(programlisting)
#, no-wrap
msgid ""
"\n"
"volatile GType dummy = GTK_TYPE_BLAH;\n"
msgstr ""

#: question_index.sgml:542(para)
msgid "How do I create a transparent toplevel window ?"
msgstr ""

#: question_index.sgml:548(para)
msgid ""
"To make a window transparent, it needs to use a visual which supports that. "
"This is done by getting the RGBA visual of the screen with "
"gdk_screen_get_rgba_visual() and setting it on the window. Note that "
"gdk_screen_get_rgba_visual() will return %NULL if transparent windows are "
"not supported on the screen, you should fall back to "
"gdk_screen_get_system_visual() in that case. Additionally, note that this "
"will change from screen to screen, so it needs to be repeated whenever the "
"window is moved to a different screen. <placeholder-1/> To fill the alpha "
"channel on the window simply use cairos RGBA drawing capabilities."
msgstr ""

#: question_index.sgml:557(programlisting)
#, no-wrap
msgid ""
"\n"
"GdkVisual *visual;\n"
"\n"
"visual = gdk_screen_get_rgba_visual (screen);\n"
"if (visual == NULL)\n"
"  visual = gdk_screen_get_system_visual (screen);\n"
"\n"
"gtk_widget_set_visual (GTK_WIDGET (window), visual);\n"
msgstr ""

#: question_index.sgml:56(para)
msgid ""
"See the <link linkend=\"gtk-resources\">documentation on this topic</link>."
msgstr ""

#: question_index.sgml:569(para)
msgid ""
"Note that the presence of an RGBA visual is no guarantee that the window "
"will actually appear transparent on screen. On X11, this requires a "
"compositing manager to be running. See gtk_widget_is_composited() for a way "
"to find out if the alpha channel will be respected."
msgstr ""

#: question_index.sgml:581(title)
msgid "Which widget should I use..."
msgstr ""

#: question_index.sgml:584(para)
msgid "...for lists and trees?"
msgstr ""

#: question_index.sgml:589(para)
msgid ""
"See <link linkend=\"TreeWidget\">tree widget overview</link>&mdash; you "
"should use the #GtkTreeView widget. (A list is just a tree with no branches, "
"so the tree widget is used for lists as well)."
msgstr ""

#: question_index.sgml:598(para)
msgid "...for multi-line text display or editing?"
msgstr ""

#: question_index.sgml:603(para)
msgid ""
"See <link linkend=\"TextWidget\">text widget overview</link>&mdash; you "
"should use the #GtkTextView widget."
msgstr ""

#: question_index.sgml:607(para)
msgid ""
"If you only have a small amount of text, #GtkLabel may also be appropriate "
"of course. It can be made selectable with gtk_label_set_selectable(). For a "
"single-line text entry, see #GtkEntry."
msgstr ""

#: question_index.sgml:617(para)
msgid "...to display an image or animation?"
msgstr ""

#: question_index.sgml:622(para)
msgid ""
"#GtkImage can display images in just about any format GTK+ understands. You "
"can also use #GtkDrawingArea if you need to do something more complex, such "
"as draw text or graphics over the top of the image."
msgstr ""

#: question_index.sgml:631(para)
msgid ""
"...for presenting a set of mutually-exclusive choices, where Windows would "
"use a combo box?"
msgstr ""

#: question_index.sgml:637(para)
msgid ""
"With GTK+, a #GtkComboBox is the recommended widget to use for this use "
"case. This widget looks like either a combo box or the current option menu, "
"depending on the current theme. If you need an editable text entry, use the "
"#GtkComboBox:has-entry property."
msgstr ""

#: question_index.sgml:648(title)
msgid "GtkWidget"
msgstr ""

#: question_index.sgml:651(para)
msgid "How do I change the color of a widget?"
msgstr ""

#: question_index.sgml:655(para)
msgid ""
"See gtk_widget_override_color() and gtk_widget_override_background_color(). "
"You can also change the appearance of a widget by installing a custom style "
"provider, see gtk_style_context_add_provider()."
msgstr ""

#: question_index.sgml:66(para)
msgid "How do I port from one GTK+ version to another?"
msgstr ""

#: question_index.sgml:661(para)
msgid ""
"To change the background color for widgets such as #GtkLabel that have no "
"background, place them in a #GtkEventBox and set the background of the event "
"box."
msgstr ""

#: question_index.sgml:668(para)
msgid "How do I change the font of a widget?"
msgstr ""

#: question_index.sgml:672(para)
msgid ""
"This has several possible answers, depending on what exactly you want to "
"achieve. One option is gtk_widget_override_font(). <placeholder-1/>"
msgstr ""

#: question_index.sgml:675(programlisting)
#, no-wrap
msgid ""
"\n"
" PangoFontDesc *font_desc = pango_font_description_new ();\n"
" pango_font_description_set_size (font_desc, 40);\n"
" gtk_widget_override_font (widget, font);\n"
" pango_font_description_free (font_desc);\n"
msgstr ""

#: question_index.sgml:682(para)
msgid ""
"If you want to make the text of a label larger, you can use "
"gtk_label_set_markup(): <placeholder-1/> This is preferred for many apps "
"because it's a relative size to the user's chosen font size. See "
"g_markup_escape_text() if you are constructing such strings on the fly."
msgstr ""

#: question_index.sgml:685(programlisting)
#, no-wrap
msgid ""
"\n"
"gtk_label_set_markup (label, \"&lt;big&gt;big text&lt;/big&gt;\");\n"
msgstr ""

#: question_index.sgml:692(para)
msgid ""
"You can also change the font of a widget by putting <placeholder-1/> in a "
"CSS file, loading it with gtk_css_provider_load_from_file(), and adding the "
"provider with gtk_style_context_add_provider_for_screen(). To associate this "
"style information with your widget, set a style class on its "
"#GtkStyleContext using gtk_style_context_add_class(). The advantage of this "
"approach is that users can then override the font you have chosen. See the "
"#GtkStyleContext documentation for more discussion."
msgstr ""

#: question_index.sgml:694(programlisting)
#, no-wrap
msgid ""
"\n"
" .my-widget-class {\n"
"   font: Sans 30;\n"
" }\n"
msgstr ""

#: question_index.sgml:71(para)
msgid ""
"See <xref linkend=\"gtk-migrating-2-to-3\"/>. You may also find useful "
"information in the documentation for specific widgets and functions."
msgstr ""

#: question_index.sgml:710(para)
msgid "How do I disable/ghost/desensitize a widget?"
msgstr ""

#: question_index.sgml:714(para)
msgid ""
"In GTK+ a disabled widget is termed \"insensitive.\" See "
"gtk_widget_set_sensitive()."
msgstr ""

#: question_index.sgml:723(title)
msgid "GtkTextView"
msgstr ""

#: question_index.sgml:726(para)
msgid "How do I get the contents of the entire text widget as a string?"
msgstr ""

#: question_index.sgml:730(para)
msgid ""
"See gtk_text_buffer_get_bounds() and gtk_text_buffer_get_text() or "
"gtk_text_iter_get_text()."
msgstr ""

#: question_index.sgml:735(programlisting)
#, no-wrap
msgid ""
"\n"
"  GtkTextIter start, end;\n"
"  GtkTextBuffer *buffer;\n"
"  char *text;\n"
"\n"
"  buffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW (text_view));\n"
"  gtk_text_buffer_get_bounds (buffer, &amp;start, &amp;end);\n"
"  text = gtk_text_iter_get_text (&amp;start, &amp;end);\n"
"  /* use text */\n"
"  g_free (text);\n"
msgstr ""

#: question_index.sgml:750(para)
msgid ""
"How do I make a text widget display its complete contents in a specific font?"
msgstr ""

#: question_index.sgml:754(para)
msgid ""
"If you use gtk_text_buffer_insert_with_tags() with appropriate tags to "
"select the font, the inserted text will have the desired appearance, but "
"text typed in by the user before or after the tagged block will appear in "
"the default style."
msgstr ""

#: question_index.sgml:760(para)
msgid ""
"To ensure that all text has the desired appearance, use "
"gtk_widget_override_font() to change the default font for the widget."
msgstr ""

#: question_index.sgml:768(para)
msgid ""
"How do I make a text view scroll to the end of the buffer automatically ?"
msgstr ""

#: question_index.sgml:77(para)
msgid ""
"If you have a question not covered in the manual, feel free to ask on the "
"mailing lists and please <ulink url=\"http://bugzilla.gnome.org\">file a bug "
"report</ulink> against the documentation."
msgstr ""

#: question_index.sgml:774(para)
msgid ""
"A good way to keep a text buffer scrolled to the end is to place a <link "
"linkend=\"GtkTextMark\">mark</link> at the end of the buffer, and give it "
"right gravity. The gravity has the effect that text inserted at the mark "
"gets inserted <emphasis>before</emphasis>, keeping the mark at the end."
msgstr ""

#: question_index.sgml:782(para)
msgid ""
"To ensure that the end of the buffer remains visible, use "
"gtk_text_view_scroll_to_mark() to scroll to the mark after inserting new "
"text."
msgstr ""

#: question_index.sgml:788(para)
msgid "The gtk-demo application contains an example of this technique."
msgstr ""

#: question_index.sgml:797(title)
msgid "#GtkTreeView"
msgstr ""

#: question_index.sgml:800(para)
msgid "How do I associate some data with a row in the tree?"
msgstr ""

#: question_index.sgml:805(para)
msgid ""
"Remember that the #GtkTreeModel columns don't necessarily have to be "
"displayed. So you can put non-user-visible data in your model just like any "
"other data, and retrieve it with gtk_tree_model_get(). See the <link linkend="
"\"TreeWidget\">tree widget overview</link>."
msgstr ""

#: question_index.sgml:815(para)
msgid "How do I put an image and some text in the same column?"
msgstr ""

#: question_index.sgml:820(para)
msgid ""
"You can pack more than one #GtkCellRenderer into a single #GtkTreeViewColumn "
"using gtk_tree_view_column_pack_start() or gtk_tree_view_column_pack_end(). "
"So pack both a #GtkCellRendererPixbuf and a #GtkCellRendererText into the "
"column."
msgstr ""

#: question_index.sgml:830(para)
msgid ""
"I can set data easily on my #GtkTreeStore/#GtkListStore models using "
"gtk_list_store_set() and gtk_tree_store_set(), but can't read it back?"
msgstr ""

#: question_index.sgml:836(para)
msgid ""
"Both the #GtkTreeStore and the #GtkListStore implement the #GtkTreeModel "
"interface. Consequentially, you can use any function this interface "
"implements. The easiest way to read a set of data back is to use "
"gtk_tree_model_get()."
msgstr ""

#: question_index.sgml:846(para)
msgid "How do I change the way that numbers are formatted by #GtkTreeView?"
msgstr ""

#: question_index.sgml:849(para)
msgid ""
"Use gtk_tree_view_insert_column_with_data_func() or "
"gtk_tree_view_column_set_cell_data_func() and do the conversion from number "
"to string yourself (with, say, g_strdup_printf())."
msgstr ""

#: question_index.sgml:855(para)
msgid "The following example demonstrates this: <placeholder-1/>"
msgstr ""

#: question_index.sgml:857(programlisting)
#, no-wrap
msgid ""
"\n"
"enum\n"
"{\n"
"  DOUBLE_COLUMN,\n"
"  N_COLUMNS\n"
"};\n"
"\n"
"GtkListStore *mycolumns;\n"
"GtkTreeView *treeview;\n"
"\n"
"void\n"
"my_cell_double_to_text (GtkTreeViewColumn *tree_column,\n"
"\t                GtkCellRenderer   *cell,\n"
"                        GtkTreeModel      *tree_model,\n"
"\t                GtkTreeIter       *iter,\n"
"                        gpointer           data)\n"
"{\n"
"  GtkCellRendererText *cell_text = (GtkCellRendererText *)cell;\n"
"  gdouble d;\n"
"  gchar *text;\n"
"\n"
"  /* Get the double value from the model. */\n"
"  gtk_tree_model_get (tree_model, iter, (gint)data, &amp;d, -1);\n"
"  /* Now we can format the value ourselves. */\n"
"  text = g_strdup_printf (\"&percnt;.2f\", d);\n"
"  g_object_set (cell, \"text\", text, NULL);\n"
"  g_free (text);\n"
"}\n"
"\n"
"void\n"
"set_up_new_columns (GtkTreeView *myview)\n"
"{\n"
"  GtkCellRendererText *renderer;\n"
"  GtkTreeViewColumn *column;\n"
"  GtkListStore *mycolumns;\n"
"\n"
"  /* Create the data model and associate it with the given TreeView */\n"
"  mycolumns = gtk_list_store_new (N_COLUMNS, G_TYPE_DOUBLE);\n"
"  gtk_tree_view_set_model (myview, GTK_TREE_MODEL (mycolumns));\n"
"\n"
"  /* Create a GtkCellRendererText */\n"
"  renderer = gtk_cell_renderer_text_new ();\n"
"\n"
"  /* Create a new column that has a title (\"Example column\"),\n"
"   * uses the above created renderer that will render the double\n"
"   * value into text from the associated model's rows.\n"
"   */\n"
"  column = gtk_tree_view_column_new ();\n"
"  gtk_tree_view_column_set_title  (column, \"Example column\");\n"
"  renderer = gtk_cell_renderer_text_new ();\n"
"  gtk_tree_view_column_pack_start (column, renderer, TRUE);\n"
"\n"
"  /* Append the new column after the GtkTreeView's previous columns. */\n"
"  gtk_tree_view_append_column (GTK_TREE_VIEW (myview), column);\n"
"  /* Since we created the column by hand, we can set it up for our\n"
"   * needs, e.g. set its minimum and maximum width, etc.\n"
"   */\n"
"  /* Set up a custom function that will be called when the column content\n"
"   * is rendered. We use the func_data pointer as an index into our\n"
"   * model. This is convenient when using multi column lists.\n"
"   */\n"
"  gtk_tree_view_column_set_cell_data_func (column, renderer,\n"
"\t                                   my_cell_double_to_text,\n"
"                                           (gpointer)DOUBLE_COLUMN, NULL);\n"
"}\n"
msgstr ""

#: question_index.sgml:90(para)
msgid ""
"How does memory management work in GTK+? Should I free data returned from "
"functions?"
msgstr ""

#: question_index.sgml:927(para)
msgid "How do I hide the expander arrows in my tree view ?"
msgstr ""

#: question_index.sgml:931(para)
msgid ""
"Set the expander-column property of the tree view to a hidden column. See "
"gtk_tree_view_set_expander_column() and gtk_tree_view_column_set_visible()."
msgstr ""

#: question_index.sgml:939(title)
msgid "Using cairo with GTK+"
msgstr ""

#: question_index.sgml:942(para)
msgid "How do I use cairo to draw in GTK+ applications ?"
msgstr ""

#: question_index.sgml:946(para)
msgid ""
"The #GtkWidget::draw signal gets a ready-to-use cairo context as parameter "
"that you should use."
msgstr ""

#: question_index.sgml:950(para)
msgid ""
"All drawing in GTK+ is normally done in a draw handler, and GTK+ creates a "
"temporary pixmap for double-buffering the drawing. It is possible to turn "
"off double-buffering, with gtk_widget_set_double_buffered(), but this is not "
"ideal, since it can cause some flickering."
msgstr ""

#: question_index.sgml:961(para)
msgid ""
"Can I improve the performance of my application by using the Glitz or GL "
"backend of cairo ?"
msgstr ""

#: question_index.sgml:966(para)
msgid ""
"No. The GDK X11 backend uses the cairo X backend (and the other GDK backends "
"use their respective native cairo backends). The GTK+ developers believe "
"that the best way to improving the GDK drawing performance is to optimize "
"the cairo X backend and the relevant code paths in the X server that is uses "
"(mostly the Render extension)."
msgstr ""

#: question_index.sgml:97(para)
msgid ""
"See the documentation for #GObject and #GInitiallyUnowned. For #GObject note "
"specifically g_object_ref() and g_object_unref(). #GInitiallyUnowned is a "
"subclass of #GObject so the same points apply, except that it has a "
"\"floating\" state (explained in its documentation)."
msgstr ""

#: question_index.sgml:977(para)
msgid "Can I use cairo to draw on a #GdkPixbuf ?"
msgstr ""

#: question_index.sgml:981(para)
msgid ""
"No, at least not yet. The cairo image surface does not support the pixel "
"format used by GdkPixbuf."
msgstr ""

#: resources.sgml:104(ulink)
msgid "gtk-devel-list@gnome.org"
msgstr ""

#: resources.sgml:105(para)
msgid ""
"gtk-devel-list is for discussion of work on GTK+ itself, it is "
"<emphasis>not</emphasis> for asking questions about how to use GTK+ in "
"applications. gtk-devel-list is appropriate for discussion of patches, bugs, "
"proposed features, and so on."
msgstr ""

#: resources.sgml:115(ulink)
msgid "gtk-i18n-list@gnome.org"
msgstr ""

#: resources.sgml:116(para)
msgid ""
"gtk-i18n-list is for discussion of internationalization in GTK+; Pango is "
"the main focus of the list. Questions about the details of using Pango, and "
"discussion of proposed Pango patches or features, are all on topic."
msgstr ""

#: resources.sgml:125(ulink)
msgid "gtk-doc-list@gnome.org"
msgstr ""

#: resources.sgml:126(para)
msgid ""
"gtk-doc-list is for discussion of the <application>gtk-doc</application> "
"documentation system (used to document GTK+), and for work on the GTK+ "
"documentation."
msgstr ""

#: resources.sgml:13(refname) resources.sgml:7(refentrytitle)
#: resources.sgml:9(refmiscinfo)
msgid "Mailing lists and bug reports"
msgstr ""

#: resources.sgml:14(refpurpose)
msgid "Getting help with GTK+"
msgstr ""

#: resources.sgml:20(title)
msgid "Filing a bug report or feature request"
msgstr ""

#: resources.sgml:22(para)
msgid ""
"If you encounter a bug, misfeature, or missing feature in GTK+, please file "
"a bug report on <ulink url=\"http://bugzilla.gnome.org\">http://bugzilla."
"gnome.org</ulink>. We'd also appreciate reports of incomplete or misleading "
"information in the GTK+ documentation; file those against the \"docs\" "
"component of the \"gtk+\" product in Bugzilla."
msgstr ""

#: resources.sgml:31(para)
msgid ""
"Don't hesitate to file a bug report, even if you think we may know about it "
"already, or aren't sure of the details. Just give us as much information as "
"you have, and if it's already fixed or has already been discussed, we'll add "
"a note to that effect in the report."
msgstr ""

#: resources.sgml:38(para)
msgid ""
"The bug tracker should definitely be used for feature requests, it's not "
"only for bugs. We track all GTK+ development in Bugzilla, so it's the way to "
"be sure the GTK+ developers won't forget about an issue."
msgstr ""

#: resources.sgml:47(title)
msgid "Submitting Patches"
msgstr ""

#: resources.sgml:49(para)
msgid ""
"If you develop a bugfix or enhancement for GTK+, please file that in "
"Bugzilla as well. Bugzilla allows you to attach files; please attach a patch "
"generated by the <command>diff</command> utility, using the <option>-u</"
"option> option to make the patch more readable. All patches must be offered "
"under the terms of the GNU LGPL license, so be sure you are authorized to "
"give us the patch under those terms."
msgstr ""

#: resources.sgml:58(para)
msgid ""
"If you want to discuss your patch before or after developing it, mail <ulink "
"url=\"mailto:gtk-devel-list@gnome.org\">gtk-devel-list@gnome.org</ulink>. "
"But be sure to file the Bugzilla report as well; if the patch is only on the "
"list and not in Bugzilla, it's likely to slip through the cracks."
msgstr ""

#: resources.sgml:68(title)
msgid "Mailing lists"
msgstr ""

#: resources.sgml:70(para)
msgid ""
"There are several mailing lists dedicated to GTK+ and related libraries. "
"Discussion of GLib, Pango, and ATK in addition to GTK+ proper is welcome on "
"these lists. You can subscribe or view the archives of these lists on <ulink "
"url=\"http://mail.gnome.org\">http://mail.gnome.org</ulink>. If you aren't "
"subscribed to the list, any message you post to the list will be held for "
"manual moderation, which might take some days to happen."
msgstr ""

#: resources.sgml:85(ulink)
msgid "gtk-list@gnome.org"
msgstr ""

#: resources.sgml:86(para)
msgid ""
"gtk-list covers general GTK+ topics; questions about using GTK+ in programs, "
"GTK+ from a user standpoint, announcements of GTK+-related projects such as "
"themes or GTK+ modules would all be on-topic. The bulk of the traffic "
"consists of GTK+ programming questions."
msgstr ""

#: resources.sgml:95(ulink)
msgid "gtk-app-devel-list@gnome.org"
msgstr ""

#: resources.sgml:96(para)
msgid ""
"gtk-app-devel-list covers writing applications in GTK+. It's narrower in "
"scope than gtk-list, but the two lists overlap quite a bit. gtk-app-devel-"
"list is a good place to ask questions about GTK+ programming."
msgstr ""

#: running.sgml:100(para)
msgid ""
"A list of <link linkend=\"GDK-Debug-Options\">debug options</link> to turn "
"on in addition to those specified in the <envar>GDK_DEBUG</envar> "
"environment variable. This option is only available if GTK+ has been "
"configured with <option>--enable-debug=yes</option>."
msgstr ""
"要附加开启的<link linkend=\"GDK-Debug-Options\">调试选项</link>的列表指定在 "
"<envar>GDK_DEBUG</envar>环境变量中。此选项仅在使用<option>--enable-"
"debug=yes</option>后可用。"

#: running.sgml:109(replaceable) running.sgml:56(replaceable)
#: running.sgml:67(replaceable) running.sgml:98(replaceable)
msgid "options"
msgstr "选项"

#: running.sgml:109(systemitem)
msgid "--gdk-no-debug <placeholder-1/>"
msgstr "--gdk-no-debug <placeholder-1/>"

#: running.sgml:111(para)
msgid ""
"A list of <link linkend=\"GDK-Debug-Options\">debug options</link> to turn "
"off. This option is only available if GTK+ has been configured with "
"<option>--enable-debug=yes</option>."
msgstr ""
"关闭<link linkend=\"GTK-Debug-Options\">调试选项</link>的列表。此选项仅在使用"
"<option>--enable-debug=yes</option>后可用。"

#: running.sgml:121(title)
msgid "Environment variables"
msgstr "环境变量"

#: running.sgml:123(para)
msgid ""
"GTK+ inspects a number of environment variables in addition to standard "
"variables like <envar>LANG</envar>, <envar>PATH</envar>, <envar>HOME</envar> "
"or <envar>DISPLAY</envar>; mostly to determine paths to look for certain "
"files. The <link linkend=\"x11-envar\">X11</link>, <link linkend=\"win32-"
"envar\">Windows</link> and <link linkend=\"fb-envar\">Framebuffer</link> GDK "
"backends use some additional environment variables."
msgstr ""
"GTK+ 检查一些附加标准环境变量像<envar>LANG</envar>、<envar>PATH</envar>、"
"<envar>HOME</envar>或<envar>DISPLAY</envar>。主要是为了确定路径查找某些文件"
"<link linkend=\"x11-envar\">X11</link>、<link linkend=\"win32-envar\">视窗</"
"link>和<link linkend=\"fb-envar\">帧缓冲</link> GDK后端使用一些附加环境变量。"

#: running.sgml:13(refname) running.sgml:7(refentrytitle)
msgid "Running GTK+ Applications"
msgstr "运行 GTK+ 应用程序"

#: running.sgml:134(envar)
msgid "GTK_DEBUG"
msgstr "GTK_DEBUG"

#: running.sgml:136(para)
msgid ""
"If GTK+ has been configured with <option>--enable-debug=yes</option>, this "
"variable can be set to a list of debug options, which cause GTK+ to print "
"out different types of debugging information. <placeholder-1/> The special "
"value <literal>all</literal> can be used to turn on all debug options."
msgstr ""
"如果GTK+ 用<option>--enable-debug=yes</option>配置过，那这个变量可以设置为调"
"试选项的列表，让GTK+输出不同类型的调试信息。<placeholder-1/><literal>all</"
"literal>指定的值可以用来开启所有调试选项。"

#: running.sgml:14(refpurpose)
msgid "How to run and debug your GTK+ application"
msgstr "如何运行并调试您的 GTK+ 应用程序"

#: running.sgml:142(term) running.sgml:338(term)
msgid "misc"
msgstr "misc"

#: running.sgml:143(para) running.sgml:339(para)
msgid "Miscellaneous information"
msgstr "杂项信息"

#: running.sgml:146(term)
msgid "plugsocket"
msgstr "plugsocket"

#: running.sgml:147(para)
msgid "Cross-process embedding"
msgstr "跨进程嵌入"

#: running.sgml:150(term)
msgid "text"
msgstr "text"

#: running.sgml:151(para)
msgid "Text widget internals"
msgstr "文本控件内部"

#: running.sgml:154(term)
msgid "tree"
msgstr "tree"

#: running.sgml:155(para)
msgid "Tree widget internals"
msgstr "树控件内部"

#: running.sgml:158(term)
msgid "updates"
msgstr "updates"

#: running.sgml:159(para)
msgid "Visual feedback about window updates"
msgstr "关于窗口更新的可视反馈"

#: running.sgml:162(term)
msgid "keybindings"
msgstr "keybindings"

#: running.sgml:163(para)
msgid "Keybindings"
msgstr "键绑定"

#: running.sgml:166(term) running.sgml:358(term)
msgid "multihead"
msgstr "multihead"

#: running.sgml:167(para)
msgid "Working on multiple displays"
msgstr "在多显示上工作"

#: running.sgml:171(para)
msgid "Loading of modules"
msgstr "组件载入"

#: running.sgml:175(para)
msgid "Size allocation"
msgstr "大小分配"

#: running.sgml:178(term)
msgid "icontheme"
msgstr "icontheme"

#: running.sgml:179(para)
msgid "Icon themes"
msgstr "图标主题"

#: running.sgml:182(term)
msgid "printing"
msgstr "printing"

#: running.sgml:183(para)
msgid "Printing support"
msgstr "打印支持"

#: running.sgml:186(term)
msgid "builder"
msgstr "builder"

#: running.sgml:187(para)
msgid "GtkBuilder support"
msgstr "GtkBuilder支持"

#: running.sgml:197(envar)
msgid "GTK_MODULES"
msgstr "GTK_MODULES"

#: running.sgml:199(para)
msgid ""
"A list of modules to load. Note that GTK+ also allows to specify modules to "
"load via a commandline option (<option>--gtk-module</option>) and with the "
"<literal>gtk-modules</literal> setting."
msgstr ""
"要载入模块的列表。注意GTK+也允许通过一个命令行选项（<option>--gtk-module</"
"option>）和<literal>gtk-modules</literal>设置指定要载入的模块。"

#: running.sgml:20(title)
msgid "Running and debugging GTK+ Applications"
msgstr "运行并调试GTK+应用程序"

#: running.sgml:202(warning)
msgid ""
"Note that this environment variable is read by GTK+ 2.x too, which may not "
"have the same set of modules available for loading."
msgstr ""
"注意这个环境变量也被 GTK+ 2.X 读取，它可能没有用于载入的相同模块集可用。"

#: running.sgml:209(envar)
msgid "GTK_PATH"
msgstr "GTK_PATH"

#: running.sgml:211(para)
msgid ""
"Specifies a list of directories to search when GTK+ is looking for "
"dynamically loaded objects such as the modules specified by "
"<envar>GTK_MODULES</envar>, theme engines, input method modules, file system "
"backends and print backends. If the path to the dynamically loaded object is "
"given as an absolute path name, then GTK+ loads it directly. Otherwise, GTK+ "
"goes in turn through the directories in <envar>GTK_PATH</envar>, followed by "
"the directory <filename>.gtk-3.0</filename> in the user's home directory, "
"followed by the system default directory, which is "
"<filename><replaceable>libdir</replaceable>/gtk-3.0/modules</filename>. (If "
"<envar>GTK_EXE_PREFIX</envar> is defined, <replaceable>libdir</replaceable> "
"is <filename>$GTK_EXE_PREFIX/lib</filename>. Otherwise it is the libdir "
"specified when GTK+ was configured, usually <filename>/usr/lib</filename>, "
"or <filename>/usr/local/lib</filename>.) For each directory in this list, GTK"
"+ actually looks in a subdirectory <filename><replaceable>directory</"
"replaceable>/<replaceable>version</replaceable>/<replaceable>host</"
"replaceable>/<replaceable>type</replaceable></filename> Where "
"<replaceable>version</replaceable> is derived from the version of GTK+ (use "
"<literal>pkg-config --variable=gtk_binary_version gtk+-3.0</literal> to "
"determine this from a script), <replaceable>host</replaceable> is the "
"architecture on which GTK+ was built. (use <literal>pkg-config --"
"variable=gtk_host gtk+-3.0</literal> to determine this from a script), and "
"<replaceable>type</replaceable> is a directory specific to the type of "
"modules; currently it can be <literal>modules</literal>, <literal>engines</"
"literal>, <literal>immodules</literal>, <literal>filesystems</literal> or "
"<literal>printbackends</literal>, corresponding to the types of modules "
"mentioned above. Either <replaceable>version</replaceable>, "
"<replaceable>host</replaceable>, or both may be omitted. GTK+ looks first in "
"the most specific directory, then in directories with fewer components. The "
"components of GTK_PATH are separated by the ':' character on Linux and Unix, "
"and the ';' character on Windows."
msgstr ""
"指定搜索目录列表，GTK+ 会在这里寻找如<envar>GTK_MODULES</envar>指定的模块、主"
"题引擎、输入法模块、文件系统后端和打印后端等的动态载入模块。如果给予的是绝对"
"路径名，GTK+ 会直接载入。否则 GTK+ 依次经过<envar>GTK_PATH</envar>中指定的、"
"其次是用户主目录中<filename>.gtk-3.0</filename>中指定的、再次是系统默认目录"
"<filename><replaceable>libdir</replaceable>/gtk-3.0/modules</filename>。（如"
"果已定义<envar>GTK_EXE_PREFIX</envar>，<replaceable>libdir</replaceable>将为"
"<filename>$GTK_EXE_PREFIX/lib</filename>。 否则当 GTK+ 被配置，就是指定的 "
"libdir ，通常是<filename>/usr/lib</filename>或<filename>/usr/local/lib</"
"filename>。）遍历在此列表中的目录，GTK+ 实际在一个子目录 "
"“<filename><replaceable>目录</replaceable>/<replaceable>版本</replaceable>/"
"<replaceable>主机</replaceable>/<replaceable>类型</replaceable></filename>” "
"中察看， <replaceable>版本</replaceable>是 GTK+ 的版本（使用<literal>pkg-"
"config --variable=gtk_binary_version gtk+-3.0</literal>可以看到），"
"<replaceable>主机</replaceable>是GTK+编译时的架构。 （使用<literal>pkg-"
"config --variable=gtk_host gtk+-3.0</literal>可以看到），<replaceable>类型</"
"replaceable>是一个具体到模块类型的目录。目前它可以是 <literal>modules</"
"literal>、 <literal>engines</literal>、 <literal>immodules</literal>、"
"<literal>filesystems</literal>或 <literal>printbackends</literal>，对应于上面"
"提到的模块的类型。 任何<replaceable>版本</replaceable>、<replaceable>主机</"
"replaceable>或是两者都可以被省略。 GTK+ 察看第一个最具体的目录而后是有较少组"
"件的目录。GTK_PATH 的组件在 UNIX/Linux 由 ‘:’ 分隔，在视窗上是 ‘;’。"

#: running.sgml:23(title)
msgid "Common commandline options"
msgstr "通用命令行选项"

#: running.sgml:248(warning)
msgid ""
"Note that this environment variable is read by GTK+ 2.x too, which makes it "
"unsuitable for setting it system-wide (or session-wide), since doing so will "
"cause either GTK+ 2.x applications or GTK+ 3 applications to see "
"incompatible modules."
msgstr ""
"注意此环境变量也被GTK+ 2.X 读取，使它不适合用于设置它系统范围（或会话范围），"
"这会造成 GTK+ 2.x 程序和 GTK+ 3 程序察看互不兼容的模块。"

#: running.sgml:25(para)
msgid ""
"All GTK+ applications support a number of standard commandline options. "
"These are removed from <literal>argv</literal> by gtk_init(). Modules may "
"parse and remove further options. The <link linkend=\"x11-cmdline\">X11</"
"link> and <link linkend=\"win32-cmdline\">Windows</link> GDK backends parse "
"some additional commandline options."
msgstr ""
"所有 GTK+ 应用程序支持一些标准命令行选项。它们被 gtk_init() 从 "
"<literal>argv</literal>中移除。模块可以解析并进一步移除选项。<link linkend="
"\"x11-cmdline\">X11</link>和<link linkend=\"win32-cmdline\">视窗</link> GDK后"
"端解析一些附加命令行选项。"

#: running.sgml:257(envar)
msgid "GTK_IM_MODULE"
msgstr "GTK_IM_MODULE"

#: running.sgml:259(para)
msgid ""
"Specifies an IM module to use in preference to the one determined from the "
"locale. If this isn't set and you are running on the system that enables "
"<literal>XSETTINGS</literal> and has a value in <literal>Gtk/IMModule</"
"literal>, that will be used for the default IM module."
msgstr ""
"使用从locale中确定的、在首选项中指定的一个输入法模块。如果它没有被设置而且你"
"在一个应用了<literal>XSETTINGS</literal>并且有在<literal>Gtk/IMModule</"
"literal>中的一个值的系统上运行，将使用默认输入法模块。"

#: running.sgml:269(envar)
msgid "GTK_IM_MODULE_FILE"
msgstr "GTK_IM_MODULE_FILE"

#: running.sgml:271(para)
msgid ""
"Specifies the file listing the IM modules to load. This environment variable "
"the default value <filename><replaceable>libdir</replaceable>/gtk-3.0/3.0.0/"
"immodules.cache</filename> (<replaceable>libdir</replaceable> has the same "
"meaning here as explained for <envar>GTK_PATH</envar>)."
msgstr ""
"指定要载入的输入法文件列表。该环境变量的默认值为"
"<filename><replaceable>libdir</replaceable>/gtk-3.0/3.0.0/immodules.cache</"
"filename>（<replaceable>libdir</replaceable>在这里有正如前面<envar>GTK_PATH</"
"envar>解释的相同含义）。"

#: running.sgml:277(para)
msgid ""
"The <filename>immodules.cache</filename> file is generated by the "
"<command>gtk-query-immodules-3.0</command> utility."
msgstr ""
"<filename>immodules.cache</filename>文件由<command>gtk-query-immodules-3.0</"
"command>实用程序生成。"

#: running.sgml:281(warning)
msgid ""
"Note that this environment variable is read by GTK+ 2.x too, which makes it "
"unsuitable for setting it system-wide (or session-wide), since doing so will "
"cause either GTK+ 2.x applications or GTK+ 3 applications to see the wrong "
"list of IM modules."
msgstr ""
"注意这个环境变量也被 GTK+ 2.X 读取，使它不适合用于设置它系统范围（或会话范"
"围），这会造成 GTK+ 2.x 程序和 GTK+ 3 程序察看错误的输入法模块列表。"

#: running.sgml:290(envar)
msgid "GTK_EXE_PREFIX"
msgstr "GTK_EXE_PREFIX"

#: running.sgml:292(para)
msgid ""
"If set, GTK+ uses <filename>$GTK_EXE_PREFIX/lib</filename> instead of the "
"libdir configured when GTK+ was compiled."
msgstr ""
"如果设置，当 GTK+ 编译，GTK+ 使用<filename>$GTK_EXE_PREFIX/lib</filename>而不"
"是配置的 libdir。"

#: running.sgml:299(envar)
msgid "GTK_DATA_PREFIX"
msgstr "GTK_DATA_PREFIX"

#: running.sgml:301(para)
msgid ""
"If set, makes GTK+ use <filename>$GTK_DATA_PREFIX</filename> instead of the "
"prefix configured when GTK+ was compiled."
msgstr ""
"如果设置，当 GTK+ 编译，让 GTK+ 使用<filename>$GTK_DATA_PREFIX</filename>而不"
"是配置的 prefix。"

#: running.sgml:307(para)
msgid ""
"The following environment variables are used by GdkPixbuf, GDK or Pango, not "
"by GTK+ itself, but we list them here for completeness nevertheless."
msgstr ""
"以下环境变量由 GdkPixbuf、 GDK 和 Pango 使用，并非 GTK+ 本身，但我们为兼顾完"
"整性在这里列出它们。"

#: running.sgml:314(envar)
msgid "GDK_PIXBUF_MODULE_FILE"
msgstr "GDK_PIXBUF_MODULE_FILE"

#: running.sgml:316(para)
msgid ""
"Specifies the file listing the GdkPixbuf loader modules to load. This "
"environment variable overrides the default value "
"<filename><replaceable>libdir</replaceable>/gtk-3.0/3.0.0/loaders.cache</"
"filename> (<replaceable>libdir</replaceable> is the sysconfdir specified "
"when GTK+ was configured, usually <filename>/usr/local/lib</filename>.)"
msgstr ""
"指定 GdkPixbuf 载入器模块要载入的文件列表。该环境变量覆盖默认值"
"<filename><replaceable>libdir</replaceable>/gtk-3.0/3.0.0/loaders.cache</"
"filename>（只要GTK+被配置，<replaceable>libdir</replaceable>就是 sysconfdir指"
"定的，通常是<filename>/usr/local/lib</filename>。）"

#: running.sgml:323(para)
msgid ""
"The <filename>loaders.cache</filename> file is generated by the <command>gdk-"
"pixbuf-query-loaders</command> utility."
msgstr ""
"<filename>loaders.cache</filename>文件是由<command>gdk-pixbuf-query-loaders</"
"command>实用程序生成的。"

#: running.sgml:330(envar)
msgid "GDK_DEBUG"
msgstr "GDK_DEBUG"

#: running.sgml:332(para)
msgid ""
"If GTK+ has been configured with <option>--enable-debug=yes</option>, this "
"variable can be set to a list of debug options, which cause GDK to print out "
"different types of debugging information. <placeholder-1/> The special value "
"<literal>all</literal> can be used to turn on all debug options."
msgstr ""
"如果GTK+ 用<option>--enable-debug=yes</option>配置过，这个变量可以设置调试选"
"项的列表，让 GDK 输出不同类型的调试信息<placeholder-1/>。<literal>all</"
"literal>指定的值可以用来开启所有调试选项。"

#: running.sgml:342(term)
msgid "events"
msgstr "events"

#: running.sgml:343(para)
msgid "Show all events received by GDK"
msgstr "显示所有GDK接收的事件"

#: running.sgml:346(term)
msgid "dnd"
msgstr "dnd"

#: running.sgml:347(para)
msgid "Information about drag-and-drop"
msgstr "关于拖放的信息"

#: running.sgml:35(systemitem)
msgid "--gtk-module <placeholder-1/>"
msgstr "--gtk-module <placeholder-1/>"

#: running.sgml:350(term)
msgid "xim"
msgstr "xim"

#: running.sgml:351(para)
msgid "Information about XIM support"
msgstr "关于XIM支持的信息"

#: running.sgml:354(term)
msgid "nograbs"
msgstr "nograbs"

#: running.sgml:355(para)
msgid "Turn off all pointer and keyboard grabs"
msgstr "关闭所有指针和键盘抓取（grabs）"

#: running.sgml:359(para)
msgid "Information related to multiple screens"
msgstr "有关多屏幕的信息"

#: running.sgml:362(term)
msgid "xinerama"
msgstr "xinerama"

#: running.sgml:363(para)
msgid "Simulate a multi-monitor setup"
msgstr "模拟多显示器设置"

#: running.sgml:366(term)
msgid "cursor"
msgstr "cursor"

#: running.sgml:367(para)
msgid "Information about cursor objects (only win32)"
msgstr "关于光标对象的信息（仅 win32）"

#: running.sgml:37(para)
msgid ""
"A list of modules to load in addition to those specified in the "
"<envar>GTK_MODULES</envar> environment variable and the <literal>gtk-"
"modules</literal> setting."
msgstr ""
"载入附加组件的列表，他们是在<envar>GTK_MODULES</envar> 环境变量中和"
"<literal>gtk-modules</literal>设置中指定的。"

#: running.sgml:370(term)
msgid "draw"
msgstr "draw"

#: running.sgml:371(para)
msgid "Information about drawing operations (only win32)"
msgstr "关于绘图操作的信息（仅 win32）"

#: running.sgml:374(term)
msgid "eventloop"
msgstr "eventloop"

#: running.sgml:375(para)
msgid "Information about event loop operation (mostly Quartz)"
msgstr "关于事件循环的信息（大多为 Quartz）"

#: running.sgml:385(envar)
msgid "GDK_BACKEND"
msgstr "GDK_BACKEND"

#: running.sgml:387(para)
msgid ""
"If set, selects the GDK backend to use. Selecting a backend requires that "
"GTK is compiled with support for that backend. The following backends can be "
"selected: <placeholder-1/> For more information about selecting backends, "
"see the gdk_display_manager_get() function."
msgstr ""
"如果设置，选择要使用的 GDK 后端。选择一个需要它的后端，GTK 支持这个后端。可以"
"选择以下后端：<placeholder-1/>关于选择后端的更多信息，参见 "
"gdk_display_manager_get() 函数。"

#: running.sgml:393(term)
msgid "quartz"
msgstr "quartz"

#: running.sgml:394(para)
msgid "Selects the native Quartz backend"
msgstr "用原生 Quartz 后端"

#: running.sgml:398(term)
msgid "win32"
msgstr "win32"

#: running.sgml:399(para)
msgid "Selects the native backend for Microsoft Windows"
msgstr "微软视窗的原生后端"

#: running.sgml:403(term)
msgid "x11"
msgstr "x11"

#: running.sgml:404(para)
msgid "Selects the native backend for connecting to X11 servers."
msgstr "用原生的后端连接到X11服务器"

#: running.sgml:413(envar)
msgid "GDK_SYNCHRONIZE"
msgstr "GDK_SYNCHRONIZE"

#: running.sgml:415(para)
msgid ""
"If set, GDK makes all X requests synchronously. This is a useful option for "
"debugging, but it will slow down the performance considerably."
msgstr ""
"如果设置，GDK 会让所有 X 请求成为交互式的（译注：非多线程的）。这对调试很有"
"用，但会大大减慢执行速度。"

#: running.sgml:422(title)
msgid "<envar>XDG_DATA_HOME</envar>, <envar>XDG_DATA_DIRS</envar>"
msgstr "<envar>XDG_DATA_HOME</envar>, <envar>XDG_DATA_DIRS</envar>"

#: running.sgml:424(para)
msgid ""
"GTK+ uses these environment variables to locate icon themes and MIME "
"information. For more information, see <ulink url=\"http://freedesktop.org/"
"Standards/icon-theme-spec\">Icon Theme Specification</ulink>, the <ulink url="
"\"http://freedesktop.org/Standards/shared-mime-info-spec\">Shared MIME-info "
"Database</ulink> and the <ulink url=\"http://freedesktop.org/Standards/"
"basedir-spec\">Base Directory Specification</ulink>."
msgstr ""
"GTK+ 使用这些环境变量找到图标主题和 MIME 信息。更多信息参见<ulink url="
"\"http://freedesktop.org/Standards/icon-theme-spec\">图标主题规范</ulink>、"
"<ulink url=\"http://freedesktop.org/Standards/shared-mime-info-spec\">共享的"
"MIME信息数据库</ulink> 和<ulink url=\"http://freedesktop.org/Standards/"
"basedir-spec\">基本目录规范</ulink>。"

#: running.sgml:434(envar)
msgid "DESKTOP_STARTUP_ID"
msgstr "DESKTOP_STARTUP_ID"

#: running.sgml:436(para)
msgid ""
"GTK+ uses this environment variable to provide startup notification "
"according to the <ulink url=\"http://standards.freedesktop.org/startup-"
"notification-spec/startup-notification-latest.txt\">Startup Notification "
"Spec</ulink>. Following the specification, GTK+ unsets this variable after "
"reading it (to keep it from leaking to child processes). So, if you need its "
"value for your own purposes, you have to read it before calling gtk_init()."
msgstr ""
"GTK+ 根据<ulink url=\"http://standards.freedesktop.org/startup-notification-"
"spec/startup-notification-latest.txt\">启动通知规范</ulink>使用这些变量来提供"
"启动通知。根据规范，GTK+ 在读取这个变量后反置（unset）它（防止泄漏到子进"
"程）。所以，如果你需要它的值达到你的目的，你应该在调用 gtk_init() 前读取。"

#: running.sgml:45(systemitem)
msgid "--g-fatal-warnings"
msgstr "--g-fatal-warnings"

#: running.sgml:47(para)
msgid ""
"Make GTK+ abort on all warnings. This is useful to stop on the first warning "
"in a debugger, if your application is printing multiple warnings. It's "
"almost always best to start debugging with the first warning that occurs."
msgstr ""
"有任何警告，就让 GTK+ 终止。在调试器里，让程序在第一次警告时停止，这很有用。"
"如果您的应用程序输出了多个警告。这是在第一次警告发生时最好的启动调试的办法。"

#: running.sgml:56(systemitem)
msgid "--gtk-debug <placeholder-1/>"
msgstr "--gtk-debug <placeholder-1/>"

#: running.sgml:58(para)
msgid ""
"A list of <link linkend=\"GTK-Debug-Options\">debug options</link> to turn "
"on in addition to those specified in the <envar>GTK_DEBUG</envar> "
"environment variable. This option is only available if GTK+ has been "
"configured with <option>--enable-debug=yes</option>."
msgstr ""
"附加开启<link linkend=\"GTK-Debug-Options\">调试选项</link>的一个列表，它们"
"在 GTK_DEBUG 环境变量中指定。此选项仅在使用<option>--enable-debug=yes</"
"option>后可用。"

#: running.sgml:67(systemitem)
msgid "--gtk-no-debug <placeholder-1/>"
msgstr "--gtk-no-debug <placeholder-1/>"

#: running.sgml:69(para)
msgid ""
"A list of <link linkend=\"GTK-Debug-Options\">debug options</link> to turn "
"off. This option is only available if GTK+ has been configured with "
"<option>--enable-debug=yes</option>."
msgstr ""
"要附加开启的<link linkend=\"GDK-Debug-Options\">调试选项</link>的列表指定在 "
"<envar>GDK_DEBUG</envar>环境变量中。此选项仅在使用<option>--enable-"
"debug=yes</option>后可用。"

#: running.sgml:76(para)
msgid ""
"The following options are really used by GDK, not by GTK+, but we list them "
"here for completeness nevertheless."
msgstr "以下选项由 GDK 使用，不是 GTK+，但是兼顾完整我们在这里列出它们。"

#: running.sgml:82(replaceable)
msgid "class"
msgstr "类"

#: running.sgml:82(systemitem)
msgid "--class <placeholder-1/>"
msgstr "--class <placeholder-1/>"

#: running.sgml:84(para)
msgid "Sets the program class; see gdk_set_program_class()."
msgstr "置程序类；参见 gdk_set_program_class()。"

#: running.sgml:90(replaceable)
msgid "name"
msgstr "名称"

#: running.sgml:90(systemitem)
msgid "--name <placeholder-1/>"
msgstr "--name <placeholder-1/>"

#: running.sgml:92(para)
msgid "Sets the program name."
msgstr "置程序名称。"

#: running.sgml:98(systemitem)
msgid "--gdk-debug <placeholder-1/>"
msgstr "--gdk-debug <placeholder-1/>"

#: text_widget.sgml:104(para)
msgid ""
"Text buffers always contain at least one line, but may be empty (that is, "
"buffers can contain zero characters). The last line in the text buffer never "
"ends in a line separator (such as newline); the other lines in the buffer "
"always end in a line separator. Line separators count as characters when "
"computing character counts and character offsets. Note that some Unicode "
"line separators are represented with multiple bytes in UTF-8, and the two-"
"character sequence \"\\r\\n\" is also considered a line separator."
msgstr ""

#: text_widget.sgml:119(title) tree_widget.sgml:242(title)
msgid "Simple Example"
msgstr ""

#: text_widget.sgml:121(para)
msgid ""
"The simplest usage of #GtkTextView might look like this: <placeholder-1/> In "
"many cases it's also convenient to first create the buffer with "
"gtk_text_buffer_new(), then create a widget for that buffer with "
"gtk_text_view_new_with_buffer(). Or you can change the buffer the widget "
"displays after the widget is created with gtk_text_view_set_buffer()."
msgstr ""

#: text_widget.sgml:123(programlisting)
#, no-wrap
msgid ""
"\n"
"  GtkWidget *view;\n"
"  GtkTextBuffer *buffer;\n"
"\n"
"  view = gtk_text_view_new ();\n"
"\n"
"  buffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW (view));\n"
"\n"
"  gtk_text_buffer_set_text (buffer, \"Hello, this is some text\", -1);\n"
"\n"
"  /* Now you might put the view in a container and display it on the\n"
"   * screen; when the user edits the text, signals on the buffer\n"
"   * will be emitted, such as \"changed\", \"insert_text\", and so on.\n"
"   */\n"
msgstr ""

#: text_widget.sgml:13(refname) text_widget.sgml:7(refentrytitle)
msgid "Text Widget Overview"
msgstr ""

#: text_widget.sgml:14(refpurpose)
msgid "Overview of GtkTextBuffer, GtkTextView, and friends"
msgstr ""

#: text_widget.sgml:147(title)
msgid "Example of Changing Text Attributes"
msgstr ""

#: text_widget.sgml:149(para)
msgid ""
"There are two ways to affect text attributes in #GtkTextView. You can change "
"the default attributes for a given #GtkTextView, and you can apply tags that "
"change the attributes for a region of text. For text features that come from "
"the theme &mdash; such as font and foreground color &mdash; use standard "
"#GtkWidget functions such as gtk_widget_modify_font() or "
"gtk_widget_modify_text(). For other attributes there are dedicated methods "
"on #GtkTextView such as gtk_text_view_set_tabs(). <placeholder-1/>"
msgstr ""

#: text_widget.sgml:159(programlisting)
#, no-wrap
msgid ""
"\n"
"  GtkWidget *view;\n"
"  GtkTextBuffer *buffer;\n"
"  GtkTextIter start, end;\n"
"  PangoFontDescription *font_desc;\n"
"  GdkColor color;\n"
"  GtkTextTag *tag;\n"
"\n"
"  view = gtk_text_view_new ();\n"
"\n"
"  buffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW (view));\n"
"\n"
"  gtk_text_buffer_set_text (buffer, \"Hello, this is some text\", -1);\n"
"\n"
"  /* Change default font throughout the widget */\n"
"  font_desc = pango_font_description_from_string (\"Serif 15\");\n"
"  gtk_widget_modify_font (view, font_desc);\n"
"  pango_font_description_free (font_desc);\n"
"\n"
"  /* Change default color throughout the widget */\n"
"  gdk_color_parse (\"green\", &amp;color);\n"
"  gtk_widget_modify_text (view, GTK_STATE_NORMAL, &amp;color);\n"
"\n"
"  /* Change left margin throughout the widget */\n"
"  gtk_text_view_set_left_margin (GTK_TEXT_VIEW (view), 30);\n"
"\n"
"  /* Use a tag to change the color for just one part of the widget */\n"
"  tag = gtk_text_buffer_create_tag (buffer, \"blue_foreground\",\n"
"\t   \t\t            \"foreground\", \"blue\", NULL);  \n"
"  gtk_text_buffer_get_iter_at_offset (buffer, &amp;start, 7);\n"
"  gtk_text_buffer_get_iter_at_offset (buffer, &amp;end, 12);\n"
"  gtk_text_buffer_apply_tag (buffer, tag, &amp;start, &amp;end);\n"
msgstr ""

#: text_widget.sgml:18(title)
msgid "Conceptual Overview"
msgstr ""

#: text_widget.sgml:195(para)
msgid ""
"The <application>gtk-demo</application> application that comes with GTK+ "
"contains more example code for #GtkTextView."
msgstr ""

#: text_widget.sgml:20(para)
msgid ""
"GTK+ has an extremely powerful framework for multiline text editing. The "
"primary objects involved in the process are #GtkTextBuffer, which represents "
"the text being edited, and #GtkTextView, a widget which can display a "
"#GtkTextBuffer. Each buffer can be displayed by any number of views."
msgstr ""

#: text_widget.sgml:27(para)
msgid ""
"One of the important things to remember about text in GTK+ is that it's in "
"the UTF-8 encoding. This means that one character can be encoded as multiple "
"bytes. Character counts are usually referred to as <firstterm>offsets</"
"firstterm>, while byte counts are called <firstterm>indexes</firstterm>. If "
"you confuse these two, things will work fine with ASCII, but as soon as your "
"buffer contains multibyte characters, bad things will happen."
msgstr ""

#: text_widget.sgml:37(para)
msgid ""
"Text in a buffer can be marked with <firstterm>tags</firstterm>. A tag is an "
"attribute that can be applied to some range of text. For example, a tag "
"might be called \"bold\" and make the text inside the tag bold. However, the "
"tag concept is more general than that; tags don't have to affect appearance. "
"They can instead affect the behavior of mouse and key presses, \"lock\" a "
"range of text so the user can't edit it, or countless other things. A tag is "
"represented by a #GtkTextTag object. One #GtkTextTag can be applied to any "
"number of text ranges in any number of buffers."
msgstr ""

#: text_widget.sgml:48(para)
msgid ""
"Each tag is stored in a #GtkTextTagTable. A tag table defines a set of tags "
"that can be used together. Each buffer has one tag table associated with it; "
"only tags from that tag table can be used with the buffer. A single tag "
"table can be shared between multiple buffers, however."
msgstr ""

#: text_widget.sgml:55(para)
msgid ""
"Tags can have names, which is convenient sometimes (for example, you can "
"name your tag that makes things bold \"bold\"), but they can also be "
"anonymous (which is convenient if you're creating tags on-the-fly)."
msgstr ""

#: text_widget.sgml:61(para)
msgid ""
"Most text manipulation is accomplished with <firstterm>iterators</"
"firstterm>, represented by a #GtkTextIter. An iterator represents a position "
"between two characters in the text buffer. #GtkTextIter is a struct designed "
"to be allocated on the stack; it's guaranteed to be copiable by value and "
"never contain any heap-allocated data. Iterators are not valid indefinitely; "
"whenever the buffer is modified in a way that affects the number of "
"characters in the buffer, all outstanding iterators become invalid. (Note "
"that deleting 5 characters and then reinserting 5 still invalidates "
"iterators, though you end up with the same number of characters you pass "
"through a state with a different number)."
msgstr ""

#: text_widget.sgml:74(para)
msgid ""
"Because of this, iterators can't be used to preserve positions across buffer "
"modifications. To preserve a position, the #GtkTextMark object is ideal. You "
"can think of a mark as an invisible cursor or insertion point; it floats in "
"the buffer, saving a position. If the text surrounding the mark is deleted, "
"the mark remains in the position the text once occupied; if text is inserted "
"at the mark, the mark ends up either to the left or to the right of the new "
"text, depending on its <firstterm>gravity</firstterm>. The standard text "
"cursor in left-to-right languages is a mark with right gravity, because it "
"stays to the right of inserted text."
msgstr ""

#: text_widget.sgml:86(para)
msgid ""
"Like tags, marks can be either named or anonymous. There are two marks built-"
"in to #GtkTextBuffer; these are named <literal>\"insert\"</literal> and "
"<literal>\"selection_bound\"</literal> and refer to the insertion point and "
"the boundary of the selection which is not the insertion point, "
"respectively. If no text is selected, these two marks will be in the same "
"position. You can manipulate what is selected and where the cursor appears "
"by moving these marks around. <placeholder-1/>"
msgstr ""

#: text_widget.sgml:95(para)
msgid ""
"If you want to place the cursor in response to a user action, be sure to use "
"gtk_text_buffer_place_cursor(), which moves both at once without causing a "
"temporary selection (moving one then the other temporarily selects the range "
"in between the old and new positions)."
msgstr ""

#: tree_widget.sgml:104(para)
msgid ""
"Notice that the last argument is -1. This is always done because this is a "
"variable-argument function and it needs to know when to stop processing "
"arguments. It can be used to set the data in any or all columns in a given "
"row."
msgstr ""

#: tree_widget.sgml:110(para)
msgid ""
"The third argument to gtk_tree_store_append() is the parent iterator. It is "
"used to add a row to a GtkTreeStore as a child of an existing row. This "
"means that the new row will only be visible when its parent is visible and "
"in its expanded state. Consider the following example:"
msgstr ""

#: tree_widget.sgml:13(refname) tree_widget.sgml:7(refentrytitle)
msgid "Tree and List Widget Overview"
msgstr ""

#: tree_widget.sgml:14(refpurpose)
msgid "Overview of GtkTreeModel, GtkTreeView, and friends"
msgstr ""

#: tree_widget.sgml:145(title)
msgid "Creating the view component"
msgstr ""

#: tree_widget.sgml:146(para)
msgid ""
"While there are several different models to choose from, there is only one "
"view widget to deal with. It works with either the list or the tree store. "
"Setting up a #GtkTreeView is not a difficult matter. It needs a "
"#GtkTreeModel to know where to retrieve its data from."
msgstr ""

#: tree_widget.sgml:160(title)
msgid "Columns and cell renderers"
msgstr ""

#: tree_widget.sgml:161(para)
msgid ""
"Once the #GtkTreeView widget has a model, it will need to know how to "
"display the model. It does this with columns and cell renderers."
msgstr ""

#: tree_widget.sgml:165(para)
msgid ""
"Cell renderers are used to draw the data in the tree model in a way. There "
"are a number of cell renderers that come with GTK+ 2.x, including the "
"#GtkCellRendererText, #GtkCellRendererPixbuf and the #GtkCellRendererToggle. "
"It is relatively easy to write a custom renderer."
msgstr ""

#: tree_widget.sgml:172(para)
msgid ""
"A #GtkTreeViewColumn is the object that GtkTreeView uses to organize the "
"vertical columns in the tree view. It needs to know the name of the column "
"to label for the user, what type of cell renderer to use, and which piece of "
"data to retrieve from the model for a given row."
msgstr ""

#: tree_widget.sgml:178(programlisting)
#, no-wrap
msgid ""
"\n"
"GtkCellRenderer *renderer;\n"
"GtkTreeViewColumn *column;\n"
"\n"
"renderer = gtk_cell_renderer_text_new ();\n"
"column = gtk_tree_view_column_new_with_attributes (\"Author\",\n"
"                                                   renderer,\n"
"                                                   \"text\", AUTHOR_COLUMN,\n"
"                                                   NULL);\n"
"gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n"
msgstr ""

#: tree_widget.sgml:18(title)
msgid "Overview"
msgstr ""

#: tree_widget.sgml:189(para)
msgid ""
"At this point, all the steps in creating a displayable tree have been "
"covered. The model is created, data is stored in it, a tree view is created "
"and columns are added to it."
msgstr ""

#: tree_widget.sgml:19(para)
msgid ""
"To create a tree or list in GTK+, use the #GtkTreeModel interface in "
"conjunction with the #GtkTreeView widget. This widget is designed around a "
"<firstterm>Model/View/Controller</firstterm> design and consists of four "
"major parts: <placeholder-1/> The <emphasis>View</emphasis> is composed of "
"the first three objects, while the last is the <emphasis>Model</emphasis>. "
"One of the prime benefits of the MVC design is that multiple views can be "
"created of a single model. For example, a model mapping the file system "
"could be created for a file manager. Many views could be created to display "
"various parts of the file system, but only one copy need be kept in memory."
msgstr ""

#: tree_widget.sgml:197(title)
msgid "Selection handling"
msgstr ""

#: tree_widget.sgml:198(para)
msgid ""
"Most applications will need to not only deal with displaying data, but also "
"receiving input events from users. To do this, simply get a reference to a "
"selection object and connect to the #GtkTreeSelection::changed signal."
msgstr ""

#: tree_widget.sgml:217(para)
msgid "Then to retrieve data for the row selected:"
msgstr ""

#: tree_widget.sgml:243(para)
msgid ""
"Here is a simple example of using a #GtkTreeView widget in context of the "
"other widgets. It simply creates a simple model and view, and puts them "
"together. Note that the model is never populated with data &mdash; that is "
"left as an exercise for the reader. More information can be found on this in "
"the #GtkTreeModel section. <placeholder-1/>"
msgstr ""

#: tree_widget.sgml:249(programlisting)
#, no-wrap
msgid ""
"\n"
"enum\n"
"{\n"
"   TITLE_COLUMN,\n"
"   AUTHOR_COLUMN,\n"
"   CHECKED_COLUMN,\n"
"   N_COLUMNS\n"
"};\n"
"\n"
"void\n"
"setup_tree (void)\n"
"{\n"
"   GtkTreeStore *store;\n"
"   GtkWidget *tree;\n"
"   GtkTreeViewColumn *column;\n"
"   GtkCellRenderer *renderer;\n"
"\n"
"   /* Create a model.  We are using the store model for now, though we\n"
"    * could use any other GtkTreeModel */\n"
"   store = gtk_tree_store_new (N_COLUMNS,\n"
"                               G_TYPE_STRING,\n"
"                               G_TYPE_STRING,\n"
"                               G_TYPE_BOOLEAN);\n"
"\n"
"   /* custom function to fill the model with data */\n"
"   populate_tree_model (store);\n"
"\n"
"   /* Create a view */\n"
"   tree = gtk_tree_view_new_with_model (GTK_TREE_MODEL (store));\n"
"\n"
"   /* The view now holds a reference.  We can get rid of our own\n"
"    * reference */\n"
"   g_object_unref (G_OBJECT (store));\n"
"\n"
"   /* Create a cell render and arbitrarily make it red for demonstration\n"
"    * purposes */\n"
"   renderer = gtk_cell_renderer_text_new ();\n"
"   g_object_set (G_OBJECT (renderer),\n"
"                 \"foreground\", \"red\",\n"
"                 NULL);\n"
"\n"
"   /* Create a column, associating the \"text\" attribute of the\n"
"    * cell_renderer to the first column of the model */\n"
"   column = gtk_tree_view_column_new_with_attributes (\"Author\", renderer,\n"
"                                                      \"text\", AUTHOR_COLUMN,\n"
"                                                      NULL);\n"
"\n"
"   /* Add the column to the view. */\n"
"   gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n"
"\n"
"   /* Second column.. title of the book. */\n"
"   renderer = gtk_cell_renderer_text_new ();\n"
"   column = gtk_tree_view_column_new_with_attributes (\"Title\",\n"
"                                                      renderer,\n"
"                                                      \"text\", TITLE_COLUMN,\n"
"                                                      NULL);\n"
"   gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n"
"\n"
"   /* Last column.. whether a book is checked out. */\n"
"   renderer = gtk_cell_renderer_toggle_new ();\n"
"   column = gtk_tree_view_column_new_with_attributes (\"Checked out\",\n"
"                                                      renderer,\n"
"                                                      \"active\", CHECKED_COLUMN,\n"
"                                                      NULL);\n"
"   gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n"
"\n"
"   /* Now we can manipulate the view just like any other GTK widget */\n"
"   ...\n"
"}\n"
"      "
msgstr ""

#: tree_widget.sgml:25(member)
msgid "The tree view widget (<placeholder-1/>)"
msgstr ""

#: tree_widget.sgml:25(structname)
msgid "GtkTreeView"
msgstr ""

#: tree_widget.sgml:26(member)
msgid "The view column (<placeholder-1/>)"
msgstr ""

#: tree_widget.sgml:26(structname)
msgid "GtkTreeViewColumn"
msgstr ""

#: tree_widget.sgml:27(member)
msgid "The cell renderers (<placeholder-1/> etc.)"
msgstr ""

#: tree_widget.sgml:27(structname)
msgid "GtkCellRenderer"
msgstr ""

#: tree_widget.sgml:28(member)
msgid "The model interface (<placeholder-1/>)"
msgstr ""

#: tree_widget.sgml:28(structname)
msgid "GtkTreeModel"
msgstr ""

#: tree_widget.sgml:38(para)
msgid ""
"The purpose of the cell renderers is to provide extensibility to the widget "
"and to allow multiple ways of rendering the same type of data. For example, "
"consider how to render a boolean variable. Should it render it as a string "
"of \"True\" or \"False\", \"On\" or \"Off\", or should it be rendered as a "
"checkbox?"
msgstr ""

#: tree_widget.sgml:47(title)
msgid "Creating a model"
msgstr ""

#: tree_widget.sgml:48(para)
msgid ""
"GTK+ provides two simple models that can be used: the #GtkListStore and the "
"#GtkTreeStore. GtkListStore is used to model list widgets, while the "
"GtkTreeStore models trees. It is possible to develop a new type of model, "
"but the existing models should be satisfactory for all but the most "
"specialized of situations. Creating the model is quite simple:"
msgstr ""

#: tree_widget.sgml:59(para)
msgid ""
"This creates a list store with two columns: a string column and a boolean "
"column. Typically the 2 is never passed directly like that; usually an enum "
"is created wherein the different columns are enumerated, followed by a token "
"that represents the total number of columns. The next example will "
"illustrate this, only using a tree store instead of a list store. Creating a "
"tree store operates almost exactly the same."
msgstr ""

#: tree_widget.sgml:81(para)
msgid ""
"Adding data to the model is done using gtk_tree_store_set() or "
"gtk_list_store_set(), depending upon which sort of model was created. To do "
"this, a #GtkTreeIter must be acquired. The iterator points to the location "
"where data will be added."
msgstr ""

#: tree_widget.sgml:87(para)
msgid ""
"Once an iterator has been acquired, gtk_tree_store_set() is used to apply "
"data to the part of the model that the iterator points to. Consider the "
"following example:"
msgstr ""

#: windows.sgml:101(para)
msgid "Specifies the size of the color palette used in 256 color mode."
msgstr ""

#: windows.sgml:13(refname) windows.sgml:20(title)
#: windows.sgml:7(refentrytitle)
msgid "Using GTK+ on Windows"
msgstr ""

#: windows.sgml:14(refpurpose)
msgid "Windows-specific aspects of using GTK+"
msgstr ""

#: windows.sgml:22(para)
msgid ""
"The Windows port of GTK+ is an implementation of GDK (and therefore GTK+) on "
"top of the Win32 API."
msgstr ""

#: windows.sgml:28(title)
msgid "Windows-specific commandline options"
msgstr "Windows 下特定的命令行选项"

#: windows.sgml:30(para)
msgid ""
"The Windows GDK backend can be influenced with some additional command line "
"arguments."
msgstr "Windows 下一些附加的命令行参数会影响 GDK 的后端。"

#: windows.sgml:36(systemitem)
msgid "--sync"
msgstr ""

#: windows.sgml:38(para)
msgid ""
"Don't batch GDI requests. This might be a marginally useful option for "
"debugging."
msgstr ""

#: windows.sgml:45(title)
msgid ""
"<systemitem>--no-wintab</systemitem>, <systemitem>--ignore-wintab</"
"systemitem>"
msgstr ""

#: windows.sgml:48(para)
msgid "Don't use the Wintab API for tablet support."
msgstr ""

#: windows.sgml:54(systemitem)
msgid "--use-wintab"
msgstr ""

#: windows.sgml:56(para)
msgid "Use the Wintab API for tablet support. This is the default."
msgstr ""

#: windows.sgml:62(replaceable)
msgid "number"
msgstr ""

#: windows.sgml:62(systemitem)
msgid "--max-colors <placeholder-1/>"
msgstr ""

#: windows.sgml:64(para)
msgid ""
"In 256 color mode, restrict the size of the color palette to the specified "
"number of colors. This option is obsolete."
msgstr ""

#: windows.sgml:73(title)
msgid "Windows-specific environment variables"
msgstr "Windows 下特定的环境变量"

#: windows.sgml:75(para)
msgid ""
"The Win32 GDK backend can be influenced with some additional environment "
"variables."
msgstr "Windows 下一些附加的环境变量会影响 GDK 的后端。"

#: windows.sgml:81(envar)
msgid "GDK_IGNORE_WINTAB"
msgstr ""

#: windows.sgml:83(para)
msgid ""
"If this variable is set, GTK+ doesn't use the Wintab API for tablet support."
msgstr ""

#: windows.sgml:90(envar)
msgid "GDK_USE_WINTAB"
msgstr ""

#: windows.sgml:92(para)
msgid ""
"If this variable is set, GTK+ uses the Wintab API for tablet support. This "
"is the default."
msgstr ""

#: windows.sgml:99(envar)
msgid "GDK_WIN32_MAX_COLORS"
msgstr ""

#: x11.sgml:104(para)
msgid ""
"The window manager is in charge of rendering the frame or borders around "
"windows; it also has final say on the size of each window, and window states "
"such as minimized, maximized, and so forth. On Windows and MacOS the "
"application handles most of this. On X11, if you wish to modify the window's "
"state, or change its frame, you must ask the window manager to do so on your "
"behalf, using an established <ulink url=\"http://www.freedesktop.org/"
"standards/\">convention</ulink>."
msgstr ""

#: x11.sgml:115(para)
msgid ""
"GTK+ has functions for asking the window manager to do various things; see "
"for example <link linkend=\"gtk-window-iconify\">gtk_window_iconify()</link> "
"or <link linkend=\"gtk-window-maximize\">gtk_window_maximize()</link> or "
"<link linkend=\"gtk-window-set-decorated\">gtk_window_set_decorated()</"
"link>. Keep in mind that <link linkend=\"gtk-window-move\">gtk_window_move()"
"</link> and window sizing are ultimately controlled by the window manager as "
"well and most window managers <emphasis>will</emphasis> ignore certain "
"requests from time to time, in the interests of good user interface."
msgstr ""

#: x11.sgml:13(refname) x11.sgml:7(refentrytitle)
msgid "Using GTK+ on the X Window System"
msgstr ""

#: x11.sgml:14(refpurpose)
msgid "X11 aspects of using GTK+"
msgstr ""

#: x11.sgml:20(title)
msgid "GTK+ for the X Window System"
msgstr ""

#: x11.sgml:22(para)
msgid ""
"On UNIX, the X backend is the default build for GTK+. So you don't need to "
"do anything special when compiling it, and everything should \"just work.\""
msgstr ""

#: x11.sgml:28(para)
msgid ""
"To mix low-level Xlib routines into a GTK program, see <link linkend=\"gdk-X-"
"Window-System-Interaction\">GDK X Window System interaction</link> in the "
"GDK manual."
msgstr ""

#: x11.sgml:34(para)
msgid ""
"GTK+ includes an cross-process embedding facility in the form of the "
"#GtkSocket and #GtkPlug widgets. These are X11-specific, and you have to "
"include the <filename>gtk/gtkx.h</filename> header to use them."
msgstr ""

#: x11.sgml:42(title)
msgid "X11-specific commandline options"
msgstr ""

#: x11.sgml:44(para)
msgid "The X backend understands some additional command line arguments."
msgstr ""

#: x11.sgml:49(systemitem)
msgid "--display <placeholder-1/>"
msgstr ""

#: x11.sgml:51(para)
msgid ""
"The name of the X display to open instead of the one specified in the "
"<envar>DISPLAY</envar> environment variable."
msgstr ""

#: x11.sgml:62(title)
msgid "Understanding the X11 architecture"
msgstr ""

#: x11.sgml:64(para)
msgid ""
"People coming from a Windows or MacOS background often find certain aspects "
"of the X Window System surprising. This section introduces some basic X "
"concepts at a high level. For more details, the book most people use is "
"called the <citetitle pubwork=\"book\">Xlib Programming Manual</citetitle> "
"by Adrian Nye; this book is volume one in the O'Reilly X Window System "
"series."
msgstr ""

#: x11.sgml:72(para)
msgid ""
"Standards are another important resource if you're poking in low-level X11 "
"details, in particular the ICCCM and the Extended Window Manager Hints "
"specifications. <ulink url=\"http://www.freedesktop.org/standards/"
"\">freedesktop.org</ulink> has links to many relevant specifications."
msgstr ""

#: x11.sgml:79(para)
msgid ""
"The GDK manual covers <link linkend=\"gdk-X-Window-System-Interaction"
"\">using Xlib in a GTK program</link>."
msgstr ""

#: x11.sgml:86(title)
msgid "Server, client, window manager"
msgstr ""

#: x11.sgml:88(para)
msgid ""
"Other window systems typically put all their functionality in the "
"application itself. With X, each application involves three different "
"programs: the <firstterm>X server</firstterm>, the application (called a "
"<firstterm>client</firstterm> because it's a client of the X server), and a "
"special client called the <firstterm>window manager</firstterm>."
msgstr ""

#: x11.sgml:97(para)
msgid ""
"The X server is in charge of managing resources, processing drawing "
"requests, and dispatching events such as keyboard and mouse events to "
"interested applications. So client applications can ask the X server to "
"create a window, draw a circle, or move windows around."
msgstr ""
