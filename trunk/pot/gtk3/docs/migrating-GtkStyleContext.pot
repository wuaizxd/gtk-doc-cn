msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-04-15 23:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: migrating-GtkStyleContext.xml:0(None)
msgid "translator-credits"
msgstr ""

#: migrating-GtkStyleContext.xml:100(member)
msgid "gtk_render_check(): Render checkboxes."
msgstr ""

#: migrating-GtkStyleContext.xml:103(member)
msgid "gtk_render_option(): Render radiobuttons."
msgstr ""

#: migrating-GtkStyleContext.xml:106(member)
msgid "gtk_render_arrow(): Renders an arrow pointing to a direction."
msgstr ""

#: migrating-GtkStyleContext.xml:109(member)
msgid ""
"gtk_render_expander(): Renders an expander indicator, such as in "
"#GtkExpander."
msgstr ""

#: migrating-GtkStyleContext.xml:113(member)
msgid ""
"gtk_render_focus(): Renders the indication that a widget has the keyboard "
"focus."
msgstr ""

#: migrating-GtkStyleContext.xml:117(member)
msgid "gtk_render_line(): Renders a line from one coordinate to another."
msgstr ""

#: migrating-GtkStyleContext.xml:120(member)
msgid "gtk_render_slider(): Renders a slider, such as in #GtkScale."
msgstr ""

#: migrating-GtkStyleContext.xml:123(member)
msgid ""
"gtk_render_extension(): Renders an extension that protrudes from a UI "
"element, such as a notebook tab."
msgstr ""

#: migrating-GtkStyleContext.xml:127(member)
msgid ""
"gtk_render_activity(): Renders an area displaying activity, be it a "
"progressbar or a spinner."
msgstr ""

#: migrating-GtkStyleContext.xml:131(member)
msgid "gtk_render_icon_pixbuf(): Renders an icon into a #GdkPixbuf."
msgstr ""

#: migrating-GtkStyleContext.xml:136(para)
msgid ""
"One of the main differences to #GtkStyle-based engines is that the rendered "
"widget is totally isolated from the theme engine, all style information is "
"meant to be retrieved from the #GtkThemingEngine API, or from the "
"#GtkWidgetPath obtained from gtk_theming_engine_get_path(), which fully "
"represents the rendered widget's hierarchy from a styling point of view."
msgstr ""

#: migrating-GtkStyleContext.xml:145(para)
msgid ""
"The detail string available in #GtkStyle-based engines has been replaced by "
"widget regions and style classes. Regions are a way for complex widgets to "
"associate different styles with different areas, such as even and odd rows "
"in a treeview. Style classes allow sharing of style information between "
"widgets, regardless of their type. Regions and style classes can be used in "
"style sheets to associate styles, and them engines can also access them. "
"There are several predefined classes and regions such as "
"%GTK_STYLE_CLASS_BUTTON or %GTK_STYLE_REGION_TAB in "
"<filename>gtkstylecontext.h</filename>, although custom widgets may define "
"their own, which themes may attempt to handle."
msgstr ""

#: migrating-GtkStyleContext.xml:162(title)
msgid "Extending the CSS parser"
msgstr ""

#: migrating-GtkStyleContext.xml:164(para)
msgid ""
"In #GtkStyle-based engines, #GtkRCStyle provided ways to extend the gtkrc "
"parser with engine-specific extensions. This has been replaced by "
"gtk_theming_engine_register_property(), which lets a theme engine register "
"new properties with an arbitrary type. While there is built-in support for "
"most basic types, it is possible to use a custom parser for the property."
msgstr ""

#: migrating-GtkStyleContext.xml:173(para)
msgid ""
"The installed properties depend on the #GtkThemeEngine::name property, so "
"they should be added in the <literal>constructed()</literal> vfunc. For "
"example, if an engine with the name \"Clearlooks\" installs a \"focus-color"
"\" property with the type #GdkRGBA, the property <literal>-Clearlooks-focus-"
"color</literal> will be registered and accepted in CSS like this: "
"<placeholder-1/>"
msgstr ""

#: migrating-GtkStyleContext.xml:18(title)
msgid "Migrating themes"
msgstr ""

#: migrating-GtkStyleContext.xml:180(programlisting)
#, no-wrap
msgid ""
"\n"
"      GtkEntry {\n"
"        -Clearlooks-focus-color: rgba(255, 0, 0, 1.0);\n"
"      }\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:187(para)
msgid ""
"Widget style properties also follow a similar syntax, with the widget type "
"name used as a prefix. For example, the #GtkWidget:focus-line-width style "
"property can be modified in CSS as <literal>-GtkWidget-focus-line-width</"
"literal>."
msgstr ""

#: migrating-GtkStyleContext.xml:196(title)
msgid "Using the CSS file format"
msgstr ""

#: migrating-GtkStyleContext.xml:198(para)
msgid ""
"The syntax of RC and CSS files formats is obviously different. The CSS-like "
"syntax will hopefully be much more familiar to many people, lowering the "
"barrier for custom theming."
msgstr ""

#: migrating-GtkStyleContext.xml:20(para)
msgid ""
"From GTK+ 3.0 on, theme engines must implement #GtkThemingEngine and be "
"installed in <filename>$libdir/gtk+-3.0/$GTK_VERSION/theming-engines</"
"filename>, and the files containing style information must be written in the "
"CSS-like format that is understood by #GtkCssProvider. For a theme named "
"\"Clearlooks\", the CSS file parsed by default is <filename>$datadir/themes/"
"Clearlooks/gtk-3.0/gtk.css</filename>, with possible variants such as the "
"dark theme being named <filename>gtk-dark.css</filename> in the same "
"directory."
msgstr ""

#: migrating-GtkStyleContext.xml:203(para)
msgid ""
"Instead of going through the syntax differences one-by-one, we will present "
"a more or less comprehensive example and discuss how it can be translated "
"into CSS:"
msgstr ""

#: migrating-GtkStyleContext.xml:210(title)
msgid "Sample RC code"
msgstr ""

#: migrating-GtkStyleContext.xml:211(programlisting)
#, no-wrap
msgid ""
"\n"
"        style \"default\" {\n"
"                xthickness = 1\n"
"                ythickness = 1\n"
"\n"
"                GtkButton::child-displacement-x = 1\n"
"                GtkButton::child-displacement-y = 1\n"
"                GtkCheckButton::indicator-size = 14\n"
"\n"
"                bg[NORMAL]        = @bg_color\n"
"                bg[PRELIGHT]      = shade (1.02, @bg_color)\n"
"                bg[SELECTED]      = @selected_bg_color\n"
"                bg[INSENSITIVE]   = @bg_color\n"
"                bg[ACTIVE]        = shade (0.9, @bg_color)\n"
"\n"
"                fg[NORMAL]        = @fg_color\n"
"                fg[PRELIGHT]      = @fg_color\n"
"                fg[SELECTED]      = @selected_fg_color\n"
"                fg[INSENSITIVE]   = darker (@bg_color)\n"
"                fg[ACTIVE]        = @fg_color\n"
"\n"
"                text[NORMAL]      = @text_color\n"
"                text[PRELIGHT]    = @text_color\n"
"                text[SELECTED]    = @selected_fg_color\n"
"                text[INSENSITIVE] = darker (@bg_color)\n"
"                text[ACTIVE]      = @selected_fg_color\n"
"\n"
"                base[NORMAL]      = @base_color\n"
"                base[PRELIGHT]    = shade (0.95, @bg_color)\n"
"                base[SELECTED]    = @selected_bg_color\n"
"                base[INSENSITIVE] = @bg_color\n"
"                base[ACTIVE]      = shade (0.9, @selected_bg_color)\n"
"\n"
"                engine \"clearlooks\" {\n"
"                        colorize_scrollbar = TRUE\n"
"                        style = CLASSIC\n"
"                }\n"
"        }\n"
"\n"
"        style \"tooltips\" {\n"
"                xthickness = 4\n"
"                ythickness = 4\n"
"\n"
"                bg[NORMAL]        = @tooltip_bg_color\n"
"                fg[NORMAL]        = @tooltip_fg_color\n"
"        }\n"
"\n"
"        style \"button\" {\n"
"                xthickness = 3\n"
"                ythickness = 3\n"
"\n"
"                bg[NORMAL]        = shade (1.04, @bg_color)\n"
"                bg[PRELIGHT]      = shade (1.06, @bg_color)\n"
"                bg[ACTIVE]        = shade (0.85, @bg_color)\n"
"        }\n"
"\n"
"        style \"entry\" {\n"
"                xthickness = 3\n"
"                ythickness = 3\n"
"\n"
"                bg[SELECTED] = mix (0.4, @selected_bg_color, @base_color)\n"
"                fg[SELECTED] = @text_color\n"
"\n"
"                engine \"clearlooks\" {\n"
"                        focus_color = shade (0.65, @selected_bg_color)\n"
"                }\n"
"        }\n"
"\n"
"        style \"other\" {\n"
"                bg[NORMAL] = &num;fff;\n"
"        }\n"
"\n"
"        class \"GtkWidget\" style \"default\"\n"
"        class \"GtkEntry\" style \"entry\"\n"
"        widget_class \"*&lt;GtkButton&gt;\" style \"button\"\n"
"        widget \"gtk-tooltip*\" style \"tooltips\"\n"
"        widget_class \"window-name.*.GtkButton\" style \"other\"\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:291(para)
msgid "would roughly translate to this CSS:"
msgstr ""

#: migrating-GtkStyleContext.xml:296(title)
msgid "CSS translation"
msgstr ""

#: migrating-GtkStyleContext.xml:297(programlisting)
#, no-wrap
msgid ""
"\n"
"        * {\n"
"          padding: 1;\n"
"          -GtkButton-child-displacement-x: 1;\n"
"          -GtkButton-child-displacement-y: 1;\n"
"          -GtkCheckButton-indicator-size: 14;\n"
"\n"
"          background-color: @bg_color;\n"
"          color: @fg_color;\n"
"\n"
"          -Clearlooks-colorize-scrollbar: true;\n"
"          -Clearlooks-style: classic;\n"
"        }\n"
"\n"
"        *:hover {\n"
"          background-color: shade (@bg_color, 1.02);\n"
"        }\n"
"\n"
"        *:selected {\n"
"          background-color: @selected_bg_color;\n"
"          color: @selected_fg_color;\n"
"        }\n"
"\n"
"        *:insensitive {\n"
"          color: shade (@bg_color, 0.7);\n"
"        }\n"
"\n"
"        *:active {\n"
"          background-color: shade (@bg_color, 0.9);\n"
"        }\n"
"\n"
"        .tooltip {\n"
"          padding: 4;\n"
"\n"
"          background-color: @tooltip_bg_color;\n"
"          color: @tooltip_fg_color;\n"
"        }\n"
"\n"
"        .button {\n"
"          padding: 3;\n"
"          background-color: shade (@bg_color, 1.04);\n"
"        }\n"
"\n"
"        .button:hover {\n"
"          background-color: shade (@bg_color, 1.06);\n"
"        }\n"
"\n"
"        .button:active {\n"
"          background-color: shade (@bg_color, 0.85);\n"
"        }\n"
"\n"
"        .entry {\n"
"          padding: 3;\n"
"\n"
"          background-color: @base_color;\n"
"          color: @text_color;\n"
"        }\n"
"\n"
"        .entry:selected {\n"
"          background-color: mix (@selected_bg_color, @base_color, 0.4);\n"
"          -Clearlooks-focus-color: shade (0.65, @selected_bg_color)\n"
"        }\n"
"\n"
"        /* The latter selector is an specification of the first,\n"
"           since any widget may use the same classes or names */\n"
"        &num;window-name .button,\n"
"        GtkWindow&num;window-name GtkButton.button {\n"
"          background-color: &num;fff;\n"
"        }\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:31(para)
msgid ""
"If your theme RC file was providing values for #GtkSettings, you can install "
"a <filename>settings.ini</filename> keyfile along with the <filename>gtk."
"css</filename> to provide theme-specific defaults for settings."
msgstr ""

#: migrating-GtkStyleContext.xml:369(para)
msgid ""
"One notable difference is the reduction from fg/bg/text/base colors to only "
"foreground/background, in exchange the widget is able to render its various "
"elements with different CSS classes, which can be themed independently."
msgstr ""

#: migrating-GtkStyleContext.xml:376(para)
msgid ""
"In the same vein, the light, dark and mid color variants that were available "
"in GtkStyle should be replaced by a combination of symbolic colors and "
"custom CSS, where necessary. text_aa should really not be used anywhere, "
"anyway, and the white and black colors that were available in GtkStyle can "
"just be replaced by literal GdkRGBA structs."
msgstr ""

#: migrating-GtkStyleContext.xml:38(para)
msgid ""
"Key themes have been converted to CSS syntax too. See the <link linkend="
"\"css-binding-set\">GtkCssProvider</link> documentation information about "
"the syntax. GTK+ looks for key themes in the file <filename>$datadir/themes/"
"<replaceable>theme</replaceable>/gtk-3.0/gtk-keys.css</filename>, where "
"<replaceable>theme</replaceable> is the current key theme name."
msgstr ""

#: migrating-GtkStyleContext.xml:385(para)
msgid ""
"Access to colors has also changed a bit. With #GtkStyle, the common way to "
"access colors is: <placeholder-1/> With #GtkStyleContext, you generally use "
"#GdkRGBA instead of #GdkColor and the code looks like this: <placeholder-2/> "
"Note that the memory handling here is different: gtk_style_context_get() "
"expects the address of a GdkRGBA* and returns a newly allocated struct, "
"gtk_style_context_lookup_color() expects the address of an existing struct, "
"and fills it."
msgstr ""

#: migrating-GtkStyleContext.xml:388(programlisting)
#, no-wrap
msgid ""
"\n"
"      GdkColor *color1;\n"
"      GdkColor color2;\n"
"\n"
"      color1 = &amp;style-&gt;bg[GTK_STATE_PRELIGHT];\n"
"      gtk_style_lookup_color (style, \"focus_color\", &amp;color2);\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:397(programlisting)
#, no-wrap
msgid ""
"\n"
"      GdkRGBA *color1;\n"
"      GdkRGBA  color2;\n"
"\n"
"      gtk_style_context_get (context, GTK_STATE_FLAG_PRELIGHT,\n"
"                             \"background-color\", &amp;color1,\n"
"                             NULL);\n"
"      gtk_style_context_lookup_color (context, \"focus_color\", &amp;color2);\n"
"\n"
"      ...\n"
"\n"
"      gdk_rgba_free (color1);\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:416(para)
msgid ""
"It is worth mentioning that the new file format does not support custom "
"keybindings nor stock icon mappings as the RC format did."
msgstr ""

#: migrating-GtkStyleContext.xml:423(title)
msgid "A checklist for widgets"
msgstr ""

#: migrating-GtkStyleContext.xml:425(para)
msgid ""
"When porting your widgets to use #GtkStyleContext, this checklist might be "
"useful."
msgstr ""

#: migrating-GtkStyleContext.xml:431(listitem)
msgid ""
"Replace #GtkWidget::style-set handlers with #GtkWidget::style-updated "
"handlers."
msgstr ""

#: migrating-GtkStyleContext.xml:437(para)
msgid ""
"Try to identify the role of what you're rendering with any number of "
"classes. This will replace the detail string. There is a predefined set of "
"CSS classes which you can reuse where appropriate. Doing so will give you "
"theming 'for free', whereas custom classes will require extra work in the "
"theme. Note that complex widgets are likely to need different styles when "
"rendering different parts, and style classes are one way to achieve this. "
"This could result in code like the following (simplified) examples:"
msgstr ""

#: migrating-GtkStyleContext.xml:449(title)
msgid "Setting a permanent CSS class"
msgstr ""

#: migrating-GtkStyleContext.xml:450(programlisting)
#, no-wrap
msgid ""
"\n"
"            static void\n"
"            gtk_button_init (GtkButton *button)\n"
"            {\n"
"              GtkStyleContext *context;\n"
"\n"
"              ...\n"
"\n"
"              context = gtk_widget_get_style_context (GTK_WIDGET (button));\n"
"\n"
"              /* Set the \"button\" class */\n"
"              gtk_style_context_add_class (context, GTK_STYLE_CLASS_BUTTON);\n"
"            }\n"
"          "
msgstr ""

#: migrating-GtkStyleContext.xml:466(para)
msgid "Or"
msgstr ""

#: migrating-GtkStyleContext.xml:471(title)
msgid "Using dynamic CSS classes for different elements"
msgstr ""

#: migrating-GtkStyleContext.xml:472(programlisting)
#, no-wrap
msgid ""
"\n"
"            static gboolean\n"
"            gtk_spin_button_draw (GtkSpinButton *spin,\n"
"                                  cairo_t       *cr)\n"
"            {\n"
"              GtkStyleContext *context;\n"
"\n"
"              ...\n"
"\n"
"              context = gtk_widget_get_style_context (GTK_WIDGET (spin));\n"
"\n"
"              gtk_style_context_save (context);\n"
"              gtk_style_context_add_class (context, GTK_STYLE_CLASS_ENTRY);\n"
"\n"
"              /* Call to entry draw impl with \"entry\" class */\n"
"              parent_class-&gt;draw (spin, cr);\n"
"\n"
"              gtk_style_context_restore (context);\n"
"              gtk_style_context_save (context);\n"
"\n"
"              /* Render up/down buttons with the \"button\" class */\n"
"              gtk_style_context_add_class (context, GTK_STYLE_CLASS_BUTTON);\n"
"              draw_up_button (spin, cr);\n"
"              draw_down_button (spin, cr);\n"
"\n"
"              gtk_style_context_restore (context);\n"
"\n"
"              ...\n"
"            }\n"
"          "
msgstr ""

#: migrating-GtkStyleContext.xml:48(title)
msgid "Migrating theme engines"
msgstr ""

#: migrating-GtkStyleContext.xml:50(para)
msgid ""
"Migrating a #GtkStyle based engine to a #GtkThemingEngine based one should "
"be straightforward for most of the vfuncs. Besides a cleanup in the "
"available paint methods and a simplification in the passed arguments (in "
"favor of #GtkStyleContext containing all the information), the available "
"render methods resemble those of #GtkStyle quite evidently. Notable "
"differences include:"
msgstr ""

#: migrating-GtkStyleContext.xml:504(para)
msgid ""
"Note that #GtkStyleContext only provides fg/bg colors, so text/base is done "
"through distinctive theming of the different classes. For example, an entry "
"would usually be black on white while a button would usually be black on "
"light grey."
msgstr ""

#: migrating-GtkStyleContext.xml:513(para)
msgid ""
"Replace all <literal>gtk_paint_*()</literal> calls with corresponding "
"<literal>gtk_render_*()</literal> calls."
msgstr ""

#: migrating-GtkStyleContext.xml:517(para)
msgid ""
"The most distinctive changes are the use of #GtkStateFlags to represent the "
"widget state and the lack of #GtkShadowType. Note that widget state is now "
"passed implicitly via the context, so to render in a certain state, you have "
"to temporarily set the state on the context, as in the following example:"
msgstr ""

#: migrating-GtkStyleContext.xml:525(title)
msgid "Rendering with a specific state"
msgstr ""

#: migrating-GtkStyleContext.xml:526(programlisting)
#, no-wrap
msgid ""
"\n"
"            gtk_style_context_save (context);\n"
"            gtk_style_context_set_state (context, GTK_STATE_FLAG_ACTIVE);\n"
"            gtk_render_check (context, cr, x, y, width, height);\n"
"            gtk_style_context_restore (context);\n"
"          "
msgstr ""

#: migrating-GtkStyleContext.xml:533(para)
msgid ""
"For gtk_render_check() and gtk_render_option(), the @shadow_type parameter "
"is replaced by the #GTK_STATE_FLAG_ACTIVE and #GTK_STATE_FLAG_INCONSISTENT "
"state flags. For things such as pressed/unpressed button states, "
"#GTK_STATE_FLAG_ACTIVE is used, and the CSS may style normal/active states "
"differently to render outset/inset borders, respectively."
msgstr ""

#: migrating-GtkStyleContext.xml:543(listitem)
msgid ""
"The various <placeholder-1/> functions to override colors or fonts for "
"individual widgets have been replaced by similar <placeholder-2/> functions."
msgstr ""

#: migrating-GtkStyleContext.xml:544(literal)
msgid "gtk_widget_modify_*()"
msgstr ""

#: migrating-GtkStyleContext.xml:546(literal)
msgid "gtk_widget_override_*()"
msgstr ""

#: migrating-GtkStyleContext.xml:549(listitem)
msgid ""
"It is no longer necessary to call gtk_widget_style_attach(), gtk_style_attach"
"(), gtk_style_detach() or gtk_widget_ensure_style()."
msgstr ""

#: migrating-GtkStyleContext.xml:554(listitem)
msgid ""
"Replace all uses of xthickness/ythickness. #GtkStyleContext uses the CSS box "
"model, and there are border-width/padding/margin properties to replace the "
"different applications of X and Y thickness. Note that all of this is merely "
"a guideline. Widgets may choose to follow it or not."
msgstr ""

#: migrating-GtkStyleContext.xml:564(title)
msgid "Parsing of custom resources"
msgstr ""

#: migrating-GtkStyleContext.xml:565(para)
msgid ""
"As a consequence of the RC format going away, calling gtk_rc_parse() or "
"gtk_rc_parse_string() won't have any effect on a widgets appearance. The way "
"to replace these calls is using a custom #GtkStyleProvider, either for an "
"individual widget through gtk_style_context_add_provider() or for all "
"widgets on a screen through gtk_style_context_add_provider_for_screen(). "
"Typically, the provider will be a #GtkCssProvider, which parse CSS "
"information from a file or from a string."
msgstr ""

#: migrating-GtkStyleContext.xml:575(title)
msgid "Using a custom GtkStyleProvider"
msgstr ""

#: migrating-GtkStyleContext.xml:576(programlisting)
#, no-wrap
msgid ""
"\n"
"        GtkStyleContext *context;\n"
"        GtkCssProvider *provider;\n"
"\n"
"        context = gtk_widget_get_style_context (widget);\n"
"        provider = gtk_css_provider_new ();\n"
"        gtk_css_provider_load_from_data (GTK_CSS_PROVIDER (provider),\n"
"                                         \".frame1 {\\n\"\n"
"                                         \"   border-image: url('gradient1.png') 10 10 10 10 stretch;\\n\"\n"
"                                         \"}\\n\", -1, NULL);\n"
"        gtk_style_context_add_provider (context,\n"
"                                        GTK_STYLE_PROVIDER (provider),\n"
"                                        GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);\n"
"        g_object_unref (provider);\n"
"      "
msgstr ""

#: migrating-GtkStyleContext.xml:592(para)
msgid ""
"Notice that you can also get style information from custom resources by "
"implementing the #GtkStyleProvider interface yourself. This is an advanced "
"feature that should be rarely used."
msgstr ""

#: migrating-GtkStyleContext.xml:6(title)
msgid "Theming changes"
msgstr ""

#: migrating-GtkStyleContext.xml:60(listitem)
msgid ""
"All variations of gtk_paint_box(), gtk_paint_flat_box(), gtk_paint_shadow(), "
"gtk_paint_box_gap() and gtk_paint_shadow_gap() are replaced by "
"gtk_render_background(), gtk_render_frame() and gtk_render_frame_gap(). The "
"first function renders frameless backgrounds and the last two render frames "
"in various forms."
msgstr ""

#: migrating-GtkStyleContext.xml:600(title)
msgid "Bonus points"
msgstr ""

#: migrating-GtkStyleContext.xml:602(para)
msgid ""
"There are some features in #GtkStyleContext that were not available in "
"#GtkStyle, or were made available over time for certain widgets through "
"extending the detail string in obscure ways. There is a lot more information "
"available when rendering UI elements, and it is accessible in more uniform, "
"less hacky ways. By going through this list you'll ensure your widget is a "
"good citizen in a fully themable user interface."
msgstr ""

#: migrating-GtkStyleContext.xml:612(listitem)
msgid ""
"If your widget renders a series of similar elements, such as tabs in a "
"#GtkNotebook or rows/column in a #GtkTreeView, consider adding regions "
"through gtk_style_context_add_region(). These regions can be referenced in "
"CSS and the :nth-child pseudo-class may be used to match the elements "
"depending on the flags passed. <placeholder-1/>"
msgstr ""

#: migrating-GtkStyleContext.xml:620(title)
msgid "Theming widget regions"
msgstr ""

#: migrating-GtkStyleContext.xml:621(programlisting)
#, no-wrap
msgid ""
"\n"
"            GtkNotebook tab {\n"
"              background-color: &num;f3329d;\n"
"            }\n"
"\n"
"            GtkTreeView row::nth-child (even) {\n"
"              background-color: &num;dddddd;\n"
"            }\n"
"          "
msgstr ""

#: migrating-GtkStyleContext.xml:634(para)
msgid ""
"If your container renders child widgets within different regions, make it "
"implement GtkContainer::get_path_for_child(). This function lets containers "
"assign a special #GtkWidgetPath to child widgets depending on their role/"
"region. This is necessary to extend the concept above throughout the widget "
"hierarchy."
msgstr ""

#: migrating-GtkStyleContext.xml:642(para)
msgid ""
"For example, a #GtkNotebook modifies the tab labels' #GtkWidgetPath so the "
"\"tab\" region is added. This makes it possible to theme tab labels through:"
msgstr ""

#: migrating-GtkStyleContext.xml:649(title)
msgid "Theming a widget within a parent container region"
msgstr ""

#: migrating-GtkStyleContext.xml:650(programlisting)
#, no-wrap
msgid ""
"\n"
"            GtkNotebook tab GtkLabel {\n"
"              font: Sans 8;\n"
"            }\n"
"          "
msgstr ""

#: migrating-GtkStyleContext.xml:659(listitem)
msgid ""
"If you intend several visual elements to look interconnected, make sure you "
"specify rendered elements' connection areas with "
"gtk_style_context_set_junction_sides(). It is of course up to the theme to "
"make use of this information or not."
msgstr ""

#: migrating-GtkStyleContext.xml:667(para)
msgid ""
"#GtkStyleContext supports implicit animations on state changes for the most "
"simple case out-of-the-box: widgets with a single animatable area, whose "
"state is changed with gtk_widget_set_state_flags() or "
"gtk_widget_unset_state_flags(). These functions trigger animated transitions "
"for the affected state flags. Examples of widgets for which this kind of "
"animation may be sufficient are #GtkButton or #GtkEntry."
msgstr ""

#: migrating-GtkStyleContext.xml:67(listitem)
msgid ""
"gtk_paint_resize_grip() has been subsumed by gtk_render_handle() with a "
"#GTK_STYLE_CLASS_GRIP class set in the style context."
msgstr ""

#: migrating-GtkStyleContext.xml:676(para)
msgid ""
"If your widget consists of more than a simple area, and these areas may be "
"rendered with different states, make sure to mark the rendered areas with "
"gtk_style_context_push_animatable_region() and "
"gtk_style_context_pop_animatable_region()."
msgstr ""

#: migrating-GtkStyleContext.xml:683(para)
msgid ""
"gtk_style_context_notify_state_change() may be used to trigger a transition "
"for a given state. The region ID will determine the animatable region that "
"is affected by this transition."
msgstr ""

#: migrating-GtkStyleContext.xml:71(listitem)
msgid ""
"gtk_paint_spinner() disappears in favor of gtk_render_activity() with a "
"#GTK_STYLE_CLASS_SPINNER class set in the style context."
msgstr ""

#: migrating-GtkStyleContext.xml:77(para)
msgid "The list of available render methods is:"
msgstr ""

#: migrating-GtkStyleContext.xml:8(para)
msgid ""
"In GTK+ 3.0, #GtkStyleContext was added to replace #GtkStyle and the theming "
"infrastructure available in 2.x. GtkStyleContext is an object similar in "
"spirit to GtkStyle, as it contains theming information, although in a more "
"complete and tokenized fashion. There are two aspects to switching to "
"GtkStyleContext: porting themes and theme engines, and porting applications, "
"libraries and widgets."
msgstr ""

#: migrating-GtkStyleContext.xml:82(member)
msgid "gtk_render_background(): Renders a widget/area background."
msgstr ""

#: migrating-GtkStyleContext.xml:85(member)
msgid ""
"gtk_render_frame(): Renders a frame border around the given rectangle. "
"Usually the detail of the border depends on the theme information, plus the "
"current widget state."
msgstr ""

#: migrating-GtkStyleContext.xml:90(member)
msgid "gtk_render_frame_gap(): Renders a frame border with a gap on one side."
msgstr ""

#: migrating-GtkStyleContext.xml:93(member)
msgid "gtk_render_layout(): Renders a #PangoLayout."
msgstr ""

#: migrating-GtkStyleContext.xml:96(member)
msgid ""
"gtk_render_handle(): Renders all kind of handles and resize grips, depending "
"on the style class."
msgstr ""
