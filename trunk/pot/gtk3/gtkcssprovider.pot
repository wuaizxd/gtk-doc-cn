# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-13 21:49-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:126:4
msgid ""
"/&ast; Theme notebooks, and anything that's within these &ast;/ GtkNotebook "
"{ background-color: &num;a939f0 }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:131:7
msgid ""
"/&ast; Theme combo boxes, and entries that are direct children of a notebook "
"&ast;/ GtkComboBox, GtkNotebook > GtkEntry { color: @fg_color; background-"
"color: &num;1209a2 }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:139:4
msgid ""
"/&ast; Theme any widget within a GtkBin &ast;/ GtkBin * { font-name: Sans "
"20 }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:144:4
msgid ""
"/&ast; Theme a label named title-label &ast;/ GtkLabel&num;title-label "
"{ font-name: Sans 15 }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:149:29
msgid ""
"/&ast; Theme any widget named main-entry &ast;/ &num;main-entry { background-"
"color: &num;f0a810 } </programlisting> </example> <para> Widgets may also "
"define style classes, which can be used for matching. When used in a "
"selector, style classes must be prefixed with a '.' character. </para> "
"<para> Refer to the documentation of individual widgets to learn which style "
"classes they define and see <xref linkend=|$_1_$|gtkstylecontext-classes|$_1_"
"$|/> for a list of all style classes used by GTK+ widgets. </para> <para> "
"Note that there is some ambiguity in the selector syntax when it comes to "
"differentiation widget class names from regions. GTK+ currently treats a "
"string as a widget class name if it contains any uppercase characters (which "
"should work for more widgets with names like GtkLabel). </para> <example> "
"<title>Style classes in selectors</title> <programlisting language=|$_1_$|"
"text|$_1_$|> /&ast; Theme all widgets defining the class entry &ast;/ .entry "
"{ color: &num;39f1f9; }"
msgstr ""

# #used by: gtk_css_provider_new:
#: gtkcssprovider.c:1494:1
msgid "Returns a newly created #GtkCssProvider."
msgstr ""

# #used by: gtk_css_provider_new:
#: gtkcssprovider.c:1496:1
msgid "Returns: A new #GtkCssProvider"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:179:33
msgid ""
"/&ast; Theme spinbuttons' entry &ast;/ GtkSpinButton.entry { color: "
"&num;900185 } </programlisting> </example> <para> In complicated widgets "
"like e.g. a GtkNotebook, it may be desirable to style different parts of the "
"widget differently. To make this possible, container widgets may define "
"regions, whose names may be used for matching in selectors. </para> <para> "
"Some containers allow to further differentiate between regions by applying "
"so-called pseudo-classes to the region. For example, the tab region in "
"GtkNotebook allows to single out the first or last tab by using the :first-"
"child or :last-child pseudo-class. When used in selectors, pseudo-classes "
"must be prefixed with a ':' character. </para> <para> Refer to the "
"documentation of individual widgets to learn which regions and pseudo-"
"classes they define and see <xref linkend=|$_1_$|gtkstylecontext-classes|$_1_"
"$|/> for a list of all regions used by GTK+ widgets. </para> <example> "
"<title>Regions in selectors</title> <programlisting language=|$_1_$|text|$_1_"
"$|> /&ast; Theme any label within a notebook &ast;/ GtkNotebook GtkLabel "
"{ color: &num;f90192; }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:213:4
msgid ""
"/&ast; Theme labels within notebook tabs &ast;/ GtkNotebook tab GtkLabel "
"{ color: &num;703910; }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:218:22
msgid ""
"/&ast; Theme labels in the any first notebook tab, both selectors are "
"equivalent &ast;/ GtkNotebook tab:nth-child(first) GtkLabel, GtkNotebook tab:"
"first-child GtkLabel { color: &num;89d012; } </programlisting> </example> "
"<para> Another use of pseudo-classes is to match widgets depending on their "
"state. This is conceptually similar to the :hover, :active or :focus pseudo-"
"classes in CSS. The available pseudo-classes for widget states are :active, :"
"prelight (or :hover), :insensitive, :selected, :focused and :inconsistent. </"
"para> <example> <title>Styling specific widget states</title> "
"<programlisting language=|$_1_$|text|$_1_$|> /&ast; Theme active (pressed) "
"buttons &ast;/ GtkButton:active { background-color: &num;0274d9; }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:241:6
msgid ""
"/&ast; Theme buttons with the mouse pointer on it, both are equivalent "
"&ast;/ GtkButton:hover, GtkButton:prelight { background-color: &num;3085a9; }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:248:5
msgid ""
"/&ast; Theme insensitive widgets, both are equivalent &ast;/ :insensitive, *:"
"insensitive { background-color: &num;320a91; }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:254:4
msgid ""
"/&ast; Theme selection colors in entries &ast;/ GtkEntry:selected "
"{ background-color: &num;56f9a0; }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:259:4
msgid ""
"/&ast; Theme focused labels &ast;/ GtkLabel:focused { background-color: &num;"
"b4940f; }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:264:49
msgid ""
"/&ast; Theme inconsistent checkbuttons &ast;/ GtkCheckButton:inconsistent "
"{ background-color: &num;20395a; } </programlisting> </example> <para> "
"Widget state pseudoclasses may only apply to the last element in a selector. "
"</para> <para> To determine the effective style for a widget, all the "
"matching rule sets are merged. As in CSS, rules apply by specificity, so the "
"rules whose selectors more closely match a widget path will take precedence "
"over the others. </para> </refsect2> <refsect2 id=|$_1_$|gtkcssprovider-"
"rules|$_1_$|> <title>&commat; Rules</title> <para> GTK+'s CSS supports the "
"&commat;import rule, in order to load another CSS style sheet in addition to "
"the currently parsed one. </para> <example> <title>Using the &commat;import "
"rule</title> <programlisting language=|$_1_$|text|$_1_$|> &commat;import url "
"(|$_1_$|path/to/common.css|$_1_$|); </programlisting> </example> <para id=|"
"$_1_$|css-binding-set|$_1_$|> In order to extend key bindings affecting "
"different widgets, GTK+ supports the &commat;binding-set rule to parse a set "
"of bind/unbind directives, see #GtkBindingSet for the supported syntax. Note "
"that the binding sets defined in this way must be associated with rule sets "
"by setting the gtk-key-bindings style property. </para> <para> Customized "
"key bindings are typically defined in a separate <filename>gtk-keys.css</"
"filename> CSS file and GTK+ loads this file according to the current key "
"theme, which is defined by the #GtkSettings:gtk-key-theme-name setting. </"
"para> <example> <title>Using the &commat;binding rule</title> "
"<programlisting language=|$_1_$|text|$_1_$|> &commat;binding-set binding-"
"set1 { bind |$_1_$|&lt;alt&gt;Left|$_1_$| { |$_1_$|move-cursor|$_1_$| "
"(visual-positions, -3, 0) }; unbind |$_1_$|End|$_1_$|; };"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:314:5
msgid ""
"&commat;binding-set binding-set2 { bind |$_1_$|&lt;alt&gt;Right|$_1_$| { |"
"$_1_$|move-cursor|$_1_$| (visual-positions, 3, 0) }; bind |$_1_$|&lt;alt&gt;"
"KP_space|$_1_$| { |$_1_$|delete-from-cursor|$_1_$| (whitespace, 1) |$_1_$|"
"insert-at-cursor|$_1_$| (|$_1_$| |$_1_$|) }; };"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:320:15
msgid ""
"GtkEntry { gtk-key-bindings: binding-set1, binding-set2; } </programlisting> "
"</example> <para> GTK+ also supports an additional &commat;define-color "
"rule, in order to define a color name which may be used instead of color "
"numeric representations. Also see the #GtkSettings:gtk-color-scheme setting "
"for a way to override the values of these named colors. </para> <example> "
"<title>Defining colors</title> <programlisting language=|$_1_$|text|$_1_$|> "
"&commat;define-color bg_color &num;f9a039;"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:336:18
msgid ""
"&ast; { background-color: &commat;bg_color; } </programlisting> </example> </"
"refsect2> <refsect2 id=|$_1_$|gtkcssprovider-symbolic-colors|$_1_$|> "
"<title>Symbolic colors</title> <para> Besides being able to define color "
"names, the CSS parser is also able to read different color expressions, "
"which can also be nested, providing a rich language to define colors which "
"are derived from a set of base colors. </para> <example> <title>Using "
"symbolic colors</title> <programlisting language=|$_1_$|text|$_1_$|> &commat;"
"define-color entry-color shade (&commat;bg_color, 0.7);"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:355:3
msgid "GtkEntry { background-color: @entry-color; }"
msgstr ""

# #-#-#-#-#  gtkcssprovider.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: gtk_css_provider_load_from_data:
# #-#-#-#-#  gtkcssprovider.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: gtk_css_provider_load_from_file:
# #-#-#-#-#  gtkcssprovider.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: gtk_css_provider_load_from_path:
#: gtkcssprovider.c:3584:1 gtkcssprovider.c:3626:1 gtkcssprovider.c:3729:1
msgid "@css_provider: a #GtkCssProvider"
msgstr ""

# used by: gtk_css_provider_load_from_data:
#: gtkcssprovider.c:3585:1
msgid "@data: CSS data loaded in memory"
msgstr ""

# used by: gtk_css_provider_load_from_data:
#: gtkcssprovider.c:3586:1
msgid "@length: the length of @data in bytes, or -1 for NUL terminated strings"
msgstr ""

# #-#-#-#-#  gtkcssprovider.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: gtk_css_provider_load_from_data:
# #-#-#-#-#  gtkcssprovider.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: gtk_css_provider_load_from_file:
# #-#-#-#-#  gtkcssprovider.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: gtk_css_provider_load_from_path:
#: gtkcssprovider.c:3587:1 gtkcssprovider.c:3628:1 gtkcssprovider.c:3731:1
msgid "@error: (out) (allow-none): return location for a #GError, or %NULL"
msgstr ""

# #used by: gtk_css_provider_load_from_data:
#: gtkcssprovider.c:3589:2
msgid ""
"Loads @data into @css_provider, making it clear any previously loaded "
"information."
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:359:364
msgid ""
"GtkEntry:focused { background-color: mix (&commat;entry-color, shade (&num;"
"fff, 0.5), 0.8); } </programlisting> </example> <para> The various ways to "
"express colors in GTK+ CSS are: </para> <informaltable> <tgroup cols=|$_1_$|"
"3|$_1_$|> <thead> <row> <entry>Syntax</entry> <entry>Explanation</entry> "
"<entry>Examples</entry> </row> </thead> <tbody> <row> <entry>rgb(@r, @g, @b)"
"</entry> <entry>An opaque color; @r, @g, @b can be either integers between 0 "
"and 255 or percentages</entry> <entry><literallayout>rgb(128, 10, 54) rgb"
"(20%, 30%, 0%)</literallayout></entry> </row> <row> <entry>rgba(@r, @g, @b, "
"@a)</entry> <entry>A translucent color; @r, @g, @b are as in the previous "
"row, @a is a floating point number between 0 and 1</entry> "
"<entry><literallayout>rgba(255, 255, 0, 0.5)</literallayout></entry> </row> "
"<row> <entry>&num;@xxyyzz</entry> <entry>An opaque color; @xx, @yy, @zz are "
"hexadecimal numbers specifying @r, @g, @b variants with between 1 and 4 "
"hexadecimal digits per component are allowed</entry> "
"<entry><literallayout>&num;ff12ab &num;f0c</literallayout></entry> </row> "
"<row> <entry>&commat;name</entry> <entry>Reference to a color that has been "
"defined with &commat;define-color </entry> <entry>&commat;bg_color</entry> </"
"row> <row> <entry>mix(@color1, @color2, @f)</entry> <entry>A linear "
"combination of @color1 and @color2. @f is a floating point number between 0 "
"and 1.</entry> <entry><literallayout>mix(&num;ff1e0a, &commat;bg_color, 0.8)"
"</literallayout></entry> </row> <row> <entry>shade(@color, @f)</entry> "
"<entry>A lighter or darker variant of @color. @f is a floating point number. "
"</entry> <entry>shade(&commat;fg_color, 0.5)</entry> </row> <row> "
"<entry>lighter(@color)</entry> <entry>A lighter variant of @color</entry> </"
"row> <row> <entry>darker(@color)</entry> <entry>A darker variant of @color</"
"entry> </row> </tbody> </tgroup> </informaltable> </refsect2> <refsect2 id=|"
"$_1_$|gtkcssprovider-gradients|$_1_$|> <title>Gradients</title> <para> "
"Linear or radial Gradients can be used as background images. </para> <para> "
"A linear gradient along the line from (@start_x, @start_y) to (@end_x, "
"@end_y) is specified using the syntax <literallayout>-gtk-gradient (linear, "
"@start_x @start_y, @end_x @end_y, color-stop (@position, @color), ...)</"
"literallayout> where @start_x and @end_x can be either a floating point "
"number between 0 and 1 or one of the special values 'left', 'right' or "
"'center', @start_y and @end_y can be either a floating point number between "
"0 and 1 or one of the special values 'top', 'bottom' or 'center', @position "
"is a floating point number between 0 and 1 and @color is a color expression "
"(see above). The color-stop can be repeated multiple times to add more than "
"one color stop. 'from (@color)' and 'to (@color)' can be used as "
"abbreviations for color stops with position 0 and 1, respectively. </para> "
"<example> <title>A linear gradient</title> <inlinegraphic fileref=|$_1_$|"
"gradient1.png|$_1_$| format=|$_1_$|PNG|$_1_$|/> <para>This gradient was "
"specified with <literallayout>-gtk-gradient (linear, left top, right bottom, "
"from(&commat;yellow), to(&commat;blue))</literallayout></para> </example> "
"<example> <title>Another linear gradient</title> <inlinegraphic fileref=|$_1_"
"$|gradient2.png|$_1_$| format=|$_1_$|PNG|$_1_$|/> <para>This gradient was "
"specified with <literallayout>-gtk-gradient (linear, 0 0, 0 1, color-stop(0, "
"&commat;yellow), color-stop(0.2, &commat;blue), color-stop(1, &num;0f0))</"
"literallayout></para> </example> <para> A radial gradient along the two "
"circles defined by (@start_x, @start_y, @start_radius) and (@end_x, @end_y, "
"@end_radius) is specified using the syntax <literallayout>-gtk-gradient "
"(radial, @start_x @start_y, @start_radius, @end_x @end_y, @end_radius, color-"
"stop (@position, @color), ...)</literallayout> where @start_radius and "
"@end_radius are floating point numbers and the other parameters are as "
"before. </para> <example> <title>A radial gradient</title> <inlinegraphic "
"fileref=|$_1_$|gradient3.png|$_1_$| format=|$_1_$|PNG|$_1_$|/> <para>This "
"gradient was specified with <literallayout>-gtk-gradient (radial, center "
"center, 0, center center, 1, from(&commat;yellow), to(&commat;green))</"
"literallayout></para> </example> <example> <title>Another radial gradient</"
"title> <inlinegraphic fileref=|$_1_$|gradient4.png|$_1_$| format=|$_1_$|PNG|"
"$_1_$|/> <para>This gradient was specified with <literallayout>-gtk-gradient "
"(radial, 0.4 0.4, 0.1, 0.6 0.6, 0.7, color-stop (0, &num;f00), color-stop "
"(0.1, &num;a0f), color-stop (0.2, &commat;yellow), color-stop (1, &commat;"
"green))</literallayout></para> </example> </refsect2> <refsect2 id=|$_1_$|"
"gtkcssprovider-slices|$_1_$|> <title>Border images</title> <para> Images can "
"be used in 'slices' for the purpose of creating scalable borders. </para> "
"<inlinegraphic fileref=|$_1_$|slices.png|$_1_$| format=|$_1_$|PNG|$_1_$|/> "
"<para> The syntax for specifying border images of this kind is: "
"<literallayout>url(@path) @top @right @bottom @left [repeat|stretch]? "
"[repeat|stretch]?</literallayout> The sizes of the 'cut off' portions are "
"specified with the @top, @right, @bottom and @left parameters. The 'middle' "
"sections can be repeated or stretched to create the desired effect, by "
"adding the 'repeat' or 'stretch' options after the dimensions. If two "
"options are specified, the first one affects the horizontal behaviour and "
"the second one the vertical behaviour. If only one option is specified, it "
"affects both. </para> <example> <title>A border image</title> <inlinegraphic "
"fileref=|$_1_$|border1.png|$_1_$| format=|$_1_$|PNG|$_1_$|/> <para>This "
"border image was specified with <literallayout>url(|$_1_$|gradient1.png|$_1_"
"$|) 10 10 10 10</literallayout> </para> </example> <example> <title>A "
"repeating border image</title> <inlinegraphic fileref=|$_1_$|border2.png|$_1_"
"$| format=|$_1_$|PNG|$_1_$|/> <para>This border image was specified with "
"<literallayout>url(|$_1_$|gradient1.png|$_1_$|) 10 10 10 10 repeat</"
"literallayout> </para> </example> <example> <title>A stretched border image</"
"title> <inlinegraphic fileref=|$_1_$|border3.png|$_1_$| format=|$_1_$|PNG|"
"$_1_$|/> <para>This border image was specified with <literallayout>url(|$_1_"
"$|gradient1.png|$_1_$|) 10 10 10 10 stretch</literallayout> </para> </"
"example> </refsect2> <refsect2 id=|$_1_$|gtkcssprovider-transitions|$_1_$|> "
"<para>Styles can specify transitions that will be used to create a gradual "
"change in the appearance when a widget state changes. The following syntax "
"is used to specify transitions: <literallayout>@duration [s|ms] [linear|ease|"
"ease-in|ease-out|ease-in-out] [loop]?</literallayout> The @duration is the "
"amount of time that the animation will take for a complete cycle from start "
"to end. If the loop option is given, the animation will be repated until the "
"state changes again. The option after the duration determines the transition "
"function from a small set of predefined functions. <figure><title>Linear "
"transition</title> <graphic fileref=|$_1_$|linear.png|$_1_$| format=|$_1_$|"
"PNG|$_1_$|/> </figure> <figure><title>Ease transition</title> <graphic "
"fileref=|$_1_$|ease.png|$_1_$| format=|$_1_$|PNG|$_1_$|/> </figure> "
"<figure><title>Ease-in-out transition</title> <graphic fileref=|$_1_$|ease-"
"in-out.png|$_1_$| format=|$_1_$|PNG|$_1_$|/> </figure> <figure><title>Ease-"
"in transition</title> <graphic fileref=|$_1_$|ease-in.png|$_1_$| format=|$_1_"
"$|PNG|$_1_$|/> </figure> <figure><title>Ease-out transition</title> <graphic "
"fileref=|$_1_$|ease-out.png|$_1_$| format=|$_1_$|PNG|$_1_$|/> </figure> </"
"para> </refsect2> <refsect2 id=|$_1_$|gtkcssprovider-properties|$_1_$|> "
"<title>Supported properties</title> <para> Properties are the part that "
"differ the most to common CSS, not all properties are supported (some are "
"planned to be supported eventually, some others are meaningless or don't map "
"intuitively in a widget based environment). </para> <para> There is also a "
"difference in shorthand properties, for example in common CSS it is fine to "
"define a font through the different @font-family, @font-style, @font-size "
"properties, meanwhile in GTK+'s CSS only the canonical @font property is "
"supported. </para> <para> The currently supported properties are: </para> "
"<informaltable> <tgroup cols=|$_1_$|4|$_1_$|> <thead> <row> <entry>Property "
"name</entry> <entry>Syntax</entry> <entry>Maps to</entry> <entry>Examples</"
"entry> </row> </thead> <tbody> <row> <entry>engine</entry> <entry>engine-"
"name</entry> <entry>#GtkThemingEngine</entry> <entry>engine: clearlooks; "
"engine: none; /&ast; use the default (i.e. builtin) engine) &ast;/ </entry> "
"</row> <row> <entry>background-color</entry> <entry morerows=|$_1_$|2|$_1_$|"
">color (see above)</entry> <entry morerows=|$_1_$|2|$_1_$|>#GdkRGBA</entry> "
"<entry morerows=|$_1_$|2|$_1_$|><literallayout>background-color: &num;fff; "
"color: &amp;color1; background-color: shade (&amp;color1, 0.5); color: mix "
"(&amp;color1, &num;f0f, 0.8);</literallayout> </entry> </row> <row> "
"<entry>color</entry> </row> <row> <entry>border-color</entry> </row> <row> "
"<entry>font</entry> <entry>@family [@style] [@size]</entry> "
"<entry>#PangoFontDescription</entry> <entry>font: Sans 15;</entry> </row> "
"<row> <entry>margin</entry> <entry morerows=|$_1_$|1|$_1_$|"
"><literallayout>@width @vertical_width @horizontal_width @top_width "
"@horizontal_width @bottom_width @top_width @right_width @bottom_width "
"@left_width</literallayout> </entry> <entry morerows=|$_1_$|1|$_1_$|"
">#GtkBorder</entry> <entry morerows=|$_1_$|1|$_1_$|><literallayout>margin: "
"5; margin: 5 10; margin: 5 10 3; margin: 5 10 3 5;</literallayout> </entry> "
"</row> <row> <entry>padding</entry> </row> <row> <entry>background-image</"
"entry> <entry><literallayout>gradient (see above) or url(@path)</"
"literallayout></entry> <entry>#cairo_pattern_t</entry> "
"<entry><literallayout>-gtk-gradient (linear, left top, right top, from (&num;"
"fff), to (&num;000)); -gtk-gradient (linear, 0.0 0.5, 0.5 1.0, from (&num;"
"fff), color-stop (0.5, &num;f00), to (&num;000)); -gtk-gradient (radial, "
"center center, 0.2, center center, 0.8, color-stop (0.0, &num;fff), color-"
"stop (1.0, &num;000)); url ('background.png');</literallayout> </entry> </"
"row> <row> <entry>border-width</entry> <entry>integer</entry> <entry>#gint</"
"entry> <entry>border-width: 5;</entry> </row> <row> <entry>border-radius</"
"entry> <entry>integer</entry> <entry>#gint</entry> <entry>border-radius: 5;</"
"entry> </row> <row> <entry>border-style</entry> <entry>[none|solid|inset|"
"outset]</entry> <entry>#GtkBorderStyle</entry> <entry>border-style: solid;</"
"entry> </row> <row> <entry>border-image</entry> <entry><literallayout>border "
"image (see above)</literallayout></entry> <entry>internal use only</entry> "
"<entry><literallayout>border-image: url(|$_1_$|/path/to/image.png|$_1_$|) 3 "
"4 3 4 stretch; border-image: url(|$_1_$|/path/to/image.png|$_1_$|) 3 4 4 3 "
"repeat stretch;</literallayout> </entry> </row> <row> <entry>transition</"
"entry> <entry>transition (see above)</entry> <entry>internal use only</"
"entry> <entry><literallayout>transition: 150ms ease-in-out; transition: 1s "
"linear loop;</literallayout> </entry> </row> <row> <entry>gtk-key-bindings</"
"entry> <entry>binding set name list</entry> <entry>internal use only</entry> "
"<entry><literallayout>gtk-bindings: binding1, binding2, ...;</literallayout> "
"</entry> </row> </tbody> </tgroup> </informaltable> <para> GtkThemingEngines "
"can register their own, engine-specific style properties with the function "
"gtk_theming_engine_register_property(). These properties can be set in CSS "
"like other properties, using a name of the form <literallayout>-"
"<replaceable>namespace</replaceable>-<replaceable>name</replaceable></"
"literallayout>, where <replaceable>namespace</replaceable> is typically the "
"name of the theming engine, and <replaceable>name</replaceable> is the name "
"of the property. Style properties that have been registered by widgets using "
"gtk_widget_class_install_style_property() can also be set in this way, using "
"the widget class name for <replaceable>namespace</replaceable>. </para> "
"<example> <title>Using engine-specific style properties</title>"
msgstr ""

# #-#-#-#-#  gtkcssprovider.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: gtk_css_provider_load_from_data:
# #-#-#-#-#  gtkcssprovider.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: gtk_css_provider_load_from_file:
# #-#-#-#-#  gtkcssprovider.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: gtk_css_provider_load_from_path:
#: gtkcssprovider.c:3592:1 gtkcssprovider.c:3633:1 gtkcssprovider.c:3736:1
msgid "Returns: %TRUE if the data could be loaded."
msgstr ""

# used by: gtk_css_provider_load_from_file:
#: gtkcssprovider.c:3627:1
msgid "@file: #GFile pointing to a file to load"
msgstr ""

# #used by: gtk_css_provider_load_from_file:
#: gtkcssprovider.c:3630:2
msgid ""
"Loads the data contained in @file into @css_provider, making it clear any "
"previously loaded information."
msgstr ""

# used by: gtk_css_provider_load_from_path:
#: gtkcssprovider.c:3730:1
msgid "@path: the path of a filename to load, in the GLib filename encoding"
msgstr ""

# #used by: gtk_css_provider_load_from_path:
#: gtkcssprovider.c:3733:2
msgid ""
"Loads the data contained in @path into @css_provider, making it clear any "
"previously loaded information."
msgstr ""

# #used by: gtk_css_provider_get_default:
#: gtkcssprovider.c:3753:2
msgid ""
"Returns the provider containing the style settings used as a fallback for "
"all widgets."
msgstr ""

# #used by: gtk_css_provider_get_default:
#: gtkcssprovider.c:3756:2
msgid ""
"Returns: (transfer none): The provider used for fallback styling. This "
"memory is owned by GTK+, and you must not free it."
msgstr ""

# used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:41:1
msgid "@Short_description: CSS-like styling for widgets"
msgstr ""

# used by: gtk_css_provider_get_named:
#: gtkcssprovider.c:4162:1
msgid "@name: A theme name"
msgstr ""

# used by: gtk_css_provider_get_named:
#: gtkcssprovider.c:4163:2
msgid ""
"@variant: (allow-none): variant to load, for example, |$_1_$|dark|$_1_$|, or "
"%NULL for the default"
msgstr ""

# #used by: gtk_css_provider_get_named:
#: gtkcssprovider.c:4166:1
msgid "Loads a theme from the usual theme paths"
msgstr ""

# #used by: gtk_css_provider_get_named:
#: gtkcssprovider.c:4168:2
msgid ""
"Returns: (transfer none): a #GtkCssProvider with the theme loaded. This "
"memory is owned by GTK+, and you must not free it."
msgstr ""

# used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:42:1
msgid "@Title: GtkCssProvider"
msgstr ""

# used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:43:1
msgid "@See_also: #GtkStyleContext, #GtkStyleProvider"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:45:3
msgid ""
"GtkCssProvider is an object implementing the #GtkStyleProvider interface. It "
"is able to parse <ulink url=|$_1_$|http://www.w3.org/TR/CSS2|$_1_$|>CSS</"
"ulink>-like input in order to style widgets."
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:49:76
msgid ""
"<refsect2 id=|$_1_$|gtkcssprovider-files|$_1_$|> <title>Default files</"
"title> <para> An application can cause GTK+ to parse a specific CSS style "
"sheet by calling gtk_css_provider_load_from_file() and adding the provider "
"with gtk_style_context_add_provider() or "
"gtk_style_context_add_provider_for_screen(). In addition, certain files will "
"be read when GTK+ is initialized. First, the file <filename><envar>"
"$XDG_CONFIG_HOME</envar>/gtk-3.0/gtk.css</filename> is loaded if it exists. "
"Then, GTK+ tries to load <filename><envar>$HOME</envar>/.themes/"
"<replaceable>theme-name</replaceable>/gtk-3.0/gtk.css</filename>, falling "
"back to <filename><replaceable>datadir</replaceable>/share/themes/"
"<replaceable>theme-name</replaceable>/gtk-3.0/gtk.css</filename>, where "
"<replaceable>theme-name</replaceable> is the name of the current theme (see "
"the #GtkSettings:gtk-theme-name setting) and <replaceable>datadir</"
"replaceable> is the prefix configured when GTK+ was compiled, unless "
"overridden by the <envar>GTK_DATA_PREFIX</envar> environment variable. </"
"para> </refsect2> <refsect2 id=|$_1_$|gtkcssprovider-stylesheets|$_1_$|> "
"<title>Style sheets</title> <para> The basic structure of the style sheets "
"understood by this provider is a series of statements, which are either rule "
"sets or '@-rules', separated by whitespace. </para> <para> A rule set "
"consists of a selector and a declaration block, which is a series of "
"declarations enclosed in curly braces ({ and }). The declarations are "
"separated by semicolons (;). Multiple selectors can share the same "
"declaration block, by putting all the separators in front of the block, "
"separated by commas. </para> <example><title>A rule set with two selectors</"
"title> <programlisting language=|$_1_$|text|$_1_$|> GtkButton, GtkEntry "
"{ color: &num;ff00ea; font: Comic Sans 12 } </programlisting> </example> </"
"refsect2> <refsect2 id=|$_1_$|gtkcssprovider-selectors|$_1_$|> "
"<title>Selectors</title> <para> Selectors work very similar to the way they "
"do in CSS, with widget class names taking the role of element names, and "
"widget names taking the role of IDs. When used in a selector, widget names "
"must be prefixed with a '&num;' character. The '*' character represents the "
"so-called universal selector, which matches any widget. </para> <para> To "
"express more complicated situations, selectors can be combined in various "
"ways: <itemizedlist> <listitem><para>To require that a widget satisfies "
"several conditions, combine several selectors into one by concatenating "
"them. E.g. <literal>GtkButton&num;button1</literal> matches a GtkButton "
"widget with the name button1.</para></listitem> <listitem><para>To only "
"match a widget when it occurs inside some other widget, write the two "
"selectors after each other, separated by whitespace. E.g. "
"<literal>GtkToolBar GtkButton</literal> matches GtkButton widgets that occur "
"inside a GtkToolBar.</para></listitem> <listitem><para>In the previous "
"example, the GtkButton is matched even if it occurs deeply nested inside the "
"toolbar. To restrict the match to direct children of the parent widget, "
"insert a '>' character between the two selectors. E.g. <literal>GtkNotebook "
"> GtkLabel</literal> matches GtkLabel widgets that are direct children of a "
"GtkNotebook.</para></listitem> </itemizedlist> </para> <example> "
"<title>Widget classes and names in selectors</title> <programlisting "
"language=|$_1_$|text|$_1_$|> /&ast; Theme labels that are descendants of a "
"window &ast;/ GtkWindow GtkLabel { background-color: &num;898989 }"
msgstr ""

# #used by: SECTION:gtkcssprovider
#: gtkcssprovider.c:731:2
msgid "</example> </refsect2>"
msgstr ""
