msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-04-14 21:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: compiling.sgml:0(None)
msgid "translator-credits"
msgstr ""

#: compiling.sgml:13(refname) compiling.sgml:7(refentrytitle)
msgid "Compiling GLib Applications"
msgstr ""

#: compiling.sgml:14(refpurpose)
msgid "How to compile your GLib application"
msgstr ""

#: compiling.sgml:20(title)
msgid "Compiling GLib Applications on UNIX"
msgstr ""

#: compiling.sgml:22(para)
msgid ""
"To compile a GLib application, you need to tell the compiler where to find "
"the GLib header files and libraries. This is done with the <application>pkg-"
"config</application> utility."
msgstr ""

#: compiling.sgml:27(para)
msgid ""
"The following interactive shell session demonstrates how <application>pkg-"
"config</application> is used (the actual output on your system may be "
"different): <placeholder-1/>"
msgstr ""

#: compiling.sgml:31(programlisting)
#, no-wrap
msgid ""
"\n"
"$ pkg-config --cflags glib-2.0\n"
" -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include \n"
"$ pkg-config --libs glib-2.0\n"
" -L/usr/lib -lm -lglib-2.0  \n"
msgstr ""

#: compiling.sgml:38(para)
msgid ""
"If your application uses threads or <structname>GObject</structname> "
"features, it must be compiled and linked with the options returned by the "
"following <application>pkg-config</application> invocations: <placeholder-1/>"
msgstr ""

#: compiling.sgml:42(programlisting)
#, no-wrap
msgid ""
"\n"
"$ pkg-config --cflags --libs gthread-2.0\n"
"$ pkg-config --cflags --libs gobject-2.0\n"
msgstr ""

#: compiling.sgml:47(para)
msgid ""
"If your application uses modules, it must be compiled and linked with the "
"options returned by one of the following <application>pkg-config</"
"application> invocations: <placeholder-1/> The difference between the two is "
"that gmodule-2.0 adds <option>--export-dynamic</option> to the linker flags, "
"which is often not needed."
msgstr ""

#: compiling.sgml:50(programlisting)
#, no-wrap
msgid ""
"\n"
"$ pkg-config --cflags --libs gmodule-no-export-2.0 \n"
"$ pkg-config --cflags --libs gmodule-2.0 \n"
msgstr ""

#: compiling.sgml:57(para)
msgid ""
"The simplest way to compile a program is to use the \"backticks\" feature of "
"the shell. If you enclose a command in backticks (<emphasis>not single "
"quotes</emphasis>), then its output will be substituted into the command "
"line before execution. So to compile a GLib Hello, World, you would type the "
"following: <placeholder-1/>"
msgstr ""

#: compiling.sgml:63(programlisting)
#, no-wrap
msgid ""
"\n"
"$ cc `pkg-config --cflags --libs glib-2.0` hello.c -o hello\n"
msgstr ""

#: compiling.sgml:68(para)
msgid ""
"If you want to make sure that your program doesn't use any deprecated "
"functions, you can define the preprocessor symbol G_DISABLE_DEPRECATED by "
"using the command line option <literal>-DG_DISABLE_DEPRECATED=1</literal>."
msgstr ""

#: compiling.sgml:74(para)
msgid ""
"The recommended way of using GLib has always been to only include the "
"toplevel headers <filename>glib.h</filename>, <filename>glib-object.h</"
"filename>, <filename>gio.h</filename>. Still, there are some exceptions; "
"these headers have to be included separately: <filename>gmodule.h</"
"filename>, <filename>glib/gi18n-lib.h</filename> or <filename>glib/gi18n.h</"
"filename> (see the <link linkend=\"glib-I18N\">Internationalization section</"
"link>), <filename>glib/gprintf.h</filename> and <filename>glib/gstdio.h</"
"filename> (we don't want to pull in all of stdio)."
msgstr ""

#: compiling.sgml:8(manvolnum)
msgid "3"
msgstr ""

#: compiling.sgml:86(para)
msgid ""
"Starting with 2.17, GLib enforces this by generating an error when "
"individual headers are directly included. To help with the transition, the "
"enforcement is not turned on by default for GLib headers (it <emphasis>is</"
"emphasis> turned on for GObject and GIO). To turn it on, define the "
"preprocessor symbol G_DISABLE_SINGLE_INCLUDES by using the command line "
"option <literal>-DG_DISABLE_SINGLE_INCLUDES</literal>."
msgstr ""

#: compiling.sgml:9(refmiscinfo)
msgid "GLib Library"
msgstr ""
