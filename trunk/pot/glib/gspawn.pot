# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 20:50-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. used by: g_spawn_async:
#: gspawn.c:102:6
msgid ""
"<note><para> If you are writing a GTK+ application, and the program you are "
"spawning is a graphical application, too, then you may want to use "
"gdk_spawn_on_screen() instead to ensure that the spawned program opens its "
"windows on the right screen. </para></note>"
msgstr ""

#. used by: g_spawn_async:
#: gspawn.c:109:4
msgid ""
"<note><para> Note that the returned @child_pid on Windows is a handle to the "
"child process and not its identifier. Process handles and process "
"identifiers are different concepts on Windows. </para></note>"
msgstr ""

#. used by: g_spawn_async:
#: gspawn.c:114:1
msgid "Return value: %TRUE on success, %FALSE if error is set"
msgstr ""

#. used by: g_spawn_close_pid:
#: gspawn.c:1675:1
msgid "@pid: The process reference to close"
msgstr ""

#. used by: g_spawn_close_pid:
#: gspawn.c:1677:4
msgid ""
"On some platforms, notably Windows, the #GPid type represents a resource "
"which must be closed to prevent resource leaking. g_spawn_close_pid() is "
"provided for this purpose. It should be used on all platforms, even though "
"it doesn't do anything under UNIX."
msgstr ""

#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_sync:
#: gspawn.c:207:1 gspawn.c:87:1
msgid ""
"@working_directory: child's current working directory, or %NULL to inherit "
"parent's"
msgstr ""

#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_sync:
#: gspawn.c:208:1 gspawn.c:88:1
msgid "@argv: child's argument vector"
msgstr ""

#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_sync:
#: gspawn.c:209:1 gspawn.c:89:1
msgid "@envp: child's environment, or %NULL to inherit parent's"
msgstr ""

#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_sync:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async_with_pipes:
#: gspawn.c:210:1 gspawn.c:455:1 gspawn.c:90:1
msgid "@flags: flags from #GSpawnFlags"
msgstr ""

#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_sync:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async_with_pipes:
#: gspawn.c:211:1 gspawn.c:456:1 gspawn.c:91:1
msgid "@child_setup: function to run in the child just before exec()"
msgstr ""

#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_sync:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async_with_pipes:
#: gspawn.c:212:1 gspawn.c:457:1 gspawn.c:92:1
msgid "@user_data: user data for @child_setup"
msgstr ""

#. used by: g_spawn_sync:
#: gspawn.c:213:1
msgid "@standard_output: return location for child output, or %NULL"
msgstr ""

#. used by: g_spawn_sync:
#: gspawn.c:214:1
msgid "@standard_error: return location for child error messages, or %NULL"
msgstr ""

#. used by: g_spawn_sync:
#: gspawn.c:215:1
msgid ""
"@exit_status: return location for child exit status, as returned by waitpid"
"(), or %NULL"
msgstr ""

#. used by: g_spawn_sync:
#: gspawn.c:216:1
msgid "@error: return location for error, or %NULL"
msgstr ""

#. used by: g_spawn_sync:
#: gspawn.c:218:12
msgid ""
"Executes a child synchronously (waits for the child to exit before "
"returning). All output from the child is stored in @standard_output and "
"@standard_error, if those parameters are non-%NULL. Note that you must set "
"the %G_SPAWN_STDOUT_TO_DEV_NULL and %G_SPAWN_STDERR_TO_DEV_NULL flags when "
"passing %NULL for @standard_output and @standard_error. If @exit_status is "
"non-%NULL, the exit status of the child is stored there as it would be "
"returned by waitpid(); standard UNIX macros such as WIFEXITED() and "
"WEXITSTATUS() must be used to evaluate the exit status. Note that this "
"function call waitpid() even if @exit_status is %NULL, and does not accept "
"the %G_SPAWN_DO_NOT_REAP_CHILD flag. If an error occurs, no data is returned "
"in @standard_output, @standard_error, or @exit_status."
msgstr ""

#. used by: g_spawn_sync:
#: gspawn.c:231:3
msgid ""
"This function calls g_spawn_async_with_pipes() internally; see that function "
"for full details on the other parameters and details on how these functions "
"work on Windows."
msgstr ""

#. used by: g_spawn_sync:
#: gspawn.c:235:1
msgid "Return value: %TRUE on success, %FALSE if an error was set."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:452:1
msgid ""
"@working_directory: child's current working directory, or %NULL to inherit "
"parent's, in the GLib file name encoding"
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:453:1
msgid "@argv: child's argument vector, in the GLib file name encoding"
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:454:1
msgid ""
"@envp: child's environment, or %NULL to inherit parent's, in the GLib file "
"name encoding"
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:458:1
msgid "@child_pid: return location for child process ID, or %NULL"
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:459:1
msgid ""
"@standard_input: return location for file descriptor to write to child's "
"stdin, or %NULL"
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:460:1
msgid ""
"@standard_output: return location for file descriptor to read child's "
"stdout, or %NULL"
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:461:1
msgid ""
"@standard_error: return location for file descriptor to read child's stderr, "
"or %NULL"
msgstr ""

#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async_with_pipes:
#: gspawn.c:462:1 gspawn.c:94:1
msgid "@error: return location for error"
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:464:8
msgid ""
"Executes a child program asynchronously (your program will not block waiting "
"for the child to exit). The child program is specified by the only argument "
"that must be provided, @argv. @argv should be a %NULL-terminated array of "
"strings, to be passed as the argument vector for the child. The first string "
"in @argv is of course the name of the program to execute. By default, the "
"name of the program must be a full path; the <envar>PATH</envar> shell "
"variable will only be searched if you pass the %G_SPAWN_SEARCH_PATH flag."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:473:8
msgid ""
"On Windows, note that all the string or string vector arguments to this "
"function and the other g_spawn*() functions are in UTF-8, the GLib file name "
"encoding. Unicode characters that are not part of the system codepage passed "
"in these arguments will be correctly available in the spawned program only "
"if it uses wide character API to retrieve its command line. For C programs "
"built with Microsoft's tools it is enough to make the program have a wmain() "
"instead of main(). wmain() has a wide character argument vector as parameter."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:482:8
msgid ""
"At least currently, mingw doesn't support wmain(), so if you use mingw to "
"develop the spawned program, it will have to call the undocumented function "
"__wgetmainargs() to get the wide character argument vector and environment. "
"See gspawn-win32-helper.c in the GLib sources or init.c in the mingw runtime "
"sources for a prototype for that function. Alternatively, you can retrieve "
"the Win32 system level wide character command line passed to the spawned "
"program using the GetCommandLineW() function."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:491:16
msgid ""
"On Windows the low-level child process creation API <function>CreateProcess()"
"</function> doesn't use argument vectors, but a command line. The C runtime "
"library's <function>spawn*()</function> family of functions (which "
"g_spawn_async_with_pipes() eventually calls) paste the argument vector "
"elements together into a command line, and the C runtime startup code does a "
"corresponding reconstruction of an argument vector from the command line, to "
"be passed to main(). Complications arise when you have argument vector "
"elements that contain spaces of double quotes. The <function>spawn*()</"
"function> functions don't do any quoting or escaping, but on the other hand "
"the startup code does do unquoting and unescaping in order to enable "
"receiving arguments with embedded spaces or double quotes. To work around "
"this asymmetry, g_spawn_async_with_pipes() will do quoting and escaping on "
"argument vector elements that need it before calling the C runtime spawn() "
"function."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:508:3
msgid ""
"The returned @child_pid on Windows is a handle to the child process, not its "
"identifier. Process handles and process identifiers are different concepts "
"on Windows."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:512:4
msgid ""
"@envp is a %NULL-terminated array of strings, where each string has the form "
"<literal>KEY=VALUE</literal>. This will become the child's environment. If "
"@envp is %NULL, the child inherits its parent's environment."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:517:11
msgid ""
"@flags should be the bitwise OR of any flags you want to affect the "
"function's behaviour. The %G_SPAWN_DO_NOT_REAP_CHILD means that the child "
"will not automatically be reaped; you must use a #GChildWatch source to be "
"notified about the death of the child process. Eventually you must call "
"g_spawn_close_pid() on the @child_pid, in order to free resources which may "
"be associated with the child process. (On Unix, using a #GChildWatch source "
"is equivalent to calling waitpid() or handling the %SIGCHLD signal manually. "
"On Windows, calling g_spawn_close_pid() is equivalent to calling CloseHandle"
"() on the process handle returned in @child_pid)."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:529:20
msgid ""
"%G_SPAWN_LEAVE_DESCRIPTORS_OPEN means that the parent's open file "
"descriptors will be inherited by the child; otherwise all descriptors except "
"stdin/stdout/stderr will be closed before calling exec() in the child. "
"%G_SPAWN_SEARCH_PATH means that <literal>argv[0]</literal> need not be an "
"absolute path, it will be looked for in the user's <envar>PATH</envar>. "
"%G_SPAWN_STDOUT_TO_DEV_NULL means that the child's standard output will be "
"discarded, instead of going to the same location as the parent's standard "
"output. If you use this flag, @standard_output must be %NULL. "
"%G_SPAWN_STDERR_TO_DEV_NULL means that the child's standard error will be "
"discarded, instead of going to the same location as the parent's standard "
"error. If you use this flag, @standard_error must be %NULL. "
"%G_SPAWN_CHILD_INHERITS_STDIN means that the child will inherit the parent's "
"standard input (by default, the child's standard input is attached to /dev/"
"null). If you use this flag, @standard_input must be %NULL. "
"%G_SPAWN_FILE_AND_ARGV_ZERO means that the first element of @argv is the "
"file to execute, while the remaining elements are the actual argument vector "
"to pass to the file. Normally g_spawn_async_with_pipes() uses @argv[0] as "
"the file to execute, and passes all of @argv to the child."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:550:8
msgid ""
"@child_setup and @user_data are a function and user data. On POSIX "
"platforms, the function is called in the child after GLib has performed all "
"the setup it plans to perform (including creating pipes, closing file "
"descriptors, etc.) but before calling exec(). That is, @child_setup is "
"called just before calling exec() in the child. Obviously actions taken in "
"this function will only affect the child, not the parent."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:559:4
msgid ""
"On Windows, there is no separate fork() and exec() functionality. Child "
"processes are created and run with a single API call, CreateProcess(). There "
"is no sensible thing @child_setup could be used for on Windows so it is "
"ignored and not called."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:564:10
msgid ""
"If non-%NULL, @child_pid will on Unix be filled with the child's process ID. "
"You can use the process ID to send signals to the child, or to use "
"g_child_watch_add() (or waitpid()) if you specified the "
"%G_SPAWN_DO_NOT_REAP_CHILD flag. On Windows, @child_pid will be filled with "
"a handle to the child process only if you specified the "
"%G_SPAWN_DO_NOT_REAP_CHILD flag. You can then access the child process using "
"the Win32 API, for example wait for its termination with the "
"<function>WaitFor*()</function> functions, or examine its exit code with "
"GetExitCodeProcess(). You should close the handle with CloseHandle() or "
"g_spawn_close_pid() when you no longer need it."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:575:6
msgid ""
"If non-%NULL, the @standard_input, @standard_output, @standard_error "
"locations will be filled with file descriptors for writing to the child's "
"standard input or reading from its standard output or standard error. The "
"caller of g_spawn_async_with_pipes() must close these file descriptors when "
"they are no longer in use. If these parameters are %NULL, the corresponding "
"pipe won't be created."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:582:2
msgid ""
"If @standard_input is NULL, the child's standard input is attached to /dev/"
"null unless %G_SPAWN_CHILD_INHERITS_STDIN is set."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:585:3
msgid ""
"If @standard_error is NULL, the child's standard error goes to the same "
"location as the parent's standard error unless %G_SPAWN_STDERR_TO_DEV_NULL "
"is set."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:589:3
msgid ""
"If @standard_output is NULL, the child's standard output goes to the same "
"location as the parent's standard output unless %G_SPAWN_STDOUT_TO_DEV_NULL "
"is set."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:593:6
msgid ""
"@error can be %NULL to ignore errors, or non-%NULL to report errors. If an "
"error is set, the function returns %FALSE. Errors are reported even if they "
"occur in the child (for example if the executable in <literal>argv[0]</"
"literal> is not found). Typically the <literal>message</literal> field of "
"returned errors should be displayed to users. Possible errors are those from "
"the #G_SPAWN_ERROR domain."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:600:2
msgid ""
"If an error occurs, @child_pid, @standard_input, @standard_output, and "
"@standard_error will not be filled with valid values."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:603:2
msgid ""
"If @child_pid is not %NULL and an error does not occur then the returned "
"process reference must be closed using g_spawn_close_pid()."
msgstr ""

#. used by: g_spawn_async_with_pipes:
#: gspawn.c:606:6
msgid ""
"<note><para> If you are writing a GTK+ application, and the program you are "
"spawning is a graphical application, too, then you may want to use "
"gdk_spawn_on_screen_with_pipes() instead to ensure that the spawned program "
"opens its windows on the right screen. </para></note>"
msgstr ""

#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_async_with_pipes:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_command_line_sync:
#: gspawn.c:613:1 gspawn.c:687:1
msgid "Return value: %TRUE on success, %FALSE if an error was set"
msgstr ""

#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_command_line_sync:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_command_line_async:
#: gspawn.c:658:1 gspawn.c:723:1
msgid "@command_line: a command line"
msgstr ""

#. used by: g_spawn_command_line_sync:
#: gspawn.c:659:1
msgid "@standard_output: return location for child output"
msgstr ""

#. used by: g_spawn_command_line_sync:
#: gspawn.c:660:1
msgid "@standard_error: return location for child errors"
msgstr ""

#. used by: g_spawn_command_line_sync:
#: gspawn.c:661:1
msgid ""
"@exit_status: return location for child exit status, as returned by waitpid()"
msgstr ""

#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_command_line_sync:
#. #-#-#-#-#  gspawn.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_spawn_command_line_async:
#: gspawn.c:662:1 gspawn.c:724:1
msgid "@error: return location for errors"
msgstr ""

#. used by: g_spawn_command_line_sync:
#: gspawn.c:664:8
msgid ""
"A simple version of g_spawn_sync() with little-used parameters removed, "
"taking a command line instead of an argument vector.  See g_spawn_sync() for "
"full details. @command_line will be parsed by g_shell_parse_argv(). Unlike "
"g_spawn_sync(), the %G_SPAWN_SEARCH_PATH flag is enabled. Note that "
"%G_SPAWN_SEARCH_PATH can have security implications, so consider using "
"g_spawn_sync() directly if appropriate. Possible errors are those from "
"g_spawn_sync() and those from g_shell_parse_argv()."
msgstr ""

#. used by: g_spawn_command_line_sync:
#: gspawn.c:673:3
msgid ""
"If @exit_status is non-%NULL, the exit status of the child is stored there "
"as it would be returned by waitpid(); standard UNIX macros such as WIFEXITED"
"() and WEXITSTATUS() must be used to evaluate the exit status."
msgstr ""

#. used by: g_spawn_command_line_sync:
#: gspawn.c:677:9
msgid ""
"On Windows, please note the implications of g_shell_parse_argv() parsing "
"@command_line. Parsing is done according to Unix shell rules, not Windows "
"command interpreter rules. Space is a separator, and backslashes are "
"special. Thus you cannot simply pass a @command_line containing canonical "
"Windows paths, like \"c:\\\\program files\\\\app\\\\app.exe\", as the "
"backslashes will be eaten, and the space will act as a separator. You need "
"to enclose such paths with single quotes, like \"'c:\\\\program files\\\\app"
"\\\\app.exe' 'e:\\\\folder\\\\argument.txt'\"."
msgstr ""

#. used by: g_spawn_command_line_async:
#: gspawn.c:726:7
msgid ""
"A simple version of g_spawn_async() that parses a command line with "
"g_shell_parse_argv() and passes it to g_spawn_async(). Runs a command line "
"in the background. Unlike g_spawn_async(), the %G_SPAWN_SEARCH_PATH flag is "
"enabled, other flags are not. Note that %G_SPAWN_SEARCH_PATH can have "
"security implications, so consider using g_spawn_async() directly if "
"appropriate. Possible errors are those from g_shell_parse_argv() and "
"g_spawn_async()."
msgstr ""

#. used by: g_spawn_command_line_async:
#: gspawn.c:734:1
msgid "The same concerns on Windows apply as for g_spawn_command_line_sync()."
msgstr ""

#. used by: g_spawn_command_line_async:
#: gspawn.c:736:1
msgid "Return value: %TRUE on success, %FALSE if error is set."
msgstr ""

#. used by: g_spawn_async:
#: gspawn.c:93:1
msgid "@child_pid: return location for child process reference, or %NULL"
msgstr ""

#. used by: g_spawn_async:
#: gspawn.c:96:2
msgid ""
"See g_spawn_async_with_pipes() for a full description; this function simply "
"calls the g_spawn_async_with_pipes() without any pipes."
msgstr ""

#. used by: g_spawn_async:
#: gspawn.c:99:2
msgid ""
"You should call g_spawn_close_pid() on the returned child process reference "
"when you don't need it any more."
msgstr ""
