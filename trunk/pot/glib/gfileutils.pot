# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-14 21:52-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

# used by: g_file_set_contents:
#: gfileutils.c:1026:2
msgid ""
"@filename: name of a file to write @contents to, in the GLib file name "
"encoding"
msgstr ""

# used by: g_file_set_contents:
#: gfileutils.c:1028:1
msgid "@contents: string to write to the file"
msgstr ""

# used by: g_file_set_contents:
#: gfileutils.c:1029:1
msgid ""
"@length: length of @contents, or -1 if @contents is a nul-terminated string"
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_file_get_contents:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_file_set_contents:
#: gfileutils.c:1030:1 gfileutils.c:808:1
msgid "@error: return location for a #GError, or %NULL"
msgstr ""

# #used by: g_file_set_contents:
#: gfileutils.c:1032:2
msgid ""
"Writes all of @contents to a file named @filename, with good error checking. "
"If a file called @filename already exists it will be overwritten."
msgstr ""

# #used by: g_file_set_contents:
#: gfileutils.c:1035:20
msgid ""
"This write is atomic in the sense that it is first written to a temporary "
"file which is then renamed to the final name. Notes: <itemizedlist> "
"<listitem> On Unix, if @filename already exists hard links to @filename will "
"break. Also since the file is recreated, existing permissions, access "
"control lists, metadata etc. may be lost. If @filename is a symbolic link, "
"the link itself will be replaced, not the linked file. </listitem> "
"<listitem> On Windows renaming a file will not remove an existing file with "
"the new name, so on Windows there is a race condition between the existing "
"file being removed and the temporary file being renamed. </listitem> "
"<listitem> On Windows there is no way to remove a file that is open to some "
"process, or mapped into memory. Thus, this function will fail if @filename "
"already exists and is open. </listitem> </itemizedlist>"
msgstr ""

# #used by: g_file_set_contents:
#: gfileutils.c:1056:3
msgid ""
"If the call was sucessful, it returns %TRUE. If the call was not successful, "
"it returns %FALSE and sets @error. The error domain is #G_FILE_ERROR. "
"Possible error codes are those in the #GFileError enumeration."
msgstr ""

# #used by: g_file_set_contents:
#: gfileutils.c:1060:2
msgid ""
"Note that the name for the temporary file is constructed by appending up to "
"7 characters to @filename."
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_file_get_contents:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_file_set_contents:
#: gfileutils.c:1063:1 gfileutils.c:821:1
msgid "Return value: %TRUE on success, %FALSE if an error occurred"
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_mkdir_with_parents:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_file_set_contents:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_build_pathv:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_build_filenamev:
#: gfileutils.c:1065:1 gfileutils.c:1498:1 gfileutils.c:1690:1
#: gfileutils.c:68:1
msgid "Since: 2.8"
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mkstemp_full:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_mkstemp:
#: gfileutils.c:1156:1 gfileutils.c:1249:1
msgid "@tmpl: template filename"
msgstr ""

# used by: g_mkstemp_full:
#: gfileutils.c:1157:2
msgid ""
"@flags: flags to pass to an open() call in addition to O_EXCL and O_CREAT, "
"which are passed automatically"
msgstr ""

# used by: g_mkstemp_full:
#: gfileutils.c:1159:1
msgid "@mode: permissios to create the temporary file with"
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_mkstemp_full:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_mkstemp:
#: gfileutils.c:1161:2 gfileutils.c:1251:2
msgid ""
"Opens a temporary file. See the mkstemp() documentation on most UNIX-like "
"systems."
msgstr ""

# #used by: g_mkstemp_full:
#: gfileutils.c:1164:8
msgid ""
"The parameter is a string that should follow the rules for mkstemp() "
"templates, i.e. contain the string |$_1_$|XXXXXX|$_1_$|. g_mkstemp_full() is "
"slightly more flexible than mkstemp() in that the sequence does not have to "
"occur at the very end of the template and you can pass a @mode and "
"additional @flags. The X string will be modified to form the name of a file "
"that didn't exist. The string should be in the GLib file name encoding. Most "
"importantly, on Windows it should be in UTF-8."
msgstr ""

# #used by: g_mkstemp_full:
#: gfileutils.c:1173:3
msgid ""
"Return value: A file handle (as from open()) to the file opened for reading "
"and writing. The file handle should be closed with close(). In case of "
"errors, -1 is returned."
msgstr ""

# #used by: g_mkstemp_full:
#: gfileutils.c:1177:1
msgid "Since: 2.22"
msgstr ""

# #used by: g_mkstemp:
#: gfileutils.c:1254:8
msgid ""
"The parameter is a string that should follow the rules for mkstemp() "
"templates, i.e. contain the string |$_1_$|XXXXXX|$_1_$|. g_mkstemp() is "
"slightly more flexible than mkstemp() in that the sequence does not have to "
"occur at the very end of the template. The X string will be modified to form "
"the name of a file that didn't exist. The string should be in the GLib file "
"name encoding. Most importantly, on Windows it should be in UTF-8."
msgstr ""

# #used by: g_mkstemp:
#: gfileutils.c:1263:4
msgid ""
"Return value: A file handle (as from open()) to the file opened for reading "
"and writing. The file is opened in binary mode on platforms where there is a "
"difference. The file handle should be closed with close(). In case of "
"errors, -1 is returned."
msgstr ""

# used by: g_file_open_tmp:
#: gfileutils.c:1276:2
msgid ""
"@tmpl: Template for file name, as in g_mkstemp(), basename only, or %NULL, "
"to a default template"
msgstr ""

# used by: g_file_open_tmp:
#: gfileutils.c:1278:1
msgid "@name_used: location to store actual name used, or %NULL"
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_file_open_tmp:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_file_read_link:
#: gfileutils.c:1279:1 gfileutils.c:1819:1
msgid "@error: return location for a #GError"
msgstr ""

# #used by: g_file_open_tmp:
#: gfileutils.c:1281:2
msgid ""
"Opens a file for writing in the preferred directory for temporary files (as "
"returned by g_get_tmp_dir())."
msgstr ""

# #used by: g_file_open_tmp:
#: gfileutils.c:1284:5
msgid ""
"@tmpl should be a string in the GLib file name encoding containing a "
"sequence of six 'X' characters, as the parameter to g_mkstemp(). However, "
"unlike these functions, the template should only be a basename, no directory "
"components are allowed. If template is %NULL, a default template is used."
msgstr ""

# #used by: g_file_open_tmp:
#: gfileutils.c:1290:2
msgid ""
"Note that in contrast to g_mkstemp() (and mkstemp()) @tmpl is not modified, "
"and might thus be a read-only literal string."
msgstr ""

# #used by: g_file_open_tmp:
#: gfileutils.c:1293:3
msgid ""
"The actual name used is returned in @name_used if non-%NULL. This string "
"should be freed with g_free() when not needed any longer. The returned name "
"is in the GLib file name encoding."
msgstr ""

# #used by: g_file_open_tmp:
#: gfileutils.c:1297:5
msgid ""
"Return value: A file handle (as from open()) to the file opened for reading "
"and writing. The file is opened in binary mode on platforms where there is a "
"difference. The file handle should be closed with close(). In case of "
"errors, -1 is returned and @error will be set."
msgstr ""

# used by: g_file_test:
#: gfileutils.c:131:1
msgid "@filename: a filename to test in the GLib file name encoding"
msgstr ""

# used by: g_file_test:
#: gfileutils.c:132:1
msgid "@test: bitfield of #GFileTest flags"
msgstr ""

# #used by: g_file_test:
#: gfileutils.c:134:6
msgid ""
"Returns %TRUE if any of the tests in the bitfield @test are %TRUE. For "
"example, <literal>(G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR)</literal> will "
"return %TRUE if the file exists; the check whether it's a directory doesn't "
"matter since the existence test is %TRUE. With the current set of available "
"tests, there's no point passing in more than one test at a time."
msgstr ""

# #used by: g_file_test:
#: gfileutils.c:141:3
msgid ""
"Apart from %G_FILE_TEST_IS_SYMLINK all tests follow symbolic links, so for a "
"symbolic link to a regular file g_file_test() will return %TRUE for both "
"%G_FILE_TEST_IS_SYMLINK and %G_FILE_TEST_IS_REGULAR."
msgstr ""

# #used by: g_file_test:
#: gfileutils.c:145:2
msgid ""
"Note, that for a dangling symbolic link g_file_test() will return %TRUE for "
"%G_FILE_TEST_IS_SYMLINK and %FALSE for all other flags."
msgstr ""

# #used by: g_file_test:
#: gfileutils.c:148:14
msgid ""
"You should never use g_file_test() to test whether it is safe to perform an "
"operation, because there is always the possibility of the condition changing "
"before you actually perform the operation. For example, you might think you "
"could use %G_FILE_TEST_IS_SYMLINK to know whether it is safe to write to a "
"file without being tricked into writing into a different location. It "
"doesn't work! |[ /&ast; DON'T DO THIS &ast;/ if (!g_file_test (filename, "
"G_FILE_TEST_IS_SYMLINK)) { fd = g_open (filename, O_WRONLY); /&ast; write to "
"fd &ast;/ } ]|"
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_build_pathv:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_build_path:
#: gfileutils.c:1489:1 gfileutils.c:1513:1
msgid "@separator: a string used to separator the elements of the path."
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_build_pathv:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_build_filenamev:
#: gfileutils.c:1490:1 gfileutils.c:1682:1
msgid "@args: %NULL-terminated array of strings containing the path elements."
msgstr ""

# #used by: g_build_pathv:
#: gfileutils.c:1492:3
msgid ""
"Behaves exactly like g_build_path(), but takes the path elements as a string "
"array, instead of varargs. This function is mainly meant for language "
"bindings."
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_build_pathv:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_build_path:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_build_filenamev:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_build_filename:
#: gfileutils.c:1496:1 gfileutils.c:1545:1 gfileutils.c:1688:1
#: gfileutils.c:1728:1
msgid ""
"Return value: a newly-allocated string that must be freed with g_free()."
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_build_path:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_build_filename:
#: gfileutils.c:1514:1 gfileutils.c:1708:1
msgid "@first_element: the first element in the path"
msgstr ""

# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_build_path:
# #-#-#-#-#  gfileutils.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_build_filename:
#: gfileutils.c:1515:1 gfileutils.c:1709:1
msgid "@Varargs: remaining elements in path, terminated by %NULL"
msgstr ""

# #used by: g_build_path:
#: gfileutils.c:1517:5
msgid ""
"Creates a path from a series of elements using @separator as the separator "
"between elements. At the boundary between two elements, any trailing "
"occurrences of separator in the first element, or leading occurrences of "
"separator in the second element are removed and exactly one copy of the "
"separator is inserted."
msgstr ""

# #used by: g_build_path:
#: gfileutils.c:1523:1
msgid "Empty elements are ignored."
msgstr ""

# #used by: g_build_path:
#: gfileutils.c:1525:3
msgid ""
"The number of leading copies of the separator on the result is the same as "
"the number of leading copies of the separator on the first non-empty element."
msgstr ""

# #used by: g_build_path:
#: gfileutils.c:1529:6
msgid ""
"The number of trailing copies of the separator on the result is the same as "
"the number of trailing copies of the separator on the last non-empty "
"element. (Determination of the number of trailing copies is done without "
"stripping leading copies, so if the separator is <literal>ABA</literal>, "
"<literal>ABABA</literal> has 1 trailing copy.)"
msgstr ""

# #used by: g_build_path:
#: gfileutils.c:1536:4
msgid ""
"However, if there is only a single non-empty element, and there are no "
"characters in that element not part of the leading or trailing separators, "
"then the result is exactly the original value of that element."
msgstr ""

# #used by: g_build_path:
#: gfileutils.c:1541:3
msgid ""
"Other than for determination of the number of leading and trailing copies of "
"the separator, elements consisting only of copies of the separator are "
"ignored."
msgstr ""

# #used by: g_file_test:
#: gfileutils.c:163:6
msgid ""
"Another thing to note is that %G_FILE_TEST_EXISTS and "
"%G_FILE_TEST_IS_EXECUTABLE are implemented using the access() system call. "
"This usually doesn't matter, but if your program is setuid or setgid it "
"means that these tests will give you the answer for the real user ID and "
"group ID, rather than the effective user ID and group ID."
msgstr ""

# #used by: g_build_filenamev:
#: gfileutils.c:1684:3
msgid ""
"Behaves exactly like g_build_filename(), but takes the path elements as a "
"string array, instead of varargs. This function is mainly meant for language "
"bindings."
msgstr ""

# #used by: g_file_test:
#: gfileutils.c:170:5
msgid ""
"On Windows, there are no symlinks, so testing for %G_FILE_TEST_IS_SYMLINK "
"will always return %FALSE. Testing for %G_FILE_TEST_IS_EXECUTABLE will just "
"check that the file exists and its name indicates that it is executable, "
"checking for well-known extensions and those listed in the %PATHEXT "
"environment variable."
msgstr ""

# #used by: g_build_filename:
#: gfileutils.c:1711:2
msgid ""
"Creates a filename from a series of elements using the correct separator for "
"filenames."
msgstr ""

# #used by: g_build_filename:
#: gfileutils.c:1714:2
msgid ""
"On Unix, this function behaves identically to <literal>g_build_path "
"(G_DIR_SEPARATOR_S, first_element, ....)</literal>."
msgstr ""

# #used by: g_build_filename:
#: gfileutils.c:1717:6
msgid ""
"On Windows, it takes into account that either the backslash (<literal>|$_2_$|"
"</literal> or slash (<literal>/</literal>) can be used as separator in "
"filenames, but otherwise behaves as on Unix. When file pathname separators "
"need to be inserted, the one that last previously occurred in the parameters "
"(reading from left to right) is used."
msgstr ""

# #used by: g_build_filename:
#: gfileutils.c:1724:3
msgid ""
"No attempt is made to force the resulting filename to be an absolute path. "
"If the first element is a relative path, the result will be a relative path."
msgstr ""

# used by: g_format_size_for_display:
#: gfileutils.c:1757:1
msgid "@size: a size in bytes."
msgstr ""

# #used by: g_format_size_for_display:
#: gfileutils.c:1759:4
msgid ""
"Formats a size (for example the size of a file) into a human readable "
"string. Sizes are rounded to the nearest size prefix (KB, MB, GB) and are "
"displayed rounded to the nearest  tenth. E.g. the file size 3292528 bytes "
"will be converted into the string |$_1_$|3.1 MB|$_1_$|."
msgstr ""

# #used by: g_file_test:
#: gfileutils.c:176:1
msgid "Return value: whether a test was %TRUE"
msgstr ""

# #used by: g_format_size_for_display:
#: gfileutils.c:1764:1
msgid "The prefix units base is 1024 (i.e. 1 KB is 1024 bytes)."
msgstr ""

# #used by: g_format_size_for_display:
#: gfileutils.c:1766:1
msgid "This string should be freed with g_free() when not needed any longer."
msgstr ""

# #used by: g_format_size_for_display:
#: gfileutils.c:1768:2
msgid ""
"Returns: a newly-allocated formatted string containing a human readable file "
"size."
msgstr ""

# #used by: g_format_size_for_display:
#: gfileutils.c:1771:1
msgid "Since: 2.16"
msgstr ""

# used by: g_file_read_link:
#: gfileutils.c:1818:1
msgid "@filename: the symbolic link"
msgstr ""

# #used by: g_file_read_link:
#: gfileutils.c:1821:3
msgid ""
"Reads the contents of the symbolic link @filename like the POSIX readlink() "
"function.  The returned string is in the encoding used for filenames. Use "
"g_filename_to_utf8() to convert it to UTF-8."
msgstr ""

# #used by: g_file_read_link:
#: gfileutils.c:1825:2
msgid ""
"Returns: A newly-allocated string with the contents of the symbolic link, or "
"%NULL if an error occurred."
msgstr ""

# #used by: g_file_read_link:
#: gfileutils.c:1828:1
msgid "Since: 2.4"
msgstr ""

# used by: g_file_error_from_errno:
#: gfileutils.c:331:1
msgid "@err_no: an |$_1_$|errno|$_1_$| value"
msgstr ""

# #used by: g_file_error_from_errno:
#: gfileutils.c:333:4
msgid ""
"Gets a #GFileError constant based on the passed-in @errno. For example, if "
"you pass in %EEXIST this function returns #G_FILE_ERROR_EXIST. Unlike @errno "
"values, you can portably assume that all #GFileError values will exist."
msgstr ""

# #used by: g_file_error_from_errno:
#: gfileutils.c:338:3
msgid ""
"Normally a #GFileError value goes into a #GError returned from a function "
"that manipulates files. So you would use g_file_error_from_errno() when "
"constructing a #GError."
msgstr ""

# #used by: g_file_error_from_errno:
#: gfileutils.c:342:1
msgid "Return value: #GFileError corresponding to the given @errno"
msgstr ""

# used by: g_mkdir_with_parents:
#: gfileutils.c:59:1
msgid "@pathname: a pathname in the GLib file name encoding"
msgstr ""

# used by: g_mkdir_with_parents:
#: gfileutils.c:60:1
msgid "@mode: permissions to use for newly created directories"
msgstr ""

# #used by: g_mkdir_with_parents:
#: gfileutils.c:62:2
msgid ""
"Create a directory if it doesn't already exist. Create intermediate parent "
"directories as needed, too."
msgstr ""

# #used by: g_mkdir_with_parents:
#: gfileutils.c:65:2
msgid ""
"Returns: 0 if the directory already exists, or was successfully created. "
"Returns -1 if an error occurred, with errno set."
msgstr ""

# used by: g_file_get_contents:
#: gfileutils.c:804:1
msgid ""
"@filename: name of a file to read contents from, in the GLib file name "
"encoding"
msgstr ""

# used by: g_file_get_contents:
#: gfileutils.c:805:2
msgid ""
"@contents: location to store an allocated string, use g_free() to free the "
"returned string"
msgstr ""

# used by: g_file_get_contents:
#: gfileutils.c:807:1
msgid "@length: location to store length in bytes of the contents, or %NULL"
msgstr ""

# #used by: g_file_get_contents:
#: gfileutils.c:810:2
msgid "Reads an entire file into allocated memory, with good error checking."
msgstr ""

# #used by: g_file_get_contents:
#: gfileutils.c:813:7
msgid ""
"If the call was successful, it returns %TRUE and sets @contents to the file "
"contents and @length to the length of the file contents in bytes. The string "
"stored in @contents will be nul-terminated, so for text files you can pass "
"%NULL for the @length argument. If the call was not successful, it returns "
"%FALSE and sets @error. The error domain is #G_FILE_ERROR. Possible error "
"codes are those in the #GFileError enumeration. In the error case, @contents "
"is set to %NULL and @length is set to zero."
msgstr ""
