msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-04-23 10:05+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: gvariant-text.xml:0(None)
msgid "translator-credits"
msgstr ""

#: gvariant-text.xml:102(para)
msgid ""
"<emphasis role=\"strong\"><literal>\"\"</literal></emphasis>, <emphasis role="
"\"strong\"><literal>''</literal></emphasis>"
msgstr ""

#: gvariant-text.xml:108(para)
msgid ""
"String literal. See <link linkend=\"gvariant-text-strings\">Strings</link> "
"below."
msgstr ""

#: gvariant-text.xml:11(para)
msgid ""
"This page attempts to document the GVariant text format as produced by <link "
"linkend=\"g-variant-print\"><function>g_variant_print()</function></link> "
"and parsed by the <link linkend=\"g-variant-parse\"><function>g_variant_parse"
"()</function></link> family of functions. In most cases the style closely "
"resembles the formatting of literals in Python but there are some additions "
"and exceptions."
msgstr ""

#: gvariant-text.xml:116(para)
msgid "numbers"
msgstr ""

#: gvariant-text.xml:121(para)
msgid "See <link linkend=\"gvariant-text-numbers\">Numbers</link> below."
msgstr ""

#: gvariant-text.xml:130(literal)
msgid "()"
msgstr ""

#: gvariant-text.xml:134(para)
msgid "<link linkend=\"gvariant-text-tuples\">Tuples</link>."
msgstr ""

#: gvariant-text.xml:143(literal)
msgid "[]"
msgstr ""

#: gvariant-text.xml:147(para)
msgid "<link linkend=\"gvariant-text-arrays\">Arrays</link>."
msgstr ""

#: gvariant-text.xml:156(literal)
msgid "{}"
msgstr ""

#: gvariant-text.xml:160(para)
msgid ""
"<link linkend=\"gvariant-text-dictionaries\">Dictionaries and Dictionary "
"Entries</link>."
msgstr ""

#: gvariant-text.xml:169(literal)
msgid "&lt;&gt;"
msgstr ""

#: gvariant-text.xml:173(para)
msgid "<link linkend=\"gvariant-text-variants\">Variants</link>."
msgstr ""

#: gvariant-text.xml:181(para)
msgid ""
"<emphasis role=\"strong\"><literal>just</literal></emphasis>, <emphasis role="
"\"strong\"><literal>nothing</literal></emphasis>"
msgstr ""

#: gvariant-text.xml:187(para)
msgid "<link linkend=\"gvariant-text-maybe-types\">Maybe Types</link>."
msgstr ""

#: gvariant-text.xml:19(para)
msgid ""
"The functions that deal with GVariant text format absolutely always deal in "
"utf-8. Conceptually, GVariant text format is a string of Unicode characters "
"-- not bytes. Non-ASCII but otherwise printable Unicode characters are not "
"treated any differently from normal ASCII characters."
msgstr ""

#: gvariant-text.xml:196(literal)
msgid "@"
msgstr ""

#: gvariant-text.xml:200(para)
msgid ""
"<link linkend=\"gvariant-text-type-annotations\">Type Annotations</link>."
msgstr ""

#: gvariant-text.xml:208(para)
msgid "type keywords"
msgstr ""

#: gvariant-text.xml:213(para)
msgid ""
"<literal>boolean</literal>, <literal>byte</literal>, <literal>int16</"
"literal>, <literal>uint16</literal>, <literal>int32</literal>, "
"<literal>uint32</literal>, <literal>handle</literal>, <literal>int64</"
"literal>, <literal>uint64</literal>, <literal>double</literal>, "
"<literal>string</literal>, <literal>objectpath</literal>, "
"<literal>signature</literal>"
msgstr ""

#: gvariant-text.xml:228(para)
msgid ""
"See <link linkend=\"gvariant-text-type-annotations\">Type Annotations</link> "
"below."
msgstr ""

#: gvariant-text.xml:236(para)
msgid ""
"<emphasis role=\"strong\"><literal>b\"\"</literal></emphasis>, <emphasis "
"role=\"strong\"><literal>b''</literal></emphasis>"
msgstr ""

#: gvariant-text.xml:242(para)
msgid "<link linkend=\"gvariant-text-bytestrings\">Bytestrings</link>."
msgstr ""

#: gvariant-text.xml:25(para)
msgid ""
"The parser makes two passes. The purpose of the first pass is to determine "
"the type of the value being parsed. The second pass does the actual parsing. "
"Based on the fact that all elements in an array have to have the same type, "
"GVariant is able to make some deductions that would not otherwise be "
"possible. As an example: <placeholder-1/> is parsed as an array of arrays of "
"integers (type '<literal>aai</literal>'), but <placeholder-2/> is parsed as "
"a array of arrays of doubles (type '<literal>aad</literal>')."
msgstr ""

#: gvariant-text.xml:251(literal)
msgid "%"
msgstr ""

#: gvariant-text.xml:255(para)
msgid ""
"<link linkend=\"gvariant-text-positional\">Positional Parameters</link>."
msgstr ""

#: gvariant-text.xml:265(title)
msgid "Booleans"
msgstr ""

#: gvariant-text.xml:266(para)
msgid ""
"The strings <literal>true</literal> and <literal>false</literal> are parsed "
"as booleans. This is the only way to specify a boolean value."
msgstr ""

#: gvariant-text.xml:273(title)
msgid "Strings"
msgstr ""

#: gvariant-text.xml:274(para)
msgid ""
"Strings literals must be quoted using <literal>\"\"</literal> or "
"<literal>''</literal>. The two are completely equivalent (except for the "
"fact that each one is unable to contain itself unescaped)."
msgstr ""

#: gvariant-text.xml:278(para)
msgid ""
"Strings are Unicode strings with no particular encoding. For example, to "
"specify the character <literal>é</literal>, you just write <literal>'é'</"
"literal>. You could also give the Unicode codepoint of that character (U+E9) "
"as the escape sequence <literal>'\\u00e9'</literal>. Since the strings are "
"pure Unicode, you should not attempt to encode the utf-8 byte sequence "
"corresponding to the string using escapes; it won't work and you'll end up "
"with the individual characters corresponding to each byte."
msgstr ""

#: gvariant-text.xml:285(para)
msgid ""
"Unicode escapes of the form <literal>\\uxxxx</literal> and <literal>"
"\\Uxxxxxxxx</literal> are supported, in hexidecimal. The usual control "
"sequence escapes <literal>\\a</literal>, <literal>\\b</literal>, <literal>"
"\\f</literal>, <literal>\\n</literal>, <literal>\\r</literal>, <literal>\\t</"
"literal> and <literal>\\v</literal> are supported. Additionally, a <literal>"
"\\</literal> before a newline character causes the newline to be ignored. "
"Finally, any other character following <literal>\\</literal> is copied "
"literally (for example, <literal>\\\"</literal> or <literal>\\\\</literal>) "
"but for forwards compatibility with future additions you should only use "
"this feature when necessary for escaping backslashes or quotes."
msgstr ""

#: gvariant-text.xml:294(para)
msgid ""
"The usual octal and hexidecimal escapes <literal>\\0nnn</literal> and "
"<literal>\\xnn</literal> are not supported here. Those escapes are used to "
"encode byte values and GVariant strings are Unicode."
msgstr ""

#: gvariant-text.xml:298(para)
msgid ""
"Single-character strings are not interpreted as bytes. Bytes must be "
"specified by their numerical value."
msgstr ""

#: gvariant-text.xml:304(title)
msgid "Numbers"
msgstr ""

#: gvariant-text.xml:305(para)
msgid ""
"Numbers are given by default as decimal values. Octal and hex values can be "
"given in the usual way (by prefixing with <literal>0</literal> or "
"<literal>0x</literal>). Note that GVariant considers bytes to be unsigned "
"integers and will print them as a two digit hexidecimal number by default."
msgstr ""

#: gvariant-text.xml:31(programlisting)
#, no-wrap
msgid "[[1, 2, 3], [4, 5, 6]]"
msgstr ""

#: gvariant-text.xml:310(para)
msgid ""
"Floating point numbers can also be given in the usual ways, including "
"scientific and hexidecimal notations."
msgstr ""

#: gvariant-text.xml:313(para)
msgid ""
"For lack of additional information, integers will be parsed as int32 values "
"by default. If the number has a point or an 'e' in it, then it will be "
"parsed as a double precision floating point number by default. If type "
"information is available (either explicitly or inferred) then that type will "
"be used instead."
msgstr ""

#: gvariant-text.xml:318(para) gvariant-text.xml:490(para)
msgid "Some examples:"
msgstr ""

#: gvariant-text.xml:321(para)
msgid "<literal>5</literal> parses as the int32 value five."
msgstr ""

#: gvariant-text.xml:324(para)
msgid "<literal>37.5</literal> parses as a floating point value."
msgstr ""

#: gvariant-text.xml:327(para)
msgid "<literal>3.75e1</literal> parses the same as the value above."
msgstr ""

#: gvariant-text.xml:330(para)
msgid ""
"<literal>uint64 7</literal> parses seven as a uint64. See <link linkend="
"\"gvariant-text-type-annotations\">Type Annotations</link>."
msgstr ""

#: gvariant-text.xml:337(title)
msgid "Tuples"
msgstr ""

#: gvariant-text.xml:338(para)
msgid ""
"Tuples are formed using the same syntax as Python. Here are some examples:"
msgstr ""

#: gvariant-text.xml:341(para)
msgid "<literal>()</literal> parses as the empty tuple."
msgstr ""

#: gvariant-text.xml:344(para)
msgid "<literal>(5,)</literal> is a tuple containing a single value."
msgstr ""

#: gvariant-text.xml:347(para)
msgid ""
"<literal>(\"hello\", 42)</literal> is a pair. Note that values of different "
"types are permitted."
msgstr ""

#: gvariant-text.xml:35(programlisting)
#, no-wrap
msgid "[[1, 2, 3], [4, 5, 6.0]]"
msgstr ""

#: gvariant-text.xml:353(title)
msgid "Arrays"
msgstr ""

#: gvariant-text.xml:354(para)
msgid ""
"Arrays are formed using the same syntax as Python uses for lists (which is "
"arguably the term that GVariant should have used). Note that, unlike Python "
"lists, GVariant arrays are statically typed. This has two implications."
msgstr ""

#: gvariant-text.xml:359(para)
msgid ""
"First, all items in the array must have the same type. Second, the type of "
"the array must be known, even in the case that it is empty. This means that "
"(unless there is some other way to infer it) type information will need to "
"be given explicitly for empty arrays."
msgstr ""

#: gvariant-text.xml:364(para)
msgid ""
"The parser is able to infer some types based on the fact that all items in "
"an array must have the same type. See the examples below:"
msgstr ""

#: gvariant-text.xml:368(para)
msgid ""
"<literal>[1]</literal> parses (without additional type information) as a one-"
"item array of signed integers."
msgstr ""

#: gvariant-text.xml:371(para)
msgid "<literal>[1, 2, 3]</literal> parses (similarly) as a three-item array."
msgstr ""

#: gvariant-text.xml:374(para)
msgid ""
"<literal>[1, 2, 3.0]</literal> parses as an array of doubles. This is the "
"most simple case of the type inferencing in action."
msgstr ""

#: gvariant-text.xml:378(para)
msgid ""
"<literal>[(1, 2), (3, 4.0)]</literal> causes the 2 to also be parsed as a "
"double (but the 1 and 4 are still integers)."
msgstr ""

#: gvariant-text.xml:382(para)
msgid ""
"<literal>[\"\", nothing]</literal> parses as an array of maybe strings. The "
"presence of \"<literal>nothing</literal>\" clearly implies that the array "
"elements are nullable."
msgstr ""

#: gvariant-text.xml:386(para)
msgid ""
"<literal>[[], [\"\"]]</literal> will parse properly because the type of the "
"first (empty) array can be inferred to be equal to the type of the second "
"array (both are arrays of strings)."
msgstr ""

#: gvariant-text.xml:390(para)
msgid ""
"<literal>[b'hello', []]</literal> looks odd but will parse properly. See "
"<link linkend=\"gvariant-text-bytestrings\">Bytestrings</link>"
msgstr ""

#: gvariant-text.xml:394(para)
msgid "And some examples of errors:"
msgstr ""

#: gvariant-text.xml:397(para)
msgid ""
"<literal>[\"hello\", 42]</literal> fails to parse due to conflicting types."
msgstr ""

#: gvariant-text.xml:40(para)
msgid ""
"As another example, GVariant is able to determine that <placeholder-1/> is "
"an array of maybe strings (type '<literal>ams</literal>')."
msgstr ""

#: gvariant-text.xml:400(para)
msgid ""
"<literal>[]</literal> will fail to parse without additional type information."
msgstr ""

#: gvariant-text.xml:406(title)
msgid "Dictionaries and Dictionary Entries"
msgstr ""

#: gvariant-text.xml:407(para)
msgid ""
"Dictionaries and dictionary entries are both specified using the <literal>{}"
"</literal> characters."
msgstr ""

#: gvariant-text.xml:410(para)
msgid ""
"The dictionary syntax is more commonly used. This is what the printer elects "
"to use in the normal case of dictionary entries appearing in an array (aka "
"\"a dictionary\"). The separate syntax for dictionary entries is typically "
"only used for when the entries appear on their own, outside of an array "
"(which is valid but unusual). Of course, you are free to use the dictionary "
"entry syntax within arrays but there is no good reason to do so (and the "
"printer itself will never do so). Note that, as with arrays, the type of "
"empty dictionaries must be established (either explicitly or through "
"inference)."
msgstr ""

#: gvariant-text.xml:418(para)
msgid ""
"The dictionary syntax is the same as Python's syntax for dictionaries. Some "
"examples:"
msgstr ""

#: gvariant-text.xml:421(para)
msgid ""
"<literal>@a{sv} {}</literal> parses as the empty dictionary of everyone's "
"favourite type."
msgstr ""

#: gvariant-text.xml:424(para)
msgid ""
"<literal>@a{sv} []</literal> is the same as above (owing to the fact that "
"dictionaries are really arrays)."
msgstr ""

#: gvariant-text.xml:427(para)
msgid ""
"<literal>{1: \"one\", 2: \"two\", 3: \"three\"}</literal> parses as a "
"dictionary mapping integers to strings."
msgstr ""

#: gvariant-text.xml:43(programlisting)
#, no-wrap
msgid "[\"hello\", nothing]"
msgstr ""

#: gvariant-text.xml:430(para)
msgid ""
"The dictionary entry syntax looks just like a pair (2-tuple) that uses "
"braces instead of parens. The presence of a comma immediately following the "
"key differentiates it from the dictionary syntax (which features a colon "
"after the first key). Some examples:"
msgstr ""

#: gvariant-text.xml:435(para)
msgid ""
"<literal>{1, \"one\"}</literal> is a free-standing dictionary entry that can "
"be parsed on its own or as part of another container value."
msgstr ""

#: gvariant-text.xml:439(para)
msgid ""
"<literal>[{1, \"one\"}, {2, \"two\"}, {3, \"three\"}]</literal> is exactly "
"equivalent to the dictionary example given above."
msgstr ""

#: gvariant-text.xml:446(title)
msgid "Variants"
msgstr ""

#: gvariant-text.xml:447(para)
msgid ""
"Variants are denoted using angle brackets (aka \"XML brackets\"), "
"<literal>&lt;&gt;</literal>. They may not be omitted."
msgstr ""

#: gvariant-text.xml:451(para)
msgid ""
"Using <literal>&lt;&gt;</literal> effectively disrupts the type inferencing "
"that occurs between array elements. This can have positive and negative "
"effects."
msgstr ""

#: gvariant-text.xml:455(para)
msgid ""
"<literal>[&lt;\"hello\"&gt;, &lt;42&gt;]</literal> will parse whereas "
"<literal>[\"hello\", 42]</literal> would not."
msgstr ""

#: gvariant-text.xml:459(para)
msgid ""
"<literal>[&lt;['']&gt;, &lt;[]&gt;]</literal> will fail to parse even though "
"<literal>[[''], []]</literal> parses successfully. You would need to specify "
"<literal>[&lt;['']&gt;, &lt;@as []&gt;]</literal>."
msgstr ""

#: gvariant-text.xml:463(para)
msgid ""
"<literal>{\"title\": &lt;\"frobit\"&gt;, \"enabled\": &lt;true&gt;, width: "
"&lt;800&gt;}</literal> is an example of perhaps the most pervasive use of "
"both dictionaries and variants."
msgstr ""

#: gvariant-text.xml:470(title)
msgid "Maybe Types"
msgstr ""

#: gvariant-text.xml:471(para)
msgid "The syntax for specifying maybe types is inspired by Haskell."
msgstr ""

#: gvariant-text.xml:474(para)
msgid ""
"The null case is specified using the keyword <literal>nothing</literal> and "
"the non-null case is explicitly specified using the keyword <literal>just</"
"literal>. GVariant allows <literal>just</literal> to be omitted in every "
"case that it is able to unambiguously determine the intention of the writer. "
"There are two cases where it must be specified:"
msgstr ""

#: gvariant-text.xml:48(para)
msgid ""
"What the parser accepts as valid input is dependent on context. The API "
"permits for out-of-band type information to be supplied to the parser (which "
"will change its behaviour). This can be seen in the GSettings and GDBus "
"command line utilities where the type information is available from the "
"schema or the remote introspection information. The additional information "
"can cause parses to succeed when they would not otherwise have been able to "
"(by resolving ambiguous type information) or can cause them to fail (due to "
"conflicting type information). Unless stated otherwise, the examples given "
"in this section assume that no out-of-band type data has been given to the "
"parser."
msgstr ""

#: gvariant-text.xml:482(para)
msgid ""
"when using nested maybes, in order to specify the <literal>just nothing</"
"literal> case"
msgstr ""

#: gvariant-text.xml:485(para)
msgid ""
"to establish the nullability of the type of a value without explicitly "
"specifying its full type"
msgstr ""

#: gvariant-text.xml:493(para)
msgid "<literal>just 'hello'</literal> parses as a non-null nullable string."
msgstr ""

#: gvariant-text.xml:496(para)
msgid ""
"<literal>@ms 'hello'</literal> is the same (demonstrating how <literal>just</"
"literal> can be dropped if the type is already known)."
msgstr ""

#: gvariant-text.xml:5(refentrytitle) gvariant-text.xml:9(title)
msgid "GVariant Text Format"
msgstr ""

#: gvariant-text.xml:500(para)
msgid ""
"<literal>nothing</literal> will not parse wtihout extra type information."
msgstr ""

#: gvariant-text.xml:503(para)
msgid "<literal>@ms nothing</literal> parses as a null nullable string."
msgstr ""

#: gvariant-text.xml:506(para)
msgid "<literal>[just 3, nothing]</literal> is an array of nullable integers"
msgstr ""

#: gvariant-text.xml:509(para)
msgid ""
"<literal>[3, nothing]</literal> is the same as the above (demonstrating "
"another place were <literal>just</literal> can be dropped)."
msgstr ""

#: gvariant-text.xml:513(para)
msgid ""
"<literal>[3, just nothing]</literal> parses as an array of maybe maybe "
"integers (type <literal>'ammi'</literal>)."
msgstr ""

#: gvariant-text.xml:520(title)
msgid "Type Annotations"
msgstr ""

#: gvariant-text.xml:521(para)
msgid ""
"Type annotations allow additional type information to be given to the "
"parser. Depending on the context, this type information can change the "
"output of the parser, cause an error when parsing would otherwise have "
"succeeded or resolve an error when parsing would have otherwise failed."
msgstr ""

#: gvariant-text.xml:526(para)
msgid "Type annotations come in two forms: type codes and type keywords."
msgstr ""

#: gvariant-text.xml:529(para)
msgid ""
"Type keywords can be seen as more verbose (and more legible) versions of a "
"common subset of the type codes. The type keywords <literal>boolean</"
"literal>, <literal>byte</literal>, <literal>int16</literal>, "
"<literal>uint16</literal>, <literal>int32</literal>, <literal>uint32</"
"literal>, <literal>handle</literal>, <literal>int64</literal>, "
"<literal>uint64</literal>, <literal>double</literal>, <literal>string</"
"literal>, <literal>objectpath</literal> and literal <literal>signature</"
"literal> are each exactly equivalent to their corresponding type code."
msgstr ""

#: gvariant-text.xml:537(para)
msgid ""
"Type codes are an <literal>@</literal> (\"at\" sign) followed by a definite "
"GVariant type string. Some examples:"
msgstr ""

#: gvariant-text.xml:541(para)
msgid ""
"<literal>uint32 5</literal> causes the number to be parsed unsigned instead "
"of signed (the default)."
msgstr ""

#: gvariant-text.xml:544(para)
msgid "<literal>@u 5</literal> is the same"
msgstr ""

#: gvariant-text.xml:547(para)
msgid ""
"<literal>objectpath \"/org/gnome/xyz\"</literal> creates an object path "
"instead of a normal string"
msgstr ""

#: gvariant-text.xml:550(para)
msgid ""
"<literal>@au []</literal> specifies the type of the empty array (which would "
"not parse otherwise)"
msgstr ""

#: gvariant-text.xml:553(para)
msgid ""
"<literal>@ms \"\"</literal> indicates that a string value is meant to have a "
"maybe type"
msgstr ""

#: gvariant-text.xml:559(title)
msgid "Bytestrings"
msgstr ""

#: gvariant-text.xml:560(para)
msgid ""
"The bytestring syntax is a piece of syntactic sugar meant to complement the "
"bytestring APIs in GVariant. It constructs arrays of non-nul bytes (type "
"'<literal>ay</literal>') with a nul terminator at the end."
msgstr ""

#: gvariant-text.xml:564(para)
msgid ""
"Bytestrings are specified with either <literal>b\"\"</literal> or "
"<literal>b''</literal>. As with strings, there is no fundamental difference "
"between the two different types of quotes."
msgstr ""

#: gvariant-text.xml:568(para)
msgid ""
"Bytestrings support the full range of escapes that you would expect (ie: "
"those supported by <link linkend=\"g-strcompress\"><function>g_strcompress()"
"</function></link>. This includes the normal control sequence escapes (as "
"mentioned in the section on strings) as well as octal and hexidecimal "
"escapes of the forms <literal>\\0nnn</literal> and <literal>\\xnn</literal>."
msgstr ""

#: gvariant-text.xml:574(para)
msgid ""
"<literal>b'abc'</literal> is equivalent to <literal>[byte 0x97, 0x98, 0x99, "
"0]</literal>."
msgstr ""

#: gvariant-text.xml:577(para)
msgid ""
"When formatting arrays of bytes, the printer will choose to display the "
"array as a bytestring if it contains a nul character at the end and no other "
"nul bytes within. Otherwise, it is formatted as a normal array."
msgstr ""

#: gvariant-text.xml:584(title)
msgid "Positional Parameters"
msgstr ""

#: gvariant-text.xml:585(para)
msgid ""
"Positional parameters are not a part of the normal GVariant text format, but "
"they are mentioned here because they can be used with <link linkend=\"g-"
"variant-new-parsed\"><function>g_variant_new_parsed()</function></link>."
msgstr ""

#: gvariant-text.xml:589(para)
msgid ""
"A positional parameter is indicated with a <literal>%</literal> followed by "
"any valid <link linkend=\"gvariant-format-strings\">GVariant Format String</"
"link>. Variable arguments are collected as specified by the format string "
"and the resulting value is inserted at the current position."
msgstr ""

#: gvariant-text.xml:594(para)
msgid "This feature is best explained by example:"
msgstr ""

#: gvariant-text.xml:60(title)
msgid "Syntax Summary"
msgstr ""

#: gvariant-text.xml:602(para)
msgid ""
"This constructs a dictionary mapping strings to variants (type '<literal>a"
"{sv}</literal>') with two items in it. The key names are parsed from the "
"string and the values for those keys are taken as variable arguments "
"parameters."
msgstr ""

#: gvariant-text.xml:607(para)
msgid ""
"The arguments are always collected in the order that they appear in the "
"string to be parsed. Format strings that collect multiple arguments are "
"permitted, so you may require more varargs parameters than the number of "
"<literal>%</literal> signs that appear. You can also give format strings "
"that collect no arguments, but there's no good reason to do so."
msgstr ""

#: gvariant-text.xml:62(para)
msgid ""
"The following table describes the rough meaning of symbols that may appear "
"inside GVariant text format. Each symbol is described in detail in its own "
"section, including usage examples."
msgstr ""

#: gvariant-text.xml:76(emphasis)
msgid "Symbol"
msgstr ""

#: gvariant-text.xml:81(emphasis)
msgid "Meaning"
msgstr ""

#: gvariant-text.xml:88(para)
msgid ""
"<emphasis role=\"strong\"><literal>true</literal></emphasis>, <emphasis role="
"\"strong\"><literal>false</literal></emphasis>"
msgstr ""

#: gvariant-text.xml:94(para)
msgid "<link linkend=\"gvariant-text-booleans\">Booleans</link>."
msgstr ""
