# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-21 22:45-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. #-#-#-#-#  gdkdevicemanager.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkDeviceManager::device-added:
#. #-#-#-#-#  gdkdevicemanager.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkDeviceManager::device-removed:
#. #-#-#-#-#  gdkdevicemanager.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GdkDeviceManager::device-changed:
#: gdkdevicemanager.c:154:1 gdkdevicemanager.c:173:1 gdkdevicemanager.c:192:1
msgid "@device_manager: the object on which the signal is emitted"
msgstr ""

#. used by: GdkDeviceManager::device-added:
#: gdkdevicemanager.c:155:1
msgid "@device: the newly added #GdkDevice."
msgstr ""

#. used by: GdkDeviceManager::device-added:
#: gdkdevicemanager.c:157:3
msgid ""
"The ::device-added signal is emitted either when a new master pointer is "
"created, or when a slave (Hardware) input device is plugged in."
msgstr ""

#. used by: GdkDeviceManager::device-removed:
#: gdkdevicemanager.c:174:1
msgid "@device: the just removed #GdkDevice."
msgstr ""

#. used by: GdkDeviceManager::device-removed:
#: gdkdevicemanager.c:176:3
msgid ""
"The ::device-removed signal is emitted either when a master pointer is "
"removed, or when a slave (Hardware) input device is unplugged."
msgstr ""

#. used by: GdkDeviceManager::device-changed:
#: gdkdevicemanager.c:193:1
msgid "@device: the #GdkDevice that changed."
msgstr ""

#. used by: GdkDeviceManager::device-changed:
#: gdkdevicemanager.c:195:5
msgid ""
"The ::device-changed signal is emitted whenever a device has changed in the "
"hierarchy, either slave devices being disconnected from their master device "
"or connected to another one, or master devices being added or removed a "
"slave device."
msgstr ""

#. used by: GdkDeviceManager::device-changed:
#: gdkdevicemanager.c:201:4
msgid ""
"If a slave device is detached from all master devices "
"(gdk_device_get_associated_device() returns %NULL), its #GdkDeviceType will "
"change to %GDK_DEVICE_TYPE_FLOATING, if it's attached, it will change to "
"%GDK_DEVICE_TYPE_SLAVE."
msgstr ""

#. #-#-#-#-#  gdkdevicemanager.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_device_manager_get_display:
#. #-#-#-#-#  gdkdevicemanager.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_device_manager_list_devices:
#. #-#-#-#-#  gdkdevicemanager.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_device_manager_get_client_pointer:
#: gdkdevicemanager.c:259:1 gdkdevicemanager.c:279:1 gdkdevicemanager.c:303:1
msgid "@device_manager: a #GdkDeviceManager"
msgstr ""

#. used by: gdk_device_manager_get_display:
#: gdkdevicemanager.c:261:1
msgid "Gets the #GdkDisplay associated to @device_manager."
msgstr ""

#. used by: gdk_device_manager_get_display:
#: gdkdevicemanager.c:263:3
msgid ""
"Returns: (transfer none): the #GdkDisplay to which @device_manager is "
"associated to, or #NULL. This memory is owned by GDK and must not be freed "
"or unreferenced."
msgstr ""

#. #-#-#-#-#  gdkdevicemanager.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_device_manager_get_display:
#. #-#-#-#-#  gdkdevicemanager.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_device_manager_list_devices:
#. #-#-#-#-#  gdkdevicemanager.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: gdk_device_manager_get_client_pointer:
#: gdkdevicemanager.c:267:1 gdkdevicemanager.c:290:1 gdkdevicemanager.c:315:1
msgid "Since: 3.0"
msgstr ""

#. used by: gdk_device_manager_list_devices:
#: gdkdevicemanager.c:280:1
msgid "@type: device type to get."
msgstr ""

#. used by: gdk_device_manager_list_devices:
#: gdkdevicemanager.c:282:2
msgid ""
"Returns the list of devices of type @type currently attached to "
"@device_manager."
msgstr ""

#. used by: gdk_device_manager_list_devices:
#: gdkdevicemanager.c:285:4
msgid ""
"Returns: (transfer container) (element-type Gdk.Device): a list of "
"#GdkDevice<!-- -->s. The returned list must be freed with g_list_free (). "
"The list elements are owned by GTK+ and must not be freed or unreffed."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:29:1
msgid "@Short_description: Functions for handling input devices"
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:30:1
msgid "@Title: GdkDeviceManager"
msgstr ""

#. used by: gdk_device_manager_get_client_pointer:
#: gdkdevicemanager.c:305:3
msgid ""
"Returns the client pointer, that is, the master pointer that acts as the "
"core pointer for this application. In X11, window managers may change this "
"depending on the interaction pattern under the presence of several pointers."
msgstr ""

#. used by: gdk_device_manager_get_client_pointer:
#: gdkdevicemanager.c:309:2
msgid ""
"You should use this function sheldomly, only in code that isn't triggered by "
"a #GdkEvent and there aren't other means to get a meaningful #GdkDevice to "
"operate on."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:31:1
msgid "@See_also: #GdkDevice, #GdkEvent"
msgstr ""

#. used by: gdk_device_manager_get_client_pointer:
#: gdkdevicemanager.c:312:2
msgid ""
"Returns: (transfer none): The client pointer. This memory is owned by GDK "
"and must not be freed or unreferenced."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:33:7
msgid ""
"In addition to a single pointer and keyboard for user interface input, GDK "
"contains support for a variety of input devices, including graphics tablets, "
"touchscreens and multiple pointers/keyboards interacting simultaneously with "
"the user interface. Under X, the support for multiple input devices is done "
"through the <firstterm>XInput 2</firstterm> extension, which also supports "
"additional features such as sub-pixel positioning information and additional "
"device-dependent information."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:41:7
msgid ""
"By default, and if the platform supports it, GDK is aware of multiple "
"keyboard/pointer pairs and multitouch devices, this behavior can be changed "
"by calling gdk_disable_multidevice() before gdk_display_open(), although "
"there would rarely be a reason to do that. For a widget or window to be "
"dealt as multipointer aware, gdk_window_set_support_multidevice() or "
"gtk_widget_set_support_multidevice() must have been called on it."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:49:5
msgid ""
"Conceptually, in multidevice mode there are 2 device types. Virtual devices "
"(or master devices) are represented by the pointer cursors and keyboard foci "
"that are seen on the screen. Physical devices (or slave devices) represent "
"the hardware that is controlling the virtual devices, and thus have no "
"visible cursor on the screen."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:55:3
msgid ""
"Virtual devices are always paired, so there is a keyboard device for every "
"pointer device. Associations between devices may be inspected through "
"gdk_device_get_associated_device()."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:59:3
msgid ""
"There may be several virtual devices, and several physical devices could be "
"controlling each of these virtual devices. Physical devices may also be "
"\"floating\", which means they are not attached to any virtual device."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:63:18
msgid ""
"By default, GDK will automatically listen for events coming from all master "
"devices, setting the #GdkDevice for all events coming from input devices, "
"<footnote> Events containing device information are #GDK_MOTION_NOTIFY, "
"#GDK_BUTTON_PRESS, #GDK_2BUTTON_PRESS, #GDK_3BUTTON_PRESS, "
"#GDK_BUTTON_RELEASE, #GDK_SCROLL, #GDK_KEY_PRESS, #GDK_KEY_RELEASE, "
"#GDK_ENTER_NOTIFY, #GDK_LEAVE_NOTIFY, #GDK_FOCUS_CHANGE, #GDK_PROXIMITY_IN, "
"#GDK_PROXIMITY_OUT, #GDK_DRAG_ENTER, #GDK_DRAG_LEAVE, #GDK_DRAG_MOTION, "
"#GDK_DRAG_STATUS, #GDK_DROP_START, #GDK_DROP_FINISHED and #GDK_GRAB_BROKEN. "
"</footnote> Although gdk_window_set_support_multidevice() must be called on "
"#GdkWindows in order to support additional features of multiple pointer "
"interaction, such as multiple per-device enter/leave events, the default "
"setting will emit just one enter/leave event pair for all devices on the "
"window. See gdk_window_set_support_multidevice() documentation for more "
"information."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:82:3
msgid ""
"In order to listen for events coming from other than a virtual device, "
"gdk_window_set_device_events() must be called. Generally, this function can "
"be used to modify the event mask for any given device."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:86:8
msgid ""
"Input devices may also provide additional information besides X/Y. For "
"example, graphics tablets may also provide pressure and X/Y tilt "
"information. This information is device-dependent, and may be queried "
"through gdk_device_get_axis(). In multidevice mode, virtual devices will "
"change axes in order to always represent the physical device that is routing "
"events through it. Whenever the physical device changes, the #GdkDevice:n-"
"axes property will be notified, and gdk_device_list_axes() will return the "
"new device axes."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:95:3
msgid ""
"Devices may also have associated <firstterm>keys</firstterm> or macro "
"buttons. Such keys can be globally set to map into normal X keyboard events. "
"The mapping is set using gdk_device_set_key()."
msgstr ""

#. used by: SECTION:gdkdevicemanager
#: gdkdevicemanager.c:99:7
msgid ""
"In order to query the device hierarchy and be aware of changes in the device "
"hierarchy (such as virtual devices being created or removed, or physical "
"devices being plugged or unplugged), GDK provides #GdkDeviceManager. On X11, "
"multidevice support is implemented through XInput 2. Unless "
"gdk_disable_multidevice() is called, the XInput 2.x #GdkDeviceManager "
"implementation will be used as the input source. Otherwise either the core "
"or XInput 1.x implementations will be used."
msgstr ""
