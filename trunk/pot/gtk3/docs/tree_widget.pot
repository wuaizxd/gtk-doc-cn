msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-04-15 23:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: tree_widget.sgml:0(None)
msgid "translator-credits"
msgstr ""

#: tree_widget.sgml:104(para)
msgid ""
"Notice that the last argument is -1. This is always done because this is a "
"variable-argument function and it needs to know when to stop processing "
"arguments. It can be used to set the data in any or all columns in a given "
"row."
msgstr ""

#: tree_widget.sgml:110(para)
msgid ""
"The third argument to gtk_tree_store_append() is the parent iterator. It is "
"used to add a row to a GtkTreeStore as a child of an existing row. This "
"means that the new row will only be visible when its parent is visible and "
"in its expanded state. Consider the following example:"
msgstr ""

#: tree_widget.sgml:13(refname) tree_widget.sgml:7(refentrytitle)
msgid "Tree and List Widget Overview"
msgstr ""

#: tree_widget.sgml:14(refpurpose)
msgid "Overview of GtkTreeModel, GtkTreeView, and friends"
msgstr ""

#: tree_widget.sgml:145(title)
msgid "Creating the view component"
msgstr ""

#: tree_widget.sgml:146(para)
msgid ""
"While there are several different models to choose from, there is only one "
"view widget to deal with. It works with either the list or the tree store. "
"Setting up a #GtkTreeView is not a difficult matter. It needs a "
"#GtkTreeModel to know where to retrieve its data from."
msgstr ""

#: tree_widget.sgml:160(title)
msgid "Columns and cell renderers"
msgstr ""

#: tree_widget.sgml:161(para)
msgid ""
"Once the #GtkTreeView widget has a model, it will need to know how to "
"display the model. It does this with columns and cell renderers."
msgstr ""

#: tree_widget.sgml:165(para)
msgid ""
"Cell renderers are used to draw the data in the tree model in a way. There "
"are a number of cell renderers that come with GTK+ 2.x, including the "
"#GtkCellRendererText, #GtkCellRendererPixbuf and the #GtkCellRendererToggle. "
"It is relatively easy to write a custom renderer."
msgstr ""

#: tree_widget.sgml:172(para)
msgid ""
"A #GtkTreeViewColumn is the object that GtkTreeView uses to organize the "
"vertical columns in the tree view. It needs to know the name of the column "
"to label for the user, what type of cell renderer to use, and which piece of "
"data to retrieve from the model for a given row."
msgstr ""

#: tree_widget.sgml:178(programlisting)
#, no-wrap
msgid ""
"\n"
"GtkCellRenderer *renderer;\n"
"GtkTreeViewColumn *column;\n"
"\n"
"renderer = gtk_cell_renderer_text_new ();\n"
"column = gtk_tree_view_column_new_with_attributes (\"Author\",\n"
"                                                   renderer,\n"
"                                                   \"text\", AUTHOR_COLUMN,\n"
"                                                   NULL);\n"
"gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n"
msgstr ""

#: tree_widget.sgml:18(title)
msgid "Overview"
msgstr ""

#: tree_widget.sgml:189(para)
msgid ""
"At this point, all the steps in creating a displayable tree have been "
"covered. The model is created, data is stored in it, a tree view is created "
"and columns are added to it."
msgstr ""

#: tree_widget.sgml:19(para)
msgid ""
"To create a tree or list in GTK+, use the #GtkTreeModel interface in "
"conjunction with the #GtkTreeView widget. This widget is designed around a "
"<firstterm>Model/View/Controller</firstterm> design and consists of four "
"major parts: <placeholder-1/> The <emphasis>View</emphasis> is composed of "
"the first three objects, while the last is the <emphasis>Model</emphasis>. "
"One of the prime benefits of the MVC design is that multiple views can be "
"created of a single model. For example, a model mapping the file system "
"could be created for a file manager. Many views could be created to display "
"various parts of the file system, but only one copy need be kept in memory."
msgstr ""

#: tree_widget.sgml:197(title)
msgid "Selection handling"
msgstr ""

#: tree_widget.sgml:198(para)
msgid ""
"Most applications will need to not only deal with displaying data, but also "
"receiving input events from users. To do this, simply get a reference to a "
"selection object and connect to the #GtkTreeSelection::changed signal."
msgstr ""

#: tree_widget.sgml:217(para)
msgid "Then to retrieve data for the row selected:"
msgstr ""

#: tree_widget.sgml:242(title)
msgid "Simple Example"
msgstr ""

#: tree_widget.sgml:243(para)
msgid ""
"Here is a simple example of using a #GtkTreeView widget in context of the "
"other widgets. It simply creates a simple model and view, and puts them "
"together. Note that the model is never populated with data &mdash; that is "
"left as an exercise for the reader. More information can be found on this in "
"the #GtkTreeModel section. <placeholder-1/>"
msgstr ""

#: tree_widget.sgml:249(programlisting)
#, no-wrap
msgid ""
"\n"
"enum\n"
"{\n"
"   TITLE_COLUMN,\n"
"   AUTHOR_COLUMN,\n"
"   CHECKED_COLUMN,\n"
"   N_COLUMNS\n"
"};\n"
"\n"
"void\n"
"setup_tree (void)\n"
"{\n"
"   GtkTreeStore *store;\n"
"   GtkWidget *tree;\n"
"   GtkTreeViewColumn *column;\n"
"   GtkCellRenderer *renderer;\n"
"\n"
"   /* Create a model.  We are using the store model for now, though we\n"
"    * could use any other GtkTreeModel */\n"
"   store = gtk_tree_store_new (N_COLUMNS,\n"
"                               G_TYPE_STRING,\n"
"                               G_TYPE_STRING,\n"
"                               G_TYPE_BOOLEAN);\n"
"\n"
"   /* custom function to fill the model with data */\n"
"   populate_tree_model (store);\n"
"\n"
"   /* Create a view */\n"
"   tree = gtk_tree_view_new_with_model (GTK_TREE_MODEL (store));\n"
"\n"
"   /* The view now holds a reference.  We can get rid of our own\n"
"    * reference */\n"
"   g_object_unref (G_OBJECT (store));\n"
"\n"
"   /* Create a cell render and arbitrarily make it red for demonstration\n"
"    * purposes */\n"
"   renderer = gtk_cell_renderer_text_new ();\n"
"   g_object_set (G_OBJECT (renderer),\n"
"                 \"foreground\", \"red\",\n"
"                 NULL);\n"
"\n"
"   /* Create a column, associating the \"text\" attribute of the\n"
"    * cell_renderer to the first column of the model */\n"
"   column = gtk_tree_view_column_new_with_attributes (\"Author\", renderer,\n"
"                                                      \"text\", AUTHOR_COLUMN,\n"
"                                                      NULL);\n"
"\n"
"   /* Add the column to the view. */\n"
"   gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n"
"\n"
"   /* Second column.. title of the book. */\n"
"   renderer = gtk_cell_renderer_text_new ();\n"
"   column = gtk_tree_view_column_new_with_attributes (\"Title\",\n"
"                                                      renderer,\n"
"                                                      \"text\", TITLE_COLUMN,\n"
"                                                      NULL);\n"
"   gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n"
"\n"
"   /* Last column.. whether a book is checked out. */\n"
"   renderer = gtk_cell_renderer_toggle_new ();\n"
"   column = gtk_tree_view_column_new_with_attributes (\"Checked out\",\n"
"                                                      renderer,\n"
"                                                      \"active\", CHECKED_COLUMN,\n"
"                                                      NULL);\n"
"   gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n"
"\n"
"   /* Now we can manipulate the view just like any other GTK widget */\n"
"   ...\n"
"}\n"
"      "
msgstr ""

#: tree_widget.sgml:25(member)
msgid "The tree view widget (<placeholder-1/>)"
msgstr ""

#: tree_widget.sgml:25(structname)
msgid "GtkTreeView"
msgstr ""

#: tree_widget.sgml:26(member)
msgid "The view column (<placeholder-1/>)"
msgstr ""

#: tree_widget.sgml:26(structname)
msgid "GtkTreeViewColumn"
msgstr ""

#: tree_widget.sgml:27(member)
msgid "The cell renderers (<placeholder-1/> etc.)"
msgstr ""

#: tree_widget.sgml:27(structname)
msgid "GtkCellRenderer"
msgstr ""

#: tree_widget.sgml:28(member)
msgid "The model interface (<placeholder-1/>)"
msgstr ""

#: tree_widget.sgml:28(structname)
msgid "GtkTreeModel"
msgstr ""

#: tree_widget.sgml:38(para)
msgid ""
"The purpose of the cell renderers is to provide extensibility to the widget "
"and to allow multiple ways of rendering the same type of data. For example, "
"consider how to render a boolean variable. Should it render it as a string "
"of \"True\" or \"False\", \"On\" or \"Off\", or should it be rendered as a "
"checkbox?"
msgstr ""

#: tree_widget.sgml:47(title)
msgid "Creating a model"
msgstr ""

#: tree_widget.sgml:48(para)
msgid ""
"GTK+ provides two simple models that can be used: the #GtkListStore and the "
"#GtkTreeStore. GtkListStore is used to model list widgets, while the "
"GtkTreeStore models trees. It is possible to develop a new type of model, "
"but the existing models should be satisfactory for all but the most "
"specialized of situations. Creating the model is quite simple:"
msgstr ""

#: tree_widget.sgml:59(para)
msgid ""
"This creates a list store with two columns: a string column and a boolean "
"column. Typically the 2 is never passed directly like that; usually an enum "
"is created wherein the different columns are enumerated, followed by a token "
"that represents the total number of columns. The next example will "
"illustrate this, only using a tree store instead of a list store. Creating a "
"tree store operates almost exactly the same."
msgstr ""

#: tree_widget.sgml:8(manvolnum)
msgid "3"
msgstr ""

#: tree_widget.sgml:81(para)
msgid ""
"Adding data to the model is done using gtk_tree_store_set() or "
"gtk_list_store_set(), depending upon which sort of model was created. To do "
"this, a #GtkTreeIter must be acquired. The iterator points to the location "
"where data will be added."
msgstr ""

#: tree_widget.sgml:87(para)
msgid ""
"Once an iterator has been acquired, gtk_tree_store_set() is used to apply "
"data to the part of the model that the iterator points to. Consider the "
"following example:"
msgstr ""

#: tree_widget.sgml:9(refmiscinfo)
msgid "GTK Library"
msgstr ""
