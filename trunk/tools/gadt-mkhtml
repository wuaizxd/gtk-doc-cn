#!/bin/sh
# File: gadt-mkhtml
# Summary: This is a ...
# Author: yetist <yetist@gmail.com>
# Version: 2009-10-07 18:48:25
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

NOBUILD=0
NOSGML=0
LOGGING=0
NOCONFIGURE=0
CLEANUP=0
EDITSGML=0
NOEXTRACT=0
NOHTMLHELP=0
CLEANCACHE=0
BUILDSCRIPT="build.rc"
COLORMSG=0

plain() {
	local mesg=$1; shift
	if [ $COLORMSG -eq 1 ]; then
		printf "\033[1;1m    ${mesg}\033[1;0m\n" "$@" >&2
	else
		printf "    ${mesg}\n" "$@" >&2
	fi
}

msg() {
	local mesg=$1; shift
	if [ $COLORMSG -eq 1 ]; then
		printf "\033[1;32m==>\033[1;0m\033[1;1m ${mesg}\033[1;0m\n" "$@" >&2
	else
		printf "==> ${mesg}\n" "$@" >&2
	fi
}

msg2() {
	local mesg=$1; shift
	if [ $COLORMSG -eq 1 ]; then
		printf "\033[1;34m  ->\033[1;0m\033[1;1m ${mesg}\033[1;0m\n" "$@" >&2
	else
		printf "  -> ${mesg}\n" "$@" >&2
	fi
}

warning() {
	local mesg=$1; shift
	if [ $COLORMSG -eq 1 ]; then
		printf "\033[1;33m==> $(gettext "WARNING:")\033[1;0m\033[1;1m ${mesg}\033[1;0m\n" "$@" >&2
	else
		printf "==> $(gettext "WARNING:") ${mesg}\n" "$@" >&2
	fi
}

error() {
	local mesg=$1; shift
	if [ $COLORMSG -eq 1 ]; then
		printf "\033[1;31m==> $(gettext "ERROR:")\033[1;0m\033[1;1m ${mesg}\033[1;0m\n" "$@" >&2
	else
		printf "==> $(gettext "ERROR:") ${mesg}\n" "$@" >&2
	fi
}


##
# Special exit call for traps, Don't print any error messages when inside,
# the fakeroot call, the error message will be printed by the main call.
##
trap_exit() {
	if [ "$INFAKEROOT" -eq 0 ]; then
		echo
		error "$@"
	fi
	exit 1
}


usage() {
	printf "gadt-mkhtml %s\n" "$Revision$"
	echo
	printf "Usage: %s [options]\n" "$0"
	echo
	echo "Options:"
	echo "  -c, --clean      Clean up work files after build"
	echo "  -C, --cleancache Clean up source files from the cache"
	echo "  -e, --noextract  Do not extract source files (use existing src/ dir)"
	echo "  -h, --help       This help"
	echo "  -L, --log        Log package build process"
	echo "  -o, --nobuild    Download and extract files only"
	echo "  -s, --nosgml     Do not update the sgml files"
	echo "  -H, --nohtmlhelp     Do not create htmlhelp file"
	echo "  -t, --editsgml   Edit the sgml files"
	echo "  -n, --noconfigure     Do not configure the source"
	printf "  -p <buildscript> Use an alternate build script (instead of '%s')\n" "$BUILDSCRIPT"
	echo
}

# getopt like parser
parse_options() {
	local short_options=$1; shift;
	local long_options=$1; shift;
	local ret=0;
	local unused_options=""

	while [ -n "$1" ]; do
		if [ ${1:0:2} = '--' ]; then
			if [ -n "${1:2}" ]; then
				local match=""
				for i in ${long_options//,/ }; do
					if [ ${1:2} = ${i//:} ]; then
						match=$i
						break
					fi
				done
				if [ -n "$match" ]; then
					if [ ${1:2} = $match ]; then
						printf ' %s' "$1"
					else
						if [ -n "$2" ]; then
							printf ' %s' "$1"
							shift
							printf " '%s'" "$1"
						else
							echo "gadt-mkhtml: option '$1' requires an argument" >&2
							ret=1
						fi
					fi
				else
					echo "gadt-mkhtml: unrecognized option '$1'" >&2
					ret=1
				fi
			else
				shift
				break
			fi
		elif [ ${1:0:1} = '-' ]; then
			for ((i=1; i<${#1}; i++)); do
				if [[ "$short_options" =~ "${1:i:1}" ]]; then
					if [[ "$short_options" =~ "${1:i:1}:" ]]; then
						if [ -n "${1:$i+1}" ]; then
							printf ' -%s' "${1:i:1}"
							printf " '%s'" "${1:$i+1}"
						else
							if [ -n "$2" ]; then
								printf ' -%s' "${1:i:1}"
								shift
								printf " '%s'" "${1}"
							else
								echo "gadt-mkhtml: option requires an argument -- '${1:i:1}'" >&2
								ret=1
							fi
						fi
						break
					else
						printf ' -%s' "${1:i:1}"
					fi
				else
					echo "gadt-mkhtml: invalid option -- '${1:i:1}'" >&2
					ret=1
				fi
			done
		else
			unused_options="${unused_options} '$1'"
		fi
		shift
	done

	printf " --"
	if [ -n "$unused_options" ]; then
		for i in ${unused_options[@]}; do
			printf ' %s' "$i"
		done
	fi
	if [ -n "$1" ]; then
		while [ -n "$1" ]; do
			printf " '%s'" "${1}"
			shift
		done
	fi
	printf "\n"

	return $ret
}

ARGLIST=$@

# Parse Command Line Options.
OPT_SHORT="cCehHLnop:st"
OPT_LONG="clean,cleancache,editsgml,nodeps,noextract,noconfigure,nosgml,nohtmlhelp,help,log,nobuild"
# Pacman Options
OPT_TEMP="$(parse_options $OPT_SHORT $OPT_LONG "$@" || echo 'PARSE_OPTIONS FAILED')"
if echo "$OPT_TEMP" | grep -q 'PARSE_OPTIONS FAILED'; then
	# This is a small hack to stop the script bailing with 'set -e'
	echo; usage; exit 1 # E_INVALID_OPTION;
fi
eval set -- "$OPT_TEMP"
unset OPT_SHORT OPT_LONG OPT_TEMP

while true; do
	case "$1" in
		# Makepkg Options
		-c|--clean)       CLEANUP=1 ;;
		-C|--cleancache)  CLEANCACHE=1 ;;
		-e|--noextract)   NOEXTRACT=1 ;;
		-L|--log)         LOGGING=1 ;;
		-m|--nocolor)     USE_COLOR='n' ;;
		-n|--noconfigure)      NOCONFIGURE=1 ;;
		-o|--nobuild)     NOBUILD=1 ;;
		-s|--nosgml)      NOSGML=1 ;;
		-H|--nohtmlhelp)      NOHTMLHELP=1 ;;
		-t|--editsgml)      EDITSGML=1 ;;
		-p)               shift; BUILDFILE=$1 ;;
		-h|--help)        usage; exit 0 ;; # E_OK
		-V|--version)     version; exit 0 ;; # E_OK

		--)               OPT_IND=0; shift; break;;
		*)                usage; exit 1 ;; # E_INVALID_OPTION
	esac
	shift
done

BUILDFILE=${BUILDFILE:-$BUILDSCRIPT}

source ./$BUILDFILE
startdir=`pwd`
pkgfile=`basename $source`
tmpdir=$startdir/tmp
srcdir=$tmpdir/$pkgname-$pkgver
source ./$BUILDFILE

# check if messages are to be printed using color
if [ -t 2 -a ! "$USE_COLOR" = "n" ]; then
	COLORMSG=1
fi

SRCDEST=${_SRCDEST:-$SRCDEST}
SRCDEST=${SRCDEST:-$tmpdir} #default to $startdir if undefined

################## init ###########################

download_source()
{
	msg "正在下载源文件..."
	[ -d $tmpdir ] || mkdir $tmpdir
	pushd $tmpdir >/dev/null
	if [ ! -f $pkgfile ]; then
		wget $source || return 1
	fi
	file="$SRCDEST/$pkgfile"
	local file_type=$(file -bizL "$pkgfile")
	local ext=${file##*.}
	local cmd=''
	case "$file_type" in
		*application/x-tar*)
		cmd="tar" ;;
		*application/x-gzip*)
		case "$ext" in
			gz|z|Z) cmd="gzip" ;;
			*) continue;;
		esac ;;
		*application/x-bzip*)
		case "$ext" in
			bz2|bz) cmd="bzip2" ;;
			*) continue;;
		esac ;;
		*)
		# Don't know what to use to extract this file,
		# skip to the next file
		continue;;
	esac
	local ret=0
	msg2 "Extracting %s with %s" "$file" "$cmd"
	if [ "$cmd" = "tar" ]; then
		$cmd -xf "$file" || ret=?
	else
		rm -f "${file%.*}"
		$cmd -dcf "$file" > "${file%.*}" || ret=?
	fi
	if [ $ret -ne 0 ]; then
		error "Failed to extract %s" "$file"
		plain "Aborting..."
		exit 1
	fi
	popd >/dev/null
	gtkdocpo -n $modname -V $pkgver -m -p . $moddir || return 1
}

compile_source()
{
	msg "正在编译生成新文档..."
	pushd $srcdir
	if [ "$NOCONFIGURE" -eq 0 ]; then
		./configure $configure || return 1
	fi
	pushd $docdir
	make || return 1
	popd
	popd
	cp -r $htmldir .
	msg "新文档位于 $startdir/html"
}

update_sgml()
{
	msg "正在更新sgml文件..."
	if [ -d $startdir/docs-$pkgver ];then
		cp -r $startdir/docs-$pkgver/* $docdir
	fi
	cp $startdir/credits.xml $docdir
	local now=`date +%Y年%m月%d日`
	sed -i 's/XXXX年XX月XX日/'$now'/g' $docdir/credits.xml
	if [ -f $startdir/AUTHORS ]; then
		cat $startdir/AUTHORS|sort|while read line;
		do 
			author=`echo $line|awk '{print $1}'`
			mail=`echo $line|awk '{print $2}'`
			msgline="<para role=\"author\">\n$author <email>$mail</email>\n</para>"
			sed -i -e "/<\!-- AUTHORS -->/i$msgline" $docdir/credits.xml
			
		done
	fi
}

##
# Clean up function. Called automatically when the script exits.
##
clean_up() {
	local EXIT_CODE=$?

	if [ $EXIT_CODE -eq 0 -a "$CLEANUP" -eq 1 ]; then
		# If it's a clean exit and -c/--clean has been passed...
		msg "Cleaning up..."
		rm -rf "$srcdir"
	fi
	gnome-open file://$startdir/html/index.html
}

##
# Signal Traps
##
trap 'clean_up' 0

make_htmlhelp()
{
	msg "htmlhelp文档为 $modname-$pkgver.tgz"
	cp -r html book
	mv book/*.devhelp book.devhelp
	tar -zcf $modname-$pkgver.tgz book book.devhelp
	rm -rf book book.devhelp
}

translate_sgml()
{
	local olddocs=$startdir/docs-$pkgver
	if [ -d $olddocs ];then
		for f in `find $olddocs -name "*.sgml"`;
		do
			local filename=${f#$olddocs\/}
			vim -d $docdir/$filename ${olddocs}/$filename
		done
	else
		warning "You have not the docs-$pkgver"
	fi
}


run_function()
{
	local ret=0
	local func=$1
	#eval `$func 2>&1 | tee "$BUILDLOG"; ret=${PIPESTATUS[0]}`
	if [ "$LOGGING" -eq 1 -a "x$func" = "xcompile_source" ]; then
		BUILDLOG="${startdir}/${pkgname}-${pkgver}-build.log"
		if [ -f "$BUILDLOG" ]; then
			local i=1
			while true; do
				if [ -f "$BUILDLOG.$i" ]; then
					i=$(($i +1))
				else
					break
				fi
			done
			mv "$BUILDLOG" "$BUILDLOG.$i"
		fi

		#eval "$func 2>&1 | tee \"$BUILDLOG\"; ret=${PIPESTATUS[0]}"
		eval "$func 2>&1 > $BUILDLOG || ret=$?"
	if [ $ret -gt 0 ]; then
		echo "run $func error."
		exit 2
	fi
	else
		eval "$func 2>&1 || ret=$?"
	fi

	if [ $ret -gt 0 ]; then
		error "Build Failed."
		plain "Aborting..."
		exit 2 # $E_BUILD_FAILED
	fi
}

#run_function download_source
#run_function update_sgml
#run_function compile_source

if [ "$CLEANCACHE" -eq 1 ]; then
	msg "Cleaning up ALL files from %s." "$SRCDEST"
	echo -n "    Are you sure you wish to do this? "
	echo -n "[Y/n]"
	read answer
	answer=$(echo $answer | tr '[:lower:]' '[:upper:]')
	if [ "$answer" = "YES" -o "$answer" = "Y" ]; then
		rm "$SRCDEST"/*
		if [ $? -ne 0 ]; then
			error "Problem removing files; you may not have correct permissions in %s" "$SRCDEST"
			exit 1
		else
			msg "Source cache cleaned."
			exit 0
		fi
	else
		# answer = no
		msg "No files have been removed."
		exit 0
	fi
fi

if [ "$NOEXTRACT" -eq 1 ]; then
	warning "Skipping source retrieval        -- using existing $srcdir tree"

	if [ "$NOEXTRACT" -eq 1 -a -z "$(ls "$srcdir" 2>/dev/null)" ]; then
		error "The source directory is empty, there is nothing to build!"
		plain "Aborting..."
		exit 1
	fi
else
	run_function download_source
fi

if [ "$EDITSGML" -eq 1 ]; then
	run_function translate_sgml
	exit 0;
fi

if [ "$NOSGML" -eq 0 ]; then
	run_function update_sgml
fi

if [ "$NOBUILD" -eq 0 ]; then
	run_function compile_source
fi

if [ "$NOHTMLHELP" -eq 0 ]; then
	run_function make_htmlhelp
fi
