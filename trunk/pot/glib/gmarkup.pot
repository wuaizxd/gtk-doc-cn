# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-14 21:52-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_new:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_push:
#: gmarkup.c:156:1 gmarkup.c:1848:1
msgid "@parser: a #GMarkupParser"
msgstr ""

# used by: g_markup_parse_context_new:
#: gmarkup.c:157:1
msgid "@flags: one or more #GMarkupParseFlags"
msgstr ""

# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_new:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_push:
#: gmarkup.c:158:1 gmarkup.c:1849:1
msgid "@user_data: user data to pass to #GMarkupParser functions"
msgstr ""

# used by: g_markup_parse_context_new:
#: gmarkup.c:159:1
msgid ""
"@user_data_dnotify: user data destroy notifier called when the parse context "
"is freed"
msgstr ""

# #used by: g_markup_parse_context_new:
#: gmarkup.c:161:5
msgid ""
"Creates a new parse context. A parse context is used to parse marked-up "
"documents. You can feed any number of documents into a context, as long as "
"no errors occur; once an error occurs, the parse context can't continue to "
"parse text (you have to free it and create a new parse context)."
msgstr ""

# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_free:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_parse:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_end_parse:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_get_element:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_get_element_stack:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_get_position:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_get_user_data:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_push:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_pop:
#: gmarkup.c:1625:1 gmarkup.c:1751:1 gmarkup.c:1775:1 gmarkup.c:1801:1
#: gmarkup.c:1827:1 gmarkup.c:1847:1 gmarkup.c:1990:1 gmarkup.c:233:1
#: gmarkup.c:941:1
msgid "@context: a #GMarkupParseContext"
msgstr ""

# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_parse:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_parse_context_end_parse:
#: gmarkup.c:1626:1 gmarkup.c:944:1
msgid "@error: return location for a #GError"
msgstr ""

# #used by: g_markup_parse_context_end_parse:
#: gmarkup.c:1628:4
msgid ""
"Signals to the #GMarkupParseContext that all data has been fed into the "
"parse context with g_markup_parse_context_parse(). This function reports an "
"error if the document isn't complete, for example if elements are still open."
msgstr ""

# #used by: g_markup_parse_context_end_parse:
#: gmarkup.c:1633:1
msgid "Return value: %TRUE on success, %FALSE if an error was set"
msgstr ""

# #used by: g_markup_parse_context_new:
#: gmarkup.c:167:1
msgid "Return value: a new #GMarkupParseContext"
msgstr ""

# used by: g_markup_parse_context_get_element:
#: gmarkup.c:1752:1
msgid "@returns: the name of the currently open element, or %NULL"
msgstr ""

# #used by: g_markup_parse_context_get_element:
#: gmarkup.c:1754:1
msgid "Retrieves the name of the currently open element."
msgstr ""

# #used by: g_markup_parse_context_get_element:
#: gmarkup.c:1756:3
msgid ""
"If called from the start_element or end_element handlers this will give the "
"element_name as passed to those functions. For the parent elements, see "
"g_markup_parse_context_get_element_stack()."
msgstr ""

# #used by: g_markup_parse_context_get_element:
#: gmarkup.c:1760:1
msgid "Since: 2.2"
msgstr ""

# #used by: g_markup_parse_context_get_element_stack:
#: gmarkup.c:1777:5
msgid ""
"Retrieves the element stack from the internal state of the parser. The "
"returned #GSList is a list of strings where the first item is the currently "
"open tag (as would be returned by g_markup_parse_context_get_element()) and "
"the next item is its immediate parent."
msgstr ""

# #used by: g_markup_parse_context_get_element_stack:
#: gmarkup.c:1783:4
msgid ""
"This function is intended to be used in the start_element and end_element "
"handlers where g_markup_parse_context_get_element() would merely return the "
"name of the element that is being processed."
msgstr ""

# #used by: g_markup_parse_context_get_element_stack:
#: gmarkup.c:1788:1
msgid "Returns: the element stack, which must not be modified"
msgstr ""

# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_parse_context_get_element_stack:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_collect_attributes:
#: gmarkup.c:1790:1 gmarkup.c:2564:1
msgid "Since: 2.16"
msgstr ""

# used by: g_markup_parse_context_get_position:
#: gmarkup.c:1802:1
msgid "@line_number: return location for a line number, or %NULL"
msgstr ""

# used by: g_markup_parse_context_get_position:
#: gmarkup.c:1803:1
msgid "@char_number: return location for a char-on-line number, or %NULL"
msgstr ""

# #used by: g_markup_parse_context_get_position:
#: gmarkup.c:1805:4
msgid ""
"Retrieves the current line number and the number of the character on that "
"line. Intended for use in error messages; there are no strict semantics for "
"what constitutes the |$_1_$|current|$_1_$| line number other than |$_1_$|the "
"best number we could come up with for error messages.|$_1_$|"
msgstr ""

# #used by: g_markup_parse_context_get_user_data:
#: gmarkup.c:1829:3
msgid ""
"Returns the user_data associated with @context.  This will either be the "
"user_data that was provided to g_markup_parse_context_new() or to the most "
"recent call of g_markup_parse_context_push()."
msgstr ""

# #used by: g_markup_parse_context_get_user_data:
#: gmarkup.c:1833:3
msgid ""
"Returns: the provided user_data. The returned data belongs to the markup "
"context and will be freed when g_markup_context_free() is called."
msgstr ""

# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_parse_context_get_user_data:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_parse_context_push:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_parse_context_pop:
#: gmarkup.c:1837:1 gmarkup.c:1966:1 gmarkup.c:2008:1
msgid "Since: 2.18"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1851:1
msgid "Temporarily redirects markup data to a sub-parser."
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1853:4
msgid ""
"This function may only be called from the start_element handler of a "
"#GMarkupParser.  It must be matched with a corresponding call to "
"g_markup_parse_context_pop() in the matching end_element handler (except in "
"the case that the parser aborts due to an error)."
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1858:5
msgid ""
"All tags, text and other data between the matching tags is redirected to the "
"subparser given by @parser.  @user_data is used as the user_data for that "
"parser.  @user_data is also passed to the error callback in the event that "
"an error occurs.  This includes errors that occur in subparsers of the "
"subparser."
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1864:8
msgid ""
"The end tag matching the start tag for which this call was made is handled "
"by the previous parser (which is given its own user_data) which is why "
"g_markup_parse_context_pop() is provided to allow |$_1_$|one last access|$_1_"
"$| to the @user_data provided to this function.  In the case of error, the "
"@user_data provided here is passed directly to the error callback of the "
"subparser and g_markup_parse_context() should not be called.  In either "
"case, if @user_data was allocated then it ought to be freed from both of "
"these locations."
msgstr ""

# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_parse_context_push:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_parse_context_pop:
#: gmarkup.c:1873:4 gmarkup.c:2001:4
msgid ""
"This function is not intended to be directly called by users interested in "
"invoking subparsers.  Instead, it is intended to be used by the subparsers "
"themselves to implement a higher-level interface."
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1878:2
msgid ""
"As an example, see the following implementation of a simple parser that "
"counts the number of tags encountered."
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1881:5
msgid "|[ typedef struct { gint tag_count; } CounterData;"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1887:9
msgid ""
"static void counter_start_element (GMarkupParseContext  *context, const "
"gchar          *element_name, const gchar         **attribute_names, const "
"gchar         **attribute_values, gpointer              user_data, "
"GError              **error) { CounterData *data = user_data;"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1897:2
msgid "data->tag_count++; }"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1900:6
msgid ""
"static void counter_error (GMarkupParseContext *context, GError              "
"*error, gpointer             user_data) { CounterData *data = user_data;"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1907:2
msgid "g_slice_free (CounterData, data); }"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1910:9
msgid ""
"static GMarkupParser counter_subparser = { counter_start_element, NULL, "
"NULL, NULL, counter_error }; ]|"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1920:2
msgid ""
"In order to allow this parser to be easily used as a subparser, the "
"following interface is provided:"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1923:5
msgid ""
"|[ void start_counting (GMarkupParseContext *context) { CounterData *data = "
"g_slice_new (CounterData);"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1929:3
msgid ""
"data->tag_count = 0; g_markup_parse_context_push (context, "
"&counter_subparser, data); }"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1933:5
msgid ""
"gint end_counting (GMarkupParseContext *context) { CounterData *data = "
"g_markup_parse_context_pop (context); int result;"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1939:2
msgid "result = data->tag_count; g_slice_free (CounterData, data);"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1942:3
msgid "return result; } ]|"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1946:1
msgid "The subparser would then be used as follows:"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1948:5
msgid ""
"|[ static void start_element (context, element_name, ...) { if (strcmp "
"(element_name, |$_1_$|count-these|$_1_$|) == 0) start_counting (context);"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1954:2
msgid "/&ast; else, handle other tags... &ast;/ }"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1957:4
msgid ""
"static void end_element (context, element_name, ...) { if (strcmp "
"(element_name, |$_1_$|count-these|$_1_$|) == 0) g_print (|$_1_$|Counted %d "
"tags|$_2_$|n|$_1_$|, end_counting (context));"
msgstr ""

# #used by: g_markup_parse_context_push:
#: gmarkup.c:1962:3
msgid "/&ast; else, handle other tags... &ast;/ } ]|"
msgstr ""

# #used by: g_markup_parse_context_pop:
#: gmarkup.c:1992:1
msgid "Completes the process of a temporary sub-parser redirection."
msgstr ""

# #used by: g_markup_parse_context_pop:
#: gmarkup.c:1994:6
msgid ""
"This function exists to collect the user_data allocated by a matching call "
"to g_markup_parse_context_push().  It must be called in the end_element "
"handler corresponding to the start_element handler during which "
"g_markup_parse_context_push() was called.  You must not call this function "
"from the error callback -- the @user_data is provided directly to the "
"callback in that case."
msgstr ""

# #used by: g_markup_parse_context_pop:
#: gmarkup.c:2006:1
msgid "Returns: the user_data passed to g_markup_parse_context_push()."
msgstr ""

# used by: g_markup_escape_text:
#: gmarkup.c:2087:1
msgid "@text: some valid UTF-8 text"
msgstr ""

# used by: g_markup_escape_text:
#: gmarkup.c:2088:1
msgid "@length: length of @text in bytes, or -1 if the text is nul-terminated"
msgstr ""

# #used by: g_markup_escape_text:
#: gmarkup.c:2090:4
msgid ""
"Escapes text so that the markup parser will parse it verbatim. Less than, "
"greater than, ampersand, etc. are replaced with the corresponding entities. "
"This function would typically be used when writing out a file to be parsed "
"with the markup parser."
msgstr ""

# #used by: g_markup_escape_text:
#: gmarkup.c:2095:3
msgid ""
"Note that this function doesn't protect whitespace and line endings from "
"being processed according to the XML rules for normalization of line endings "
"and attribute values."
msgstr ""

# #used by: g_markup_escape_text:
#: gmarkup.c:2099:5
msgid ""
"Note also that this function will produce character references in the range "
"of &amp;#x1; ... &amp;#x1f; for all control sequences except for tabstop, "
"newline and carriage return.  The character references in this range are not "
"valid XML 1.0, but they are valid XML 1.1 and will be accepted by the "
"GMarkup parser."
msgstr ""

# #used by: g_markup_escape_text:
#: gmarkup.c:2105:1
msgid "Return value: a newly allocated string with the escaped text"
msgstr ""

# used by: find_conversion:
#: gmarkup.c:2127:1
msgid "@format: a printf-style format string"
msgstr ""

# used by: find_conversion:
#: gmarkup.c:2128:3
msgid ""
"@after: location to store a pointer to the character after the returned "
"conversion. On a %NULL return, returns the pointer to the trailing NUL in "
"the string"
msgstr ""

# #used by: find_conversion:
#: gmarkup.c:2132:3
msgid ""
"Find the next conversion in a printf-style format string. Partially based on "
"code from printf-parser.c, Copyright (C) 1999-2000, 2002-2003 Free Software "
"Foundation, Inc."
msgstr ""

# #used by: find_conversion:
#: gmarkup.c:2136:2
msgid ""
"Return value: pointer to the next conversion in @format, or %NULL, if none."
msgstr ""

# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_vprintf_escaped:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_markup_printf_escaped:
#: gmarkup.c:2253:1 gmarkup.c:2393:1
msgid "@format: printf() style format string"
msgstr ""

# used by: g_markup_vprintf_escaped:
#: gmarkup.c:2254:1
msgid "@args: variable argument list, similar to vprintf()"
msgstr ""

# #used by: g_markup_vprintf_escaped:
#: gmarkup.c:2256:3
msgid ""
"Formats the data in @args according to @format, escaping all string and "
"character arguments in the fashion of g_markup_escape_text(). See "
"g_markup_printf_escaped()."
msgstr ""

# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_vprintf_escaped:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_printf_escaped:
#: gmarkup.c:2260:2 gmarkup.c:2415:2
msgid ""
"Return value: newly allocated result from formatting operation. Free with "
"g_free()."
msgstr ""

# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_vprintf_escaped:
# #-#-#-#-#  gmarkup.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_markup_printf_escaped:
#: gmarkup.c:2263:1 gmarkup.c:2418:1
msgid "Since: 2.4"
msgstr ""

# #used by: g_markup_parse_context_free:
#: gmarkup.c:235:3
msgid ""
"Frees a #GMarkupParseContext. Can't be called from inside one of the "
"#GMarkupParser functions. Can't be called while a subparser is pushed."
msgstr ""

# used by: g_markup_printf_escaped:
#: gmarkup.c:2394:1
msgid "@Varargs: the arguments to insert in the format string"
msgstr ""

# #used by: g_markup_printf_escaped:
#: gmarkup.c:2396:6
msgid ""
"Formats arguments according to @format, escaping all string and character "
"arguments in the fashion of g_markup_escape_text(). This is useful when you "
"want to insert literal strings into XML-style markup output, without having "
"to worry that the strings might themselves contain markup."
msgstr ""

# #used by: g_markup_printf_escaped:
#: gmarkup.c:2403:11
msgid ""
"|[ const char *store = |$_1_$|Fortnum &amp; Mason|$_1_$|; const char *item = "
"|$_1_$|Tea|$_1_$|; char *output; &nbsp; output = g_markup_printf_escaped (|"
"$_1_$|&lt;purchase&gt;|$_1_$| |$_1_$|&lt;store&gt;&percnt;s&lt;/store&gt;|"
"$_1_$| |$_1_$|&lt;item&gt;&percnt;s&lt;/item&gt;|$_1_$| |$_1_$|&lt;/"
"purchase&gt;|$_1_$|, store, item); ]|"
msgstr ""

# used by: GMarkupCollectType:
#: gmarkup.c:2468:2
msgid ""
"@G_MARKUP_COLLECT_INVALID: used to terminate the list of attributes to "
"collect."
msgstr ""

# used by: GMarkupCollectType:
#: gmarkup.c:2470:6
msgid ""
"@G_MARKUP_COLLECT_STRING: collect the string pointer directly from the "
"attribute_values[] array.  Expects a parameter of type (const char **).  If "
"%G_MARKUP_COLLECT_OPTIONAL is specified and the attribute isn't present then "
"the pointer will be set to %NULL."
msgstr ""

# used by: GMarkupCollectType:
#: gmarkup.c:2476:4
msgid ""
"@G_MARKUP_COLLECT_STRDUP: as with %G_MARKUP_COLLECT_STRING, but expects a "
"parameter of type (char **) and g_strdup()s the returned pointer.  The "
"pointer must be freed with g_free()."
msgstr ""

# used by: GMarkupCollectType:
#: gmarkup.c:2480:7
msgid ""
"@G_MARKUP_COLLECT_BOOLEAN: expects a parameter of type (gboolean *) and "
"parses the attribute value as a boolean.  Sets %FALSE if the attribute isn't "
"present.  Valid boolean values consist of (case insensitive) |$_1_$|false|"
"$_1_$|, |$_1_$|f|$_1_$|, |$_1_$|no|$_1_$|, |$_1_$|n|$_1_$|, |$_1_$|0|$_1_$| "
"and |$_1_$|true|$_1_$|, |$_1_$|t|$_1_$|, |$_1_$|yes|$_1_$|, |$_1_$|y|$_1_$|, "
"|$_1_$|1|$_1_$|."
msgstr ""

# used by: GMarkupCollectType:
#: gmarkup.c:2487:5
msgid ""
"@G_MARKUP_COLLECT_TRISTATE: as with %G_MARKUP_COLLECT_BOOLEAN, but in the "
"case of a missing attribute a value is set that compares equal to neither "
"%FALSE nor %TRUE. G_MARKUP_COLLECT_OPTIONAL is implied."
msgstr ""

# used by: GMarkupCollectType:
#: gmarkup.c:2492:5
msgid ""
"@G_MARKUP_COLLECT_OPTIONAL: can be bitwise ORed with the other fields.  If "
"present, allows the attribute not to appear.  A default value is set "
"depending on what value type is used."
msgstr ""

# #used by: GMarkupCollectType:
#: gmarkup.c:2498:4
msgid ""
"A mixed enumerated type and flags field.  You must specify one type (string, "
"strdup, boolean, tristate).  Additionally, you may optionally bitwise OR the "
"type with the flag %G_MARKUP_COLLECT_OPTIONAL."
msgstr ""

# #used by: GMarkupCollectType:
#: gmarkup.c:2503:2
msgid ""
"It is likely that this enum will be extended in the future to support other "
"types."
msgstr ""

# used by: g_markup_collect_attributes:
#: gmarkup.c:2509:1
msgid "@element_name: the current tag name"
msgstr ""

# used by: g_markup_collect_attributes:
#: gmarkup.c:2510:1
msgid "@attribute_names: the attribute names"
msgstr ""

# used by: g_markup_collect_attributes:
#: gmarkup.c:2511:1
msgid "@attribute_values: the attribute values"
msgstr ""

# used by: g_markup_collect_attributes:
#: gmarkup.c:2512:1
msgid "@error: a pointer to a #GError or %NULL"
msgstr ""

# used by: g_markup_collect_attributes:
#: gmarkup.c:2513:2
msgid "@first_type: the #GMarkupCollectType of the first attribute"
msgstr ""

# used by: g_markup_collect_attributes:
#: gmarkup.c:2515:1
msgid "@first_attr: the name of the first attribute"
msgstr ""

# used by: g_markup_collect_attributes:
#: gmarkup.c:2516:4
msgid ""
"@...: a pointer to the storage location of the first attribute (or %NULL), "
"followed by more types names and pointers, ending with "
"%G_MARKUP_COLLECT_INVALID."
msgstr ""

# #used by: g_markup_collect_attributes:
#: gmarkup.c:2521:4
msgid ""
"Collects the attributes of the element from the data passed to the "
"#GMarkupParser start_element function, dealing with common error conditions "
"and supporting boolean values."
msgstr ""

# #used by: g_markup_collect_attributes:
#: gmarkup.c:2526:2
msgid ""
"This utility function is not required to write a parser but can save a lot "
"of typing."
msgstr ""

# #used by: g_markup_collect_attributes:
#: gmarkup.c:2529:4
msgid ""
"The @element_name, @attribute_names, @attribute_values and @error parameters "
"passed to the start_element callback should be passed unmodified to this "
"function."
msgstr ""

# #used by: g_markup_collect_attributes:
#: gmarkup.c:2534:6
msgid ""
"Following these arguments is a list of |$_1_$|supported|$_1_$| attributes to "
"collect.  It is an error to specify multiple attributes with the same name.  "
"If any attribute not in the list appears in the @attribute_names array then "
"an unknown attribute error will result."
msgstr ""

# #used by: g_markup_collect_attributes:
#: gmarkup.c:2541:3
msgid ""
"The #GMarkupCollectType field allows specifying the type of collection to "
"perform and if a given attribute must appear or is optional."
msgstr ""

# #used by: g_markup_collect_attributes:
#: gmarkup.c:2545:2
msgid "The attribute name is simply the name of the attribute to collect."
msgstr ""

# #used by: g_markup_collect_attributes:
#: gmarkup.c:2548:5
msgid ""
"The pointer should be of the appropriate type (see the descriptions under "
"#GMarkupCollectType) and may be %NULL in case a particular attribute is to "
"be allowed but ignored."
msgstr ""

# #used by: g_markup_collect_attributes:
#: gmarkup.c:2554:7
msgid ""
"This function deals with issuing errors for missing attributes (of type "
"%G_MARKUP_ERROR_MISSING_ATTRIBUTE), unknown attributes (of type "
"%G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE) and duplicate attributes (of type "
"%G_MARKUP_ERROR_INVALID_CONTENT) as well as parse errors for boolean-valued "
"attributes (again of type %G_MARKUP_ERROR_INVALID_CONTENT). In all of these "
"cases %FALSE will be returned and @error will be set as appropriate."
msgstr ""

# #used by: g_markup_collect_attributes:
#: gmarkup.c:2562:1
msgid "Return value: %TRUE if successful"
msgstr ""

# used by: g_markup_parse_context_parse:
#: gmarkup.c:942:1
msgid "@text: chunk of text to parse"
msgstr ""

# used by: g_markup_parse_context_parse:
#: gmarkup.c:943:1
msgid "@text_len: length of @text in bytes"
msgstr ""

# #used by: g_markup_parse_context_parse:
#: gmarkup.c:946:8
msgid ""
"Feed some data to the #GMarkupParseContext. The data need not be valid "
"UTF-8; an error will be signaled if it's invalid. The data need not be an "
"entire document; you can feed a document into the parser incrementally, via "
"multiple calls to this function. Typically, as you receive data from a "
"network connection or file, you feed each received chunk of data into this "
"function, aborting the process if an error occurs. Once an error is "
"reported, no further data may be fed to the #GMarkupParseContext; all errors "
"are fatal."
msgstr ""

# #used by: g_markup_parse_context_parse:
#: gmarkup.c:955:1
msgid "Return value: %FALSE if an error occurred, %TRUE on success"
msgstr ""
