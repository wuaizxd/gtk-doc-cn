# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 20:50-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_attach:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_destroy:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_get_id:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_get_context:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_funcs:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_priority:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_get_priority:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_can_recurse:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_get_can_recurse:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_name:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_get_name:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_ref:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_unref:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_is_destroyed:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_get_time:
#: gmain.c:1042:1 gmain.c:1065:1 gmain.c:1091:1 gmain.c:1395:1 gmain.c:1458:1
#: gmain.c:1485:1 gmain.c:1501:1 gmain.c:1533:1 gmain.c:1551:1 gmain.c:1585:1
#: gmain.c:1632:1 gmain.c:1723:1 gmain.c:2269:1 gmain.c:3627:1 gmain.c:941:1
msgid "@source: a #GSource"
msgstr ""

#. used by: g_source_destroy:
#: gmain.c:1044:3
msgid ""
"Removes a source from its #GMainContext, if any, and mark it as destroyed.  "
"The source cannot be subsequently added to another context."
msgstr ""

#. used by: g_source_get_id:
#: gmain.c:1067:4
msgid ""
"Returns the numeric ID for a particular source. The ID of a source is a "
"positive integer which is unique within a particular main loop context. The "
"reverse mapping from ID to source is done by g_main_context_find_source_by_id"
"()."
msgstr ""

#. used by: g_source_get_id:
#: gmain.c:1072:1
msgid "Return value: the ID (greater than 0) for the source"
msgstr ""

#. used by: g_source_get_context:
#: gmain.c:1093:2
msgid ""
"Gets the #GMainContext with which the source is associated. Calling this "
"function on a destroyed source is an error."
msgstr ""

#. used by: g_source_get_context:
#: gmain.c:1096:3
msgid ""
"Return value: the #GMainContext with which the source is associated, or "
"%NULL if the context has not yet been added to a source."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_add_poll:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_remove_poll:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_add_child_source:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_remove_child_source:
#: gmain.c:1110:1 gmain.c:1147:1 gmain.c:1180:1 gmain.c:1237:1
msgid "@source:a #GSource"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_add_poll:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_add_poll:
#: gmain.c:1111:2 gmain.c:3465:2
msgid ""
"@fd: a #GPollFD structure holding information about a file descriptor to "
"watch."
msgstr ""

#. used by: g_source_add_poll:
#: gmain.c:1114:5
msgid ""
"Adds a file descriptor to the set of file descriptors polled for this "
"source. This is usually combined with g_source_new() to add an event source. "
"The event source's check function will typically test the @revents field in "
"the #GPollFD struct and return %TRUE if events need to be processed."
msgstr ""

#. used by: SECTION:main
#: gmain.c:113:1
msgid "@title: The Main Event Loop"
msgstr ""

#. used by: SECTION:main
#: gmain.c:114:1
msgid "@short_description: manages all available sources of events"
msgstr ""

#. used by: g_source_remove_poll:
#: gmain.c:1148:1
msgid "@fd: a #GPollFD structure previously passed to g_source_add_poll()."
msgstr ""

#. used by: g_source_remove_poll:
#: gmain.c:1150:2
msgid ""
"Removes a file descriptor from the set of file descriptors polled for this "
"source."
msgstr ""

#. used by: SECTION:main
#: gmain.c:116:5
msgid ""
"The main event loop manages all the available sources of events for GLib and "
"GTK+ applications. These events can come from any number of different types "
"of sources such as file descriptors (plain files, pipes or sockets) and "
"timeouts. New types of event sources can also be added using g_source_attach"
"()."
msgstr ""

#. used by: g_source_add_child_source:
#: gmain.c:1181:1
msgid "@child_source: a second #GSource that @source should \"poll\""
msgstr ""

#. used by: g_source_add_child_source:
#: gmain.c:1183:7
msgid ""
"Adds @child_source to @source as a \"polled\" source; when @source is added "
"to a #GMainContext, @child_source will be automatically added with the same "
"priority, when @child_source is triggered, it will cause @source to dispatch "
"(in addition to calling its own callback), and when @source is destroyed, it "
"will destroy @child_source as well. (@source will also still be dispatched "
"if its own prepare/check functions indicate that it is ready.)"
msgstr ""

#. used by: g_source_add_child_source:
#: gmain.c:1191:3
msgid ""
"If you don't need @child_source to do anything on its own when it triggers, "
"you can call g_source_set_dummy_callback() on it to set a callback that does "
"nothing (except return %TRUE if appropriate)."
msgstr ""

#. used by: g_source_add_child_source:
#: gmain.c:1195:2
msgid ""
"@source will hold a reference on @child_source while @child_source is "
"attached to it."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_add_child_source:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_remove_child_source:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_get_real_time:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_get_monotonic_time:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_get_time:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke_full:
#: gmain.c:1198:1 gmain.c:1243:1 gmain.c:2006:1 gmain.c:2035:1 gmain.c:3639:1
#: gmain.c:4679:1 gmain.c:4709:1
msgid "Since: 2.28"
msgstr ""

#. used by: SECTION:main
#: gmain.c:122:4
msgid ""
"To allow multiple independent sets of sources to be handled in different "
"threads, each source is associated with a #GMainContext. A GMainContext can "
"only be running in a single thread, but sources can be added to it and "
"removed from it from other threads."
msgstr ""

#. used by: g_source_remove_child_source:
#: gmain.c:1238:2
msgid ""
"@child_source: a #GSource previously passed to g_source_add_child_source()."
msgstr ""

#. used by: g_source_remove_child_source:
#: gmain.c:1241:1
msgid "Detaches @child_source from @source and destroys it."
msgstr ""

#. used by: SECTION:main
#: gmain.c:127:4
msgid ""
"Each event source is assigned a priority. The default priority, "
"#G_PRIORITY_DEFAULT, is 0. Values less than 0 denote higher priorities. "
"Values greater than 0 denote lower priorities. Events from high priority "
"sources are always processed before events from lower priority sources."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_callback_indirect:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_callback:
#: gmain.c:1272:1 gmain.c:1357:1
msgid "@source: the source"
msgstr ""

#. used by: g_source_set_callback_indirect:
#: gmain.c:1273:1
msgid "@callback_data: pointer to callback data \"object\""
msgstr ""

#. used by: g_source_set_callback_indirect:
#: gmain.c:1274:2
msgid ""
"@callback_funcs: functions for reference counting @callback_data and getting "
"the callback and data"
msgstr ""

#. used by: g_source_set_callback_indirect:
#: gmain.c:1277:6
msgid ""
"Sets the callback function storing the data as a refcounted callback \"object"
"\". This is used internally. Note that calling g_source_set_callback_indirect"
"() assumes an initial reference count on @callback_data, and thus "
"@callback_funcs->unref will eventually be called once more than "
"@callback_funcs->ref."
msgstr ""

#. used by: SECTION:main
#: gmain.c:132:2
msgid ""
"Idle functions can also be added, and assigned a priority. These will be run "
"whenever no events with a higher priority are ready to be processed."
msgstr ""

#. used by: SECTION:main
#: gmain.c:135:6
msgid ""
"The #GMainLoop data type represents a main event loop. A GMainLoop is "
"created with g_main_loop_new(). After adding the initial event sources, "
"g_main_loop_run() is called. This continuously checks for new events from "
"each of the event sources and dispatches them. Finally, the processing of an "
"event from one of the sources leads to a call to g_main_loop_quit() to exit "
"the main loop, and g_main_loop_run() returns."
msgstr ""

#. used by: g_source_set_callback:
#: gmain.c:1358:1
msgid "@func: a callback function"
msgstr ""

#. used by: g_source_set_callback:
#: gmain.c:1359:1
msgid "@data: the data to pass to callback function"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_callback:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke_full:
#: gmain.c:1360:1 gmain.c:4697:1
msgid "@notify: a function to call when @data is no longer in use, or %NULL."
msgstr ""

#. used by: g_source_set_callback:
#: gmain.c:1362:2
msgid ""
"Sets the callback function for a source. The callback for a source is called "
"from the source's dispatch function."
msgstr ""

#. used by: g_source_set_callback:
#: gmain.c:1365:3
msgid ""
"The exact type of @func depends on the type of source; ie. you should not "
"count on @func being called with @data as its first parameter."
msgstr ""

#. used by: g_source_set_callback:
#: gmain.c:1369:2
msgid ""
"Typically, you won't use this function. Instead use functions specific to "
"the type of source you are using."
msgstr ""

#. used by: g_source_set_funcs:
#: gmain.c:1396:1
msgid "@funcs: the new #GSourceFuncs"
msgstr ""

#. used by: g_source_set_funcs:
#: gmain.c:1398:2
msgid ""
"Sets the source functions (can be used to override default implementations) "
"of an unattached source."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_funcs:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_current_source:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_is_destroyed:
#: gmain.c:1401:1 gmain.c:2258:1 gmain.c:2334:1
msgid "Since: 2.12"
msgstr ""

#. used by: SECTION:main
#: gmain.c:142:5
msgid ""
"It is possible to create new instances of #GMainLoop recursively. This is "
"often used in GTK+ applications when showing modal dialog boxes. Note that "
"event sources are associated with a particular #GMainContext, and will be "
"checked and dispatched for all main loops associated with that GMainContext."
msgstr ""

#. used by: g_source_set_priority:
#: gmain.c:1459:1
msgid "@priority: the new priority."
msgstr ""

#. used by: g_source_set_priority:
#: gmain.c:1461:4
msgid ""
"Sets the priority of a source. While the main loop is being run, a source "
"will be dispatched if it is ready to be dispatched and no sources at a "
"higher (numerically smaller) priority are ready to be dispatched."
msgstr ""

#. used by: SECTION:main
#: gmain.c:148:2
msgid ""
"GTK+ contains wrappers of some of these functions, e.g. gtk_main(), "
"gtk_main_quit() and gtk_events_pending()."
msgstr ""

#. used by: g_source_get_priority:
#: gmain.c:1487:1
msgid "Gets the priority of a source."
msgstr ""

#. used by: g_source_get_priority:
#: gmain.c:1489:1
msgid "Return value: the priority of the source"
msgstr ""

#. used by: g_source_set_can_recurse:
#: gmain.c:1502:1
msgid "@can_recurse: whether recursion is allowed for this source"
msgstr ""

#. used by: g_source_set_can_recurse:
#: gmain.c:1504:4
msgid ""
"Sets whether a source can be called recursively. If @can_recurse is %TRUE, "
"then while the source is being dispatched then this source will be processed "
"normally. Otherwise, all processing of this source is blocked until the "
"dispatch function returns."
msgstr ""

#. used by: SECTION:main
#: gmain.c:151:34
msgid ""
"<refsect2><title>Creating new source types</title> <para>One of the unusual "
"features of the #GMainLoop functionality is that new types of event source "
"can be created and used in addition to the builtin type of event source. A "
"new event source type is used for handling GDK events. A new source type is "
"created by <firstterm>deriving</firstterm> from the #GSource structure. The "
"derived type of source is represented by a structure that has the #GSource "
"structure as a first element, and other elements specific to the new source "
"type. To create an instance of the new source type, call g_source_new() "
"passing in the size of the derived structure and a table of functions. These "
"#GSourceFuncs determine the behavior of the new source type.</para> "
"<para>New source types basically interact with the main context in two ways. "
"Their prepare function in #GSourceFuncs can set a timeout to determine the "
"maximum amount of time that the main loop will sleep before checking the "
"source again. In addition, or as well, the source can add file descriptors "
"to the set that the main context checks using g_source_add_poll().</para> </"
"refsect2> <refsect2><title>Customizing the main loop iteration</title> "
"<para>Single iterations of a #GMainContext can be run with "
"g_main_context_iteration(). In some cases, more detailed control of exactly "
"how the details of the main loop work is desired, for instance, when "
"integrating the #GMainLoop with an external main loop. In such cases, you "
"can call the component functions of g_main_context_iteration() directly. "
"These functions are g_main_context_prepare(), g_main_context_query(), "
"g_main_context_check() and g_main_context_dispatch().</para> <para>The "
"operation of these functions can best be seen in terms of a state diagram, "
"as shown in <xref linkend=\"mainloop-states\"/>.</para> <figure id="
"\"mainloop-states\"><title>States of a Main Context</title> <graphic fileref="
"\"mainloop-states.gif\" format=\"GIF\"></graphic> </figure> </refsect2>"
msgstr ""

#. used by: g_source_get_can_recurse:
#: gmain.c:1535:2
msgid ""
"Checks whether a source is allowed to be called recursively. see "
"g_source_set_can_recurse()."
msgstr ""

#. used by: g_source_get_can_recurse:
#: gmain.c:1538:1
msgid "Return value: whether recursion is allowed."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_name:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_name_by_id:
#: gmain.c:1552:1 gmain.c:1605:1
msgid "@name: debug name for the source"
msgstr ""

#. used by: g_source_set_name:
#: gmain.c:1554:2
msgid ""
"Sets a name for the source, used in debugging and profiling. The name "
"defaults to #NULL."
msgstr ""

#. used by: g_source_set_name:
#: gmain.c:1557:3
msgid ""
"The source name should describe in a human-readable way what the source "
"does. For example, \"X11 event queue\" or \"GTK+ repaint idle handler\" or "
"whatever it is."
msgstr ""

#. used by: g_source_set_name:
#: gmain.c:1561:4
msgid ""
"It is permitted to call this function multiple times, but is not recommended "
"due to the potential performance impact.  For example, one could change the "
"name in the \"check\" function of a #GSourceFuncs to include details like "
"the event type in the source name."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_name:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_set_name_by_id:
#: gmain.c:1566:1 gmain.c:1612:1
msgid "Since: 2.26"
msgstr ""

#. used by: g_source_get_name:
#: gmain.c:1587:3
msgid ""
"Gets a name for the source, used in debugging and profiling. The name may be "
"#NULL if it has never been set with g_source_set_name()."
msgstr ""

#. used by: g_source_get_name:
#: gmain.c:1591:2
msgid "Return value: the name of the source Since: 2.26"
msgstr ""

#. used by: g_source_set_name_by_id:
#: gmain.c:1604:1
msgid "@tag: a #GSource ID"
msgstr ""

#. used by: g_source_set_name_by_id:
#: gmain.c:1607:1
msgid "Sets the name of a source using its ID."
msgstr ""

#. used by: g_source_set_name_by_id:
#: gmain.c:1609:2
msgid ""
"This is a convenience utility to set source names from the return value of "
"g_idle_add(), g_timeout_add(), etc."
msgstr ""

#. used by: g_source_ref:
#: gmain.c:1634:1
msgid "Increases the reference count on a source by one."
msgstr ""

#. used by: g_source_ref:
#: gmain.c:1636:1
msgid "Return value: @source"
msgstr ""

#. used by: g_source_unref:
#: gmain.c:1725:3
msgid ""
"Decreases the reference count of a source by one. If the resulting reference "
"count is zero the source and associated memory will be destroyed."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_attach:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_find_source_by_id:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_pending:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_iteration:
#: gmain.c:1739:1 gmain.c:3104:1 gmain.c:3127:1 gmain.c:942:1
msgid "@context: a #GMainContext (if %NULL, the default context will be used)"
msgstr ""

#. used by: g_main_context_find_source_by_id:
#: gmain.c:1740:1
msgid "@source_id: the source ID, as returned by g_source_get_id()."
msgstr ""

#. used by: g_main_context_find_source_by_id:
#: gmain.c:1742:1
msgid "Finds a #GSource given a pair of context and ID."
msgstr ""

#. used by: g_main_context_find_source_by_id:
#: gmain.c:1744:1
msgid "Return value: the #GSource if found, otherwise, %NULL"
msgstr ""

#. used by: g_main_context_find_source_by_funcs_user_data:
#: gmain.c:1775:1
msgid "@context: a #GMainContext (if %NULL, the default context will be used)."
msgstr ""

#. used by: g_main_context_find_source_by_funcs_user_data:
#: gmain.c:1776:1
msgid "@funcs: the @source_funcs passed to g_source_new()."
msgstr ""

#. used by: g_main_context_find_source_by_funcs_user_data:
#: gmain.c:1777:1
msgid "@user_data: the user data from the callback."
msgstr ""

#. used by: g_main_context_find_source_by_funcs_user_data:
#: gmain.c:1779:3
msgid ""
"Finds a source with the given source functions and user data.  If multiple "
"sources exist with the same source function and user data, the first one "
"found will be returned."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_find_source_by_funcs_user_data:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_find_source_by_user_data:
#: gmain.c:1783:1 gmain.c:1831:1
msgid "Return value: the source, if one was found, otherwise %NULL"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_ref:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_unref:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_find_source_by_user_data:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_acquire:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_release:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_wait:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_prepare:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_query:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_check:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_dispatch:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_set_poll_func:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_get_poll_func:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_wakeup:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_is_owner:
#: gmain.c:1824:1 gmain.c:2501:1 gmain.c:2551:1 gmain.c:2595:1 gmain.c:2667:1
#: gmain.c:2807:1 gmain.c:2877:1 gmain.c:3002:1 gmain.c:3668:1 gmain.c:3700:1
#: gmain.c:3743:1 gmain.c:3763:1 gmain.c:431:1 gmain.c:457:1
msgid "@context: a #GMainContext"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_find_source_by_user_data:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_remove_by_user_data:
#: gmain.c:1825:1 gmain.c:1898:1
msgid "@user_data: the user_data for the callback."
msgstr ""

#. used by: g_main_context_find_source_by_user_data:
#: gmain.c:1827:3
msgid ""
"Finds a source with the given user data for the callback.  If multiple "
"sources exist with the same user data, the first one found will be returned."
msgstr ""

#. used by: g_source_remove:
#: gmain.c:1868:1
msgid "@tag: the ID of the source to remove."
msgstr ""

#. used by: g_source_remove:
#: gmain.c:1870:6
msgid ""
"Removes the source with the given id from the default main context. The id "
"of a #GSource is given by g_source_get_id(), or will be returned by the "
"functions g_source_attach(), g_idle_add(), g_idle_add_full(), g_timeout_add"
"(), g_timeout_add_full(), g_child_watch_add(), g_child_watch_add_full(), "
"g_io_add_watch(), and g_io_add_watch_full()."
msgstr ""

#. used by: g_source_remove:
#: gmain.c:1877:2
msgid ""
"See also g_source_destroy(). You must use g_source_destroy() for sources "
"added to a non-default main context."
msgstr ""

#. used by: g_source_remove:
#: gmain.c:1880:1
msgid "Return value: %TRUE if the source was found and removed."
msgstr ""

#. used by: g_source_remove_by_user_data:
#: gmain.c:1900:3
msgid ""
"Removes a source from the default main loop context given the user data for "
"the callback. If multiple sources exist with the same user data, only one "
"will be destroyed."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_remove_by_user_data:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_remove_by_funcs_user_data:
#: gmain.c:1904:1 gmain.c:1930:1
msgid "Return value: %TRUE if a source was found and removed."
msgstr ""

#. used by: g_source_remove_by_funcs_user_data:
#: gmain.c:1923:1
msgid "@funcs: The @source_funcs passed to g_source_new()"
msgstr ""

#. used by: g_source_remove_by_funcs_user_data:
#: gmain.c:1924:1
msgid "@user_data: the user data for the callback"
msgstr ""

#. used by: g_source_remove_by_funcs_user_data:
#: gmain.c:1926:3
msgid ""
"Removes a source from the default main loop context given the source "
"functions and user data. If multiple sources exist with the same source "
"functions and user data, only one will be destroyed."
msgstr ""

#. used by: g_get_current_time:
#: gmain.c:1952:1
msgid "@result: #GTimeVal structure in which to store current time."
msgstr ""

#. used by: g_get_current_time:
#: gmain.c:1954:1
msgid "Equivalent to the UNIX gettimeofday() function, but portable."
msgstr ""

#. used by: g_get_current_time:
#: gmain.c:1956:1
msgid "You may find g_get_real_time() to be more convenient."
msgstr ""

#. used by: g_get_real_time:
#: gmain.c:1994:1
msgid "Queries the system wall-clock time."
msgstr ""

#. used by: g_get_real_time:
#: gmain.c:1996:3
msgid ""
"This call is functionally equivalent to g_get_current_time() except that the "
"return value is often more convenient than dealing with a #GTimeVal."
msgstr ""

#. used by: g_get_real_time:
#: gmain.c:2000:3
msgid ""
"You should only use this call if you are actually interested in the real "
"wall-clock time.  g_get_monotonic_time() is probably more useful for "
"measuring intervals."
msgstr ""

#. used by: g_get_real_time:
#: gmain.c:2004:1
msgid "Returns: the number of microseconds since January 1, 1970 UTC."
msgstr ""

#. used by: g_get_monotonic_time:
#: gmain.c:2021:1
msgid "Queries the system monotonic time, if available."
msgstr ""

#. used by: g_get_monotonic_time:
#: gmain.c:2023:4
msgid ""
"On POSIX systems with clock_gettime() and %CLOCK_MONOTONIC this call is a "
"very shallow wrapper for that.  Otherwise, we make a best effort that "
"probably involves returning the wall clock time (with at least microsecond "
"accuracy, subject to the limitations of the OS kernel)."
msgstr ""

#. used by: g_get_monotonic_time:
#: gmain.c:2028:4
msgid ""
"Note that, on Windows, \"limitations of the OS kernel\" is a rather "
"substantial statement.  Depending on the configuration of the system, the "
"wall clock time is updated as infrequently as 64 times a second (which is "
"approximately every 16ms)."
msgstr ""

#. used by: g_get_monotonic_time:
#: gmain.c:2033:1
msgid "Returns: the monotonic time, in microseconds"
msgstr ""

#. used by: g_main_depth:
#: gmain.c:2131:7
msgid ""
"Returns the depth of the stack of calls to g_main_context_dispatch() on any "
"#GMainContext in the current thread. That is, when called from the toplevel, "
"it gives 0. When called from within a callback from g_main_context_iteration"
"() (or g_main_loop_run(), etc.) it returns 1. When called from within a "
"callback to a recursive call to g_main_context_iterate(), it returns 2. And "
"so forth."
msgstr ""

#. used by: g_main_depth:
#: gmain.c:2139:2
msgid ""
"This function is useful in a situation like the following: Imagine an "
"extremely simple \"garbage collected\" system."
msgstr ""

#. used by: g_main_depth:
#: gmain.c:2172:6
msgid ""
"This works from an application, however, if you want to do the same thing "
"from a library, it gets more difficult, since you no longer control the main "
"loop. You might think you can simply use an idle function to make the call "
"to free_allocated_memory(), but that doesn't work, since the idle function "
"could be called from a recursive callback. This can be fixed by using "
"g_main_depth()"
msgstr ""

#. used by: g_main_depth:
#: gmain.c:2212:11
msgid ""
"There is a temptation to use g_main_depth() to solve problems with "
"reentrancy. For instance, while waiting for data to be received from the "
"network in response to a menu item, the menu item might be selected again. "
"It might seem that one could make the menu item's callback return "
"immediately and do nothing if g_main_depth() returns a value greater than 1. "
"However, this should be avoided since the user then sees selecting the menu "
"item do nothing. Furthermore, you'll find yourself adding these checks all "
"over your code, since there are doubtless many, many things that the user "
"could do. Instead, you can use the following techniques:"
msgstr ""

#. used by: g_main_depth:
#: gmain.c:2224:17
msgid ""
"<orderedlist> <listitem> <para> Use gtk_widget_set_sensitive() or modal "
"dialogs to prevent the user from interacting with elements while the main "
"loop is recursing. </para> </listitem> <listitem> <para> Avoid main loop "
"recursion in situations where you can't handle arbitrary  callbacks. "
"Instead, structure your code so that you simply return to the main loop and "
"then get called again when there is more work to do. </para> </listitem> </"
"orderedlist>"
msgstr ""

#. used by: g_main_depth:
#: gmain.c:2242:1
msgid "Return value: The main loop recursion level in the current thread"
msgstr ""

#. used by: g_main_current_source:
#: gmain.c:2254:1
msgid "Returns the currently firing source for this thread."
msgstr ""

#. used by: g_main_current_source:
#: gmain.c:2256:1
msgid "Return value: The currently firing source or %NULL."
msgstr ""

#. used by: g_source_is_destroyed:
#: gmain.c:2271:1
msgid "Returns whether @source has been destroyed."
msgstr ""

#. used by: g_source_is_destroyed:
#: gmain.c:2273:3
msgid ""
"This is important when you operate upon your objects from within idle "
"handlers, but may have freed the object before the dispatch of your idle "
"handler."
msgstr ""

#. used by: g_source_is_destroyed:
#: gmain.c:2309:5
msgid ""
"This will fail in a multi-threaded application if the widget is destroyed "
"before the idle handler fires due to the use after free in the callback. A "
"solution, to this particular problem, is to check to if the source has "
"already been destroy within the callback."
msgstr ""

#. used by: g_source_is_destroyed:
#: gmain.c:2332:1
msgid "Return value: %TRUE if the source has been destroyed"
msgstr ""

#. used by: g_main_context_acquire:
#: gmain.c:2503:6
msgid ""
"Tries to become the owner of the specified context. If some other thread is "
"the owner of the context, returns %FALSE immediately. Ownership is properly "
"recursive: the owner can require ownership again and will release ownership "
"when g_main_context_release() is called as many times as "
"g_main_context_acquire()."
msgstr ""

#. used by: g_main_context_acquire:
#: gmain.c:2510:3
msgid ""
"You must be the owner of a context before you can call g_main_context_prepare"
"(), g_main_context_query(), g_main_context_check(), g_main_context_dispatch"
"()."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_acquire:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_wait:
#: gmain.c:2514:2 gmain.c:2605:2
msgid ""
"Return value: %TRUE if the operation succeeded, and this thread is now the "
"owner of @context."
msgstr ""

#. used by: g_main_context_release:
#: gmain.c:2553:4
msgid ""
"Releases ownership of a context previously acquired by this thread with "
"g_main_context_acquire(). If the context was acquired multiple times, the "
"ownership will be released only when g_main_context_release() is called as "
"many times as it was acquired."
msgstr ""

#. used by: g_main_context_wait:
#: gmain.c:2596:1
msgid "@cond: a condition variable"
msgstr ""

#. used by: g_main_context_wait:
#: gmain.c:2597:1
msgid "@mutex: a mutex, currently held"
msgstr ""

#. used by: g_main_context_wait:
#: gmain.c:2599:5
msgid ""
"Tries to become the owner of the specified context, as with "
"g_main_context_acquire(). But if another thread is the owner, atomically "
"drop @mutex and wait on @cond until that owner releases ownership or until "
"@cond is signaled, then try again (once) to become the owner."
msgstr ""

#. used by: g_main_context_prepare:
#: gmain.c:2668:2
msgid ""
"@priority: location to store priority of highest priority source already "
"ready."
msgstr ""

#. used by: g_main_context_prepare:
#: gmain.c:2671:2
msgid ""
"Prepares to poll sources within a main loop. The resulting information for "
"polling is determined by calling g_main_context_query ()."
msgstr ""

#. used by: g_main_context_prepare:
#: gmain.c:2674:2
msgid ""
"Return value: %TRUE if some source is ready to be dispatched prior to "
"polling."
msgstr ""

#. used by: g_main_context_query:
#: gmain.c:2808:1
msgid "@max_priority: maximum priority source to check"
msgstr ""

#. used by: g_main_context_query:
#: gmain.c:2809:1
msgid "@timeout_: location to store timeout to be used in polling"
msgstr ""

#. used by: g_main_context_query:
#: gmain.c:2810:1
msgid "@fds: location to store #GPollFD records that need to be polled."
msgstr ""

#. used by: g_main_context_query:
#: gmain.c:2811:1
msgid "@n_fds: length of @fds."
msgstr ""

#. used by: g_main_context_query:
#: gmain.c:2813:1
msgid "Determines information necessary to poll this main loop."
msgstr ""

#. used by: g_main_context_query:
#: gmain.c:2815:3
msgid ""
"Return value: the number of records actually stored in @fds, or, if more "
"than @n_fds records need to be stored, the number of records that need to be "
"stored."
msgstr ""

#. used by: g_main_context_check:
#: gmain.c:2878:1
msgid "@max_priority: the maximum numerical priority of sources to check"
msgstr ""

#. used by: g_main_context_check:
#: gmain.c:2879:2
msgid ""
"@fds: array of #GPollFD's that was passed to the last call to "
"g_main_context_query()"
msgstr ""

#. used by: g_main_context_check:
#: gmain.c:2881:1
msgid "@n_fds: return value of g_main_context_query()"
msgstr ""

#. used by: g_main_context_check:
#: gmain.c:2883:1
msgid "Passes the results of polling back to the main loop."
msgstr ""

#. used by: g_main_context_check:
#: gmain.c:2885:1
msgid "Return value: %TRUE if some sources are ready to be dispatched."
msgstr ""

#. used by: g_main_context_dispatch:
#: gmain.c:3004:1
msgid "Dispatches all pending sources."
msgstr ""

#. used by: g_main_context_pending:
#: gmain.c:3106:1
msgid "Checks if any sources have pending events for the given context."
msgstr ""

#. used by: g_main_context_pending:
#: gmain.c:3108:1
msgid "Return value: %TRUE if events are pending."
msgstr ""

#. used by: g_main_context_iteration:
#: gmain.c:3128:1
msgid "@may_block: whether the call may block."
msgstr ""

#. used by: g_main_context_iteration:
#: gmain.c:3130:8
msgid ""
"Runs a single iteration for the given main loop. This involves checking to "
"see if any event sources are ready to be processed, then if no events "
"sources are ready and @may_block is %TRUE, waiting for a source to become "
"ready, then dispatching the highest priority events sources that are ready. "
"Otherwise, if @may_block is %FALSE sources are not waited to become ready, "
"only those highest priority events sources will be dispatched (if any), that "
"are ready at this given moment without further waiting."
msgstr ""

#. used by: g_main_context_iteration:
#: gmain.c:3139:3
msgid ""
"Note that even when @may_block is %TRUE, it is still possible for "
"g_main_context_iteration() to return %FALSE, since the the wait may be "
"interrupted for other reasons than an event source becoming ready."
msgstr ""

#. used by: g_main_context_iteration:
#: gmain.c:3143:1
msgid "Return value: %TRUE if events were dispatched."
msgstr ""

#. used by: g_main_loop_new:
#: gmain.c:3162:1
msgid ""
"@context: a #GMainContext  (if %NULL, the default context will be used)."
msgstr ""

#. used by: g_main_loop_new:
#: gmain.c:3163:3
msgid ""
"@is_running: set to %TRUE to indicate that the loop is running. This is not "
"very important since calling g_main_loop_run() will set this to %TRUE anyway."
msgstr ""

#. used by: g_main_loop_new:
#: gmain.c:3167:1
msgid "Creates a new #GMainLoop structure."
msgstr ""

#. used by: g_main_loop_new:
#: gmain.c:3169:1
msgid "Return value: a new #GMainLoop."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_loop_ref:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_loop_unref:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_loop_run:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_loop_quit:
#. #-#-#-#-#  gmain.pot (PACKAGE VERSION)  #-#-#-#-#
#. #-#-#-#-#  gmain.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_run:
#. #-#-#-#-#  gmain.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_quit:
#. #-#-#-#-#  gmain.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_destroy:
#. #-#-#-#-#  gmain.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_is_running:
#: gmain.c:3192:1 gmain.c:3211:1 gmain.c:3231:1 gmain.c:3312:1 gmain.h:416:1
#: gmain.h:426:1 gmain.h:437:1 gmain.h:447:1
msgid "@loop: a #GMainLoop"
msgstr ""

#. used by: g_main_loop_ref:
#: gmain.c:3194:1
msgid "Increases the reference count on a #GMainLoop object by one."
msgstr ""

#. used by: g_main_loop_ref:
#: gmain.c:3196:1
msgid "Return value: @loop"
msgstr ""

#. used by: g_main_loop_unref:
#: gmain.c:3213:2
msgid ""
"Decreases the reference count on a #GMainLoop object by one. If the result "
"is zero, free the loop and free all associated memory."
msgstr ""

#. used by: g_main_loop_run:
#: gmain.c:3233:4
msgid ""
"Runs a main loop until g_main_loop_quit() is called on the loop. If this is "
"called for the thread of the loop's #GMainContext, it will process events "
"from the loop, otherwise it will simply wait."
msgstr ""

#. used by: g_main_loop_quit:
#: gmain.c:3314:2
msgid ""
"Stops a #GMainLoop from running. Any calls to g_main_loop_run() for the loop "
"will return."
msgstr ""

#. used by: g_main_loop_quit:
#: gmain.c:3317:2
msgid ""
"Note that sources that have already been dispatched when g_main_loop_quit() "
"is called will still be executed."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_loop_is_running:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_loop_get_context:
#: gmain.c:3340:1 gmain.c:3357:1
msgid "@loop: a #GMainLoop."
msgstr ""

#. used by: g_main_loop_is_running:
#: gmain.c:3342:1
msgid ""
"Checks to see if the main loop is currently being run via g_main_loop_run()."
msgstr ""

#. used by: g_main_loop_is_running:
#: gmain.c:3344:1
msgid "Return value: %TRUE if the mainloop is currently being run."
msgstr ""

#. used by: g_main_loop_get_context:
#: gmain.c:3359:1
msgid "Returns the #GMainContext of @loop."
msgstr ""

#. used by: g_main_loop_get_context:
#: gmain.c:3361:1
msgid "Return value: the #GMainContext of @loop"
msgstr ""

#. used by: g_main_context_add_poll:
#: gmain.c:3464:1
msgid "@context: a #GMainContext (or %NULL for the default context)"
msgstr ""

#. used by: g_main_context_add_poll:
#: gmain.c:3467:3
msgid ""
"@priority: the priority for this file descriptor which should be the same as "
"the priority used for g_source_attach() to ensure that the file descriptor "
"is polled whenever the results may be needed."
msgstr ""

#. used by: g_main_context_add_poll:
#: gmain.c:3471:3
msgid ""
"Adds a file descriptor to the set of file descriptors polled for this "
"context. This will very seldomly be used directly. Instead a typical event "
"source will use g_source_add_poll() instead."
msgstr ""

#. used by: g_main_context_remove_poll:
#: gmain.c:3532:1
msgid "@context:a #GMainContext"
msgstr ""

#. used by: g_main_context_remove_poll:
#: gmain.c:3533:1
msgid ""
"@fd: a #GPollFD descriptor previously added with g_main_context_add_poll()"
msgstr ""

#. used by: g_main_context_remove_poll:
#: gmain.c:3535:2
msgid ""
"Removes file descriptor from the set of file descriptors to be polled for a "
"particular context."
msgstr ""

#. used by: g_source_get_current_time:
#: gmain.c:3590:1
msgid "@source:  a #GSource"
msgstr ""

#. used by: g_source_get_current_time:
#: gmain.c:3591:1
msgid "@timeval: #GTimeVal structure in which to store current time."
msgstr ""

#. used by: g_source_get_current_time:
#: gmain.c:3593:5
msgid ""
"Gets the \"current time\" to be used when checking this source. The "
"advantage of calling this function over calling g_get_current_time() "
"directly is that when checking multiple sources, GLib can cache a single "
"value instead of having to repeatedly get the system time."
msgstr ""

#. used by: g_source_get_current_time:
#: gmain.c:3599:1
msgid "Deprecated: 2.28: use g_source_get_time() instead"
msgstr ""

#. used by: g_source_get_time:
#: gmain.c:3629:4
msgid ""
"Gets the time to be used when checking this source. The advantage of calling "
"this function over calling g_get_monotonic_time() directly is that when "
"checking multiple sources, GLib can cache a single value instead of having "
"to repeatedly get the system monotonic time."
msgstr ""

#. used by: g_source_get_time:
#: gmain.c:3634:2
msgid ""
"The time here is the system monotonic time, if available, or some other "
"reasonable alternative otherwise.  See g_get_monotonic_time()."
msgstr ""

#. used by: g_source_get_time:
#: gmain.c:3637:1
msgid "Returns: the monotonic time in microseconds"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_set_poll_func:
#. #-#-#-#-#  gmain.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_set_poll_func:
#: gmain.c:3669:1 gmain.h:486:1
msgid "@func: the function to call to poll all file descriptors"
msgstr ""

#. used by: g_main_context_set_poll_func:
#: gmain.c:3671:4
msgid ""
"Sets the function to use to handle polling of file descriptors. It will be "
"used instead of the poll() system call (or GLib's replacement function, "
"which is used where poll() isn't available)."
msgstr ""

#. used by: g_main_context_set_poll_func:
#: gmain.c:3676:2
msgid ""
"This function could possibly be used to integrate the GLib event loop with "
"an external event loop."
msgstr ""

#. used by: g_main_context_get_poll_func:
#: gmain.c:3702:1
msgid "Gets the poll function set by g_main_context_set_poll_func()."
msgstr ""

#. used by: g_main_context_get_poll_func:
#: gmain.c:3704:1
msgid "Return value: the poll function"
msgstr ""

#. used by: g_main_context_wakeup:
#: gmain.c:3745:2
msgid ""
"If @context is currently waiting in a poll(), interrupt the poll(), and "
"continue the iteration process."
msgstr ""

#. used by: g_main_context_is_owner:
#: gmain.c:3765:4
msgid ""
"Determines whether this thread holds the (recursive) ownership of this "
"#GMaincontext. This is useful to know before waiting on another thread that "
"may be blocking to get ownership of @context."
msgstr ""

#. used by: g_main_context_is_owner:
#: gmain.c:3770:1
msgid "Returns: %TRUE if current thread is owner of @context."
msgstr ""

#. used by: g_main_context_is_owner:
#: gmain.c:3772:1
msgid "Since: 2.10"
msgstr ""

#. used by: g_timeout_source_new:
#: gmain.c:3892:1
msgid "@interval: the timeout interval in milliseconds."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_source_new:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_source_new_seconds:
#: gmain.c:3894:1 gmain.c:3918:1
msgid "Creates a new timeout source."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_source_new:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_source_new:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_source_new_seconds:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_source_new:
#: gmain.c:3896:3 gmain.c:3920:3 gmain.c:4378:3 gmain.c:823:3
msgid ""
"The source will not initially be associated with any #GMainContext and must "
"be added to one with g_source_attach() before it will be executed."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_source_new:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_source_new_seconds:
#: gmain.c:3900:1 gmain.c:3927:1
msgid "Return value: the newly-created timeout source"
msgstr ""

#. used by: g_timeout_source_new_seconds:
#: gmain.c:3916:1
msgid "@interval: the timeout interval in seconds"
msgstr ""

#. used by: g_timeout_source_new_seconds:
#: gmain.c:3924:2
msgid ""
"The scheduling granularity/accuracy of this timeout source will be in "
"seconds."
msgstr ""

#. used by: g_timeout_source_new_seconds:
#: gmain.c:3929:1
msgid "Since: 2.14\t"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds_full:
#: gmain.c:3948:2 gmain.c:4040:2
msgid ""
"@priority: the priority of the timeout source. Typically this will be in the "
"range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add:
#: gmain.c:3950:2 gmain.c:4001:2
msgid ""
"@interval: the time between calls to the function, in milliseconds "
"(1/1000ths of a second)"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_idle_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_idle_add:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke_full:
#: gmain.c:3952:1 gmain.c:4003:1 gmain.c:4043:1 gmain.c:4109:1 gmain.c:4426:1
#: gmain.c:4481:1 gmain.c:4576:1 gmain.c:4615:1 gmain.c:4654:1 gmain.c:4695:1
msgid "@function: function to call"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_idle_add_full:
#: gmain.c:3953:1 gmain.c:4004:1 gmain.c:4044:1 gmain.c:4427:1 gmain.c:4482:1
#: gmain.c:4577:1
msgid "@data:     data to pass to @function"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds_full:
#: gmain.c:3954:1 gmain.c:4045:1
msgid "@notify:   function to call when the timeout is removed, or %NULL"
msgstr ""

#. used by: g_timeout_add_full:
#: gmain.c:3956:6
msgid ""
"Sets a function to be called at regular intervals, with the given priority.  "
"The function is called repeatedly until it returns %FALSE, at which point "
"the timeout is automatically destroyed and the function will not be called "
"again.  The @notify function is called when the timeout is destroyed.  The "
"first call to the function will be at the end of the first @interval."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add:
#: gmain.c:3963:5 gmain.c:4012:5
msgid ""
"Note that timeout functions may be delayed, due to the processing of other "
"event sources. Thus they should not be relied on for precise timing. After "
"each call to the timeout function, the time of the next timeout is "
"recalculated based on the current time and the given interval (it does not "
"try to 'catch up' time lost in delays)."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add:
#: gmain.c:3969:3 gmain.c:4023:3
msgid ""
"This internally creates a main loop source using g_timeout_source_new() and "
"attaches it to the main loop context using g_source_attach(). You can do "
"these steps manually if you need greater control."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_idle_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_idle_add:
#: gmain.c:3973:1 gmain.c:4027:1 gmain.c:4078:1 gmain.c:4126:1 gmain.c:4449:1
#: gmain.c:4503:1 gmain.c:4588:1 gmain.c:4628:1
msgid "Return value: the ID (greater than 0) of the event source."
msgstr ""

#. used by: g_timeout_add:
#: gmain.c:4006:5
msgid ""
"Sets a function to be called at regular intervals, with the default "
"priority, #G_PRIORITY_DEFAULT.  The function is called repeatedly until it "
"returns %FALSE, at which point the timeout is automatically destroyed and "
"the function will not be called again.  The first call to the function will "
"be at the end of the first @interval."
msgstr ""

#. used by: g_timeout_add:
#: gmain.c:4018:4
msgid ""
"If you want to have a timer in the \"seconds\" range and do not care about "
"the exact time of the first call of the timer, use the g_timeout_add_seconds"
"() function; this function allows for more optimizations and more efficient "
"system power usage."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds:
#: gmain.c:4042:1 gmain.c:4108:1
msgid "@interval: the time between calls to the function, in seconds"
msgstr ""

#. used by: g_timeout_add_seconds_full:
#: gmain.c:4047:4
msgid ""
"Sets a function to be called at regular intervals, with @priority. The "
"function is called repeatedly until it returns %FALSE, at which point the "
"timeout is automatically destroyed and the function will not be called again."
msgstr ""

#. used by: g_timeout_add_seconds_full:
#: gmain.c:4052:7
msgid ""
"Unlike g_timeout_add(), this function operates at whole second granularity. "
"The initial starting point of the timer is determined by the implementation "
"and the implementation is expected to group multiple timers together so that "
"they fire all at the same time. To allow this grouping, the @interval to the "
"first timer is rounded and can deviate up to one second from the specified "
"interval. Subsequent timer iterations will generally run at the specified "
"interval."
msgstr ""

#. used by: g_timeout_add_seconds_full:
#: gmain.c:4060:4
msgid ""
"Note that timeout functions may be delayed, due to the processing of other "
"event sources. Thus they should not be relied on for precise timing. After "
"each call to the timeout function, the time of the next timeout is "
"recalculated based on the current time and the given @interval"
msgstr ""

#. used by: g_timeout_add_seconds_full:
#: gmain.c:4065:2
msgid ""
"If you want timing more precise than whole seconds, use g_timeout_add() "
"instead."
msgstr ""

#. used by: g_timeout_add_seconds_full:
#: gmain.c:4068:4
msgid ""
"The grouping of timers to fire at the same time results in a more power and "
"CPU efficient behavior so if your timer is in multiples of seconds and you "
"don't require the first timer exactly one second from now, the use of "
"g_timeout_add_seconds() is preferred over g_timeout_add()."
msgstr ""

#. used by: g_timeout_add_seconds_full:
#: gmain.c:4073:4
msgid ""
"This internally creates a main loop source using g_timeout_source_new_seconds"
"() and attaches it to the main loop context using g_source_attach(). You can "
"do these steps manually if you need greater control."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds:
#: gmain.c:4080:1 gmain.c:4128:1
msgid "Since: 2.14"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_timeout_add_seconds:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke_full:
#: gmain.c:4110:1 gmain.c:4655:1 gmain.c:4696:1
msgid "@data: data to pass to @function"
msgstr ""

#. used by: g_timeout_add_seconds:
#: gmain.c:4112:4
msgid ""
"Sets a function to be called at regular intervals with the default priority, "
"#G_PRIORITY_DEFAULT. The function is called repeatedly until it returns "
"%FALSE, at which point the timeout is automatically destroyed and the "
"function will not be called again."
msgstr ""

#. used by: g_timeout_add_seconds:
#: gmain.c:4117:4
msgid ""
"This internally creates a main loop source using g_timeout_source_new_seconds"
"() and attaches it to the main loop context using g_source_attach(). You can "
"do these steps manually if you need greater control. Also see "
"g_timout_add_seconds_full()."
msgstr ""

#. used by: g_timeout_add_seconds:
#: gmain.c:4122:3
msgid ""
"Note that the first call of the timer may not be precise for timeouts of one "
"second. If you need finer precision and have such a timeout, you may want to "
"use g_timeout_add() instead."
msgstr ""

#. used by: g_main_context_ref:
#: gmain.c:433:1
msgid "Increases the reference count on a #GMainContext object by one."
msgstr ""

#. used by: g_main_context_ref:
#: gmain.c:435:1
msgid "Returns: the @context that was passed in (since 2.6)"
msgstr ""

#. used by: g_child_watch_source_new:
#: gmain.c:4373:2
msgid ""
"@pid: process to watch. On POSIX the pid of a child process. On Windows a "
"handle for a process (which doesn't have to be a child)."
msgstr ""

#. used by: g_child_watch_source_new:
#: gmain.c:4376:1
msgid "Creates a new child_watch source."
msgstr ""

#. used by: g_child_watch_source_new:
#: gmain.c:4382:3
msgid ""
"Note that child watch sources can only be used in conjunction with "
"<literal>g_spawn...</literal> when the %G_SPAWN_DO_NOT_REAP_CHILD flag is "
"used."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_source_new:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add:
#: gmain.c:4386:4 gmain.c:4437:4 gmain.c:4491:4
msgid ""
"Note that on platforms where #GPid must be explicitly closed (see "
"g_spawn_close_pid()) @pid must not be closed while the source is still "
"active. Typically, you will want to call g_spawn_close_pid() in the callback "
"function for the source."
msgstr ""

#. used by: g_child_watch_source_new:
#: gmain.c:4391:4
msgid ""
"Note further that using g_child_watch_source_new() is not compatible with "
"calling <literal>waitpid(-1)</literal> in the application. Calling waitpid() "
"for individual pids will still work fine."
msgstr ""

#. used by: g_child_watch_source_new:
#: gmain.c:4396:1
msgid "Return value: the newly-created child watch source"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_source_new:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add:
#: gmain.c:4398:1 gmain.c:4451:1 gmain.c:4505:1
msgid "Since: 2.4"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_idle_add_full:
#: gmain.c:4422:2 gmain.c:4574:2
msgid ""
"@priority: the priority of the idle source. Typically this will be in the "
"range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE."
msgstr ""

#. used by: g_child_watch_add_full:
#: gmain.c:4424:2
msgid ""
"@pid:      process to watch. On POSIX the pid of a child process. On Windows "
"a handle for a process (which doesn't have to be a child)."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_idle_add_full:
#: gmain.c:4428:1 gmain.c:4578:1
msgid "@notify:   function to call when the idle is removed, or %NULL"
msgstr ""

#. used by: g_child_watch_add_full:
#: gmain.c:4430:2
msgid ""
"Sets a function to be called when the child indicated by @pid exits, at the "
"priority @priority."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add:
#: gmain.c:4433:3 gmain.c:4487:3
msgid ""
"If you obtain @pid from g_spawn_async() or g_spawn_async_with_pipes() you "
"will need to pass #G_SPAWN_DO_NOT_REAP_CHILD as flag to the spawn function "
"for the child watching to work."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add:
#: gmain.c:4442:1 gmain.c:4496:1
msgid "GLib supports only a single callback per process id."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_child_watch_add:
#: gmain.c:4444:4 gmain.c:4498:4
msgid ""
"This internally creates a main loop source using g_child_watch_source_new() "
"and attaches it to the main loop context using g_source_attach(). You can do "
"these steps manually if you need greater control."
msgstr ""

#. used by: g_child_watch_add:
#: gmain.c:4479:2
msgid ""
"@pid:      process id to watch. On POSIX the pid of a child process. On "
"Windows a handle for a process (which doesn't have to be a child)."
msgstr ""

#. used by: g_child_watch_add:
#: gmain.c:4484:2
msgid ""
"Sets a function to be called when the child indicated by @pid exits, at a "
"default priority, #G_PRIORITY_DEFAULT."
msgstr ""

#. used by: g_idle_source_new:
#: gmain.c:4551:1
msgid "Creates a new idle source."
msgstr ""

#. used by: g_idle_source_new:
#: gmain.c:4553:5
msgid ""
"The source will not initially be associated with any #GMainContext and must "
"be added to one with g_source_attach() before it will be executed. Note that "
"the default priority for idle sources is %G_PRIORITY_DEFAULT_IDLE, as "
"compared to other sources which have a default priority of "
"%G_PRIORITY_DEFAULT."
msgstr ""

#. used by: g_idle_source_new:
#: gmain.c:4559:1
msgid "Return value: the newly-created idle source"
msgstr ""

#. used by: g_idle_add_full:
#: gmain.c:4580:3
msgid ""
"Adds a function to be called whenever there are no higher priority events "
"pending.  If the function returns %FALSE it is automatically removed from "
"the list of event sources and will not be called again."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_idle_add_full:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_idle_add:
#: gmain.c:4584:3 gmain.c:4624:3
msgid ""
"This internally creates a main loop source using g_idle_source_new() and "
"attaches it to the main loop context using g_source_attach(). You can do "
"these steps manually if you need greater control."
msgstr ""

#. used by: g_main_context_unref:
#: gmain.c:459:2
msgid ""
"Decreases the reference count on a #GMainContext object by one. If the "
"result is zero, free the context and free all associated memory."
msgstr ""

#. used by: g_idle_add:
#: gmain.c:4616:1
msgid "@data: data to pass to @function."
msgstr ""

#. used by: g_idle_add:
#: gmain.c:4618:5
msgid ""
"Adds a function to be called whenever there are no higher priority events "
"pending to the default main loop. The function is given the default idle "
"priority, #G_PRIORITY_DEFAULT_IDLE.  If the function returns %FALSE it is "
"automatically removed from the list of event sources and will not be called "
"again."
msgstr ""

#. used by: g_idle_remove_by_data:
#: gmain.c:4639:1
msgid "@data: the data for the idle source's callback."
msgstr ""

#. used by: g_idle_remove_by_data:
#: gmain.c:4641:1
msgid "Removes the idle function with the given data."
msgstr ""

#. used by: g_idle_remove_by_data:
#: gmain.c:4643:1
msgid "Return value: %TRUE if an idle source was found and removed."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke_full:
#: gmain.c:4653:1 gmain.c:4693:1
msgid "@context: a #GMainContext, or %NULL"
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_invoke_full:
#: gmain.c:4657:2 gmain.c:4699:2
msgid ""
"Invokes a function in such a way that @context is owned during the "
"invocation of @function."
msgstr ""

#. used by: g_main_context_invoke:
#: gmain.c:4660:2
msgid ""
"If @context is %NULL then the global default main context — as returned by "
"g_main_context_default() — is used."
msgstr ""

#. used by: g_main_context_invoke:
#: gmain.c:4663:5
msgid ""
"If @context is owned by the current thread, @function is called directly.  "
"Otherwise, if @context is the thread-default main context of the current "
"thread and g_main_context_acquire() succeeds, then @function is called and "
"g_main_context_release() is called afterwards."
msgstr ""

#. used by: g_main_context_invoke:
#: gmain.c:4669:5
msgid ""
"In any other case, an idle source is created to call @function and that "
"source is attached to @context (presumably to be run in another thread).  "
"The idle source is attached with #G_PRIORITY_DEFAULT priority.  If you want "
"a different priority, use g_main_context_invoke_full()."
msgstr ""

#. used by: g_main_context_invoke:
#: gmain.c:4675:3
msgid ""
"Note that, as with normal idle functions, @function should probably return "
"%FALSE.  If it returns %TRUE, it will be continuously run in a loop (and may "
"prevent this call from returning)."
msgstr ""

#. used by: g_main_context_invoke_full:
#: gmain.c:4694:1
msgid "@priority: the priority at which to run @function"
msgstr ""

#. used by: g_main_context_invoke_full:
#: gmain.c:4702:3
msgid ""
"This function is the same as g_main_context_invoke() except that it lets you "
"specify the priority incase @function ends up being scheduled as an idle and "
"also lets you give a #GDestroyNotify for @data."
msgstr ""

#. used by: g_main_context_invoke_full:
#: gmain.c:4706:2
msgid ""
"@notify should not assume that it is called from any particular thread or "
"with any particular context acquired."
msgstr ""

#. used by: g_main_context_new:
#: gmain.c:571:1
msgid "Creates a new #GMainContext structure."
msgstr ""

#. used by: g_main_context_new:
#: gmain.c:573:1
msgid "Return value: the new #GMainContext"
msgstr ""

#. used by: g_main_context_default:
#: gmain.c:647:4
msgid ""
"Returns the global default main context. This is the main context used for "
"main loop functions when a main loop is not explicitly specified, and "
"corresponds to the \"main\" main loop. See also "
"g_main_context_get_thread_default()."
msgstr ""

#. used by: g_main_context_default:
#: gmain.c:652:1
msgid "Return value: the global default main context."
msgstr ""

#. used by: g_main_context_push_thread_default:
#: gmain.c:695:1
msgid "@context: a #GMainContext, or %NULL for the global default context"
msgstr ""

#. used by: g_main_context_push_thread_default:
#: gmain.c:697:10
msgid ""
"Acquires @context and sets it as the thread-default context for the current "
"thread. This will cause certain asynchronous operations (such as most <link "
"linkend=\"gio\">gio</link>-based I/O) which are started in this thread to "
"run under @context and deliver their results to its main loop, rather than "
"running under the global default context in the main thread. Note that "
"calling this function changes the context returned by "
"g_main_context_get_thread_default(), <emphasis>not</emphasis> the one "
"returned by g_main_context_default(), so it does not affect the context used "
"by functions like g_idle_add()."
msgstr ""

#. used by: g_main_context_push_thread_default:
#: gmain.c:708:13
msgid ""
"Normally you would call this function shortly after creating a new thread, "
"passing it a #GMainContext which will be run by a #GMainLoop in that thread, "
"to set a new default context for all async operations in that thread. (In "
"this case, you don't need to ever call g_main_context_pop_thread_default().) "
"In some cases however, you may want to schedule a single operation in a non-"
"default context, or temporarily use a non-default context in the main "
"thread. In that case, you can wrap the call to the asynchronous operation "
"inside a g_main_context_push_thread_default() / "
"g_main_context_pop_thread_default() pair, but it is up to you to ensure that "
"no other asynchronous operations accidentally get started while the non-"
"default context is active."
msgstr ""

#. used by: g_main_context_push_thread_default:
#: gmain.c:722:3
msgid ""
"Beware that libraries that predate this function may not correctly handle "
"being used from a thread with a thread-default context. Eg, see "
"g_file_supports_thread_contexts()."
msgstr ""

#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_push_thread_default:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_pop_thread_default:
#. #-#-#-#-#  gmain.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_main_context_get_thread_default:
#: gmain.c:726:1 gmain.c:760:1 gmain.c:796:1
msgid "Since: 2.22"
msgstr ""

#. used by: g_main_context_pop_thread_default:
#: gmain.c:755:1
msgid "@context: a #GMainContext object, or %NULL"
msgstr ""

#. used by: g_main_context_pop_thread_default:
#: gmain.c:757:2
msgid ""
"Pops @context off the thread-default context stack (verifying that it was on "
"the top of the stack)."
msgstr ""

#. used by: g_main_context_get_thread_default:
#: gmain.c:785:7
msgid ""
"Gets the thread-default #GMainContext for this thread. Asynchronous "
"operations that want to be able to be run in contexts other than the default "
"one should call this method to get a #GMainContext to add their #GSource<!-- "
"-->s to. (Note that even in single-threaded programs applications may "
"sometimes want to temporarily push a non-default context, so it is not safe "
"to assume that this will always return %NULL if threads are not initialized.)"
msgstr ""

#. used by: g_main_context_get_thread_default:
#: gmain.c:793:2
msgid ""
"Returns: the thread-default #GMainContext, or %NULL if the thread-default "
"context is the global default context."
msgstr ""

#. used by: g_source_new:
#: gmain.c:814:2
msgid ""
"@source_funcs: structure containing functions that implement the sources "
"behavior."
msgstr ""

#. used by: g_source_new:
#: gmain.c:816:1
msgid "@struct_size: size of the #GSource structure to create."
msgstr ""

#. used by: g_source_new:
#: gmain.c:818:4
msgid ""
"Creates a new #GSource structure. The size is specified to allow creating "
"structures derived from #GSource that contain additional data. The size "
"passed in must be at least <literal>sizeof (GSource)</literal>."
msgstr ""

#. used by: g_source_new:
#: gmain.c:827:1
msgid "Return value: the newly-created #GSource."
msgstr ""

#. used by: g_source_attach:
#: gmain.c:944:2
msgid ""
"Adds a #GSource to a @context so that it will be executed within that "
"context. Remove it by calling g_source_destroy()."
msgstr ""

#. used by: g_source_attach:
#: gmain.c:947:2
msgid ""
"Return value: the ID (greater than 0) for the source within the "
"#GMainContext."
msgstr ""

#. used by: GSourceFuncs:
#: gmain.h:103:4
msgid ""
"For timeout sources, the prepare and check functions both return %TRUE if "
"the timeout interval has expired. The prepare function also returns a "
"timeout value to ensure that the poll() call doesn't block too long and miss "
"the next timeout."
msgstr ""

#. used by: GSourceFuncs:
#: gmain.h:108:6
msgid ""
"For file descriptor sources, the prepare function typically returns %FALSE, "
"since it must wait until poll() has been called before it knows whether any "
"events need to be processed. It sets the returned timeout to -1 to indicate "
"that it doesn't mind how long the poll() call blocks. In the check function, "
"it tests the results of the poll() call to see if the required condition has "
"been met, and returns %TRUE if so."
msgstr ""

#. used by: GPid:
#: gmain.h:120:1
msgid "A type which is used to hold a process identification."
msgstr ""

#. used by: GPid:
#: gmain.h:122:2
msgid ""
"On UNIX, processes are identified by a process id (an integer), while "
"Windows uses process handles (which are pointers)."
msgstr ""

#. used by: GChildWatchFunc:
#: gmain.h:130:1
msgid "@pid: the process id of the child process"
msgstr ""

#. used by: GChildWatchFunc:
#: gmain.h:131:2
msgid ""
"@status: Status information about the child process, see waitpid(2) for more "
"information about this field"
msgstr ""

#. used by: GChildWatchFunc:
#: gmain.h:133:1
msgid "@data: user data passed to g_child_watch_add()"
msgstr ""

#. used by: GChildWatchFunc:
#: gmain.h:135:1
msgid "The type of functions to be called when a child exists."
msgstr ""

#. used by: G_PRIORITY_HIGH:
#: gmain.h:197:1
msgid "Use this for high priority event sources."
msgstr ""

#. #-#-#-#-#  gmain.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_PRIORITY_HIGH:
#. #-#-#-#-#  gmain.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: G_PRIORITY_LOW:
#: gmain.h:199:1 gmain.h:241:1
msgid "It is not used within GLib or GTK+."
msgstr ""

#. used by: G_PRIORITY_DEFAULT:
#: gmain.h:206:1
msgid "Use this for default priority event sources."
msgstr ""

#. used by: G_PRIORITY_DEFAULT:
#: gmain.h:208:3
msgid ""
"In GLib this priority is used when adding timeout functions with "
"g_timeout_add(). In GDK this priority is used for events from the X server."
msgstr ""

#. used by: G_PRIORITY_HIGH_IDLE:
#: gmain.h:217:1
msgid "Use this for high priority idle functions."
msgstr ""

#. used by: G_PRIORITY_HIGH_IDLE:
#: gmain.h:219:4
msgid ""
"GTK+ uses #G_PRIORITY_HIGH_IDLE + 10 for resizing operations, and "
"#G_PRIORITY_HIGH_IDLE + 20 for redrawing operations. (This is done to ensure "
"that any pending resizes are processed before any pending redraws, so that "
"widgets are not redrawn twice unnecessarily.)"
msgstr ""

#. used by: G_PRIORITY_DEFAULT_IDLE:
#: gmain.h:229:1
msgid "Use this for default priority idle functions."
msgstr ""

#. used by: G_PRIORITY_DEFAULT_IDLE:
#: gmain.h:231:2
msgid ""
"In GLib this priority is used when adding idle functions with g_idle_add()."
msgstr ""

#. used by: G_PRIORITY_LOW:
#: gmain.h:239:1
msgid "Use this for very low priority background tasks."
msgstr ""

#. used by: GMainContext:
#: gmain.h:36:2
msgid ""
"The <structname>GMainContext</structname> struct is an opaque data type "
"representing a set of sources to be handled in a main loop."
msgstr ""

#. used by: g_main_new:
#: gmain.h:402:3
msgid ""
"@is_running: set to %TRUE to indicate that the loop is running. This is not "
"very important since calling g_main_run() will set this to %TRUE anyway."
msgstr ""

#. used by: g_main_new:
#: gmain.h:406:1
msgid "Creates a new #GMainLoop for th default main context."
msgstr ""

#. used by: g_main_new:
#: gmain.h:408:1
msgid "Returns: a new #GMainLoop"
msgstr ""

#. used by: g_main_new:
#: gmain.h:410:1
msgid "Deprecated: 2.2: Use g_main_loop_new() instead"
msgstr ""

#. used by: g_main_run:
#: gmain.h:418:1
msgid "Runs a main loop until it stops running."
msgstr ""

#. used by: g_main_run:
#: gmain.h:420:1
msgid "Deprecated: 2.2: Use g_main_loop_run() instead"
msgstr ""

#. used by: g_main_quit:
#: gmain.h:428:2
msgid ""
"Stops the #GMainLoop. If g_main_run() was called to run the #GMainLoop, it "
"will now return."
msgstr ""

#. used by: g_main_quit:
#: gmain.h:431:1
msgid "Deprecated: 2.2: Use g_main_loop_quit() instead"
msgstr ""

#. used by: g_main_destroy:
#: gmain.h:439:1
msgid "Frees the memory allocated for the #GMainLoop."
msgstr ""

#. used by: GMainLoop:
#: gmain.h:44:2
msgid ""
"The <structname>GMainLoop</structname> struct is an opaque data type "
"representing the main event loop of a GLib or GTK+ application."
msgstr ""

#. used by: g_main_destroy:
#: gmain.h:441:1
msgid "Deprecated: 2.2: Use g_main_loop_unref() instead"
msgstr ""

#. used by: g_main_is_running:
#: gmain.h:449:1
msgid "Checks if the main loop is running."
msgstr ""

#. used by: g_main_is_running:
#: gmain.h:451:1
msgid "Returns: %TRUE if the main loop is running"
msgstr ""

#. used by: g_main_is_running:
#: gmain.h:453:1
msgid "Deprecated: 2.2: Use g_main_loop_is_running() instead"
msgstr ""

#. used by: g_main_iteration:
#: gmain.h:459:4
msgid ""
"@may_block: set to %TRUE if it should block (i.e. wait) until an event "
"source becomes ready. It will return after an event source has been "
"processed. If set to %FALSE it will return immediately if no event source is "
"ready to be processed."
msgstr ""

#. used by: g_main_iteration:
#: gmain.h:464:1
msgid "Runs a single iteration for the default #GMainContext."
msgstr ""

#. used by: g_main_iteration:
#: gmain.h:466:1
msgid "Returns: %TRUE if more events are pending."
msgstr ""

#. used by: g_main_iteration:
#: gmain.h:468:1
msgid "Deprecated: 2.2: Use g_main_context_iteration() instead."
msgstr ""

#. used by: g_main_pending:
#: gmain.h:475:2
msgid ""
"Checks if any events are pending for the default #GMainContext (i.e. ready "
"to be processed)."
msgstr ""

#. used by: g_main_pending:
#: gmain.h:478:1
msgid "Returns: %TRUE if any events are pending."
msgstr ""

#. used by: g_main_pending:
#: gmain.h:480:1
msgid "Deprected: 2.2: Use g_main_context_pending() instead."
msgstr ""

#. used by: g_main_set_poll_func:
#: gmain.h:488:2
msgid ""
"Sets the function to use for the handle polling of file descriptors for the "
"default main context."
msgstr ""

#. used by: g_main_set_poll_func:
#: gmain.h:491:1
msgid "Deprecated: 2.2: Use g_main_context_set_poll_func() again"
msgstr ""

#. used by: GSource:
#: gmain.h:52:2
msgid ""
"The <structname>GSource</structname> struct is an opaque data type "
"representing an event source."
msgstr ""

#. used by: GSourceCallbackFuncs:
#: gmain.h:60:1
msgid "@ref: Called when a reference is added to the callback object"
msgstr ""

#. used by: GSourceCallbackFuncs:
#: gmain.h:61:1
msgid "@unref: Called when a reference to the callback object is dropped"
msgstr ""

#. used by: GSourceCallbackFuncs:
#: gmain.h:62:2
msgid ""
"@get: Called to extract the callback function and data from the callback "
"object."
msgstr ""

#. used by: GSourceCallbackFuncs:
#: gmain.h:65:2
msgid ""
"The <structname>GSourceCallbackFuncs</structname> struct contains functions "
"for managing callback objects."
msgstr ""

#. used by: GSourceFuncs:
#: gmain.h:72:7
msgid ""
"@prepare: Called before all the file descriptors are polled. If the source "
"can determine that it is ready here (without waiting for the results of the "
"poll() call) it should return %TRUE. It can also return a @timeout_ value "
"which should be the maximum timeout (in milliseconds) which should be passed "
"to the poll() call. The actual timeout used will be -1 if all sources "
"returned -1, or it will be the minimum of all the @timeout_ values returned "
"which were >= 0."
msgstr ""

#. used by: GSourceFuncs:
#: gmain.h:79:4
msgid ""
"@check: Called after all the file descriptors are polled. The source should "
"return %TRUE if it is ready to be dispatched. Note that some time may have "
"passed since the previous prepare function was called, so the source should "
"be checked again here."
msgstr ""

#. used by: GSourceFuncs:
#: gmain.h:83:7
msgid ""
"@dispatch: Called to dispatch the event source, after it has returned %TRUE "
"in either its @prepare or its @check function. The @dispatch function is "
"passed in a callback function and data. The callback function may be %NULL "
"if the source was never connected to a callback using g_source_set_callback"
"(). The @dispatch function should call the callback function with @user_data "
"and whatever additional parameters are needed for this type of event source."
msgstr ""

#. used by: GSourceFuncs:
#: gmain.h:90:1
msgid "@finalize: Called when the source is finalized."
msgstr ""

#. used by: GSourceFuncs:
#: gmain.h:91:1
msgid "@closure_callback:"
msgstr ""

#. used by: GSourceFuncs:
#: gmain.h:92:1
msgid "@closure_marshal:"
msgstr ""

#. used by: GSourceFuncs:
#: gmain.h:94:2
msgid ""
"The <structname>GSourceFuncs</structname> struct contains a table of "
"functions used to handle event sources in a generic manner."
msgstr ""

#. used by: GSourceFuncs:
#: gmain.h:97:5
msgid ""
"For idle sources, the prepare and check functions always return %TRUE to "
"indicate that the source is always ready to be processed. The prepare "
"function also returns a timeout value of 0 to ensure that the poll() call "
"doesn't block (since that would be time wasted which could have been spent "
"running the idle function)."
msgstr ""
