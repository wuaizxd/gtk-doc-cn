# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 20:50-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. used by: g_variant_get_fixed_array:
#: gvariant.c:1047:1
msgid "@value: a #GVariant array with fixed-sized elements"
msgstr ""

#. used by: g_variant_get_fixed_array:
#: gvariant.c:1048:1
msgid "@n_elements: a pointer to the location to store the number of items"
msgstr ""

#. used by: g_variant_get_fixed_array:
#: gvariant.c:1049:1
msgid "@element_size: the size of each element"
msgstr ""

#. used by: g_variant_get_fixed_array:
#: gvariant.c:1050:1
msgid "@returns: (array length=n_elements): a pointer to the fixed array"
msgstr ""

#. used by: g_variant_get_fixed_array:
#: gvariant.c:1052:2
msgid ""
"Provides access to the serialised data for an array of fixed-sized items."
msgstr ""

#. used by: g_variant_get_fixed_array:
#: gvariant.c:1055:2
msgid ""
"@value must be an array with fixed-sized elements.  Numeric types are fixed-"
"size as are tuples containing only other fixed-sized types."
msgstr ""

#. used by: g_variant_get_fixed_array:
#: gvariant.c:1058:5
msgid ""
"@element_size must be the size of a single element in the array.  For "
"example, if calling this function for an array of 32 bit integers, you might "
"say <code>sizeof (gint32)</code>.  This value isn't used except for the "
"purpose of a double-check that the form of the seralised data matches the "
"caller's expectation."
msgstr ""

#. used by: g_variant_get_fixed_array:
#: gvariant.c:1064:2
msgid ""
"@n_elements, which must be non-%NULL is set equal to the number of items in "
"the array."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_boolean:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_boolean:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_byte:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_byte:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_int16:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_int16:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_uint16:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_uint16:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_int32:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_int32:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_uint32:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_uint32:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_int64:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_int64:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_uint64:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_uint64:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_handle:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_handle:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_double:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_double:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_maybe:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_maybe:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_variant:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_variant:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_tuple:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_dict_entry:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_fixed_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_object_path:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_is_object_path:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_signature:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_is_signature:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_type:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_type_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_is_of_type:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_classify:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: GVariantClass:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_print_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_hash:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_equal:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_new:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_init:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_copy:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_n_children:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_free:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next_value:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_new:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_unref:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_ref:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_clear:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_init:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_add_value:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_open:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_close:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_end:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_va:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_va:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_add:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_child:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_loop:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_normal_form:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_byteswap:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_from_data:
#: gvariant.c:1067:1 gvariant.c:1127:1 gvariant.c:1148:1 gvariant.c:1173:1
#: gvariant.c:1192:1 gvariant.c:1215:1 gvariant.c:1247:1 gvariant.c:1317:1
#: gvariant.c:1337:1 gvariant.c:1377:1 gvariant.c:1426:1 gvariant.c:1696:1
#: gvariant.c:1719:1 gvariant.c:1741:1 gvariant.c:1771:1 gvariant.c:1798:1
#: gvariant.c:1822:1 gvariant.c:2266:1 gvariant.c:2348:1 gvariant.c:2558:1
#: gvariant.c:2587:1 gvariant.c:2618:1 gvariant.c:2644:1 gvariant.c:2662:1
#: gvariant.c:2710:1 gvariant.c:2814:1 gvariant.c:2841:1 gvariant.c:2867:1
#: gvariant.c:2898:1 gvariant.c:2962:1 gvariant.c:3066:1 gvariant.c:3115:1
#: gvariant.c:3162:1 gvariant.c:3225:1 gvariant.c:323:1 gvariant.c:343:1
#: gvariant.c:381:1 gvariant.c:393:1 gvariant.c:404:1 gvariant.c:416:1
#: gvariant.c:4173:1 gvariant.c:4235:1 gvariant.c:427:1 gvariant.c:4274:1
#: gvariant.c:4322:1 gvariant.c:4379:1 gvariant.c:439:1 gvariant.c:4408:1
#: gvariant.c:4478:1 gvariant.c:450:1 gvariant.c:4563:1 gvariant.c:462:1
#: gvariant.c:4696:1 gvariant.c:4729:1 gvariant.c:473:1 gvariant.c:4800:1
#: gvariant.c:485:1 gvariant.c:496:1 gvariant.c:508:1 gvariant.c:519:1
#: gvariant.c:531:1 gvariant.c:546:1 gvariant.c:562:1 gvariant.c:573:1
#: gvariant.c:585:1 gvariant.c:607:1 gvariant.c:655:1 gvariant.c:679:1
#: gvariant.c:701:1 gvariant.c:735:1 gvariant.c:815:1 gvariant.c:876:1
msgid "Since: 2.24"
msgstr ""

#. used by: g_variant_new_string:
#: gvariant.c:1120:1
msgid "@string: a normal utf8 nul-terminated string"
msgstr ""

#. used by: g_variant_new_string:
#: gvariant.c:1121:1
msgid "@returns: a floating reference to a new string #GVariant instance"
msgstr ""

#. used by: g_variant_new_string:
#: gvariant.c:1123:1
msgid "Creates a string #GVariant with the contents of @string."
msgstr ""

#. used by: g_variant_new_string:
#: gvariant.c:1125:1
msgid "@string must be valid utf8."
msgstr ""

#. used by: g_variant_new_object_path:
#: gvariant.c:1141:1
msgid "@object_path: a normal C nul-terminated string"
msgstr ""

#. used by: g_variant_new_object_path:
#: gvariant.c:1142:1
msgid "@returns: a floating reference to a new object path #GVariant instance"
msgstr ""

#. used by: g_variant_new_object_path:
#: gvariant.c:1144:3
msgid ""
"Creates a DBus object path #GVariant with the contents of @string. @string "
"must be a valid DBus object path.  Use g_variant_is_object_path() if you're "
"not sure."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_is_object_path:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_is_signature:
#: gvariant.c:1161:1 gvariant.c:1205:1
msgid "@string: a normal C nul-terminated string"
msgstr ""

#. used by: g_variant_is_object_path:
#: gvariant.c:1162:1
msgid "@returns: %TRUE if @string is a DBus object path"
msgstr ""

#. used by: g_variant_is_object_path:
#: gvariant.c:1164:3
msgid ""
"Determines if a given string is a valid DBus object path.  You should ensure "
"that a string is a valid DBus object path before passing it to "
"g_variant_new_object_path()."
msgstr ""

#. used by: g_variant_is_object_path:
#: gvariant.c:1168:4
msgid ""
"A valid object path starts with '/' followed by zero or more sequences of "
"characters separated by '/' characters.  Each sequence must contain only the "
"characters \"[A-Z][a-z][0-9]_\".  No sequence (including the one following "
"the final '/' character) may be empty."
msgstr ""

#. used by: g_variant_new_signature:
#: gvariant.c:1185:1
msgid "@signature: a normal C nul-terminated string"
msgstr ""

#. used by: g_variant_new_signature:
#: gvariant.c:1186:1
msgid "@returns: a floating reference to a new signature #GVariant instance"
msgstr ""

#. used by: g_variant_new_signature:
#: gvariant.c:1188:3
msgid ""
"Creates a DBus type signature #GVariant with the contents of @string.  "
"@string must be a valid DBus type signature.  Use g_variant_is_signature() "
"if you're not sure."
msgstr ""

#. used by: g_variant_is_signature:
#: gvariant.c:1206:1
msgid "@returns: %TRUE if @string is a DBus type signature"
msgstr ""

#. used by: g_variant_is_signature:
#: gvariant.c:1208:3
msgid ""
"Determines if a given string is a valid DBus type signature.  You should "
"ensure that a string is a valid DBus type signature before passing it to "
"g_variant_new_signature()."
msgstr ""

#. used by: g_variant_is_signature:
#: gvariant.c:1212:2
msgid ""
"DBus type signatures consist of zero or more definite #GVariantType strings "
"in sequence."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_string:
#: gvariant.c:1227:1 gvariant.c:1306:1
msgid "@value: a string #GVariant instance"
msgstr ""

#. used by: g_variant_get_string:
#: gvariant.c:1228:2
msgid ""
"@length: (allow-none) (default NULL) (out): a pointer to a #gsize, to store "
"the length"
msgstr ""

#. used by: g_variant_get_string:
#: gvariant.c:1230:1
msgid "@returns: the constant string, utf8 encoded"
msgstr ""

#. used by: g_variant_get_string:
#: gvariant.c:1232:3
msgid ""
"Returns the string value of a #GVariant instance with a string type.  This "
"includes the types %G_VARIANT_TYPE_STRING, %G_VARIANT_TYPE_OBJECT_PATH and "
"%G_VARIANT_TYPE_SIGNATURE."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_string:
#: gvariant.c:1236:1 gvariant.c:1313:1
msgid "The string will always be utf8 encoded."
msgstr ""

#. used by: g_variant_get_string:
#: gvariant.c:1238:3
msgid ""
"If @length is non-%NULL then the length of the string (in bytes) is returned "
"there.  For trusted values, this information is already known.  For "
"untrusted values, a strlen() will be performed."
msgstr ""

#. used by: g_variant_get_string:
#: gvariant.c:1242:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"those three."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_bytestring:
#: gvariant.c:1245:1 gvariant.c:1499:1
msgid "The return value remains valid as long as @value exists."
msgstr ""

#. used by: g_variant_dup_string:
#: gvariant.c:1307:1
msgid "@length: a pointer to a #gsize, to store the length"
msgstr ""

#. used by: g_variant_dup_string:
#: gvariant.c:1308:1
msgid "@returns: a newly allocated string, utf8 encoded"
msgstr ""

#. used by: g_variant_dup_string:
#: gvariant.c:1310:2
msgid ""
"Similar to g_variant_get_string() except that instead of returning a "
"constant string, the string is duplicated."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_bytestring:
#: gvariant.c:1315:1 gvariant.c:1531:1
msgid "The return value must be freed using g_free()."
msgstr ""

#. used by: g_variant_new_strv:
#: gvariant.c:1328:1
msgid "@strv: (array length=length) (element-type utf8): an array of strings"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_bytestring_array:
#: gvariant.c:1329:1 gvariant.c:1557:1
msgid "@length: the length of @strv, or -1"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_bytestring_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new:
#: gvariant.c:1330:1 gvariant.c:1558:1 gvariant.c:4157:1
msgid "@returns: a new floating #GVariant instance"
msgstr ""

#. used by: g_variant_new_strv:
#: gvariant.c:1332:2
msgid ""
"Constructs an array of strings #GVariant from the given array of strings."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_bytestring_array:
#: gvariant.c:1335:1 gvariant.c:1563:1
msgid "If @length is -1 then @strv is %NULL-terminated."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_strv:
#: gvariant.c:1361:1 gvariant.c:1411:1
msgid "@value: an array of strings #GVariant"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_bytestring_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_bytestring_array:
#: gvariant.c:1362:1 gvariant.c:1412:1 gvariant.c:1590:1 gvariant.c:1639:1
msgid "@length: (allow-none): the length of the result, or %NULL"
msgstr ""

#. used by: g_variant_get_strv:
#: gvariant.c:1363:2
msgid ""
"@returns: (array length=length) (transfer container): an array of constant "
"strings"
msgstr ""

#. used by: g_variant_get_strv:
#: gvariant.c:1366:3
msgid ""
"Gets the contents of an array of strings #GVariant.  This call makes a "
"shallow copy; the return result should be released with g_free(), but the "
"individual strings must not be modified."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_bytestring_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_bytestring_array:
#: gvariant.c:1370:3 gvariant.c:1419:3 gvariant.c:1597:3 gvariant.c:1646:3
msgid ""
"If @length is non-%NULL then the number of elements in the result is stored "
"there.  In any case, the resulting array will be %NULL-terminated."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_bytestring_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_bytestring_array:
#: gvariant.c:1374:2 gvariant.c:1423:2 gvariant.c:1601:2 gvariant.c:1650:2
msgid ""
"For an empty array, @length will be set to 0 and a pointer to a %NULL "
"pointer will be returned."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_strv:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_bytestring_array:
#: gvariant.c:1413:1 gvariant.c:1640:1
msgid "@returns: (array length=length): an array of strings"
msgstr ""

#. used by: g_variant_dup_strv:
#: gvariant.c:1415:3
msgid ""
"Gets the contents of an array of strings #GVariant.  This call makes a deep "
"copy; the return result should be released with g_strfreev()."
msgstr ""

#. used by: g_variant_new_bytestring:
#: gvariant.c:1459:1
msgid "@string: a normal nul-terminated string in no particular encoding"
msgstr ""

#. used by: g_variant_new_bytestring:
#: gvariant.c:1460:1
msgid "@returns: a floating reference to a new bytestring #GVariant instance"
msgstr ""

#. used by: g_variant_new_bytestring:
#: gvariant.c:1462:3
msgid ""
"Creates an array-of-bytes #GVariant with the contents of @string. This "
"function is just like g_variant_new_string() except that the string need not "
"be valid utf8."
msgstr ""

#. used by: g_variant_new_bytestring:
#: gvariant.c:1466:2
msgid ""
"The nul terminator character at the end of the string is stored in the array."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_bytestring:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_bytestring:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_bytestring:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_bytestring_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_bytestring_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_bytestring_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_compare:
#: gvariant.c:1469:1 gvariant.c:1501:1 gvariant.c:1533:1 gvariant.c:1565:1
#: gvariant.c:1604:1 gvariant.c:1653:1 gvariant.c:2430:1
msgid "Since: 2.26"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_bytestring:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_bytestring:
#: gvariant.c:1482:1 gvariant.c:1523:1
msgid "@value: an array-of-bytes #GVariant instance"
msgstr ""

#. used by: g_variant_get_bytestring:
#: gvariant.c:1483:1
msgid "@returns: the constant string"
msgstr ""

#. used by: g_variant_get_bytestring:
#: gvariant.c:1485:2
msgid ""
"Returns the string value of a #GVariant instance with an array-of-bytes "
"type.  The string has no particular encoding."
msgstr ""

#. used by: g_variant_get_bytestring:
#: gvariant.c:1488:3
msgid ""
"If the array does not end with a nul terminator character, the empty string "
"is returned.  For this reason, you can always trust that a non-%NULL nul-"
"terminated string will be returned by this function."
msgstr ""

#. used by: g_variant_get_bytestring:
#: gvariant.c:1492:3
msgid ""
"If the array contains a nul terminator character somewhere other than the "
"last byte then the returned string is the string, up to the first such nul "
"character."
msgstr ""

#. used by: g_variant_get_bytestring:
#: gvariant.c:1496:2
msgid ""
"It is an error to call this function with a @value that is not an array of "
"bytes."
msgstr ""

#. used by: g_variant_dup_bytestring:
#: gvariant.c:1524:2
msgid ""
"@length: (allow-none) (default NULL): a pointer to a #gsize, to store the "
"length (not including the nul terminator)"
msgstr ""

#. used by: g_variant_dup_bytestring:
#: gvariant.c:1526:1
msgid "@returns: a newly allocated string"
msgstr ""

#. used by: g_variant_dup_bytestring:
#: gvariant.c:1528:2
msgid ""
"Similar to g_variant_get_bytestring() except that instead of returning a "
"constant string, the string is duplicated."
msgstr ""

#. used by: g_variant_new_bytestring_array:
#: gvariant.c:1556:1
msgid "@strv: (array length=length): an array of strings"
msgstr ""

#. used by: g_variant_new_bytestring_array:
#: gvariant.c:1560:2
msgid ""
"Constructs an array of bytestring #GVariant from the given array of strings."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_bytestring_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_dup_bytestring_array:
#: gvariant.c:1589:1 gvariant.c:1638:1
msgid "@value: an array of array of bytes #GVariant ('aay')"
msgstr ""

#. used by: g_variant_get_bytestring_array:
#: gvariant.c:1591:1
msgid "@returns: (array length=length): an array of constant strings"
msgstr ""

#. used by: g_variant_get_bytestring_array:
#: gvariant.c:1593:3
msgid ""
"Gets the contents of an array of array of bytes #GVariant.  This call makes "
"a shallow copy; the return result should be released with g_free(), but the "
"individual strings must not be modified."
msgstr ""

#. used by: g_variant_dup_bytestring_array:
#: gvariant.c:1642:3
msgid ""
"Gets the contents of an array of array of bytes #GVariant.  This call makes "
"a deep copy; the return result should be released with g_strfreev()."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_type:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_type_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_classify:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_print_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_print:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_add_value:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_va:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_normal_form:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_byteswap:
#: gvariant.c:1688:1 gvariant.c:1712:1 gvariant.c:1766:1 gvariant.c:1811:1
#: gvariant.c:2230:1 gvariant.c:3053:1 gvariant.c:4296:1 gvariant.c:4676:1
#: gvariant.c:4714:1
msgid "@value: a #GVariant"
msgstr ""

#. used by: g_variant_get_type:
#: gvariant.c:1689:1
msgid "@returns: a #GVariantType"
msgstr ""

#. used by: g_variant_get_type:
#: gvariant.c:1691:1
msgid "Determines the type of @value."
msgstr ""

#. used by: g_variant_get_type:
#: gvariant.c:1693:2
msgid ""
"The return value is valid for the lifetime of @value and must not be freed."
msgstr ""

#. used by: g_variant_get_type_string:
#: gvariant.c:1713:1
msgid "@returns: the type string for the type of @value"
msgstr ""

#. used by: g_variant_get_type_string:
#: gvariant.c:1715:3
msgid ""
"Returns the type string of @value.  Unlike the result of calling "
"g_variant_type_peek_string(), this string is nul-terminated.  This string "
"belongs to #GVariant and must not be freed."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_variant:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_is_of_type:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_is_container:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get:
#: gvariant.c:1735:1 gvariant.c:1752:1 gvariant.c:4258:1 gvariant.c:670:1
msgid "@value: a #GVariant instance"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_is_of_type:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_open:
#: gvariant.c:1736:1 gvariant.c:3106:1
msgid "@type: a #GVariantType"
msgstr ""

#. used by: g_variant_is_of_type:
#: gvariant.c:1737:1
msgid "@returns: %TRUE if the type of @value matches @type"
msgstr ""

#. used by: g_variant_is_of_type:
#: gvariant.c:1739:1
msgid "Checks if a value has a type matching the provided type."
msgstr ""

#. used by: g_variant_is_container:
#: gvariant.c:1753:1
msgid "@returns: %TRUE if @value is a container"
msgstr ""

#. used by: g_variant_is_container:
#: gvariant.c:1755:1
msgid "Checks if @value is a container."
msgstr ""

#. used by: g_variant_classify:
#: gvariant.c:1767:1
msgid "@returns: the #GVariantClass of @value"
msgstr ""

#. used by: g_variant_classify:
#: gvariant.c:1769:1
msgid "Classifies @value according to its top-level type."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1775:1
msgid "@G_VARIANT_CLASS_BOOLEAN: The #GVariant is a boolean."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1776:7
msgid ""
"@G_VARIANT_CLASS_BYTE: The #GVariant is a byte. @G_VARIANT_CLASS_INT16: The "
"#GVariant is a signed 16 bit integer. @G_VARIANT_CLASS_UINT16: The #GVariant "
"is an unsigned 16 bit integer. @G_VARIANT_CLASS_INT32: The #GVariant is a "
"signed 32 bit integer. @G_VARIANT_CLASS_UINT32: The #GVariant is an unsigned "
"32 bit integer. @G_VARIANT_CLASS_INT64: The #GVariant is a signed 64 bit "
"integer. @G_VARIANT_CLASS_UINT64: The #GVariant is an unsigned 64 bit "
"integer."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1783:1
msgid "@G_VARIANT_CLASS_HANDLE: The #GVariant is a file handle index."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1784:2
msgid ""
"@G_VARIANT_CLASS_DOUBLE: The #GVariant is a double precision floating point "
"value."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1786:1
msgid "@G_VARIANT_CLASS_STRING: The #GVariant is a normal string."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1787:2
msgid ""
"@G_VARIANT_CLASS_OBJECT_PATH: The #GVariant is a DBus object path string."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1789:1
msgid "@G_VARIANT_CLASS_SIGNATURE: The #GVariant is a DBus signature string."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1790:1
msgid "@G_VARIANT_CLASS_VARIANT: The #GVariant is a variant."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1791:1
msgid "@G_VARIANT_CLASS_MAYBE: The #GVariant is a maybe-typed value."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1792:1
msgid "@G_VARIANT_CLASS_ARRAY: The #GVariant is an array."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1793:1
msgid "@G_VARIANT_CLASS_TUPLE: The #GVariant is a tuple."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1794:1
msgid "@G_VARIANT_CLASS_DICT_ENTRY: The #GVariant is a dictionary entry."
msgstr ""

#. used by: GVariantClass:
#: gvariant.c:1796:1
msgid "The range of possible top-level types of #GVariant instances."
msgstr ""

#. used by: g_variant_print_string:
#: gvariant.c:1812:1
msgid "@string: (allow-none) (default NULL): a #GString, or %NULL"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_print_string:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_print:
#: gvariant.c:1813:2 gvariant.c:2231:2
msgid ""
"@type_annotate: %TRUE if type information should be included in the output"
msgstr ""

#. used by: g_variant_print_string:
#: gvariant.c:1815:1
msgid "@returns: a #GString containing the string"
msgstr ""

#. used by: g_variant_print_string:
#: gvariant.c:1817:1
msgid "Behaves as g_variant_print(), but operates on a #GString."
msgstr ""

#. used by: g_variant_print_string:
#: gvariant.c:1819:2
msgid ""
"If @string is non-%NULL then it is appended to and returned.  Else, a new "
"empty #GString is allocated and it is returned."
msgstr ""

#. used by: g_variant_print:
#: gvariant.c:2233:1
msgid "@returns: a newly-allocated string holding the result."
msgstr ""

#. used by: g_variant_print:
#: gvariant.c:2235:1
msgid "Pretty-prints @value in the format understood by g_variant_parse()."
msgstr ""

#. used by: g_variant_print:
#: gvariant.c:2237:1
msgid "The format is described <link linkend='gvariant-text'>here</link>."
msgstr ""

#. used by: g_variant_print:
#: gvariant.c:2239:2
msgid ""
"If @type_annotate is %TRUE, then type information is included in the output."
msgstr ""

#. used by: g_variant_hash:
#: gvariant.c:2253:1
msgid "@value: (type GVariant): a basic #GVariant value as a #gconstpointer"
msgstr ""

#. used by: g_variant_hash:
#: gvariant.c:2254:1
msgid "@returns: a hash value corresponding to @value"
msgstr ""

#. used by: g_variant_hash:
#: gvariant.c:2256:1
msgid "Generates a hash value for a #GVariant instance."
msgstr ""

#. used by: g_variant_hash:
#: gvariant.c:2258:4
msgid ""
"The output of this function is guaranteed to be the same for a given value "
"only per-process.  It may change between different processor architectures "
"or even different versions of GLib.  Do not use this function as a basis for "
"building protocols or file formats."
msgstr ""

#. used by: g_variant_hash:
#: gvariant.c:2263:2
msgid ""
"The type of @value is #gconstpointer only to allow use of this function with "
"#GHashTable.  @value must be a #GVariant."
msgstr ""

#. used by: g_variant_equal:
#: gvariant.c:2339:1
msgid "@one: (type GVariant): a #GVariant instance"
msgstr ""

#. used by: g_variant_equal:
#: gvariant.c:2340:1
msgid "@two: (type GVariant): a #GVariant instance"
msgstr ""

#. used by: g_variant_equal:
#: gvariant.c:2341:1
msgid "@returns: %TRUE if @one and @two are equal"
msgstr ""

#. used by: g_variant_equal:
#: gvariant.c:2343:1
msgid "Checks if @one and @two have the same type and value."
msgstr ""

#. used by: g_variant_equal:
#: gvariant.c:2345:2
msgid ""
"The types of @one and @two are #gconstpointer only to allow use of this "
"function with #GHashTable.  They must each be a #GVariant."
msgstr ""

#. used by: g_variant_compare:
#: gvariant.c:2404:1
msgid "@one: (type GVariant): a basic-typed #GVariant instance"
msgstr ""

#. used by: g_variant_compare:
#: gvariant.c:2405:1
msgid "@two: (type GVariant): a #GVariant instance of the same type"
msgstr ""

#. used by: g_variant_compare:
#: gvariant.c:2406:3
msgid ""
"@returns: negative value if a &lt; b; zero if a = b; positive value if a "
"&gt; b."
msgstr ""

#. used by: g_variant_compare:
#: gvariant.c:2410:1
msgid "Compares @one and @two."
msgstr ""

#. used by: g_variant_compare:
#: gvariant.c:2412:3
msgid ""
"The types of @one and @two are #gconstpointer only to allow use of this "
"function with #GTree, #GPtrArray, etc.  They must each be a #GVariant."
msgstr ""

#. used by: g_variant_compare:
#: gvariant.c:2416:3
msgid ""
"Comparison is only defined for basic types (ie: booleans, numbers, "
"strings).  For booleans, %FALSE is less than %TRUE.  Numbers are ordered in "
"the usual way.  Strings are in ASCII lexographical order."
msgstr ""

#. used by: g_variant_compare:
#: gvariant.c:2420:6
msgid ""
"It is a programmer error to attempt to compare container values or two "
"values that have types that are not exactly equal.  For example, you can not "
"compare a 32-bit signed integer with a 32-bit unsigned integer.  Also note "
"that this function is not particularly well-behaved when it comes to "
"comparison of doubles; in particular, the handling of incomparable values "
"(ie: NaN) is undefined."
msgstr ""

#. used by: g_variant_compare:
#: gvariant.c:2427:2
msgid ""
"If you only require an equality comparison, g_variant_equal() is more "
"general."
msgstr ""

#. used by: GVariantIter:
#: gvariant.c:2511:2
msgid ""
"#GVariantIter is an opaque data structure and can only be accessed using the "
"following functions."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_new:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_init:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_child:
#: gvariant.c:2546:1 gvariant.c:2577:1 gvariant.c:4398:1
msgid "@value: a container #GVariant"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_new:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_copy:
#: gvariant.c:2547:1 gvariant.c:2605:1
msgid "@returns: a new heap-allocated #GVariantIter"
msgstr ""

#. used by: g_variant_iter_new:
#: gvariant.c:2549:2
msgid ""
"Creates a heap-allocated #GVariantIter for iterating over the items in "
"@value."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_new:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_copy:
#: gvariant.c:2552:2 gvariant.c:2612:2
msgid ""
"Use g_variant_iter_free() to free the return value when you no longer need "
"it."
msgstr ""

#. used by: g_variant_iter_new:
#: gvariant.c:2555:2
msgid ""
"A reference is taken to @value and will be released only when "
"g_variant_iter_free() is called."
msgstr ""

#. used by: g_variant_iter_init:
#: gvariant.c:2576:1
msgid "@iter: a pointer to a #GVariantIter"
msgstr ""

#. used by: g_variant_iter_init:
#: gvariant.c:2578:1
msgid "@returns: the number of items in @value"
msgstr ""

#. used by: g_variant_iter_init:
#: gvariant.c:2580:3
msgid ""
"Initialises (without allocating) a #GVariantIter.  @iter may be completely "
"uninitialised prior to this call; its old value is ignored."
msgstr ""

#. used by: g_variant_iter_init:
#: gvariant.c:2584:2
msgid ""
"The iterator remains valid for as long as @value exists, and need not be "
"freed in any way."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_copy:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_n_children:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next_value:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_loop:
#: gvariant.c:2604:1 gvariant.c:2635:1 gvariant.c:2677:1 gvariant.c:4431:1
#: gvariant.c:4508:1
msgid "@iter: a #GVariantIter"
msgstr ""

#. used by: g_variant_iter_copy:
#: gvariant.c:2607:4
msgid ""
"Creates a new heap-allocated #GVariantIter to iterate over the container "
"that was being iterated over by @iter.  Iteration begins on the new iterator "
"from the current position of the old iterator but the two copies are "
"independent past that point."
msgstr ""

#. used by: g_variant_iter_copy:
#: gvariant.c:2615:2
msgid ""
"A reference is taken to the container that @iter is iterating over and will "
"be releated only when g_variant_iter_free() is called."
msgstr ""

#. used by: g_variant_iter_n_children:
#: gvariant.c:2636:1
msgid "@returns: the number of children in the container"
msgstr ""

#. used by: g_variant_iter_n_children:
#: gvariant.c:2638:3
msgid ""
"Queries the number of child items in the container that we are iterating "
"over.  This is the total number of items -- not the number of items "
"remaining."
msgstr ""

#. used by: g_variant_iter_n_children:
#: gvariant.c:2642:1
msgid "This function might be useful for preallocation of arrays."
msgstr ""

#. used by: g_variant_iter_free:
#: gvariant.c:2656:1
msgid "@iter: a heap-allocated #GVariantIter"
msgstr ""

#. used by: g_variant_iter_free:
#: gvariant.c:2658:3
msgid ""
"Frees a heap-allocated #GVariantIter.  Only call this function on iterators "
"that were returned by g_variant_iter_new() or g_variant_iter_copy()."
msgstr ""

#. used by: g_variant_iter_next_value:
#: gvariant.c:2678:1
msgid "@returns: (allow-none): a #GVariant, or %NULL"
msgstr ""

#. used by: g_variant_iter_next_value:
#: gvariant.c:2680:2
msgid ""
"Gets the next item in the container.  If no more items remain then %NULL is "
"returned."
msgstr ""

#. used by: g_variant_iter_next_value:
#: gvariant.c:2683:2
msgid ""
"Use g_variant_unref() to drop your reference on the return value when you no "
"longer need it."
msgstr ""

#. used by: g_variant_iter_next_value:
#: gvariant.c:2686:2
msgid "<example> <title>Iterating with g_variant_iter_next_value()</title>"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next_value:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_loop:
#: gvariant.c:2708:1 gvariant.c:4473:1 gvariant.c:4558:1
msgid "</example>"
msgstr ""

#. used by: GVariantBuilder:
#: gvariant.c:2736:1
msgid "A utility type for constructing container-type #GVariant instances."
msgstr ""

#. used by: GVariantBuilder:
#: gvariant.c:2738:2
msgid ""
"This is an opaque structure and may only be accessed using the following "
"functions."
msgstr ""

#. used by: GVariantBuilder:
#: gvariant.c:2741:2
msgid ""
"#GVariantBuilder is not threadsafe in any way.  Do not attempt to access it "
"from more than one thread."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_new:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_init:
#: gvariant.c:2801:1 gvariant.c:2930:1
msgid "@type: a container type"
msgstr ""

#. used by: g_variant_builder_new:
#: gvariant.c:2802:1
msgid "@returns: a #GVariantBuilder"
msgstr ""

#. used by: g_variant_builder_new:
#: gvariant.c:2804:1
msgid "Allocates and initialises a new #GVariantBuilder."
msgstr ""

#. used by: g_variant_builder_new:
#: gvariant.c:2806:3
msgid ""
"You should call g_variant_builder_unref() on the return value when it is no "
"longer needed.  The memory will not be automatically freed by any other call."
msgstr ""

#. used by: g_variant_builder_new:
#: gvariant.c:2810:3
msgid ""
"In most cases it is easier to place a #GVariantBuilder directly on the stack "
"of the calling function and initialise it with g_variant_builder_init()."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_unref:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_ref:
#: gvariant.c:2831:1 gvariant.c:2859:1
msgid "@builder: a #GVariantBuilder allocated by g_variant_builder_new()"
msgstr ""

#. used by: g_variant_builder_unref:
#: gvariant.c:2833:1
msgid "Decreases the reference count on @builder."
msgstr ""

#. used by: g_variant_builder_unref:
#: gvariant.c:2835:2
msgid ""
"In the event that there are no more references, releases all memory "
"associated with the #GVariantBuilder."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_unref:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_ref:
#: gvariant.c:2838:2 gvariant.c:2864:2
msgid ""
"Don't call this on stack-allocated #GVariantBuilder instances or bad things "
"will happen."
msgstr ""

#. used by: g_variant_builder_ref:
#: gvariant.c:2860:1
msgid "@returns: a new reference to @builder"
msgstr ""

#. used by: g_variant_builder_ref:
#: gvariant.c:2862:1
msgid "Increases the reference count on @builder."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_clear:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_init:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_add_value:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_open:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_close:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_end:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_add:
#: gvariant.c:2881:1 gvariant.c:2929:1 gvariant.c:3052:1 gvariant.c:3105:1
#: gvariant.c:3153:1 gvariant.c:3207:1 gvariant.c:4348:1
msgid "@builder: a #GVariantBuilder"
msgstr ""

#. used by: g_variant_builder_clear:
#: gvariant.c:2883:2
msgid ""
"Releases all memory associated with a #GVariantBuilder without freeing the "
"#GVariantBuilder structure itself."
msgstr ""

#. used by: g_variant_builder_clear:
#: gvariant.c:2886:6
msgid ""
"It typically only makes sense to do this on a stack-allocated "
"#GVariantBuilder if you want to abort building the value part-way through.  "
"This function need not be called if you call g_variant_builder_end() and it "
"also doesn't need to be called on builders allocated with "
"g_variant_builder_new (see g_variant_builder_unref() for that)."
msgstr ""

#. used by: g_variant_builder_clear:
#: gvariant.c:2893:4
msgid ""
"This function leaves the #GVariantBuilder structure set to all-zeros. It is "
"valid to call this function on either an initialised #GVariantBuilder or one "
"that is set to all-zeros but it is not valid to call this function on "
"uninitialised memory."
msgstr ""

#. used by: g_variant_builder_init:
#: gvariant.c:2932:1
msgid "Initialises a #GVariantBuilder structure."
msgstr ""

#. used by: g_variant_builder_init:
#: gvariant.c:2934:5
msgid ""
"@type must be non-%NULL.  It specifies the type of container to construct.  "
"It can be an indefinite type such as %G_VARIANT_TYPE_ARRAY or a definite "
"type such as \"as\" or \"(ii)\". Maybe, array, tuple, dictionary entry and "
"variant-typed values may be constructed."
msgstr ""

#. used by: g_variant_builder_init:
#: gvariant.c:2940:2
msgid ""
"After the builder is initialised, values are added using "
"g_variant_builder_add_value() or g_variant_builder_add()."
msgstr ""

#. used by: g_variant_builder_init:
#: gvariant.c:2943:3
msgid ""
"After all the child values are added, g_variant_builder_end() frees the "
"memory associated with the builder and returns the #GVariant that was "
"created."
msgstr ""

#. used by: g_variant_builder_init:
#: gvariant.c:2947:6
msgid ""
"This function completely ignores the previous contents of @builder. On one "
"hand this means that it is valid to pass in completely uninitialised "
"memory.  On the other hand, this means that if you are initialising over top "
"of an existing #GVariantBuilder you need to first call "
"g_variant_builder_clear() in order to avoid leaking memory."
msgstr ""

#. used by: g_variant_builder_init:
#: gvariant.c:2954:7
msgid ""
"You must not call g_variant_builder_ref() or g_variant_builder_unref() on a "
"#GVariantBuilder that was initialised with this function.  If you ever pass "
"a reference to a #GVariantBuilder outside of the control of your own code "
"then you should assume that the person receiving that reference may try to "
"use reference counting; you should use g_variant_builder_new() instead of "
"this function."
msgstr ""

#. used by: g_variant_builder_add_value:
#: gvariant.c:3055:1
msgid "Adds @value to @builder."
msgstr ""

#. used by: g_variant_builder_add_value:
#: gvariant.c:3057:5
msgid ""
"It is an error to call this function in any way that would create an "
"inconsistent value to be constructed.  Some examples of this are putting "
"different types of items into an array, putting the wrong types or number of "
"items in a tuple, putting more than one value into a variant, etc."
msgstr ""

#. used by: g_variant_builder_add_value:
#: gvariant.c:3063:2
msgid ""
"If @value is a floating reference (see g_variant_ref_sink()), the @builder "
"instance takes ownership of @value."
msgstr ""

#. used by: g_variant_builder_open:
#: gvariant.c:3108:2
msgid ""
"Opens a subcontainer inside the given @builder.  When done adding items to "
"the subcontainer, g_variant_builder_close() must be called."
msgstr ""

#. used by: g_variant_builder_open:
#: gvariant.c:3111:3
msgid ""
"It is an error to call this function in any way that would cause an "
"inconsistent value to be constructed (ie: adding too many values or a value "
"of an incorrect type)."
msgstr ""

#. used by: g_variant_builder_close:
#: gvariant.c:3155:2
msgid ""
"Closes the subcontainer inside the given @builder that was opened by the "
"most recent call to g_variant_builder_open()."
msgstr ""

#. used by: g_variant_builder_close:
#: gvariant.c:3158:3
msgid ""
"It is an error to call this function in any way that would create an "
"inconsistent value to be constructed (ie: too few values added to the "
"subcontainer)."
msgstr ""

#. used by: g_variant_new_boolean:
#: gvariant.c:318:1
msgid "@value: a #gboolean value"
msgstr ""

#. used by: g_variant_new_boolean:
#: gvariant.c:319:1
msgid "@returns: a floating reference to a new boolean #GVariant instance"
msgstr ""

#. used by: g_variant_builder_end:
#: gvariant.c:3208:1
msgid "@returns: (transfer none): a new, floating, #GVariant"
msgstr ""

#. used by: g_variant_new_boolean:
#: gvariant.c:321:1
msgid "Creates a new boolean #GVariant instance -- either %TRUE or %FALSE."
msgstr ""

#. used by: g_variant_builder_end:
#: gvariant.c:3210:1
msgid "Ends the builder process and returns the constructed value."
msgstr ""

#. used by: g_variant_builder_end:
#: gvariant.c:3212:4
msgid ""
"It is not permissible to use @builder in any way after this call except for "
"reference counting operations (in the case of a heap-allocated "
"#GVariantBuilder) or by reinitialising it with g_variant_builder_init() (in "
"the case of stack-allocated)."
msgstr ""

#. used by: g_variant_builder_end:
#: gvariant.c:3217:7
msgid ""
"It is an error to call this function in any way that would create an "
"inconsistent value to be constructed (ie: insufficient number of items added "
"to a container with a specific number of children required).  It is also an "
"error to call this function if the builder was created with an indefinite "
"array or maybe type and no children have been added; in this case it is "
"impossible to infer the type of the empty array."
msgstr ""

#. used by: g_variant_get_boolean:
#: gvariant.c:335:1
msgid "@value: a boolean #GVariant instance"
msgstr ""

#. used by: g_variant_get_boolean:
#: gvariant.c:336:1
msgid "@returns: %TRUE or %FALSE"
msgstr ""

#. used by: g_variant_get_boolean:
#: gvariant.c:338:1
msgid "Returns the boolean value of @value."
msgstr ""

#. used by: g_variant_get_boolean:
#: gvariant.c:340:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"%G_VARIANT_TYPE_BOOLEAN."
msgstr ""

#. used by: g_variant_new_byte:
#: gvariant.c:376:1
msgid "@value: a #guint8 value"
msgstr ""

#. used by: g_variant_new_byte:
#: gvariant.c:377:1
msgid "@returns: a floating reference to a new byte #GVariant instance"
msgstr ""

#. used by: g_variant_new_byte:
#: gvariant.c:379:1
msgid "Creates a new byte #GVariant instance."
msgstr ""

#. used by: g_variant_get_byte:
#: gvariant.c:385:1
msgid "@value: a byte #GVariant instance"
msgstr ""

#. used by: g_variant_get_byte:
#: gvariant.c:386:1
msgid "@returns: a #guchar"
msgstr ""

#. used by: g_variant_get_byte:
#: gvariant.c:388:1
msgid "Returns the byte value of @value."
msgstr ""

#. used by: g_variant_get_byte:
#: gvariant.c:390:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"%G_VARIANT_TYPE_BYTE."
msgstr ""

#. used by: g_variant_new_int16:
#: gvariant.c:399:1
msgid "@value: a #gint16 value"
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:40:1
msgid "@title: GVariant"
msgstr ""

#. used by: g_variant_new_int16:
#: gvariant.c:400:1
msgid "@returns: a floating reference to a new int16 #GVariant instance"
msgstr ""

#. used by: g_variant_new_int16:
#: gvariant.c:402:1
msgid "Creates a new int16 #GVariant instance."
msgstr ""

#. used by: g_variant_get_int16:
#: gvariant.c:408:1
msgid "@value: a int16 #GVariant instance"
msgstr ""

#. used by: g_variant_get_int16:
#: gvariant.c:409:1
msgid "@returns: a #gint16"
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:41:1
msgid "@short_description: strongly typed value datatype"
msgstr ""

#. used by: g_variant_get_int16:
#: gvariant.c:411:1
msgid "Returns the 16-bit signed integer value of @value."
msgstr ""

#. used by: g_variant_get_int16:
#: gvariant.c:413:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"%G_VARIANT_TYPE_INT16."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_child:
#: gvariant.c:4155:1 gvariant.c:4259:1 gvariant.c:4400:1
msgid "@format_string: a #GVariant format string"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_builder_add:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_child:
#: gvariant.c:4156:1 gvariant.c:4260:1 gvariant.c:4350:1 gvariant.c:4401:1
msgid "@...: arguments, as per @format_string"
msgstr ""

#. used by: g_variant_new:
#: gvariant.c:4159:1
msgid "Creates a new #GVariant instance."
msgstr ""

#. used by: g_variant_new:
#: gvariant.c:4161:1
msgid "Think of this function as an analogue to g_strdup_printf()."
msgstr ""

#. used by: g_variant_new:
#: gvariant.c:4163:5
msgid ""
"The type of the created instance and the arguments that are expected by this "
"function are determined by @format_string.  See the section on <link "
"linkend='gvariant-format-strings'>GVariant Format Strings</link>.  Please "
"note that the syntax of the format string is very likely to be extended in "
"the future."
msgstr ""

#. used by: g_variant_new:
#: gvariant.c:4169:3
msgid ""
"The first character of the format string must not be '*' '?' '@' or 'r'; in "
"essence, a new #GVariant must always be constructed by this function (and "
"not merely passed through it unmodified)."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_va:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_va:
#: gvariant.c:4196:1 gvariant.c:4297:1
msgid "@format_string: a string that is prefixed with a format string"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_va:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_va:
#: gvariant.c:4197:2 gvariant.c:4298:2
msgid ""
"@endptr: (allow-none) (default NULL): location to store the end pointer, or "
"%NULL"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_va:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_va:
#: gvariant.c:4199:1 gvariant.c:4300:1
msgid "@app: a pointer to a #va_list"
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:42:1
msgid "@see_also: GVariantType"
msgstr ""

#. used by: g_variant_new_va:
#: gvariant.c:4200:1
msgid "@returns: a new, usually floating, #GVariant"
msgstr ""

#. used by: g_variant_new_va:
#: gvariant.c:4202:3
msgid ""
"This function is intended to be used by libraries based on #GVariant that "
"want to provide g_variant_new()-like functionality to their users."
msgstr ""

#. used by: g_variant_new_va:
#: gvariant.c:4206:2
msgid ""
"The API is more general than g_variant_new() to allow a wider range of "
"possible uses."
msgstr ""

#. used by: g_variant_new_va:
#: gvariant.c:4209:4
msgid ""
"@format_string must still point to a valid format string, but it only needs "
"to be nul-terminated if @endptr is %NULL.  If @endptr is non-%NULL then it "
"is updated to point to the first character past the end of the format string."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_va:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_va:
#: gvariant.c:4214:3 gvariant.c:4314:3
msgid ""
"@app is a pointer to a #va_list.  The arguments, according to "
"@format_string, are collected from this #va_list and the list is left "
"pointing to the argument following the last."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_va:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_va:
#: gvariant.c:4218:3 gvariant.c:4318:3
msgid ""
"These two generalisations allow mixing of multiple calls to g_variant_new_va"
"() and g_variant_get_va() within a single actual varargs call by the user."
msgstr ""

#. used by: g_variant_new_uint16:
#: gvariant.c:422:1
msgid "@value: a #guint16 value"
msgstr ""

#. used by: g_variant_new_va:
#: gvariant.c:4222:5
msgid ""
"The return value will be floating if it was a newly created GVariant "
"instance (for example, if the format string was \"(ii)\").  In the case that "
"the format_string was '*', '?', 'r', or a format starting with '@' then the "
"collected #GVariant pointer will be returned unmodified, without adding any "
"additional references."
msgstr ""

#. used by: g_variant_new_va:
#: gvariant.c:4228:6
msgid ""
"In order to behave correctly in all cases it is necessary for the calling "
"function to g_variant_ref_sink() the return result before returning control "
"to the user that originally provided the pointer. At this point, the caller "
"will have their own full reference to the result.  This can also be done by "
"adding the result to a container, or by passing it to another g_variant_new"
"() call."
msgstr ""

#. used by: g_variant_new_uint16:
#: gvariant.c:423:1
msgid "@returns: a floating reference to a new uint16 #GVariant instance"
msgstr ""

#. used by: g_variant_new_uint16:
#: gvariant.c:425:1
msgid "Creates a new uint16 #GVariant instance."
msgstr ""

#. used by: g_variant_get:
#: gvariant.c:4262:1
msgid "Deconstructs a #GVariant instance."
msgstr ""

#. used by: g_variant_get:
#: gvariant.c:4264:1
msgid "Think of this function as an analogue to scanf()."
msgstr ""

#. used by: g_variant_get:
#: gvariant.c:4266:7
msgid ""
"The arguments that are expected by this function are entirely determined by "
"@format_string.  @format_string also restricts the permissible types of "
"@value.  It is an error to give a value with an incompatible type.  See the "
"section on <link linkend='gvariant-format-strings'>GVariant Format Strings</"
"link>. Please note that the syntax of the format string is very likely to be "
"extended in the future."
msgstr ""

#. used by: g_variant_get_va:
#: gvariant.c:4302:3
msgid ""
"This function is intended to be used by libraries based on #GVariant that "
"want to provide g_variant_get()-like functionality to their users."
msgstr ""

#. used by: g_variant_get_va:
#: gvariant.c:4306:2
msgid ""
"The API is more general than g_variant_get() to allow a wider range of "
"possible uses."
msgstr ""

#. used by: g_variant_get_va:
#: gvariant.c:4309:4
msgid ""
"@format_string must still point to a valid format string, but it only need "
"to be nul-terminated if @endptr is %NULL.  If @endptr is non-%NULL then it "
"is updated to point to the first character past the end of the format string."
msgstr ""

#. used by: g_variant_get_uint16:
#: gvariant.c:431:1
msgid "@value: a uint16 #GVariant instance"
msgstr ""

#. used by: g_variant_get_uint16:
#: gvariant.c:432:1
msgid "@returns: a #guint16"
msgstr ""

#. used by: g_variant_get_uint16:
#: gvariant.c:434:1
msgid "Returns the 16-bit unsigned integer value of @value."
msgstr ""

#. used by: g_variant_builder_add:
#: gvariant.c:4349:1
msgid "@format_string: a #GVariant varargs format string"
msgstr ""

#. used by: g_variant_builder_add:
#: gvariant.c:4352:1
msgid "Adds to a #GVariantBuilder."
msgstr ""

#. used by: g_variant_builder_add:
#: gvariant.c:4354:2
msgid ""
"This call is a convenience wrapper that is exactly equivalent to calling "
"g_variant_new() followed by g_variant_builder_add_value()."
msgstr ""

#. used by: g_variant_builder_add:
#: gvariant.c:4357:1
msgid "This function might be used as follows:"
msgstr ""

#. used by: g_variant_get_uint16:
#: gvariant.c:436:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"%G_VARIANT_TYPE_UINT16."
msgstr ""

#. used by: g_variant_get_child:
#: gvariant.c:4399:1
msgid "@index_: the index of the child to deconstruct"
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:44:4
msgid ""
"#GVariant is a variant datatype; it stores a value along with information "
"about the type of that value.  The range of possible values is determined by "
"the type.  The type system used by #GVariant is #GVariantType."
msgstr ""

#. used by: g_variant_get_child:
#: gvariant.c:4403:4
msgid ""
"Reads a child item out of a container #GVariant instance and deconstructs it "
"according to @format_string.  This call is essentially a combination of "
"g_variant_get_child_value() and g_variant_get()."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_lookup:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_loop:
#: gvariant.c:4432:1 gvariant.c:4509:1 gvariant.c:905:1
msgid "@format_string: a GVariant format string"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_lookup:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_loop:
#: gvariant.c:4433:1 gvariant.c:4510:1 gvariant.c:906:1
msgid "@...: the arguments to unpack the value into"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_loop:
#: gvariant.c:4434:2 gvariant.c:4511:2
msgid "@returns: %TRUE if a value was unpacked, or %FALSE if there as no value"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_loop:
#: gvariant.c:4437:2 gvariant.c:4514:2
msgid ""
"Gets the next item in the container and unpacks it into the variable "
"argument list according to @format_string, returning %TRUE."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_loop:
#: gvariant.c:4440:1 gvariant.c:4517:1
msgid "If no more items remain then %FALSE is returned."
msgstr ""

#. used by: g_variant_iter_next:
#: gvariant.c:4442:4
msgid ""
"All of the pointers given on the variable arguments list of this function "
"are assumed to point at uninitialised memory.  It is the responsibility of "
"the caller to free all of the values returned by the unpacking process."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_next:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_iter_loop:
#: gvariant.c:4447:2 gvariant.c:4534:2
msgid ""
"See the section on <link linkend='gvariant-format-strings'>GVariant Format "
"Strings</link>."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_int32:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_handle:
#: gvariant.c:445:1 gvariant.c:537:1
msgid "@value: a #gint32 value"
msgstr ""

#. used by: g_variant_iter_next:
#: gvariant.c:4450:2
msgid "<example> <title>Memory management with g_variant_iter_next()</title>"
msgstr ""

#. used by: g_variant_new_int32:
#: gvariant.c:446:1
msgid "@returns: a floating reference to a new int32 #GVariant instance"
msgstr ""

#. used by: g_variant_iter_next:
#: gvariant.c:4475:2
msgid ""
"For a solution that is likely to be more convenient to C programmers when "
"dealing with loops, see g_variant_iter_loop()."
msgstr ""

#. used by: g_variant_new_int32:
#: gvariant.c:448:1
msgid "Creates a new int32 #GVariant instance."
msgstr ""

#. used by: g_variant_iter_loop:
#: gvariant.c:4519:6
msgid ""
"On the first call to this function, the pointers appearing on the variable "
"argument list are assumed to point at uninitialised memory. On the second "
"and later calls, it is assumed that the same pointers will be given and that "
"they will point to the memory as set by the previous call to this function.  "
"This allows the previous values to be freed, as appropriate."
msgstr ""

#. used by: g_variant_iter_loop:
#: gvariant.c:4526:7
msgid ""
"This function is intended to be used with a while loop as demonstrated in "
"the following example.  This function can only be used when iterating over "
"an array.  It is only valid to call this function with a string constant for "
"the format string and the same string constant must be used each time.  "
"Mixing calls to this function and g_variant_iter_next() or "
"g_variant_iter_next_value() on the same iterator is not recommended."
msgstr ""

#. used by: g_variant_iter_loop:
#: gvariant.c:4537:2
msgid "<example> <title>Memory management with g_variant_iter_loop()</title>"
msgstr ""

#. used by: g_variant_get_int32:
#: gvariant.c:454:1
msgid "@value: a int32 #GVariant instance"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_int32:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_handle:
#: gvariant.c:455:1 gvariant.c:551:1
msgid "@returns: a #gint32"
msgstr ""

#. used by: g_variant_iter_loop:
#: gvariant.c:4560:2
msgid ""
"If you want a slightly less magical alternative that requires more typing, "
"see g_variant_iter_next()."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_int32:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_handle:
#: gvariant.c:457:1 gvariant.c:553:1
msgid "Returns the 32-bit signed integer value of @value."
msgstr ""

#. used by: g_variant_get_int32:
#: gvariant.c:459:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"%G_VARIANT_TYPE_INT32."
msgstr ""

#. used by: g_variant_get_normal_form:
#: gvariant.c:4677:1
msgid "@returns: a trusted #GVariant"
msgstr ""

#. used by: g_variant_get_normal_form:
#: gvariant.c:4679:2
msgid ""
"Gets a #GVariant instance that has the same value as @value and is trusted "
"to be in normal form."
msgstr ""

#. used by: g_variant_new_uint32:
#: gvariant.c:468:1
msgid "@value: a #guint32 value"
msgstr ""

#. used by: g_variant_get_normal_form:
#: gvariant.c:4682:2
msgid ""
"If @value is already trusted to be in normal form then a new reference to "
"@value is returned."
msgstr ""

#. used by: g_variant_get_normal_form:
#: gvariant.c:4685:3
msgid ""
"If @value is not already trusted, then it is scanned to check if it is in "
"normal form.  If it is found to be in normal form then it is marked as "
"trusted and a new reference to it is returned."
msgstr ""

#. used by: g_variant_get_normal_form:
#: gvariant.c:4689:2
msgid ""
"If @value is found not to be in normal form then a new trusted #GVariant is "
"created with the same value as @value."
msgstr ""

#. used by: g_variant_new_uint32:
#: gvariant.c:469:1
msgid "@returns: a floating reference to a new uint32 #GVariant instance"
msgstr ""

#. used by: g_variant_get_normal_form:
#: gvariant.c:4692:3
msgid ""
"It makes sense to call this function if you've received #GVariant data from "
"untrusted sources and you want to ensure your serialised output is "
"definitely in normal form."
msgstr ""

#. used by: g_variant_new_uint32:
#: gvariant.c:471:1
msgid "Creates a new uint32 #GVariant instance."
msgstr ""

#. used by: g_variant_byteswap:
#: gvariant.c:4715:1
msgid "@returns: the byteswapped form of @value"
msgstr ""

#. used by: g_variant_byteswap:
#: gvariant.c:4717:5
msgid ""
"Performs a byteswapping operation on the contents of @value.  The result is "
"that all multi-byte numeric data contained in @value is byteswapped.  That "
"includes 16, 32, and 64bit signed and unsigned integers as well as file "
"handles and double precision floating point values."
msgstr ""

#. used by: g_variant_byteswap:
#: gvariant.c:4723:3
msgid ""
"This function is an identity mapping on any value that does not contain "
"multi-byte numeric data.  That include strings, booleans, bytes and "
"containers containing only these things (recursively)."
msgstr ""

#. used by: g_variant_byteswap:
#: gvariant.c:4727:1
msgid "The returned value is always in normal form and is marked as trusted."
msgstr ""

#. used by: g_variant_get_uint32:
#: gvariant.c:477:1
msgid "@value: a uint32 #GVariant instance"
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4771:1
msgid "@type: a definite #GVariantType"
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4772:1
msgid "@data: the serialised data"
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4773:1
msgid "@size: the size of @data"
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4774:1
msgid "@trusted: %TRUE if @data is definitely in normal form"
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4775:1
msgid "@notify: function to call when @data is no longer needed"
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4776:1
msgid "@user_data: data for @notify"
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4777:1
msgid "@returns: a new floating #GVariant of type @type"
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4779:1
msgid "Creates a new #GVariant instance from serialised data."
msgstr ""

#. used by: g_variant_get_uint32:
#: gvariant.c:478:1
msgid "@returns: a #guint32"
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4781:2
msgid ""
"@type is the type of #GVariant instance that will be constructed. The "
"interpretation of @data depends on knowing the type."
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4784:4
msgid ""
"@data is not modified by this function and must remain valid with an "
"unchanging value until such a time as @notify is called with @user_data.  If "
"the contents of @data change before that time then the result is undefined."
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4789:6
msgid ""
"If @data is trusted to be serialised data in normal form then @trusted "
"should be %TRUE.  This applies to serialised data created within this "
"process or read from a trusted location on the disk (such as a file "
"installed in /usr/lib alongside your application).  You should set trusted "
"to %FALSE if @data is read from the network, a file in the user's home "
"directory, etc."
msgstr ""

#. used by: g_variant_new_from_data:
#: gvariant.c:4796:3
msgid ""
"@notify will be called with @user_data when @data is no longer needed.  The "
"exact time of this call is unspecified and might even be before this "
"function returns."
msgstr ""

#. used by: g_variant_get_uint32:
#: gvariant.c:480:1
msgid "Returns the 32-bit unsigned integer value of @value."
msgstr ""

#. used by: g_variant_get_uint32:
#: gvariant.c:482:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"%G_VARIANT_TYPE_UINT32."
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:49:4
msgid ""
"#GVariant instances always have a type and a value (which are given at "
"construction time).  The type and value of a #GVariant instance can never "
"change other than by the #GVariant itself being destroyed.  A #GVariant can "
"not contain a pointer."
msgstr ""

#. used by: g_variant_new_int64:
#: gvariant.c:491:1
msgid "@value: a #gint64 value"
msgstr ""

#. used by: g_variant_new_int64:
#: gvariant.c:492:1
msgid "@returns: a floating reference to a new int64 #GVariant instance"
msgstr ""

#. used by: g_variant_new_int64:
#: gvariant.c:494:1
msgid "Creates a new int64 #GVariant instance."
msgstr ""

#. used by: g_variant_get_int64:
#: gvariant.c:500:1
msgid "@value: a int64 #GVariant instance"
msgstr ""

#. used by: g_variant_get_int64:
#: gvariant.c:501:1
msgid "@returns: a #gint64"
msgstr ""

#. used by: g_variant_get_int64:
#: gvariant.c:503:1
msgid "Returns the 64-bit signed integer value of @value."
msgstr ""

#. used by: g_variant_get_int64:
#: gvariant.c:505:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"%G_VARIANT_TYPE_INT64."
msgstr ""

#. used by: g_variant_new_uint64:
#: gvariant.c:514:1
msgid "@value: a #guint64 value"
msgstr ""

#. used by: g_variant_new_uint64:
#: gvariant.c:515:1
msgid "@returns: a floating reference to a new uint64 #GVariant instance"
msgstr ""

#. used by: g_variant_new_uint64:
#: gvariant.c:517:1
msgid "Creates a new uint64 #GVariant instance."
msgstr ""

#. used by: g_variant_get_uint64:
#: gvariant.c:523:1
msgid "@value: a uint64 #GVariant instance"
msgstr ""

#. used by: g_variant_get_uint64:
#: gvariant.c:524:1
msgid "@returns: a #guint64"
msgstr ""

#. used by: g_variant_get_uint64:
#: gvariant.c:526:1
msgid "Returns the 64-bit unsigned integer value of @value."
msgstr ""

#. used by: g_variant_get_uint64:
#: gvariant.c:528:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"%G_VARIANT_TYPE_UINT64."
msgstr ""

#. used by: g_variant_new_handle:
#: gvariant.c:538:1
msgid "@returns: a floating reference to a new handle #GVariant instance"
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:54:3
msgid ""
"#GVariant is reference counted using g_variant_ref() and g_variant_unref().  "
"#GVariant also has floating reference counts -- see g_variant_ref_sink()."
msgstr ""

#. used by: g_variant_new_handle:
#: gvariant.c:540:1
msgid "Creates a new handle #GVariant instance."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_handle:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_get_handle:
#: gvariant.c:542:3 gvariant.c:558:3
msgid ""
"By convention, handles are indexes into an array of file descriptors that "
"are sent alongside a DBus message.  If you're not interacting with DBus, you "
"probably don't need them."
msgstr ""

#. used by: g_variant_get_handle:
#: gvariant.c:550:1
msgid "@value: a handle #GVariant instance"
msgstr ""

#. used by: g_variant_get_handle:
#: gvariant.c:555:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"%G_VARIANT_TYPE_HANDLE."
msgstr ""

#. used by: g_variant_new_double:
#: gvariant.c:568:1
msgid "@value: a #gdouble floating point value"
msgstr ""

#. used by: g_variant_new_double:
#: gvariant.c:569:1
msgid "@returns: a floating reference to a new double #GVariant instance"
msgstr ""

#. used by: g_variant_new_double:
#: gvariant.c:571:1
msgid "Creates a new double #GVariant instance."
msgstr ""

#. used by: g_variant_get_double:
#: gvariant.c:577:1
msgid "@value: a double #GVariant instance"
msgstr ""

#. used by: g_variant_get_double:
#: gvariant.c:578:1
msgid "@returns: a #gdouble"
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:58:3
msgid ""
"#GVariant is completely threadsafe.  A #GVariant instance can be "
"concurrently accessed in any way from any number of threads without problems."
msgstr ""

#. used by: g_variant_get_double:
#: gvariant.c:580:1
msgid "Returns the double precision floating point value of @value."
msgstr ""

#. used by: g_variant_get_double:
#: gvariant.c:582:2
msgid ""
"It is an error to call this function with a @value of any type other than "
"%G_VARIANT_TYPE_DOUBLE."
msgstr ""

#. used by: g_variant_new_maybe:
#: gvariant.c:592:1
msgid "@child_type: (allow-none): the #GVariantType of the child, or %NULL"
msgstr ""

#. used by: g_variant_new_maybe:
#: gvariant.c:593:1
msgid "@child: (allow-none): the child value, or %NULL"
msgstr ""

#. used by: g_variant_new_maybe:
#: gvariant.c:594:1
msgid "@returns: a floating reference to a new #GVariant maybe instance"
msgstr ""

#. used by: g_variant_new_maybe:
#: gvariant.c:596:2
msgid ""
"Depending on if @child is %NULL, either wraps @child inside of a maybe "
"container or creates a Nothing instance for the given @type."
msgstr ""

#. used by: g_variant_new_maybe:
#: gvariant.c:599:4
msgid ""
"At least one of @child_type and @child must be non-%NULL. If @child_type is "
"non-%NULL then it must be a definite type. If they are both non-%NULL then "
"@child_type must be the type of @child."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_maybe:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_variant:
#: gvariant.c:604:2 gvariant.c:676:2
msgid ""
"If @child is a floating reference (see g_variant_ref_sink()), the new "
"instance takes ownership of @child."
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:62:5
msgid ""
"#GVariant is heavily optimised for dealing with data in serialised form.  It "
"works particularly well with data located in memory-mapped files.  It can "
"perform nearly all deserialisation operations in a small constant time, "
"usually touching only a single memory page. Serialised #GVariant data can "
"also be sent over the network."
msgstr ""

#. used by: g_variant_get_maybe:
#: gvariant.c:649:1
msgid "@value: a maybe-typed value"
msgstr ""

#. used by: g_variant_get_maybe:
#: gvariant.c:650:1
msgid "@returns: (allow-none): the contents of @value, or %NULL"
msgstr ""

#. used by: g_variant_get_maybe:
#: gvariant.c:652:2
msgid ""
"Given a maybe-typed #GVariant instance, extract its value.  If the value is "
"Nothing, then this function returns %NULL."
msgstr ""

#. used by: g_variant_new_variant:
#: gvariant.c:671:1
msgid "@returns: a floating reference to a new variant #GVariant instance"
msgstr ""

#. used by: g_variant_new_variant:
#: gvariant.c:673:2
msgid ""
"Boxes @value.  The result is a #GVariant instance representing a variant "
"containing the original value."
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:68:3
msgid ""
"#GVariant is largely compatible with DBus.  Almost all types of #GVariant "
"instances can be sent over DBus.  See #GVariantType for exceptions."
msgstr ""

#. used by: g_variant_get_variant:
#: gvariant.c:695:1
msgid "@value: a variant #GVariant instance"
msgstr ""

#. used by: g_variant_get_variant:
#: gvariant.c:696:1
msgid "@returns: the item contained in the variant"
msgstr ""

#. used by: g_variant_get_variant:
#: gvariant.c:698:2
msgid ""
"Unboxes @value.  The result is the #GVariant instance that was contained in "
"@value."
msgstr ""

#. used by: g_variant_new_array:
#: gvariant.c:713:1
msgid "@child_type: (allow-none): the element type of the new array"
msgstr ""

#. used by: g_variant_new_array:
#: gvariant.c:714:2
msgid ""
"@children: (allow-none) (array length=n_children): an array of #GVariant "
"pointers, the children"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_tuple:
#: gvariant.c:716:1 gvariant.c:803:1
msgid "@n_children: the length of @children"
msgstr ""

#. used by: g_variant_new_array:
#: gvariant.c:717:1
msgid "@returns: a floating reference to a new #GVariant array"
msgstr ""

#. used by: g_variant_new_array:
#: gvariant.c:719:1
msgid "Creates a new #GVariant array from @children."
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:72:3
msgid ""
"For convenience to C programmers, #GVariant features powerful varargs-based "
"value construction and destruction.  This feature is designed to be embedded "
"in other libraries."
msgstr ""

#. used by: g_variant_new_array:
#: gvariant.c:721:4
msgid ""
"@child_type must be non-%NULL if @n_children is zero.  Otherwise, the child "
"type is determined by inspecting the first element of the @children array.  "
"If @child_type is non-%NULL then it must be a definite type."
msgstr ""

#. used by: g_variant_new_array:
#: gvariant.c:726:2
msgid ""
"The items of the array are taken from the @children array.  No entry in the "
"@children array may be %NULL."
msgstr ""

#. used by: g_variant_new_array:
#: gvariant.c:729:2
msgid ""
"All items in the array must have the same type, which must be the same as "
"@child_type, if given."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_array:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_new_tuple:
#: gvariant.c:732:2 gvariant.c:812:2
msgid ""
"If the @children are floating references (see g_variant_ref_sink()), the new "
"instance takes ownership of them as if via g_variant_ref_sink()."
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:76:3
msgid ""
"There is a Python-inspired text language for describing #GVariant values.  "
"#GVariant includes a printer for this language and a parser with type "
"inferencing."
msgstr ""

#. used by: SECTION:gvariant
#: gvariant.c:80:195
msgid ""
"<refsect2> <title>Memory Use</title> <para> #GVariant tries to be quite "
"efficient with respect to memory use. This section gives a rough idea of how "
"much memory is used by the current implementation.  The information here is "
"subject to change in the future. </para> <para> The memory allocated by "
"#GVariant can be grouped into 4 broad purposes: memory for serialised data, "
"memory for the type information cache, buffer management memory and memory "
"for the #GVariant structure itself. </para> <refsect3> <title>Serialised "
"Data Memory</title> <para> This is the memory that is used for storing "
"GVariant data in serialised form.  This is what would be sent over the "
"network or what would end up on disk. </para> <para> The amount of memory "
"required to store a boolean is 1 byte.  16, 32 and 64 bit integers and "
"double precision floating point numbers use their \"natural\" size.  Strings "
"(including object path and signature strings) are stored with a nul "
"terminator, and as such use the length of the string plus 1 byte. </para> "
"<para> Maybe types use no space at all to represent the null value and use "
"the same amount of space (sometimes plus one byte) as the equivalent non-"
"maybe-typed value to represent the non-null case. </para> <para> Arrays use "
"the amount of space required to store each of their members, concatenated.  "
"Additionally, if the items stored in an array are not of a fixed-size (ie: "
"strings, other arrays, etc) then an additional framing offset is stored for "
"each item.  The size of this offset is either 1, 2 or 4 bytes depending on "
"the overall size of the container.  Additionally, extra padding bytes are "
"added as required for alignment of child values. </para> <para> Tuples "
"(including dictionary entries) use the amount of space required to store "
"each of their members, concatenated, plus one framing offset (as per arrays) "
"for each non-fixed-sized item in the tuple, except for the last one.  "
"Additionally, extra padding bytes are added as required for alignment of "
"child values. </para> <para> Variants use the same amount of space as the "
"item inside of the variant, plus 1 byte, plus the length of the type string "
"for the item inside the variant. </para> <para> As an example, consider a "
"dictionary mapping strings to variants. In the case that the dictionary is "
"empty, 0 bytes are required for the serialisation. </para> <para> If we add "
"an item \"width\" that maps to the int32 value of 500 then we will use 4 "
"byte to store the int32 (so 6 for the variant containing it) and 6 bytes for "
"the string.  The variant must be aligned to 8 after the 6 bytes of the "
"string, so that's 2 extra bytes.  6 (string) + 2 (padding) + 6 (variant) is "
"14 bytes used for the dictionary entry.  An additional 1 byte is added to "
"the array as a framing offset making a total of 15 bytes. </para> <para> If "
"we add another entry, \"title\" that maps to a nullable string that happens "
"to have a value of null, then we use 0 bytes for the null value (and 3 bytes "
"for the variant to contain it along with its type string) plus 6 bytes for "
"the string.  Again, we need 2 padding bytes.  That makes a total of 6 + 2 + "
"3 = 11 bytes. </para> <para> We now require extra padding between the two "
"items in the array. After the 14 bytes of the first item, that's 2 bytes "
"required.  We now require 2 framing offsets for an extra two bytes.  14 + 2 "
"+ 11 + 2 = 29 bytes to encode the entire two-item dictionary. </para> </"
"refsect3> <refsect3> <title>Type Information Cache</title> <para> For each "
"GVariant type that currently exists in the program a type information "
"structure is kept in the type information cache.  The type information "
"structure is required for rapid deserialisation. </para> <para> Continuing "
"with the above example, if a #GVariant exists with the type \"a{sv}\" then a "
"type information struct will exist for \"a{sv}\", \"{sv}\", \"s\", and \"v"
"\".  Multiple uses of the same type will share the same type information.  "
"Additionally, all single-digit types are stored in read-only static memory "
"and do not contribute to the writable memory footprint of a program using "
"#GVariant. </para> <para> Aside from the type information structures stored "
"in read-only memory, there are two forms of type information.  One is used "
"for container types where there is a single element type: arrays and maybe "
"types.  The other is used for container types where there are multiple "
"element types: tuples and dictionary entries. </para> <para> Array type info "
"structures are 6 * sizeof (void *), plus the memory required to store the "
"type string itself.  This means that on 32bit systems, the cache entry for "
"\"a{sv}\" would require 30 bytes of memory (plus malloc overhead). </para> "
"<para> Tuple type info structures are 6 * sizeof (void *), plus 4 * sizeof "
"(void *) for each item in the tuple, plus the memory required to store the "
"type string itself.  A 2-item tuple, for example, would have a type "
"information structure that consumed writable memory in the size of 14 * "
"sizeof (void *) (plus type string)  This means that on 32bit systems, the "
"cache entry for \"{sv}\" would require 61 bytes of memory (plus malloc "
"overhead). </para> <para> This means that in total, for our \"a{sv}\" "
"example, 91 bytes of type information would be allocated. </para> <para> The "
"type information cache, additionally, uses a #GHashTable to store and lookup "
"the cached items and stores a pointer to this hash table in static storage.  "
"The hash table is freed when there are zero items in the type cache. </para> "
"<para> Although these sizes may seem large it is important to remember that "
"a program will probably only have a very small number of different types of "
"values in it and that only one type information structure is required for "
"many different values of the same type. </para> </refsect3> <refsect3> "
"<title>Buffer Management Memory</title> <para> #GVariant uses an internal "
"buffer management structure to deal with the various different possible "
"sources of serialised data that it uses.  The buffer is responsible for "
"ensuring that the correct call is made when the data is no longer in use by "
"#GVariant.  This may involve a g_free() or a g_slice_free() or even "
"g_mapped_file_unref(). </para> <para> One buffer management structure is "
"used for each chunk of serialised data.  The size of the buffer management "
"structure is 4 * (void *).  On 32bit systems, that's 16 bytes. </para> </"
"refsect3> <refsect3> <title>GVariant structure</title> <para> The size of a "
"#GVariant structure is 6 * (void *).  On 32 bit systems, that's 24 bytes. </"
"para> <para> #GVariant structures only exist if they are explicitly created "
"with API calls.  For example, if a #GVariant is constructed out of "
"serialised data for the example given above (with the dictionary) then "
"although there are 9 individual values that comprise the entire dictionary "
"(two keys, two values, two variants containing the values, two dictionary "
"entries, plus the dictionary itself), only 1 #GVariant instance exists -- "
"the one refering to the dictionary. </para> <para> If calls are made to "
"start accessing the other values then #GVariant instances will exist for "
"those values only for as long as they are in use (ie: until you call "
"g_variant_unref()).  The type information is shared.  The serialised data "
"and the buffer management structure for that serialised data is shared by "
"the child. </para> </refsect3> <refsect3> <title>Summary</title> <para> To "
"put the entire example together, for our dictionary mapping strings to "
"variants (with two entries, as given above), we are using 91 bytes of memory "
"for type information, 29 byes of memory for the serialised data, 16 bytes "
"for buffer management and 24 bytes for the #GVariant instance, or a total of "
"160 bytes, plus malloc overhead.  If we were to use g_variant_get_child_value"
"() to access the two dictionary entries, we would use an additional 48 "
"bytes.  If we were to have other dictionaries of the same type, we would use "
"more memory for the serialised data and buffer management for those "
"dictionaries, but the type information would be shared. </para> </refsect3> "
"</refsect2>"
msgstr ""

#. used by: g_variant_new_tuple:
#: gvariant.c:802:1
msgid ""
"@children: (array length=n_children): the items to make the tuple out of"
msgstr ""

#. used by: g_variant_new_tuple:
#: gvariant.c:804:1
msgid "@returns: a floating reference to a new #GVariant tuple"
msgstr ""

#. used by: g_variant_new_tuple:
#: gvariant.c:806:3
msgid ""
"Creates a new tuple #GVariant out of the items in @children.  The type is "
"determined from the types of @children.  No entry in the @children array may "
"be %NULL."
msgstr ""

#. used by: g_variant_new_tuple:
#: gvariant.c:810:1
msgid "If @n_children is 0 then the unit tuple is constructed."
msgstr ""

#. used by: g_variant_new_dict_entry:
#: gvariant.c:864:1
msgid "@key: a basic #GVariant, the key"
msgstr ""

#. used by: g_variant_new_dict_entry:
#: gvariant.c:865:1
msgid "@value: a #GVariant, the value"
msgstr ""

#. used by: g_variant_new_dict_entry:
#: gvariant.c:866:1
msgid "@returns: a floating reference to a new dictionary entry #GVariant"
msgstr ""

#. used by: g_variant_new_dict_entry:
#: gvariant.c:868:2
msgid ""
"Creates a new dictionary entry #GVariant.  @key and @value must be non-%NULL."
msgstr ""

#. used by: g_variant_new_dict_entry:
#: gvariant.c:871:1
msgid "@key must be a value of a basic type (ie: not a container)."
msgstr ""

#. used by: g_variant_new_dict_entry:
#: gvariant.c:873:2
msgid ""
"If the @key or @value are floating references (see g_variant_ref_sink()), "
"the new instance takes ownership of them as if via g_variant_ref_sink()."
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_lookup:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_lookup_value:
#: gvariant.c:903:1 gvariant.c:955:1
msgid "@dictionary: a dictionary #GVariant"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_lookup:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_lookup_value:
#: gvariant.c:904:1 gvariant.c:956:1
msgid "@key: the key to lookup in the dictionary"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_lookup:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_lookup_value:
#: gvariant.c:908:1 gvariant.c:959:1
msgid "Looks up a value in a dictionary #GVariant."
msgstr ""

#. used by: g_variant_lookup:
#: gvariant.c:910:4
msgid ""
"This function is a wrapper around g_variant_lookup_value() and g_variant_get"
"().  In the case that %NULL would have been returned, this function returns "
"%FALSE.  Otherwise, it unpacks the returned value and returns %TRUE."
msgstr ""

#. used by: g_variant_lookup:
#: gvariant.c:915:1
msgid "See g_variant_get() for information about @format_string."
msgstr ""

#. used by: g_variant_lookup:
#: gvariant.c:917:1
msgid "Returns: %TRUE if a value was unpacked"
msgstr ""

#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_lookup:
#. #-#-#-#-#  gvariant.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_variant_lookup_value:
#: gvariant.c:919:1 gvariant.c:983:1
msgid "Since: 2.28"
msgstr ""

#. used by: g_variant_lookup_value:
#: gvariant.c:957:1
msgid "@expected_type: a #GVariantType, or %NULL"
msgstr ""

#. used by: g_variant_lookup_value:
#: gvariant.c:961:4
msgid ""
"This function works with dictionaries of the type <literal>a{s*}</literal> "
"(and equally well with type <literal>a{o*}</literal>, but we only further "
"discuss the string case for sake of clarity)."
msgstr ""

#. used by: g_variant_lookup_value:
#: gvariant.c:966:7
msgid ""
"In the event that @dictionary has the type <literal>a{sv}</literal>, the "
"@expected_type string specifies what type of value is expected to be inside "
"of the variant.  If the value inside the variant has a different type then "
"%NULL is returned.  In the event that @dictionary has a value type other "
"than <literal>v</literal> then @expected_type must directly match the key "
"type and it is used to unpack the value directly or an error occurs."
msgstr ""

#. used by: g_variant_lookup_value:
#: gvariant.c:974:2
msgid "In either case, if @key is not found in @dictionary, %NULL is returned."
msgstr ""

#. used by: g_variant_lookup_value:
#: gvariant.c:977:3
msgid ""
"If the key is found and the value has the correct type, it is returned.  If "
"@expected_type was specified then any non-%NULL return value will have this "
"type."
msgstr ""

#. used by: g_variant_lookup_value:
#: gvariant.c:981:1
msgid "Returns: the value of the dictionary key, or %NULL"
msgstr ""
