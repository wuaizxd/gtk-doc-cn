# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-14 21:51-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

# used by: g_memdup:
#: gstrfuncs.c:113:1
msgid "@mem: the memory to copy."
msgstr ""

# used by: g_memdup:
#: gstrfuncs.c:114:1
msgid "@byte_size: the number of bytes to copy."
msgstr ""

# #used by: g_memdup:
#: gstrfuncs.c:116:2
msgid ""
"Allocates @byte_size bytes of memory, and copies @byte_size bytes into it "
"from @mem. If @mem is %NULL it returns %NULL."
msgstr ""

# #used by: g_memdup:
#: gstrfuncs.c:119:2
msgid ""
"Returns: a pointer to the newly-allocated copy of the memory, or %NULL if "
"@mem is %NULL."
msgstr ""

# used by: g_strsignal:
#: gstrfuncs.c:1405:2
msgid ""
"@signum: the signal number. See the <literal>signal</literal> documentation"
msgstr ""

# #used by: g_strsignal:
#: gstrfuncs.c:1408:4
msgid ""
"Returns a string describing the given signal, e.g. |$_1_$|Segmentation fault|"
"$_1_$|. You should use this function in preference to strsignal(), because "
"it returns a string in UTF-8 encoding, and since not all platforms support "
"the strsignal() function."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strdup:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strndup:
#: gstrfuncs.c:141:1 gstrfuncs.c:85:1
msgid "@str: the string to duplicate"
msgstr ""

# #used by: g_strsignal:
#: gstrfuncs.c:1413:3
msgid ""
"Returns: a UTF-8 string describing the signal. If the signal is unknown, it "
"returns |$_1_$|unknown signal (&lt;signum&gt;)|$_1_$|. The string can only "
"be used until the next call to g_strsignal()"
msgstr ""

# used by: g_strndup:
#: gstrfuncs.c:142:1
msgid "@n: the maximum number of bytes to copy from @str"
msgstr ""

# #used by: g_strndup:
#: gstrfuncs.c:144:5
msgid ""
"Duplicates the first @n bytes of a string, returning a newly-allocated "
"buffer @n + 1 bytes long which will always be nul-terminated. If @str is "
"less than @n bytes long the buffer is padded with nuls. If @str is %NULL it "
"returns %NULL. The returned value should be freed when no longer needed."
msgstr ""

# #used by: g_strndup:
#: gstrfuncs.c:150:4
msgid ""
"<note><para> To copy a number of characters from a UTF-8 encoded string, use "
"g_utf8_strncpy() instead. </para></note>"
msgstr ""

# #used by: g_strndup:
#: gstrfuncs.c:155:2
msgid ""
"Returns: a newly-allocated buffer containing the first @n bytes of @str, nul-"
"terminated"
msgstr ""

# used by: g_strlcpy:
#: gstrfuncs.c:1599:1
msgid "@dest: destination buffer"
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strlcpy:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strlcat:
#: gstrfuncs.c:1600:1 gstrfuncs.c:1659:1
msgid "@src: source buffer"
msgstr ""

# used by: g_strlcpy:
#: gstrfuncs.c:1601:1
msgid "@dest_size: length of @dest in bytes"
msgstr ""

# #used by: g_strlcpy:
#: gstrfuncs.c:1603:4
msgid ""
"Portability wrapper that calls strlcpy() on systems which have it, and "
"emulates strlcpy() otherwise. Copies @src to @dest; @dest is guaranteed to "
"be nul-terminated; @src must be nul-terminated; @dest_size is the buffer "
"size, not the number of chars to copy."
msgstr ""

# #used by: g_strlcpy:
#: gstrfuncs.c:1608:5
msgid ""
"At most dest_size - 1 characters will be copied. Always nul-terminates "
"(unless dest_size == 0). This function does <emphasis>not</emphasis> "
"allocate memory. Unlike strncpy(), this function doesn't pad dest (so it's "
"often faster). It returns the size of the attempted result, strlen (src), so "
"if @retval >= @dest_size, truncation occurred."
msgstr ""

# #used by: g_strlcpy:
#: gstrfuncs.c:1614:3
msgid ""
"<note><para>Caveat: strlcpy() is supposedly more secure than strcpy() or "
"strncpy(), but if you really want to avoid screwups, g_strdup() is an even "
"better idea.</para></note>"
msgstr ""

# #used by: g_strlcpy:
#: gstrfuncs.c:1618:1
msgid "Returns: length of @src"
msgstr ""

# used by: g_strlcat:
#: gstrfuncs.c:1658:1
msgid "@dest: destination buffer, already containing one nul-terminated string"
msgstr ""

# used by: g_strlcat:
#: gstrfuncs.c:1660:2
msgid ""
"@dest_size: length of @dest buffer in bytes (not length of existing string "
"inside @dest)"
msgstr ""

# #used by: g_strlcat:
#: gstrfuncs.c:1663:4
msgid ""
"Portability wrapper that calls strlcat() on systems which have it, and "
"emulates it otherwise. Appends nul-terminated @src string to @dest, "
"guaranteeing nul-termination for @dest. The total size of @dest won't exceed "
"@dest_size."
msgstr ""

# #used by: g_strlcat:
#: gstrfuncs.c:1668:5
msgid ""
"At most dest_size - 1 characters will be copied. Unlike strncat, dest_size "
"is the full size of dest, not the space left over. This function does NOT "
"allocate memory. This always NUL terminates (unless siz == 0 or there were "
"no NUL characters in the dest_size characters of dest to start with)."
msgstr ""

# #used by: g_strlcat:
#: gstrfuncs.c:1674:3
msgid ""
"<note><para>Caveat: this is supposedly a more secure alternative to strcat() "
"or strncat(), but for real security g_strconcat() is harder to mess up.</"
"para></note>"
msgstr ""

# #used by: g_strlcat:
#: gstrfuncs.c:1678:3
msgid ""
"Returns: size of attempted result, which is MIN (dest_size, strlen (original "
"dest)) + strlen (src), so if retval >= dest_size, truncation occurred."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strdown:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strup:
#: gstrfuncs.c:1721:1 gstrfuncs.c:1752:1
msgid "@str: a string."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strdown:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strup:
#: gstrfuncs.c:1722:1 gstrfuncs.c:1753:1
msgid "@len: length of @str in bytes, or -1 if @str is nul-terminated."
msgstr ""

# #used by: g_ascii_strdown:
#: gstrfuncs.c:1724:1
msgid "Converts all upper case ASCII letters to lower case ASCII letters."
msgstr ""

# #used by: g_ascii_strdown:
#: gstrfuncs.c:1726:5
msgid ""
"Return value: a newly-allocated string, with all the upper case characters "
"in @str converted to lower case, with semantics that exactly match "
"g_ascii_tolower(). (Note that this is unlike the old g_strdown(), which "
"modified the string in place.)"
msgstr ""

# #used by: g_ascii_strup:
#: gstrfuncs.c:1755:1
msgid "Converts all lower case ASCII letters to upper case ASCII letters."
msgstr ""

# #used by: g_ascii_strup:
#: gstrfuncs.c:1757:5
msgid ""
"Return value: a newly allocated string, with all the lower case characters "
"in @str converted to upper case, with semantics that exactly match "
"g_ascii_toupper(). (Note that this is unlike the old g_strup(), which "
"modified the string in place.)"
msgstr ""

# used by: g_strnfill:
#: gstrfuncs.c:178:1
msgid "@length: the length of the new string"
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strdown:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strup:
#: gstrfuncs.c:1783:1 gstrfuncs.c:1814:1
msgid "@string: the string to convert."
msgstr ""

# #used by: g_strdown:
#: gstrfuncs.c:1785:1
msgid "Converts a string to lower case."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strdown:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strup:
#: gstrfuncs.c:1787:1 gstrfuncs.c:1818:1
msgid "Return value: the string"
msgstr ""

# #used by: g_strdown:
#: gstrfuncs.c:1789:3
msgid ""
"Deprecated:2.2: This function is totally broken for the reasons discussed in "
"the g_strncasecmp() docs - use g_ascii_strdown() or g_utf8_strdown() instead."
msgstr ""

# used by: g_strnfill:
#: gstrfuncs.c:179:1
msgid "@fill_char: the byte to fill the string with"
msgstr ""

# #used by: g_strnfill:
#: gstrfuncs.c:181:2
msgid ""
"Creates a new string @length bytes long filled with @fill_char. The returned "
"string should be freed when no longer needed."
msgstr ""

# #used by: g_strup:
#: gstrfuncs.c:1816:1
msgid "Converts a string to upper case."
msgstr ""

# #used by: g_strup:
#: gstrfuncs.c:1820:2
msgid ""
"Deprecated:2.2: This function is totally broken for the reasons discussed in "
"the g_strncasecmp() docs - use g_ascii_strup() or g_utf8_strup() instead."
msgstr ""

# #used by: g_strnfill:
#: gstrfuncs.c:184:1
msgid "Returns: a newly-allocated string filled the @fill_char"
msgstr ""

# used by: g_strreverse:
#: gstrfuncs.c:1844:1
msgid "@string: the string to reverse"
msgstr ""

# #used by: g_strreverse:
#: gstrfuncs.c:1846:3
msgid ""
"Reverses all of the bytes in a string. For example, <literal>g_strreverse (|"
"$_1_$|abcdef|$_1_$|)</literal> will result in |$_1_$|fedcba|$_1_$|."
msgstr ""

# #used by: g_strreverse:
#: gstrfuncs.c:1850:3
msgid ""
"Note that g_strreverse() doesn't work on UTF-8 strings containing multibyte "
"characters. For that purpose, use g_utf8_strreverse()."
msgstr ""

# #used by: g_strreverse:
#: gstrfuncs.c:1854:1
msgid "Returns: the same pointer passed in as @string"
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_tolower:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_toupper:
#: gstrfuncs.c:1885:1 gstrfuncs.c:1909:1
msgid "@c: any character."
msgstr ""

# #used by: g_ascii_tolower:
#: gstrfuncs.c:1887:1
msgid "Convert a character to ASCII lower case."
msgstr ""

# #used by: g_ascii_tolower:
#: gstrfuncs.c:1889:7
msgid ""
"Unlike the standard C library tolower() function, this only recognizes "
"standard ASCII letters and ignores the locale, returning all non-ASCII "
"characters unchanged, even if they are lower case letters in a particular "
"character set. Also unlike the standard library function, this takes and "
"returns a char, not an int, so don't call it on %EOF but no need to worry "
"about casting to #guchar before passing a possibly non-ASCII character in."
msgstr ""

# #used by: g_ascii_tolower:
#: gstrfuncs.c:1897:3
msgid ""
"Return value: the result of converting @c to lower case. If @c is not an "
"ASCII upper case letter, @c is returned unchanged."
msgstr ""

# #used by: g_ascii_toupper:
#: gstrfuncs.c:1911:1
msgid "Convert a character to ASCII upper case."
msgstr ""

# #used by: g_ascii_toupper:
#: gstrfuncs.c:1913:7
msgid ""
"Unlike the standard C library toupper() function, this only recognizes "
"standard ASCII letters and ignores the locale, returning all non-ASCII "
"characters unchanged, even if they are upper case letters in a particular "
"character set. Also unlike the standard library function, this takes and "
"returns a char, not an int, so don't call it on %EOF but no need to worry "
"about casting to #guchar before passing a possibly non-ASCII character in."
msgstr ""

# #used by: g_ascii_toupper:
#: gstrfuncs.c:1921:3
msgid ""
"Return value: the result of converting @c to upper case. If @c is not an "
"ASCII lower case letter, @c is returned unchanged."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_digit_value:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_xdigit_value:
#: gstrfuncs.c:1933:1 gstrfuncs.c:1953:1
msgid "@c: an ASCII character."
msgstr ""

# #used by: g_ascii_digit_value:
#: gstrfuncs.c:1935:4
msgid ""
"Determines the numeric value of a character as a decimal digit. Differs from "
"g_unichar_digit_value() because it takes a char, so there's no worry about "
"sign extension if characters are signed."
msgstr ""

# #used by: g_ascii_digit_value:
#: gstrfuncs.c:1940:2
msgid ""
"Return value: If @c is a decimal digit (according to g_ascii_isdigit()), its "
"numeric value. Otherwise, -1."
msgstr ""

# #used by: g_ascii_xdigit_value:
#: gstrfuncs.c:1955:4
msgid ""
"Determines the numeric value of a character as a hexidecimal digit. Differs "
"from g_unichar_xdigit_value() because it takes a char, so there's no worry "
"about sign extension if characters are signed."
msgstr ""

# #used by: g_ascii_xdigit_value:
#: gstrfuncs.c:1960:2
msgid ""
"Return value: If @c is a hex digit (according to g_ascii_isxdigit()), its "
"numeric value. Otherwise, -1."
msgstr ""

# #used by: g_ascii_strcasecmp:
#: gstrfuncs.c:1975:2
msgid "@s1: string to compare with @s2. @s2: string to compare with @s1."
msgstr ""

# #used by: g_ascii_strcasecmp:
#: gstrfuncs.c:1978:1
msgid "Compare two strings, ignoring the case of ASCII characters."
msgstr ""

# #used by: g_ascii_strcasecmp:
#: gstrfuncs.c:1980:3
msgid ""
"Unlike the BSD strcasecmp() function, this only recognizes standard ASCII "
"letters and ignores the locale, treating all non-ASCII bytes as if they are "
"not letters."
msgstr ""

# #used by: g_ascii_strcasecmp:
#: gstrfuncs.c:1984:7
msgid ""
"This function should be used only on strings that are known to be in "
"encodings where the bytes corresponding to ASCII letters always represent "
"themselves. This includes UTF-8 and the ISO-8859-* charsets, but not for "
"instance double-byte encodings like the Windows Codepage 932, where the "
"trailing bytes of double-byte characters include all ASCII letters. If you "
"compare two CP932 strings using this function, you will get false matches."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ascii_strcasecmp:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ascii_strncasecmp:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strcasecmp:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strncasecmp:
#: gstrfuncs.c:1992:2 gstrfuncs.c:2033:2 gstrfuncs.c:2070:2 gstrfuncs.c:2118:2
msgid ""
"Return value: 0 if the strings match, a negative value if @s1 &lt; @s2, or a "
"positive value if @s1 &gt; @s2."
msgstr ""

# used by: g_stpcpy:
#: gstrfuncs.c:201:1
msgid "@dest: destination buffer."
msgstr ""

# #used by: g_ascii_strncasecmp:
#: gstrfuncs.c:2018:3
msgid ""
"@s1: string to compare with @s2. @s2: string to compare with @s1. @n:  "
"number of characters to compare."
msgstr ""

# used by: g_stpcpy:
#: gstrfuncs.c:202:1
msgid "@src: source string."
msgstr ""

# #used by: g_ascii_strncasecmp:
#: gstrfuncs.c:2022:2
msgid ""
"Compare @s1 and @s2, ignoring the case of ASCII characters and any "
"characters after the first @n in each string."
msgstr ""

# #used by: g_ascii_strncasecmp:
#: gstrfuncs.c:2025:3
msgid ""
"Unlike the BSD strcasecmp() function, this only recognizes standard ASCII "
"letters and ignores the locale, treating all non-ASCII characters as if they "
"are not letters."
msgstr ""

# #used by: g_ascii_strncasecmp:
#: gstrfuncs.c:2029:3
msgid ""
"The same warning as in g_ascii_strcasecmp() applies: Use this function only "
"on strings known to be in encodings where bytes corresponding to ASCII "
"letters always represent themselves."
msgstr ""

# #used by: g_stpcpy:
#: gstrfuncs.c:204:4
msgid ""
"Copies a nul-terminated string into the dest buffer, include the trailing "
"nul, and return a pointer to the trailing nul byte. This is useful for "
"concatenating multiple strings together without having to repeatedly scan "
"for the end."
msgstr ""

# #used by: g_strcasecmp:
#: gstrfuncs.c:2064:2
msgid "@s1: a string. @s2: a string to compare with @s1."
msgstr ""

# #used by: g_strcasecmp:
#: gstrfuncs.c:2067:2
msgid ""
"A case-insensitive string comparison, corresponding to the standard "
"strcasecmp() function on platforms which support it."
msgstr ""

# #used by: g_strcasecmp:
#: gstrfuncs.c:2073:2
msgid ""
"Deprecated:2.2: See g_strncasecmp() for a discussion of why this function is "
"deprecated and how to replace it."
msgstr ""

# #used by: g_stpcpy:
#: gstrfuncs.c:209:1
msgid "Return value: a pointer to trailing nul byte."
msgstr ""

# #used by: g_strncasecmp:
#: gstrfuncs.c:2109:3
msgid ""
"@s1: a string. @s2: a string to compare with @s1. @n: the maximum number of "
"characters to compare."
msgstr ""

# #used by: g_strncasecmp:
#: gstrfuncs.c:2113:4
msgid ""
"A case-insensitive string comparison, corresponding to the standard "
"strncasecmp() function on platforms which support it. It is similar to "
"g_strcasecmp() except it only compares the first @n characters of the "
"strings."
msgstr ""

# #used by: g_strncasecmp:
#: gstrfuncs.c:2121:9
msgid ""
"Deprecated:2.2: The problem with g_strncasecmp() is that it does the "
"comparison by calling toupper()/tolower(). These functions are locale-"
"specific and operate on single bytes. However, it is impossible to handle "
"things correctly from an I18N standpoint by operating on bytes, since "
"characters may be multibyte. Thus g_strncasecmp() is broken if your string "
"is guaranteed to be ASCII, since it's locale-sensitive, and it's broken if "
"your string is localized, since it doesn't work on many encodings at all, "
"including UTF-8, EUC-JP, etc."
msgstr ""

# #used by: g_strncasecmp:
#: gstrfuncs.c:2131:3
msgid ""
"There are therefore two replacement functions: g_ascii_strncasecmp(), which "
"only works on ASCII and is not locale-sensitive, and g_utf8_casefold(), "
"which is good for case-insensitive sorting of UTF-8."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strdup_vprintf:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strdup_printf:
#: gstrfuncs.c:235:2 gstrfuncs.c:262:2
msgid ""
"@format: a standard printf() format string, but notice <link linkend=|$_1_$|"
"string-precision|$_1_$|>string precision pitfalls</link>"
msgstr ""

# used by: g_strdup_vprintf:
#: gstrfuncs.c:237:1
msgid "@args: the list of parameters to insert into the format string"
msgstr ""

# used by: g_strsplit:
#: gstrfuncs.c:2385:1
msgid "@string: a string to split."
msgstr ""

# used by: g_strsplit:
#: gstrfuncs.c:2386:3
msgid ""
"@delimiter: a string which specifies the places at which to split the "
"string. The delimiter is not included in any of the resulting strings, "
"unless @max_tokens is reached."
msgstr ""

# used by: g_strsplit:
#: gstrfuncs.c:2389:2
msgid ""
"@max_tokens: the maximum number of pieces to split @string into. If this is "
"less than 1, the string is split completely."
msgstr ""

# #used by: g_strdup_vprintf:
#: gstrfuncs.c:239:4
msgid ""
"Similar to the standard C vsprintf() function but safer, since it calculates "
"the maximum space required and allocates memory to hold the result. The "
"returned string should be freed with g_free() when no longer needed."
msgstr ""

# #used by: g_strsplit:
#: gstrfuncs.c:2392:3
msgid ""
"Splits a string into a maximum of @max_tokens pieces, using the given "
"@delimiter. If @max_tokens is reached, the remainder of @string is appended "
"to the last token."
msgstr ""

# #used by: g_strsplit:
#: gstrfuncs.c:2396:6
msgid ""
"As a special case, the result of splitting the empty string |$_1_$||$_1_$| "
"is an empty vector, not a vector containing a single string. The reason for "
"this special case is that being able to represent a empty vector is "
"typically more useful than consistent handling of empty elements. If you do "
"need to represent empty elements, you'll need to check for the empty string "
"before calling g_strsplit()."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strsplit:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strsplit_set:
#: gstrfuncs.c:2403:2 gstrfuncs.c:2488:2
msgid ""
"Return value: a newly-allocated %NULL-terminated array of strings. Use "
"g_strfreev() to free it."
msgstr ""

# #used by: g_strdup_vprintf:
#: gstrfuncs.c:244:2
msgid ""
"See also g_vasprintf(), which offers the same functionality, but "
"additionally returns the length of the allocated string."
msgstr ""

# used by: g_strsplit_set:
#: gstrfuncs.c:2460:1
msgid "@string: The string to be tokenized"
msgstr ""

# used by: g_strsplit_set:
#: gstrfuncs.c:2461:2
msgid ""
"@delimiters: A nul-terminated string containing bytes that are used to split "
"the string."
msgstr ""

# used by: g_strsplit_set:
#: gstrfuncs.c:2463:2
msgid ""
"@max_tokens: The maximum number of tokens to split @string into. If this is "
"less than 1, the string is split completely"
msgstr ""

# #used by: g_strsplit_set:
#: gstrfuncs.c:2466:4
msgid ""
"Splits @string into a number of tokens not containing any of the characters "
"in @delimiter. A token is the (possibly empty) longest string that does not "
"contain any of the characters in @delimiters. If @max_tokens is reached, the "
"remainder is appended to the last token."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strdup_vprintf:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strdup_printf:
#: gstrfuncs.c:247:1 gstrfuncs.c:271:1
msgid "Returns: a newly-allocated string holding the result"
msgstr ""

# #used by: g_strsplit_set:
#: gstrfuncs.c:2471:3
msgid ""
"For example the result of g_strsplit_set (|$_1_$|abc:def/ghi|$_1_$|, |$_1_"
"$|:/|$_1_$|, -1) is a %NULL-terminated vector containing the three strings |"
"$_1_$|abc|$_1_$|, |$_1_$|def|$_1_$|, and |$_1_$|ghi|$_1_$|."
msgstr ""

# #used by: g_strsplit_set:
#: gstrfuncs.c:2475:2
msgid ""
"The result if g_strsplit_set (|$_1_$|:def/ghi:|$_1_$|, |$_1_$|:/|$_1_$|, -1) "
"is a %NULL-terminated vector containing the four strings |$_1_$||$_1_$|, |"
"$_1_$|def|$_1_$|, |$_1_$|ghi|$_1_$|, and |$_1_$||$_1_$|."
msgstr ""

# #used by: g_strsplit_set:
#: gstrfuncs.c:2478:6
msgid ""
"As a special case, the result of splitting the empty string |$_1_$||$_1_$| "
"is an empty vector, not a vector containing a single string. The reason for "
"this special case is that being able to represent a empty vector is "
"typically more useful than consistent handling of empty elements. If you do "
"need to represent empty elements, you'll need to check for the empty string "
"before calling g_strsplit_set()."
msgstr ""

# #used by: g_strsplit_set:
#: gstrfuncs.c:2485:2
msgid ""
"Note that this function works on bytes not characters, so it can't be used "
"to delimit UTF-8 strings for anything but ASCII characters."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strsplit_set:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strip_context:
#: gstrfuncs.c:2491:1 gstrfuncs.c:2969:1
msgid "Since: 2.4"
msgstr ""

# used by: g_strfreev:
#: gstrfuncs.c:2558:1
msgid "@str_array: a %NULL-terminated array of strings to free."
msgstr ""

# #used by: g_strfreev:
#: gstrfuncs.c:2560:2
msgid ""
"Frees a %NULL-terminated array of strings, and the array itself. If called "
"on a %NULL value, g_strfreev() simply returns."
msgstr ""

# used by: g_strdupv:
#: gstrfuncs.c:2579:1
msgid "@str_array: %NULL-terminated array of strings."
msgstr ""

# #used by: g_strdupv:
#: gstrfuncs.c:2581:4
msgid ""
"Copies %NULL-terminated array of strings. The copy is a deep copy; the new "
"array should be freed by first freeing each string, then the array itself. "
"g_strfreev() does this for you. If called on a %NULL value, g_strdupv() "
"simply returns %NULL."
msgstr ""

# #used by: g_strdupv:
#: gstrfuncs.c:2586:1
msgid "Return value: a new %NULL-terminated array of strings."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strjoinv:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strjoin:
#: gstrfuncs.c:2618:1 gstrfuncs.c:2670:1
msgid "@separator: a string to insert between each of the strings, or %NULL"
msgstr ""

# used by: g_strjoinv:
#: gstrfuncs.c:2619:1
msgid "@str_array: a %NULL-terminated array of strings to join"
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strjoinv:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strjoin:
#: gstrfuncs.c:2621:3 gstrfuncs.c:2673:3
msgid ""
"Joins a number of strings together to form one long string, with the "
"optional @separator inserted between each of them. The returned string "
"should be freed with g_free()."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strjoinv:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strjoin:
#: gstrfuncs.c:2625:2 gstrfuncs.c:2677:2
msgid ""
"Returns: a newly-allocated string containing all of the strings joined "
"together, with @separator between them"
msgstr ""

# used by: g_strdup_printf:
#: gstrfuncs.c:264:1
msgid "@Varargs: the parameters to insert into the format string"
msgstr ""

# #used by: g_strdup_printf:
#: gstrfuncs.c:266:4
msgid ""
"Similar to the standard C sprintf() function but safer, since it calculates "
"the maximum space required and allocates memory to hold the result. The "
"returned string should be freed with g_free() when no longer needed."
msgstr ""

# used by: g_strjoin:
#: gstrfuncs.c:2671:1
msgid "@Varargs: a %NULL-terminated list of strings to join"
msgstr ""

# used by: g_strstr_len:
#: gstrfuncs.c:2739:1
msgid "@haystack: a string."
msgstr ""

# used by: g_strstr_len:
#: gstrfuncs.c:2740:3
msgid ""
"@haystack_len: the maximum length of @haystack. Note that -1 is a valid "
"length, if @haystack is nul-terminated, meaning it will search through the "
"whole string."
msgstr ""

# used by: g_strstr_len:
#: gstrfuncs.c:2743:1
msgid "@needle: the string to search for."
msgstr ""

# #used by: g_strstr_len:
#: gstrfuncs.c:2745:3
msgid ""
"Searches the string @haystack for the first occurrence of the string "
"@needle, limiting the length of the search to @haystack_len."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strstr_len:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strrstr:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strrstr_len:
#: gstrfuncs.c:2749:2 gstrfuncs.c:2801:2 gstrfuncs.c:2852:2
msgid "Return value: a pointer to the found occurrence, or %NULL if not found."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strrstr:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strrstr_len:
#: gstrfuncs.c:2795:1 gstrfuncs.c:2844:1
msgid "@haystack: a nul-terminated string."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strrstr:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strrstr_len:
#: gstrfuncs.c:2796:1 gstrfuncs.c:2846:1
msgid "@needle: the nul-terminated string to search for."
msgstr ""

# #used by: g_strrstr:
#: gstrfuncs.c:2798:2
msgid ""
"Searches the string @haystack for the last occurrence of the string @needle."
msgstr ""

# used by: g_strrstr_len:
#: gstrfuncs.c:2845:1
msgid "@haystack_len: the maximum length of @haystack."
msgstr ""

# #used by: g_strrstr_len:
#: gstrfuncs.c:2848:3
msgid ""
"Searches the string @haystack for the last occurrence of the string @needle, "
"limiting the length of the search to @haystack_len."
msgstr ""

# #used by: g_strconcat:
#: gstrfuncs.c:289:2
msgid ""
"@string1: the first string to add, which must not be %NULL @Varargs: a %NULL-"
"terminated list of strings to append to the string"
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_str_has_suffix:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_str_has_prefix:
#: gstrfuncs.c:2899:1 gstrfuncs.c:2929:1
msgid "@str: a nul-terminated string."
msgstr ""

# used by: g_str_has_suffix:
#: gstrfuncs.c:2900:1
msgid "@suffix: the nul-terminated suffix to look for."
msgstr ""

# #used by: g_str_has_suffix:
#: gstrfuncs.c:2902:1
msgid "Looks whether the string @str ends with @suffix."
msgstr ""

# #used by: g_str_has_suffix:
#: gstrfuncs.c:2904:1
msgid "Return value: %TRUE if @str end with @suffix, %FALSE otherwise."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ascii_strtoull:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_str_has_suffix:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_str_has_prefix:
#: gstrfuncs.c:2906:1 gstrfuncs.c:2936:1 gstrfuncs.c:852:1
msgid "Since: 2.2"
msgstr ""

# #used by: g_strconcat:
#: gstrfuncs.c:292:2
msgid ""
"Concatenates all of the given strings into one long string. The returned "
"string should be freed with g_free() when no longer needed."
msgstr ""

# used by: g_str_has_prefix:
#: gstrfuncs.c:2930:1
msgid "@prefix: the nul-terminated prefix to look for."
msgstr ""

# #used by: g_str_has_prefix:
#: gstrfuncs.c:2932:1
msgid "Looks whether the string @str begins with @prefix."
msgstr ""

# #used by: g_str_has_prefix:
#: gstrfuncs.c:2934:1
msgid "Return value: %TRUE if @str begins with @prefix, %FALSE otherwise."
msgstr ""

# #used by: g_strconcat:
#: gstrfuncs.c:295:3
msgid ""
"Note that this function is usually not the right function to use to assemble "
"a translated message from pieces, since proper translation often requires "
"the pieces to be reordered."
msgstr ""

# used by: g_strip_context:
#: gstrfuncs.c:2960:1
msgid "@msgid: a string"
msgstr ""

# used by: g_strip_context:
#: gstrfuncs.c:2961:1
msgid "@msgval: another string"
msgstr ""

# #used by: g_strip_context:
#: gstrfuncs.c:2963:1
msgid "An auxiliary function for gettext() support (see Q_())."
msgstr ""

# #used by: g_strip_context:
#: gstrfuncs.c:2965:3
msgid ""
"Return value: @msgval, unless @msgval is identical to @msgid and contains a "
"'|' character, in which case a pointer to the substring of msgid after the "
"first '|' character is returned."
msgstr ""

# used by: g_strv_length:
#: gstrfuncs.c:2988:1
msgid "@str_array: a %NULL-terminated array of strings."
msgstr ""

# #used by: g_strconcat:
#: gstrfuncs.c:299:3
msgid ""
"<warning><para>The variable argument list <emphasis>must</emphasis> end with "
"%NULL. If you forget the %NULL, g_strconcat() will start appending random "
"memory junk to your string.</para></warning>"
msgstr ""

# #used by: g_strv_length:
#: gstrfuncs.c:2990:2
msgid ""
"Returns the length of the given %NULL-terminated string array @str_array."
msgstr ""

# #used by: g_strv_length:
#: gstrfuncs.c:2993:1
msgid "Return value: length of @str_array."
msgstr ""

# #used by: g_strv_length:
#: gstrfuncs.c:2995:1
msgid "Since: 2.6"
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_dpgettext:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_dpgettext2:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_dgettext:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_dngettext:
#: gstrfuncs.c:3013:2 gstrfuncs.c:3078:2 gstrfuncs.c:3180:2 gstrfuncs.c:3258:2
msgid ""
"@domain: the translation domain to use, or %NULL to use the domain set with "
"textdomain()"
msgstr ""

# used by: g_dpgettext:
#: gstrfuncs.c:3015:2
msgid ""
"@msgctxtid: a combined message context and message id, separated by a |$_2_$|"
"004 character"
msgstr ""

# used by: g_dpgettext:
#: gstrfuncs.c:3017:1
msgid "@msgidoffset: the offset of the message id in @msgctxid"
msgstr ""

# #used by: g_dpgettext:
#: gstrfuncs.c:3019:7
msgid ""
"This function is a variant of g_dgettext() which supports a disambiguating "
"message context. GNU gettext uses the '|$_2_$|004' character to separate the "
"message context and message id in @msgctxtid. If 0 is passed as "
"@msgidoffset, this function will fall back to trying to use the deprecated "
"convention of using |$_1_$|||$_1_$| as a separation character."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_dpgettext:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_dpgettext2:
#: gstrfuncs.c:3027:2 gstrfuncs.c:3088:2
msgid ""
"This uses g_dgettext() internally.  See that functions for differences with "
"dgettext() proper."
msgstr ""

# #used by: g_strconcat:
#: gstrfuncs.c:303:1
msgid "Returns: a newly-allocated string containing all the string arguments"
msgstr ""

# #used by: g_dpgettext:
#: gstrfuncs.c:3030:2
msgid ""
"Applications should normally not use this function directly, but use the C_"
"() macro for translations with context."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_dpgettext:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_dpgettext2:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_dgettext:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_dngettext:
#: gstrfuncs.c:3033:1 gstrfuncs.c:3094:1 gstrfuncs.c:3215:1 gstrfuncs.c:3271:1
msgid "Returns: The translated string"
msgstr ""

# #used by: g_dpgettext:
#: gstrfuncs.c:3035:1
msgid "Since: 2.16"
msgstr ""

# used by: g_dpgettext2:
#: gstrfuncs.c:3080:1
msgid "@context: the message context"
msgstr ""

# used by: g_dpgettext2:
#: gstrfuncs.c:3081:1
msgid "@msgid: the message"
msgstr ""

# #used by: g_dpgettext2:
#: gstrfuncs.c:3083:4
msgid ""
"This function is a variant of g_dgettext() which supports a disambiguating "
"message context. GNU gettext uses the '|$_2_$|004' character to separate the "
"message context and message id in @msgctxtid."
msgstr ""

# #used by: g_dpgettext2:
#: gstrfuncs.c:3091:2
msgid ""
"This function differs from C_() in that it is not a macro and thus you may "
"use non-string-literals as context and msgid arguments."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_dpgettext2:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_dgettext:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_dngettext:
#: gstrfuncs.c:3096:1 gstrfuncs.c:3217:1 gstrfuncs.c:3273:1
msgid "Since: 2.18"
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_dgettext:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_dcgettext:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_dngettext:
#: gstrfuncs.c:3182:1 gstrfuncs.c:3233:1 gstrfuncs.c:3260:1
msgid "@msgid: message to translate"
msgstr ""

# #used by: g_dgettext:
#: gstrfuncs.c:3184:3
msgid ""
"This function is a wrapper of dgettext() which does not translate the "
"message if the default domain as set with textdomain() has no translations "
"for the current locale."
msgstr ""

# #used by: g_dgettext:
#: gstrfuncs.c:3188:8
msgid ""
"The advantage of using this function over dgettext() proper is that "
"libraries using this function (like GTK+) will not use translations if the "
"application using the library does not have translations for the current "
"locale.  This results in a consistent English-only interface instead of one "
"having partial translations.  For this feature to work, the call to "
"textdomain() and setlocale() should precede any g_dgettext() invocations.  "
"For GTK+, it means calling textdomain() before gtk_init or its variants."
msgstr ""

# #used by: g_dgettext:
#: gstrfuncs.c:3197:10
msgid ""
"This function disables translations if and only if upon its first call all "
"the following conditions hold: <itemizedlist> <listitem>@domain is not "
"%NULL</listitem> <listitem>textdomain() has been called to set a default "
"text domain</listitem> <listitem>there is no translations available for the "
"default text domain and the current locale</listitem> <listitem>current "
"locale is not |$_1_$|C|$_1_$| or any English locales (those starting with |"
"$_1_$|en_|$_1_$|)</listitem> </itemizedlist>"
msgstr ""

# #used by: g_dgettext:
#: gstrfuncs.c:3208:3
msgid ""
"Note that this behavior may not be desired for example if an application has "
"its untranslated messages in a language other than English.  In those cases "
"the application should call textdomain() after initializing GTK+."
msgstr ""

# #used by: g_dgettext:
#: gstrfuncs.c:3212:2
msgid ""
"Applications should normally not use this function directly, but use the _() "
"macro for translations."
msgstr ""

# used by: g_dcgettext:
#: gstrfuncs.c:3231:2
msgid ""
"@domain: (allow-none): the translation domain to use, or %NULL to use the "
"domain set with textdomain()"
msgstr ""

# used by: g_dcgettext:
#: gstrfuncs.c:3234:1
msgid "@category: a locale category"
msgstr ""

# #used by: g_dcgettext:
#: gstrfuncs.c:3236:4
msgid ""
"This is a variant of g_dgettext() that allows specifying a locale category "
"instead of always using %LC_MESSAGES. See g_dgettext() for more information "
"about how this functions differs from calling dcgettext() directly."
msgstr ""

# #used by: g_dcgettext:
#: gstrfuncs.c:3241:1
msgid "Returns: the translated string for the given locale category"
msgstr ""

# #used by: g_dcgettext:
#: gstrfuncs.c:3243:1
msgid "Since: 2.26"
msgstr ""

# used by: g_dngettext:
#: gstrfuncs.c:3261:1
msgid "@msgid_plural: plural form of the message"
msgstr ""

# used by: g_dngettext:
#: gstrfuncs.c:3262:1
msgid "@n: the quantity for which translation is needed"
msgstr ""

# #used by: g_dngettext:
#: gstrfuncs.c:3264:3
msgid ""
"This function is a wrapper of dngettext() which does not translate the "
"message if the default domain as set with textdomain() has no translations "
"for the current locale."
msgstr ""

# #used by: g_dngettext:
#: gstrfuncs.c:3268:2
msgid ""
"See g_dgettext() for details of how this differs from dngettext() proper."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strtod:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strtod:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strtoull:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strtoll:
#: gstrfuncs.c:345:1 gstrfuncs.c:398:1 gstrfuncs.c:828:1 gstrfuncs.c:870:1
msgid "@nptr:    the string to convert to a numeric value."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_strtod:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strtod:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strtoull:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strtoll:
#: gstrfuncs.c:346:2 gstrfuncs.c:399:2 gstrfuncs.c:829:2 gstrfuncs.c:871:2
msgid ""
"@endptr:  if non-%NULL, it returns the character after the last character "
"used in the conversion."
msgstr ""

# #used by: g_strtod:
#: gstrfuncs.c:349:4
msgid ""
"Converts a string to a #gdouble value. It calls the standard strtod() "
"function to handle the conversion, but if the string is not completely "
"converted it attempts the conversion again with g_ascii_strtod(), and "
"returns the best match."
msgstr ""

# #used by: g_strtod:
#: gstrfuncs.c:354:6
msgid ""
"This function should seldomly be used. The normal situation when reading "
"numbers not for human consumption is to use g_ascii_strtod(). Only when you "
"know that you must expect both locale formatted and C formatted numbers "
"should you use this. Make sure that you don't pass strings such as comma "
"separated lists of values, since the commas may be interpreted as a decimal "
"point in some locales, causing unexpected results."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_strtod:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ascii_strtod:
#: gstrfuncs.c:361:1 gstrfuncs.c:426:1
msgid "Return value: the #gdouble value."
msgstr ""

# #used by: g_ascii_strtod:
#: gstrfuncs.c:402:1
msgid "Converts a string to a #gdouble value."
msgstr ""

# #used by: g_ascii_strtod:
#: gstrfuncs.c:404:5
msgid ""
"This function behaves like the standard strtod() function does in the C "
"locale. It does this without actually changing the current locale, since "
"that would not be thread-safe. A limitation of the implementation is that "
"this function will still accept localized versions of infinities and NANs."
msgstr ""

# #used by: g_ascii_strtod:
#: gstrfuncs.c:410:4
msgid ""
"This function is typically used when reading configuration files or other "
"non-user input that should be locale independent. To handle input from the "
"user you should normally use the locale-sensitive system strtod() function."
msgstr ""

# #used by: g_ascii_strtod:
#: gstrfuncs.c:415:2
msgid ""
"To convert from a #gdouble to a string in a locale-insensitive way, use "
"g_ascii_dtostr()."
msgstr ""

# #used by: g_ascii_strtod:
#: gstrfuncs.c:418:4
msgid ""
"If the correct value would cause overflow, plus or minus %HUGE_VAL is "
"returned (according to the sign of the value), and %ERANGE is stored in "
"%errno. If the correct value would cause underflow, zero is returned and "
"%ERANGE is stored in %errno."
msgstr ""

# #used by: g_ascii_strtod:
#: gstrfuncs.c:423:2
msgid ""
"This function resets %errno before calling strtod() so that you can reliably "
"detect overflow and underflow."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_dtostr:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_formatd:
#: gstrfuncs.c:581:1 gstrfuncs.c:606:1
msgid "@buffer: A buffer to place the resulting string in"
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_dtostr:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_formatd:
#: gstrfuncs.c:582:1 gstrfuncs.c:607:1
msgid "@buf_len: The length of the buffer."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_dtostr:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_formatd:
#: gstrfuncs.c:583:1 gstrfuncs.c:610:1
msgid "@d: The #gdouble to convert"
msgstr ""

# #used by: g_ascii_dtostr:
#: gstrfuncs.c:585:2
msgid "Converts a #gdouble to a string, using the '.' as decimal point."
msgstr ""

# #used by: g_ascii_dtostr:
#: gstrfuncs.c:588:5
msgid ""
"This functions generates enough precision that converting the string back "
"using g_ascii_strtod() gives the same machine-number (on machines with IEEE "
"compatible 64bit doubles). It is guaranteed that the size of the resulting "
"string will never be larger than @G_ASCII_DTOSTR_BUF_SIZE bytes."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ascii_dtostr:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ascii_formatd:
#: gstrfuncs.c:594:1 gstrfuncs.c:620:1
msgid "Return value: The pointer to the buffer with the converted string."
msgstr ""

# used by: g_ascii_formatd:
#: gstrfuncs.c:608:2
msgid ""
"@format: The printf()-style format to use for the code to use for converting."
msgstr ""

# #used by: g_ascii_formatd:
#: gstrfuncs.c:612:4
msgid ""
"Converts a #gdouble to a string, using the '.' as decimal point. To format "
"the number you pass in a printf()-style format string. Allowed conversion "
"specifiers are 'e', 'E', 'f', 'F', 'g' and 'G'."
msgstr ""

# #used by: g_ascii_formatd:
#: gstrfuncs.c:617:2
msgid ""
"If you just want to want to serialize the value into a string, use "
"g_ascii_dtostr()."
msgstr ""

# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strtoull:
# #-#-#-#-#  gstrfuncs.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ascii_strtoll:
#: gstrfuncs.c:831:1 gstrfuncs.c:873:1
msgid "@base:    to be used for the conversion, 2..36 or 0"
msgstr ""

# #used by: g_ascii_strtoull:
#: gstrfuncs.c:833:5
msgid ""
"Converts a string to a #guint64 value. This function behaves like the "
"standard strtoull() function does in the C locale. It does this without "
"actually changing the current locale, since that would not be thread-safe."
msgstr ""

# #used by: g_ascii_strtoull:
#: gstrfuncs.c:839:4
msgid ""
"This function is typically used when reading configuration files or other "
"non-user input that should be locale independent. To handle input from the "
"user you should normally use the locale-sensitive system strtoull() function."
msgstr ""

# #used by: g_ascii_strtoull:
#: gstrfuncs.c:844:5
msgid ""
"If the correct value would cause overflow, %G_MAXUINT64 is returned, and "
"%ERANGE is stored in %errno.  If the base is outside the valid range, zero "
"is returned, and %EINVAL is stored in %errno.  If the string conversion "
"fails, zero is returned, and @endptr returns @nptr (if @endptr is non-%NULL)."
msgstr ""

# #used by: g_ascii_strtoull:
#: gstrfuncs.c:850:1
msgid "Return value: the #guint64 value or zero on error."
msgstr ""

# #used by: g_strdup:
#: gstrfuncs.c:87:3
msgid ""
"Duplicates a string. If @str is %NULL it returns %NULL. The returned string "
"should be freed with g_free() when no longer needed."
msgstr ""

# #used by: g_ascii_strtoll:
#: gstrfuncs.c:875:5
msgid ""
"Converts a string to a #gint64 value. This function behaves like the "
"standard strtoll() function does in the C locale. It does this without "
"actually changing the current locale, since that would not be thread-safe."
msgstr ""

# #used by: g_ascii_strtoll:
#: gstrfuncs.c:881:4
msgid ""
"This function is typically used when reading configuration files or other "
"non-user input that should be locale independent. To handle input from the "
"user you should normally use the locale-sensitive system strtoll() function."
msgstr ""

# #used by: g_ascii_strtoll:
#: gstrfuncs.c:886:5
msgid ""
"If the correct value would cause overflow, %G_MAXINT64 or %G_MININT64 is "
"returned, and %ERANGE is stored in %errno.  If the base is outside the valid "
"range, zero is returned, and %EINVAL is stored in %errno.  If the string "
"conversion fails, zero is returned, and @endptr returns @nptr (if @endptr is "
"non-%NULL)."
msgstr ""

# #used by: g_ascii_strtoll:
#: gstrfuncs.c:892:1
msgid "Return value: the #gint64 value or zero on error."
msgstr ""

# #used by: g_ascii_strtoll:
#: gstrfuncs.c:894:1
msgid "Since: 2.12"
msgstr ""

# #used by: g_strdup:
#: gstrfuncs.c:91:1
msgid "Returns: a newly-allocated copy of @str"
msgstr ""

# used by: g_strerror:
#: gstrfuncs.c:924:2
msgid ""
"@errnum: the system error number. See the standard C %errno documentation"
msgstr ""

# #used by: g_strerror:
#: gstrfuncs.c:927:4
msgid ""
"Returns a string corresponding to the given error code, e.g. |$_1_$|no such "
"process|$_1_$|. You should use this function in preference to strerror(), "
"because it returns a string in UTF-8 encoding, and since not all platforms "
"support the strerror() function."
msgstr ""

# #used by: g_strerror:
#: gstrfuncs.c:932:3
msgid ""
"Returns: a UTF-8 string describing the error code. If the error code is "
"unknown, it returns |$_1_$|unknown error (&lt;code&gt;)|$_1_$|. The string "
"can only be used until the next call to g_strerror()"
msgstr ""
