<!-- ##### SECTION Title ##### -->
标准宏

<!-- ##### SECTION Short_Description ##### -->
常见宏。

<!-- ##### SECTION Long_Description ##### -->
<para>
这些宏提供一些常用的功能。
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### SECTION Image ##### -->


<!-- ##### MACRO G_OS_WIN32 ##### -->
<para>
这些宏只在Windows上定义。所以你要使用针对于Windows的特定代码 "&num;ifdef G_OS_WIN32"。
</para>



<!-- ##### MACRO G_OS_BEOS ##### -->
<para>
这些宏只在BeOS上定义。所以你要使用针对于BeOS的特定代码 "&num;ifdef G_OS_BEOS"。
</para>



<!-- ##### MACRO G_OS_UNIX ##### -->
<para>
这些宏只在UNIX上定义。所以你要使用针对于UNIX的特定代码  "&num;ifdef G_OS_UNIX"。
</para>



<!-- ##### MACRO G_DIR_SEPARATOR ##### -->
<para>
目录分隔符。’/’是UNIX机器上的，’\’是Windows环境下的。
</para>



<!-- ##### MACRO G_DIR_SEPARATOR_S ##### -->
<para>
目录分隔字符串。”/”是UNIX机器上的，”\”是Windows环境下的。
</para>



<!-- ##### MACRO G_IS_DIR_SEPARATOR ##### -->
<para>
检查一个字符是否是目录分隔符。'/'在UNIX机器上，以及'\' 和 '/' 在Windows下，会返回一个%TRUE。
</para>

@c: 一个字符
@Since: 2.6


<!-- ##### MACRO G_SEARCHPATH_SEPARATOR ##### -->
<para>
搜索路径分隔符。':'是UNIX机器上的，';'则是Windows下的。
</para>



<!-- ##### MACRO G_SEARCHPATH_SEPARATOR_S ##### -->
<para>
搜索路径分隔字符串。':'是UNIX机器上的，';'则是Windows下的。
</para>



<!-- ##### MACRO TRUE ##### -->
<para>
定义#gboolean类型的%TRUE。
</para>



<!-- ##### MACRO FALSE ##### -->
<para>
定义#gboolean类型的% FALSE。
</para>



<!-- ##### MACRO NULL ##### -->
<para>
定义标准的%NULL 指针。
</para>



<!-- ##### MACRO MIN ##### -->
<para>
计算@a 和 @b哪个小。
</para>

@a: 一个数值变量。
@b: 一个数值变量。
@Returns: @a 和 @b之中更小的


<!-- ##### MACRO MAX ##### -->
<para>
计算@a 和 @b哪个大。
</para>

@a: 一个数值变量。
@b: 一个数值变量。
@Returns: @a 和 @b之中更大的


<!-- ##### MACRO ABS ##### -->
<para>
计算@a的绝对值。绝对值仅仅是对任何数去掉负号。
</para>
<para>
例如：
<itemizedlist>
<listitem><para>
ABS(-10) 绝对值为10.
</para></listitem>
<listitem><para>
ABS(10)  还是 10.
</para></listitem>
</itemizedlist>
</para>

@a: 一个数值变量。
@Returns: @a的绝对值。


<!-- ##### MACRO CLAMP ##### -->
<para>
确保@x在@low 和 @high之间。如果@low大于@high，结果是未知的。
</para>
<para>
例如：
<itemizedlist>
<listitem><para>
CLAMP(5, 10, 15) 结果是 10。
</para></listitem>
<listitem><para>
CLAMP(15, 5, 10) 结果是10.
</para></listitem>
<listitem><para>
CLAMP(20, 15, 25) 结果是20.
</para></listitem>
</itemizedlist>
</para>

@x: the value to clamp.【不清楚这里如何理解】
@low: 允许的最小值。
@high: 允许的最大值。
@Returns: the value of @x clamped to the range between @low and @high. 【不清楚这里如何理解】


<!-- ##### MACRO G_STRUCT_MEMBER ##### -->
<para>
返回一个结构体指定偏移量的成员，使用指定类型
</para>

@member_type: 结构体类型。
@struct_p:指向结构体的指针
@struct_offset: 自结构体起始的偏移，字节类型。
@Returns:结构体成员。


<!-- ##### MACRO G_STRUCT_MEMBER_P ##### -->
<para>
返回一个结构体的既定偏移量的无类型指针。
</para>

@struct_p: 指向结构体的指针。
@struct_offset: 自结构体起始的偏移，字节类型。
@Returns:指向@struct_p 加 @struct_offset 个字节数的无类型指针。


<!-- ##### MACRO G_STRUCT_OFFSET ##### -->
<para>
返回偏移量，字节类型，结构体的成员。
</para>

@struct_type: 结构体类型, e.g. <structname>GtkWidget</structname>.
@member:结构体的域。e.g. <structfield>window</structfield>。
@Returns: @struct_type的@member的偏移量



<!-- ##### MACRO G_MEM_ALIGN ##### -->
<para>
指明当前平台内存对齐的字节数。
</para>



<!-- ##### MACRO G_CONST_RETURN ##### -->
<para>
如果 %G_DISABLE_CONST_RETURNS 定义了, this macro expands to nothing.
默认情况下，, the macro expands to <literal>const</literal>. The macro 
should be used in place of <literal>const</literal> for functions that 
return a value that should not be modified. The purpose of this macro is 
to allow us to turn on <literal>const</literal> for returned constant 
strings by default, while allowing programmers who find that annoying to 
turn it off. This macro should only be used for return values and for
<emphasis>out</emphasis> parameters, it doesn't make sense for 
<emphasis>in</emphasis> parameters. 【不清楚这里如何理解】
</para>



