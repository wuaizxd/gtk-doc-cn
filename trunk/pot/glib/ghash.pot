# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-23 10:05-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

#. used by: GHashFunc:
#: ghash.c:102:5
msgid ""
"<!-- FIXME: Need more here. --> The hash values should be evenly distributed "
"over a fairly large range? The modulus is taken with the hash table size (a "
"prime number) to find the 'bucket' to place each key into. The function "
"should also be very fast, since it is called for each key lookup."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_init:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_destroy:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_lookup:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_insert:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_replace:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_steal:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_steal_all:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach_steal:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_find:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_size:
#: ghash.c:1029:1 ghash.c:1051:1 ghash.c:1112:1 ghash.c:1133:1 ghash.c:1177:1
#: ghash.c:1247:1 ghash.c:1275:1 ghash.c:1301:1 ghash.c:1336:1 ghash.c:1383:1
#: ghash.c:650:1 ghash.c:862:1 ghash.c:883:1
msgid "@hash_table: a #GHashTable."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_insert:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_replace:
#: ghash.c:1030:1 ghash.c:1052:1
msgid "@key: a key to insert."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_insert:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_replace:
#: ghash.c:1031:1 ghash.c:1053:1
msgid "@value: the value to associate with the key."
msgstr ""

#. used by: g_hash_table_insert:
#: ghash.c:1033:1
msgid "Inserts a new key and value into a #GHashTable."
msgstr ""

#. used by: g_hash_table_insert:
#: ghash.c:1035:5
msgid ""
"If the key already exists in the #GHashTable its current value is replaced "
"with the new value. If you supplied a @value_destroy_func when creating the "
"#GHashTable, the old value is freed using that function. If you supplied a "
"@key_destroy_func when creating the #GHashTable, the passed key is freed "
"using that function."
msgstr ""

#. used by: g_hash_table_replace:
#: ghash.c:1055:6
msgid ""
"Inserts a new key and value into a #GHashTable similar to g_hash_table_insert"
"(). The difference is that if the key already exists in the #GHashTable, it "
"gets replaced by the new key. If you supplied a @value_destroy_func when "
"creating the #GHashTable, the old value is freed using that function. If you "
"supplied a @key_destroy_func when creating the #GHashTable, the old key is "
"freed using that function."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GHashFunc:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GHFunc:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: GHRFunc:
#: ghash.c:111:1 ghash.c:122:1 ghash.c:91:1
msgid "@key: a key."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_steal:
#: ghash.c:1113:1 ghash.c:1134:1
msgid "@key: the key to remove."
msgstr ""

#. used by: g_hash_table_remove:
#: ghash.c:1115:1
msgid "Removes a key and its associated value from a #GHashTable."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_remove:
#: ghash.c:1117:4 ghash.c:782:4
msgid ""
"If the #GHashTable was created using g_hash_table_new_full(), the key and "
"value are freed using the supplied destroy functions, otherwise you have to "
"make sure that any dynamically allocated values are freed yourself."
msgstr ""

#. used by: GHFunc:
#: ghash.c:112:1
msgid "@value: the value corresponding to the key."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_steal:
#: ghash.c:1122:1 ghash.c:1139:1
msgid ""
"Return value: %TRUE if the key was found and removed from the #GHashTable."
msgstr ""

#. used by: GHFunc:
#: ghash.c:113:1
msgid "@user_data: user data passed to g_hash_table_foreach()."
msgstr ""

#. used by: g_hash_table_steal:
#: ghash.c:1136:2
msgid ""
"Removes a key and its associated value from a #GHashTable without calling "
"the key and value destroy functions."
msgstr ""

#. used by: GHFunc:
#: ghash.c:115:3
msgid ""
"Specifies the type of the function passed to g_hash_table_foreach(). It is "
"called with each key/value pair, together with the @user_data parameter "
"which is passed to g_hash_table_foreach()."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_lookup_extended:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_remove_all:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_get_keys:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_get_values:
#. #-#-#-#-#  ghash.pot (PACKAGE VERSION)  #-#-#-#-#
#. #-#-#-#-#  ghash.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_freeze:
#. #-#-#-#-#  ghash.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_thaw:
#: ghash.c:1150:1 ghash.c:1399:1 ghash.c:1433:1 ghash.c:910:1 ghash.h:118:1
#: ghash.h:127:1
msgid "@hash_table: a #GHashTable"
msgstr ""

#. used by: g_hash_table_remove_all:
#: ghash.c:1152:1
msgid "Removes all keys and their associated values from a #GHashTable."
msgstr ""

#. used by: g_hash_table_remove_all:
#: ghash.c:1154:4
msgid ""
"If the #GHashTable was created using g_hash_table_new_full(), the keys and "
"values are freed using the supplied destroy functions, otherwise you have to "
"make sure that any dynamically allocated values are freed yourself."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_remove_all:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_steal_all:
#: ghash.c:1159:1 ghash.c:1182:1
msgid "Since: 2.12"
msgstr ""

#. used by: g_hash_table_steal_all:
#: ghash.c:1179:2
msgid ""
"Removes all keys and their associated values from a #GHashTable without "
"calling the key and value destroy functions."
msgstr ""

#. used by: GHRFunc:
#: ghash.c:123:1
msgid "@value: the value associated with the key."
msgstr ""

#. used by: GHRFunc:
#: ghash.c:124:1
msgid "@user_data: user data passed to g_hash_table_remove()."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach_steal:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach:
#: ghash.c:1248:1 ghash.c:1276:1 ghash.c:1302:1
msgid "@func: the function to call for each key/value pair."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach_steal:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach:
#: ghash.c:1249:1 ghash.c:1277:1 ghash.c:1303:1
msgid "@user_data: user data to pass to the function."
msgstr ""

#. used by: GHRFunc:
#: ghash.c:125:2
msgid ""
"@Returns: %TRUE if the key/value pair should be removed from the #GHashTable."
msgstr ""

#. used by: g_hash_table_foreach_remove:
#: ghash.c:1251:5
msgid ""
"Calls the given function for each key/value pair in the #GHashTable. If the "
"function returns %TRUE, then the key/value pair is removed from the "
"#GHashTable. If you supplied key or value destroy functions when creating "
"the #GHashTable, they are used to free the memory allocated for the removed "
"keys and values."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach_steal:
#: ghash.c:1257:2 ghash.c:1283:2
msgid ""
"See #GHashTableIter for an alternative way to loop over the key/value pairs "
"in the hash table."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_foreach_steal:
#: ghash.c:1260:1 ghash.c:1286:1
msgid "Return value: the number of key/value pairs removed."
msgstr ""

#. used by: g_hash_table_foreach_steal:
#: ghash.c:1279:3
msgid ""
"Calls the given function for each key/value pair in the #GHashTable. If the "
"function returns %TRUE, then the key/value pair is removed from the "
"#GHashTable, but no key or value destroy functions are called."
msgstr ""

#. used by: GHRFunc:
#: ghash.c:128:5
msgid ""
"Specifies the type of the function passed to g_hash_table_foreach_remove(). "
"It is called with each key/value pair, together with the @user_data "
"parameter passed to g_hash_table_foreach_remove(). It should return %TRUE if "
"the key/value pair should be removed from the #GHashTable."
msgstr ""

#. used by: g_hash_table_foreach:
#: ghash.c:1305:6
msgid ""
"Calls the given function for each of the key/value pairs in the "
"#GHashTable.  The function is passed the key and value of each pair, and the "
"given @user_data parameter.  The hash table may not be modified while "
"iterating over it (you can't add/remove items). To remove all items matching "
"a predicate, use g_hash_table_foreach_remove()."
msgstr ""

#. used by: g_hash_table_foreach:
#: ghash.c:1312:2
msgid ""
"See g_hash_table_find() for performance caveats for linear order searches in "
"contrast to g_hash_table_lookup()."
msgstr ""

#. used by: g_hash_table_find:
#: ghash.c:1337:1
msgid ""
"@predicate:  function to test the key/value pairs for a certain property."
msgstr ""

#. used by: g_hash_table_find:
#: ghash.c:1338:1
msgid "@user_data:  user data to pass to the function."
msgstr ""

#. used by: g_hash_table_find:
#: ghash.c:1340:4
msgid ""
"Calls the given function for key/value pairs in the #GHashTable until "
"@predicate returns %TRUE.  The function is passed the key and value of each "
"pair, and the given @user_data parameter. The hash table may not be modified "
"while iterating over it (you can't add/remove items)."
msgstr ""

#. used by: g_hash_table_find:
#: ghash.c:1345:8
msgid ""
"Note, that hash tables are really only optimized for forward lookups, i.e. "
"g_hash_table_lookup(). So code that frequently issues g_hash_table_find() or "
"g_hash_table_foreach() (e.g. in the order of once per every entry in a hash "
"table) should probably be reworked to use additional or different data "
"structures for reverse lookups (keep in mind that an O(n) find/foreach "
"operation issued for all n values in a hash table ends up needing O(n*n) "
"operations)."
msgstr ""

#. used by: g_hash_table_find:
#: ghash.c:1354:3
msgid ""
"Return value: The value of the first key/value pair is returned, for which "
"func evaluates to %TRUE. If no pair with the requested property is found, "
"%NULL is returned."
msgstr ""

#. used by: g_hash_table_find:
#: ghash.c:1358:1
msgid "Since: 2.4"
msgstr ""

#. used by: GEqualFunc:
#: ghash.c:137:1
msgid "@a: a value."
msgstr ""

#. used by: GEqualFunc:
#: ghash.c:138:1
msgid "@b: a value to compare with."
msgstr ""

#. used by: g_hash_table_size:
#: ghash.c:1385:1
msgid "Returns the number of elements contained in the #GHashTable."
msgstr ""

#. used by: g_hash_table_size:
#: ghash.c:1387:1
msgid "Return value: the number of key/value pairs in the #GHashTable."
msgstr ""

#. used by: GEqualFunc:
#: ghash.c:139:1
msgid "@Returns: %TRUE if @a = @b; %FALSE otherwise."
msgstr ""

#. used by: g_hash_table_get_keys:
#: ghash.c:1401:2
msgid ""
"Retrieves every key inside @hash_table. The returned data is valid until "
"@hash_table is modified."
msgstr ""

#. used by: g_hash_table_get_keys:
#: ghash.c:1404:4
msgid ""
"Return value: a #GList containing all the keys inside the hash table. The "
"content of the list is owned by the hash table and should not be modified or "
"freed. Use g_list_free() when done using the list."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_get_keys:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_get_values:
#: ghash.c:1409:1 ghash.c:1443:1
msgid "Since: 2.14"
msgstr ""

#. used by: GEqualFunc:
#: ghash.c:141:3
msgid ""
"Specifies the type of a function used to test two values for equality. The "
"function should return %TRUE if both values are equal and %FALSE otherwise."
msgstr ""

#. used by: g_hash_table_get_values:
#: ghash.c:1435:2
msgid ""
"Retrieves every value inside @hash_table. The returned data is valid until "
"@hash_table is modified."
msgstr ""

#. used by: g_hash_table_get_values:
#: ghash.c:1438:4
msgid ""
"Return value: a #GList containing all the values inside the hash table. The "
"content of the list is owned by the hash table and should not be modified or "
"freed. Use g_list_free() when done using the list."
msgstr ""

#. used by: GHashTableIter:
#: ghash.c:149:4
msgid ""
"A GHashTableIter structure represents an iterator that can be used to "
"iterate over the elements of a #GHashTable. GHashTableIter structures are "
"typically allocated on the stack and then initialized with "
"g_hash_table_iter_init()."
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:43:1
msgid "@title: Hash Tables"
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:44:2
msgid ""
"@short_description: associations between keys and values so that given a key "
"the value can be found quickly"
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:47:3
msgid ""
"A #GHashTable provides associations between keys and values which is "
"optimized so that given a key, the associated value can be found very "
"quickly."
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:51:5
msgid ""
"Note that neither keys nor values are copied when inserted into the "
"#GHashTable, so they must exist for the lifetime of the #GHashTable. This "
"means that the use of static strings is OK, but temporary strings (i.e. "
"those created in buffers and those returned by GTK+ widgets) should be "
"copied with g_strdup() before being inserted."
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:57:6
msgid ""
"If keys or values are dynamically allocated, you must be careful to ensure "
"that they are freed when they are removed from the #GHashTable, and also "
"when they are overwritten by new insertions into the #GHashTable. It is also "
"not advisable to mix static strings and dynamically-allocated strings in a "
"#GHashTable, because it then becomes difficult to determine whether the "
"string should be freed."
msgstr ""

#. used by: g_hash_table_new:
#: ghash.c:580:6
msgid ""
"@hash_func: a function to create a hash value from a key. Hash values are "
"used to determine where keys are stored within the #GHashTable data "
"structure. The g_direct_hash(), g_int_hash(), g_int64_hash(), g_double_hash"
"() and g_str_hash() functions are provided for some common types of keys. If "
"hash_func is %NULL, g_direct_hash() is used."
msgstr ""

#. used by: g_hash_table_new:
#: ghash.c:586:6
msgid ""
"@key_equal_func: a function to check two keys for equality.  This is used "
"when looking up keys in the #GHashTable.  The g_direct_equal(), g_int_equal"
"(), g_int64_equal(), g_double_equal() and g_str_equal() functions are "
"provided for the most common types of keys. If @key_equal_func is %NULL, "
"keys are compared directly in a similar fashion to g_direct_equal(), but "
"without the overhead of a function call."
msgstr ""

#. used by: g_hash_table_new:
#: ghash.c:593:1
msgid "Creates a new #GHashTable with a reference count of 1."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_new:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_new_full:
#: ghash.c:595:1 ghash.c:620:1
msgid "Return value: a new #GHashTable."
msgstr ""

#. used by: g_hash_table_new_full:
#: ghash.c:607:1
msgid "@hash_func: a function to create a hash value from a key."
msgstr ""

#. used by: g_hash_table_new_full:
#: ghash.c:608:1
msgid "@key_equal_func: a function to check two keys for equality."
msgstr ""

#. used by: g_hash_table_new_full:
#: ghash.c:609:3
msgid ""
"@key_destroy_func: a function to free the memory allocated for the key used "
"when removing the entry from the #GHashTable or %NULL if you don't want to "
"supply such a function."
msgstr ""

#. used by: g_hash_table_new_full:
#: ghash.c:612:3
msgid ""
"@value_destroy_func: a function to free the memory allocated for the value "
"used when removing the entry from the #GHashTable or %NULL if you don't want "
"to supply such a function."
msgstr ""

#. used by: g_hash_table_new_full:
#: ghash.c:616:3
msgid ""
"Creates a new #GHashTable like g_hash_table_new() with a reference count of "
"1 and allows to specify functions to free the memory allocated for the key "
"and value that get called when removing the entry from the #GHashTable."
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:64:1
msgid "To create a #GHashTable, use g_hash_table_new()."
msgstr ""

#. used by: g_hash_table_iter_init:
#: ghash.c:649:1
msgid "@iter: an uninitialized #GHashTableIter."
msgstr ""

#. used by: g_hash_table_iter_init:
#: ghash.c:652:6
msgid ""
"Initializes a key/value pair iterator and associates it with @hash_table. "
"Modifying the hash table after calling this function invalidates the "
"returned iterator. |[ GHashTableIter iter; gpointer key, value;"
msgstr ""

#. used by: g_hash_table_iter_init:
#: ghash.c:659:6
msgid ""
"g_hash_table_iter_init (&iter, hash_table); while (g_hash_table_iter_next "
"(&iter, &key, &value)) { /&ast; do something with key and value &ast;/ } ]|"
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:66:2
msgid ""
"To insert a key and value into a #GHashTable, use g_hash_table_insert()."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_init:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_next:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_get_hash_table:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_steal:
#: ghash.c:666:1 ghash.c:696:1 ghash.c:745:1 ghash.c:787:1 ghash.c:805:1
msgid "Since: 2.16"
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_next:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_get_hash_table:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_remove:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_iter_steal:
#: ghash.c:686:1 ghash.c:739:1 ghash.c:775:1 ghash.c:797:1
msgid "@iter: an initialized #GHashTableIter."
msgstr ""

#. used by: g_hash_table_iter_next:
#: ghash.c:687:1
msgid "@key: a location to store the key, or %NULL."
msgstr ""

#. used by: g_hash_table_iter_next:
#: ghash.c:688:1
msgid "@value: a location to store the value, or %NULL."
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:69:2
msgid ""
"To lookup a value corresponding to a given key, use g_hash_table_lookup() "
"and g_hash_table_lookup_extended()."
msgstr ""

#. used by: g_hash_table_iter_next:
#: ghash.c:690:3
msgid ""
"Advances @iter and retrieves the key and/or value that are now pointed to as "
"a result of this advancement. If %FALSE is returned, @key and @value are not "
"set, and the iterator becomes invalid."
msgstr ""

#. used by: g_hash_table_iter_next:
#: ghash.c:694:1
msgid "Return value: %FALSE if the end of the #GHashTable has been reached."
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:72:1
msgid "To remove a key and value, use g_hash_table_remove()."
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:74:3
msgid ""
"To call a function for each key and value pair use g_hash_table_foreach() or "
"use a iterator to iterate over the key/value pairs in the hash table, see "
"#GHashTableIter."
msgstr ""

#. used by: g_hash_table_iter_get_hash_table:
#: ghash.c:741:1
msgid "Returns the #GHashTable associated with @iter."
msgstr ""

#. used by: g_hash_table_iter_get_hash_table:
#: ghash.c:743:1
msgid "Return value: the #GHashTable associated with @iter."
msgstr ""

#. used by: g_hash_table_iter_remove:
#: ghash.c:777:4
msgid ""
"Removes the key/value pair currently pointed to by the iterator from its "
"associated #GHashTable. Can only be called after g_hash_table_iter_next() "
"returned %TRUE, and cannot be called more than once for the same key/value "
"pair."
msgstr ""

#. used by: SECTION:hash_tables
#: ghash.c:78:1
msgid "To destroy a #GHashTable use g_hash_table_destroy()."
msgstr ""

#. used by: g_hash_table_iter_steal:
#: ghash.c:799:5
msgid ""
"Removes the key/value pair currently pointed to by the iterator from its "
"associated #GHashTable, without calling the key and value destroy functions. "
"Can only be called after g_hash_table_iter_next() returned %TRUE, and cannot "
"be called more than once for the same key/value pair."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_ref:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_unref:
#: ghash.c:816:1 ghash.c:837:1
msgid "@hash_table: a valid #GHashTable."
msgstr ""

#. used by: g_hash_table_ref:
#: ghash.c:818:2
msgid ""
"Atomically increments the reference count of @hash_table by one. This "
"function is MT-safe and may be called from any thread."
msgstr ""

#. used by: g_hash_table_ref:
#: ghash.c:821:1
msgid "Return value: the passed in #GHashTable."
msgstr ""

#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_ref:
#. #-#-#-#-#  ghash.pot~ (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_unref:
#: ghash.c:823:1 ghash.c:844:1
msgid "Since: 2.10"
msgstr ""

#. used by: g_hash_table_unref:
#: ghash.c:839:4
msgid ""
"Atomically decrements the reference count of @hash_table by one. If the "
"reference count drops to 0, all keys and values will be destroyed, and all "
"memory allocated by the hash table is released. This function is MT-safe and "
"may be called from any thread."
msgstr ""

#. used by: GHashTable:
#: ghash.c:84:3
msgid ""
"The #GHashTable struct is an opaque data structure to represent a <link "
"linkend=\"glib-Hash-Tables\">Hash Table</link>. It should only be accessed "
"via the following functions."
msgstr ""

#. used by: g_hash_table_destroy:
#: ghash.c:864:6
msgid ""
"Destroys all keys and values in the #GHashTable and decrements its reference "
"count by 1. If keys and/or values are dynamically allocated, you should "
"either free them first or create the #GHashTable with destroy notifiers "
"using g_hash_table_new_full(). In the latter case the destroy functions you "
"supplied will be called on all keys and values during the destruction phase."
msgstr ""

#. used by: g_hash_table_lookup:
#: ghash.c:884:1
msgid "@key: the key to look up."
msgstr ""

#. used by: g_hash_table_lookup:
#: ghash.c:886:4
msgid ""
"Looks up a key in a #GHashTable. Note that this function cannot distinguish "
"between a key that is not present and one which is present and has the value "
"%NULL. If you need this distinction, use g_hash_table_lookup_extended()."
msgstr ""

#. used by: g_hash_table_lookup:
#: ghash.c:891:1
msgid "Return value: the associated value, or %NULL if the key is not found."
msgstr ""

#. used by: g_hash_table_lookup_extended:
#: ghash.c:911:1
msgid "@lookup_key: the key to look up"
msgstr ""

#. used by: g_hash_table_lookup_extended:
#: ghash.c:912:1
msgid "@orig_key: return location for the original key, or %NULL"
msgstr ""

#. used by: g_hash_table_lookup_extended:
#: ghash.c:913:1
msgid "@value: return location for the value associated with the key, or %NULL"
msgstr ""

#. used by: g_hash_table_lookup_extended:
#: ghash.c:915:4
msgid ""
"Looks up a key in the #GHashTable, returning the original key and the "
"associated value and a #gboolean which is %TRUE if the key was found. This "
"is useful if you need to free the memory allocated for the original key, for "
"example before calling g_hash_table_remove()."
msgstr ""

#. used by: GHashFunc:
#: ghash.c:92:1
msgid "@Returns: the hash value corresponding to the key."
msgstr ""

#. used by: g_hash_table_lookup_extended:
#: ghash.c:920:3
msgid ""
"You can actually pass %NULL for @lookup_key to test whether the %NULL key "
"exists, provided the hash and equal functions of @hash_table are %NULL-safe."
msgstr ""

#. used by: g_hash_table_lookup_extended:
#: ghash.c:924:1
msgid "Return value: %TRUE if the key was found in the #GHashTable."
msgstr ""

#. used by: GHashFunc:
#: ghash.c:94:2
msgid ""
"Specifies the type of the hash function which is passed to g_hash_table_new"
"() when a #GHashTable is created."
msgstr ""

#. used by: GHashFunc:
#: ghash.c:97:4
msgid ""
"The function is passed a key and should return a #guint hash value. The "
"functions g_direct_hash(), g_int_hash() and g_str_hash() provide hash "
"functions which can be used when the key is a #gpointer, #gint, and #gchar* "
"respectively."
msgstr ""

#. #-#-#-#-#  ghash.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_freeze:
#. #-#-#-#-#  ghash.pot (PACKAGE VERSION)  #-#-#-#-#
#. used by: g_hash_table_thaw:
#: ghash.h:120:2 ghash.h:129:2
msgid ""
"This function is deprecated and will be removed in the next major release of "
"GLib. It does nothing."
msgstr ""
