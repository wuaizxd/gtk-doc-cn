msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-04-18 23:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: tut_tools.xml:0(None)
msgid "translator-credits"
msgstr ""

#: tut_tools.xml:100(para)
msgid ""
"The API documentation for most of the GLib, GObject, GTK+ and GNOME "
"libraries is built with a combination of complex tools. Typically, the part "
"of the documentation which describes the behavior of each function is "
"extracted from the specially-formatted source code comments by a tool named "
"gtk-doc which generates DocBook XML and merges this DocBook XML with a set "
"of master XML DocBook files. These XML DocBook files are finally processed "
"with xsltproc (a small program part of the libxslt library) to generate the "
"final HTML output. Other tools can be used to generate PDF output from the "
"source XML. The following code excerpt shows what these comments look like. "
"<placeholder-1/>"
msgstr ""

#: tut_tools.xml:109(programlisting)
#, no-wrap
msgid ""
"\n"
"/**\n"
" * gtk_widget_freeze_child_notify:\n"
" * @widget: a #GtkWidget\n"
" * \n"
" * Stops emission of \"child-notify\" signals on @widget. The signals are\n"
" * queued until gtk_widget_thaw_child_notify() is called on @widget. \n"
" *\n"
" * This is the analogue of g_object_freeze_notify() for child properties.\n"
" **/\n"
"void\n"
"gtk_widget_freeze_child_notify (GtkWidget *widget)\n"
"{\n"
"...\n"
"      "
msgstr ""

#: tut_tools.xml:125(para)
msgid ""
"Thorough <ulink url=\"http://library.gnome.org/devel/gtk-doc-manual/stable/"
"\">documentation</ulink> on how to set up and use gtk-doc in your project is "
"provided on the <ulink url=\"http://library.gnome.org/devel/\">GNOME "
"developer website</ulink>."
msgstr ""

#: tut_tools.xml:15(para)
msgid ""
"For example, writing GObjects is often seen as a tedious task. It requires a "
"lot of typing and just doing a copy/paste requires a great deal of care. A "
"lot of projects and scripts have been written to generate GObject skeleton "
"form boilerplate code, or even translating higher-level language into plain "
"C."
msgstr ""

#: tut_tools.xml:25(title)
msgid "Vala"
msgstr ""

#: tut_tools.xml:26(para)
msgid ""
"From the <ulink url=\"http://live.gnome.org/Vala\">Vala homepage</ulink> "
"itself: <quote>Vala is a new programming language that aims to bring modern "
"programming language features to GNOME developers without imposing any "
"additional runtime requirements and without using a different ABI compared "
"to applications and libraries written in C.</quote>"
msgstr ""

#: tut_tools.xml:35(para)
msgid ""
"The syntax of Vala is similar to C#. The available compiler translates Vala "
"into GObject C code. It can also compile non-GObject C, using plain C API."
msgstr ""

#: tut_tools.xml:43(title)
msgid "GObject builder"
msgstr ""

#: tut_tools.xml:45(para)
msgid ""
"In order to help a GObject class developper, one obvious idea is to use some "
"sort of templates for the skeletons. and then run them through a special "
"tool to generate the real C files. <ulink url=\"http://www.5z.com/jirka/gob."
"html\">GOB</ulink> (or GOB2) is such a tool. It is a preprocessor which can "
"be used to build GObjects with inline C code so that there is no need to "
"edit the generated C code. The syntax is inspired by Java and Yacc or Lex. "
"The implementation is intentionally kept simple: the inline C code provided "
"by the user is not parsed."
msgstr ""

#: tut_tools.xml:59(title)
msgid "Graphical inspection of GObjects"
msgstr ""

#: tut_tools.xml:6(title)
msgid "Related Tools"
msgstr ""

#: tut_tools.xml:61(para)
msgid ""
"Yet another tool that you may find helpful when working with GObjects is "
"<ulink url=\"http://sourceforge.net/projects/g-inspector\">G-Inspector</"
"ulink>. It is able to display GLib/GTK+ objects and their properties."
msgstr ""

#: tut_tools.xml:70(title)
msgid "Debugging reference count problems"
msgstr ""

#: tut_tools.xml:72(para)
msgid ""
"The reference counting scheme used by GObject does solve quite a few memory "
"management problems but also introduces new sources of bugs. In large "
"applications, finding the exact spot where the reference count of an Object "
"is not properly handled can be very difficult. Hopefully, there exist a tool "
"named <ulink url=\"http://refdbg.sf.net/\">refdbg</ulink> which can be used "
"to automate the task of tracking down the location of invalid code with "
"regard to reference counting. This application intercepts the reference "
"counting calls and tries to detect invalid behavior. It supports a filter-"
"rule mechanism to let you trace only the objects you are interested in and "
"it can be used together with GDB."
msgstr ""

#: tut_tools.xml:84(para)
msgid ""
"<indexterm><primary>g_trap_object_ref</primary></indexterm> Note that if "
"GObject has been compiled with <option>--enable-debug=yes</option>, it "
"exports a trap variable <placeholder-1/> If set to a non-NULL value, <link "
"linkend=\"g-object-ref\">g_object_ref</link>() and <link linkend=\"g-object-"
"unref\">g_object_unref</link>() will be intercepted when called with that "
"value."
msgstr ""

#: tut_tools.xml:88(programlisting)
#, no-wrap
msgid ""
"\n"
"static volatile GObject *g_trap_object_ref;\n"
"      "
msgstr ""

#: tut_tools.xml:9(para)
msgid ""
"Several useful developer tools have been build around GObject technology. "
"The next sections briefly introduce them and link to the respective project "
"pages."
msgstr ""

#: tut_tools.xml:98(title)
msgid "Writing API docs"
msgstr ""
