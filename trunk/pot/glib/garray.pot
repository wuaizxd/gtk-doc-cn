# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-04-14 21:52-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_free:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_set_size:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_remove_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_remove_index_fast:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_remove:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_remove_fast:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_add:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_sort:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_sort_with_data:
#: garray.c:1014:1 garray.c:1053:1 garray.c:1139:1 garray.c:1175:1
#: garray.c:1211:1 garray.c:1232:1 garray.c:1261:1 garray.c:764:1
#: garray.c:904:1 garray.c:977:1
msgid "@array: a #GPtrArray."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_remove_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_remove_index_fast:
#: garray.c:1015:1 garray.c:1054:1
msgid "@index_: the index of the pointer to remove."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_remove_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_remove_index_fast:
#: garray.c:1016:1 garray.c:1055:1
msgid "@Returns: the pointer which was removed."
msgstr ""

# #used by: g_ptr_array_remove_index:
#: garray.c:1018:4
msgid ""
"Removes the pointer at the given index from the pointer array. The following "
"elements are moved down one place. If @array has a non-%NULL #GDestroyNotify "
"function it is called for the removed element."
msgstr ""

# #used by: g_ptr_array_remove_index_fast:
#: garray.c:1057:5
msgid ""
"Removes the pointer at the given index from the pointer array. The last "
"element in the array is used to fill in the space, so this function does not "
"preserve the order of the array. But it is faster than "
"g_ptr_array_remove_index(). If @array has a non-%NULL #GDestroyNotify "
"function it is called for the removed element."
msgstr ""

# used by: g_ptr_array_remove_range:
#: garray.c:1092:1
msgid "@array: a @GPtrArray."
msgstr ""

# used by: g_ptr_array_remove_range:
#: garray.c:1093:1
msgid "@index_: the index of the first pointer to remove."
msgstr ""

# used by: g_ptr_array_remove_range:
#: garray.c:1094:1
msgid "@length: the number of pointers to remove."
msgstr ""

# #used by: g_ptr_array_remove_range:
#: garray.c:1096:4
msgid ""
"Removes the given number of pointers starting at the given index from a "
"#GPtrArray.  The following elements are moved to close the gap. If @array "
"has a non-%NULL #GDestroyNotify function it is called for the removed "
"elements."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_array_remove_range:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ptr_array_remove_range:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ptr_array_foreach:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_byte_array_remove_range:
#: garray.c:1101:1 garray.c:1294:1 garray.c:1538:1 garray.c:581:1
msgid "Since: 2.4"
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_remove:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_remove_fast:
#: garray.c:1140:1 garray.c:1176:1
msgid "@data: the pointer to remove."
msgstr ""

# used by: g_ptr_array_remove:
#: garray.c:1141:2
msgid ""
"@Returns: %TRUE if the pointer is removed. %FALSE if the pointer is not "
"found in the array."
msgstr ""

# #used by: g_ptr_array_remove:
#: garray.c:1144:4
msgid ""
"Removes the first occurrence of the given pointer from the pointer array. "
"The following elements are moved down one place. If @array has a non-%NULL "
"#GDestroyNotify function it is called for the removed element."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ptr_array_remove:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ptr_array_remove_fast:
#: garray.c:1149:2 garray.c:1185:2
msgid ""
"It returns %TRUE if the pointer was removed, or %FALSE if the pointer was "
"not found."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_append_val:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_prepend_val:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_insert_val:
#: garray.c:115:1 garray.c:333:1 garray.c:381:1 garray.c:431:1
msgid "@a: a #GArray."
msgstr ""

# used by: g_array_index:
#: garray.c:116:1
msgid "@t: the type of the elements."
msgstr ""

# used by: g_array_index:
#: garray.c:117:1
msgid "@i: the index of the element to return."
msgstr ""

# used by: g_ptr_array_remove_fast:
#: garray.c:1177:1
msgid "@Returns: %TRUE if the pointer was found in the array."
msgstr ""

# #used by: g_ptr_array_remove_fast:
#: garray.c:1179:5
msgid ""
"Removes the first occurrence of the given pointer from the pointer array. "
"The last element in the array is used to fill in the space, so this function "
"does not preserve the order of the array. But it is faster than "
"g_ptr_array_remove(). If @array has a non-%NULL #GDestroyNotify function it "
"is called for the removed element."
msgstr ""

# used by: g_array_index:
#: garray.c:118:1
msgid "@Returns: the element of the #GArray at the index given by @i."
msgstr ""

# #used by: g_array_index:
#: garray.c:120:2
msgid ""
"Returns the element of a #GArray at the given index. The return value is "
"cast to the given type."
msgstr ""

# used by: g_ptr_array_add:
#: garray.c:1212:1
msgid "@data: the pointer to add."
msgstr ""

# #used by: g_ptr_array_add:
#: garray.c:1214:2
msgid ""
"Adds a pointer to the end of the pointer array. The array will grow in size "
"automatically if necessary."
msgstr ""

# #used by: g_array_index:
#: garray.c:123:2
msgid "<example> <title>Getting a pointer to an element in a #GArray</title>"
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_sort:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_sort_with_data:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_sort:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_sort_with_data:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_sort:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_sort_with_data:
#: garray.c:1233:1 garray.c:1262:1 garray.c:1555:1 garray.c:1575:1
#: garray.c:611:1 garray.c:638:1
msgid "@compare_func: comparison function."
msgstr ""

# #used by: g_ptr_array_sort:
#: garray.c:1235:4
msgid ""
"Sorts the array, using @compare_func which should be a qsort()-style "
"comparison function (returns less than zero for first arg is less than "
"second arg, zero for equal, greater than zero if irst arg is greater than "
"second arg)."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_array_sort:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ptr_array_sort:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_byte_array_sort:
#: garray.c:1240:2 garray.c:1562:2 garray.c:618:2
msgid ""
"If two array elements compare equal, their order in the sorted array is "
"undefined."
msgstr ""

# #used by: g_ptr_array_sort:
#: garray.c:1243:3
msgid ""
"<note><para>The comparison function for g_ptr_array_sort() doesn't take the "
"pointers from the array as arguments, it takes pointers to the pointers in "
"the array.</para></note>"
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_sort_with_data:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_sort_with_data:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_sort_with_data:
#: garray.c:1263:1 garray.c:1576:1 garray.c:639:1
msgid "@user_data: data to pass to @compare_func."
msgstr ""

# #used by: g_ptr_array_sort_with_data:
#: garray.c:1265:2
msgid ""
"Like g_ptr_array_sort(), but the comparison function has an extra user data "
"argument."
msgstr ""

# #used by: g_ptr_array_sort_with_data:
#: garray.c:1268:3
msgid ""
"<note><para>The comparison function for g_ptr_array_sort_with_data() doesn't "
"take the pointers from the array as arguments, it takes pointers to the "
"pointers in the array.</para></note>"
msgstr ""

# used by: g_ptr_array_foreach:
#: garray.c:1288:1
msgid "@array: a #GPtrArray"
msgstr ""

# used by: g_ptr_array_foreach:
#: garray.c:1289:1
msgid "@func: the function to call for each array element"
msgstr ""

# used by: g_ptr_array_foreach:
#: garray.c:1290:1
msgid "@user_data: user data to pass to the function"
msgstr ""

# #used by: g_ptr_array_foreach:
#: garray.c:1292:1
msgid "Calls a function for each element of a #GPtrArray."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: SECTION: arrays
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_array_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: SECTION: arrays_pointer
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: SECTION: arrays_byte
#: garray.c:131:1 garray.c:1347:1 garray.c:740:1 garray.c:85:1
msgid "</example>"
msgstr ""

# used by: SECTION: arrays_byte
#: garray.c:1311:1
msgid "@title: Byte Arrays"
msgstr ""

# used by: SECTION: arrays_byte
#: garray.c:1312:2
msgid ""
"@short_description: arrays of bytes, which grow automatically as elements "
"are added"
msgstr ""

# #used by: SECTION: arrays_byte
#: garray.c:1315:2
msgid ""
"#GByteArray is based on #GArray, to provide arrays of bytes which grow "
"automatically as elements are added."
msgstr ""

# #used by: SECTION: arrays_byte
#: garray.c:1318:1
msgid "To create a new #GByteArray use g_byte_array_new()."
msgstr ""

# #used by: SECTION: arrays_byte
#: garray.c:1320:2
msgid ""
"To add elements to a #GByteArray, use g_byte_array_append(), and "
"g_byte_array_prepend()."
msgstr ""

# #used by: SECTION: arrays_byte
#: garray.c:1323:1
msgid "To set the size of a #GByteArray, use g_byte_array_set_size()."
msgstr ""

# #used by: SECTION: arrays_byte
#: garray.c:1325:1
msgid "To free a #GByteArray, use g_byte_array_free()."
msgstr ""

# #used by: SECTION: arrays_byte
#: garray.c:1327:2
msgid "<example> <title>Using a #GByteArray</title>"
msgstr ""

# used by: GByteArray:
#: garray.c:1352:2
msgid ""
"@data: a pointer to the element data. The data may be moved as elements are "
"added to the #GByteArray."
msgstr ""

# used by: GByteArray:
#: garray.c:1354:1
msgid "@len: the number of elements in the #GByteArray."
msgstr ""

# #used by: GByteArray:
#: garray.c:1356:2
msgid ""
"The <structname>GByteArray</structname> struct allows access to the public "
"fields of a <structname>GByteArray</structname>."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_new:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_sized_new:
#: garray.c:1362:1 garray.c:1374:1
msgid "@Returns: the new #GByteArray."
msgstr ""

# #used by: g_byte_array_new:
#: garray.c:1364:1
msgid "Creates a new #GByteArray with a reference count of 1."
msgstr ""

# used by: g_byte_array_sized_new:
#: garray.c:1373:1
msgid "@reserved_size: number of bytes preallocated."
msgstr ""

# #used by: g_byte_array_sized_new:
#: garray.c:1376:4
msgid ""
"Creates a new #GByteArray with @reserved_size bytes preallocated. This "
"avoids frequent reallocation, if you are going to add many bytes to the "
"array. Note however that the size of the array is still 0."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_free:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_append:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_prepend:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_set_size:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_remove_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_remove_index_fast:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_sort:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_sort_with_data:
#: garray.c:1388:1 garray.c:1440:1 garray.c:1459:1 garray.c:1478:1
#: garray.c:1494:1 garray.c:1511:1 garray.c:1554:1 garray.c:1574:1
msgid "@array: a #GByteArray."
msgstr ""

# used by: g_byte_array_free:
#: garray.c:1389:1
msgid "@free_segment: if %TRUE the actual byte data is freed as well."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_free:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_free:
#: garray.c:1390:2 garray.c:271:2
msgid ""
"@Returns: the element data if @free_segment is %FALSE, otherwise %NULL.  The "
"element data should be freed using g_free()."
msgstr ""

# #used by: g_byte_array_free:
#: garray.c:1393:4
msgid ""
"Frees the memory allocated by the #GByteArray. If @free_segment is %TRUE it "
"frees the actual byte data. If the reference count of @array is greater than "
"one, the #GByteArray wrapper is preserved but the size of @array will be set "
"to zero."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_ref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_unref:
#: garray.c:1406:1 garray.c:1423:1
msgid "@array: A #GByteArray."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_array_ref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ptr_array_ref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_byte_array_ref:
#: garray.c:1408:2 garray.c:209:2 garray.c:862:2
msgid ""
"Atomically increments the reference count of @array by one. This function is "
"MT-safe and may be called from any thread."
msgstr ""

# #used by: g_byte_array_ref:
#: garray.c:1411:1
msgid "Returns: The passed in #GByteArray."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_array_ref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_array_unref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_array_get_element_size:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ptr_array_new_with_free_func:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ptr_array_set_free_func:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ptr_array_ref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_ptr_array_unref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_byte_array_ref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_byte_array_unref:
#: garray.c:1413:1 garray.c:1430:1 garray.c:214:1 garray.c:235:1
#: garray.c:255:1 garray.c:824:1 garray.c:845:1 garray.c:867:1 garray.c:889:1
msgid "Since: 2.22"
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_array_unref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# #used by: g_byte_array_unref:
#: garray.c:1425:4 garray.c:230:4
msgid ""
"Atomically decrements the reference count of @array by one. If the reference "
"count drops to 0, all memory allocated by the array is released. This "
"function is MT-safe and may be called from any thread."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_append:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_prepend:
#: garray.c:1441:1 garray.c:1460:1
msgid "@data: the byte data to be added."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_append:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_prepend:
#: garray.c:1442:1 garray.c:1461:1
msgid "@len: the number of bytes to add."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_append:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_prepend:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_set_size:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_remove_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_remove_index_fast:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_remove_range:
#: garray.c:1443:1 garray.c:1462:1 garray.c:1480:1 garray.c:1496:1
#: garray.c:1513:1 garray.c:1533:1
msgid "@Returns: the #GByteArray."
msgstr ""

# #used by: g_byte_array_append:
#: garray.c:1445:2
msgid ""
"Adds the given bytes to the end of the #GByteArray. The array will grow in "
"size automatically if necessary."
msgstr ""

# #used by: g_byte_array_prepend:
#: garray.c:1464:2
msgid ""
"Adds the given data to the start of the #GByteArray. The array will grow in "
"size automatically if necessary."
msgstr ""

# used by: g_byte_array_set_size:
#: garray.c:1479:1
msgid "@length: the new size of the #GByteArray."
msgstr ""

# #used by: g_byte_array_set_size:
#: garray.c:1482:1
msgid "Sets the size of the #GByteArray, expanding it if necessary."
msgstr ""

# used by: g_array_new:
#: garray.c:149:2
msgid ""
"@zero_terminated: %TRUE if the array should have an extra element at the end "
"which is set to 0."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_remove_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_byte_array_remove_index_fast:
#: garray.c:1495:1 garray.c:1512:1
msgid "@index_: the index of the byte to remove."
msgstr ""

# #used by: g_byte_array_remove_index:
#: garray.c:1498:2
msgid ""
"Removes the byte at the given index from a #GByteArray. The following bytes "
"are moved down one place."
msgstr ""

# used by: g_array_new:
#: garray.c:151:2
msgid ""
"@clear_: %TRUE if #GArray elements should be automatically cleared to 0 when "
"they are allocated."
msgstr ""

# #used by: g_byte_array_remove_index_fast:
#: garray.c:1515:4
msgid ""
"Removes the byte at the given index from a #GByteArray. The last element in "
"the array is used to fill in the space, so this function does not preserve "
"the order of the #GByteArray. But it is faster than g_byte_array_remove_index"
"()."
msgstr ""

# used by: g_array_new:
#: garray.c:153:1
msgid "@element_size: the size of each element in bytes."
msgstr ""

# used by: g_byte_array_remove_range:
#: garray.c:1530:1
msgid "@array: a @GByteArray."
msgstr ""

# used by: g_byte_array_remove_range:
#: garray.c:1531:1
msgid "@index_: the index of the first byte to remove."
msgstr ""

# used by: g_byte_array_remove_range:
#: garray.c:1532:1
msgid "@length: the number of bytes to remove."
msgstr ""

# #used by: g_byte_array_remove_range:
#: garray.c:1535:2
msgid ""
"Removes the given number of bytes starting at the given index from a "
"#GByteArray.  The following elements are moved to close the gap."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_new:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_sized_new:
#: garray.c:154:1 garray.c:174:1
msgid "@Returns: the new #GArray."
msgstr ""

# #used by: g_byte_array_sort:
#: garray.c:1557:4
msgid ""
"Sorts a byte array, using @compare_func which should be a qsort()-style "
"comparison function (returns less than zero for first arg is less than "
"second arg, zero for equal, greater than zero if first arg is greater than "
"second arg)."
msgstr ""

# #used by: g_array_new:
#: garray.c:156:1
msgid "Creates a new #GArray with a reference count of 1."
msgstr ""

# #used by: g_byte_array_sort_with_data:
#: garray.c:1578:2
msgid ""
"Like g_byte_array_sort(), but the comparison function takes an extra user "
"data argument."
msgstr ""

# used by: g_array_sized_new:
#: garray.c:168:2
msgid ""
"@zero_terminated: %TRUE if the array should have an extra element at the end "
"with all bits cleared."
msgstr ""

# used by: g_array_sized_new:
#: garray.c:170:2
msgid ""
"@clear_: %TRUE if all bits in the array should be cleared to 0 on allocation."
msgstr ""

# used by: g_array_sized_new:
#: garray.c:172:1
msgid "@element_size: size of each element in the array."
msgstr ""

# used by: g_array_sized_new:
#: garray.c:173:1
msgid "@reserved_size: number of elements preallocated."
msgstr ""

# #used by: g_array_sized_new:
#: garray.c:176:4
msgid ""
"Creates a new #GArray with @reserved_size elements preallocated and a "
"reference count of 1. This avoids frequent reallocation, if you are going to "
"add many elements to the array. Note however that the size of the array is "
"still 0."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_ref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_unref:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_get_element_size:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_ref:
#: garray.c:207:1 garray.c:228:1 garray.c:249:1 garray.c:860:1
msgid "@array: A #GArray."
msgstr ""

# #used by: g_array_ref:
#: garray.c:212:1
msgid "Returns: The passed in #GArray."
msgstr ""

# #used by: g_array_get_element_size:
#: garray.c:251:1
msgid "Gets the size of the elements in @array."
msgstr ""

# #used by: g_array_get_element_size:
#: garray.c:253:1
msgid "Returns: Size of each element, in bytes."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_free:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_append_vals:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_prepend_vals:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_insert_vals:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_set_size:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_remove_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_sort:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_sort_with_data:
#: garray.c:269:1 garray.c:324:1 garray.c:367:1 garray.c:421:1 garray.c:469:1
#: garray.c:503:1 garray.c:610:1 garray.c:637:1
msgid "@array: a #GArray."
msgstr ""

# used by: g_array_free:
#: garray.c:270:1
msgid "@free_segment: if %TRUE the actual element data is freed as well."
msgstr ""

# #used by: g_array_free:
#: garray.c:274:7
msgid ""
"Frees the memory allocated for the #GArray. If @free_segment is %TRUE it "
"frees the memory block holding the elements as well and also each element if "
"@array has a @element_free_func set. Pass %FALSE if you want to free the "
"#GArray wrapper but preserve the underlying array for use elsewhere. If the "
"reference count of @array is greater than one, the #GArray wrapper is "
"preserved but the size of @array will be set to zero."
msgstr ""

# #used by: g_array_free:
#: garray.c:282:2
msgid ""
"<note><para>If array elements contain dynamically-allocated memory, they "
"should be freed separately.</para></note>"
msgstr ""

# used by: g_array_append_vals:
#: garray.c:325:1
msgid "@data: a pointer to the elements to append to the end of the array."
msgstr ""

# used by: g_array_append_vals:
#: garray.c:326:1
msgid "@len: the number of elements to append."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_append_vals:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_append_val:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_prepend_vals:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_prepend_val:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_insert_vals:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_insert_val:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_set_size:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_remove_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_remove_index_fast:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_remove_range:
#: garray.c:327:1 garray.c:335:1 garray.c:371:1 garray.c:383:1 garray.c:425:1
#: garray.c:434:1 garray.c:471:1 garray.c:505:1 garray.c:539:1 garray.c:576:1
msgid "@Returns: the #GArray."
msgstr ""

# #used by: g_array_append_vals:
#: garray.c:329:1
msgid "Adds @len elements onto the end of the array."
msgstr ""

# used by: g_array_append_val:
#: garray.c:334:1
msgid "@v: the value to append to the #GArray."
msgstr ""

# #used by: g_array_append_val:
#: garray.c:337:2
msgid ""
"Adds the value on to the end of the array. The array will grow in size "
"automatically if necessary."
msgstr ""

# #used by: g_array_append_val:
#: garray.c:340:3
msgid ""
"<note><para>g_array_append_val() is a macro which uses a reference to the "
"value parameter @v. This means that you cannot use it with literal values "
"such as |$_1_$|27|$_1_$|. You must use variables.</para></note>"
msgstr ""

# used by: g_array_prepend_vals:
#: garray.c:368:2
msgid "@data: a pointer to the elements to prepend to the start of the array."
msgstr ""

# used by: g_array_prepend_vals:
#: garray.c:370:1
msgid "@len: the number of elements to prepend."
msgstr ""

# #used by: g_array_prepend_vals:
#: garray.c:373:1
msgid "Adds @len elements onto the start of the array."
msgstr ""

# #used by: g_array_prepend_vals:
#: garray.c:375:3
msgid ""
"This operation is slower than g_array_append_vals() since the existing "
"elements in the array have to be moved to make space for the new elements."
msgstr ""

# used by: g_array_prepend_val:
#: garray.c:382:1
msgid "@v: the value to prepend to the #GArray."
msgstr ""

# #used by: g_array_prepend_val:
#: garray.c:385:2
msgid ""
"Adds the value on to the start of the array. The array will grow in size "
"automatically if necessary."
msgstr ""

# #used by: g_array_prepend_val:
#: garray.c:388:3
msgid ""
"This operation is slower than g_array_append_val() since the existing "
"elements in the array have to be moved to make space for the new element."
msgstr ""

# #used by: g_array_prepend_val:
#: garray.c:392:3
msgid ""
"<note><para>g_array_prepend_val() is a macro which uses a reference to the "
"value parameter @v. This means that you cannot use it with literal values "
"such as |$_1_$|27|$_1_$|. You must use variables.</para></note>"
msgstr ""

# used by: g_array_insert_vals:
#: garray.c:422:1
msgid "@index_: the index to place the elements at."
msgstr ""

# used by: g_array_insert_vals:
#: garray.c:423:1
msgid "@data: a pointer to the elements to insert."
msgstr ""

# used by: g_array_insert_vals:
#: garray.c:424:1
msgid "@len: the number of elements to insert."
msgstr ""

# #used by: g_array_insert_vals:
#: garray.c:427:1
msgid "Inserts @len elements into a #GArray at the given index."
msgstr ""

# used by: g_array_insert_val:
#: garray.c:432:1
msgid "@i: the index to place the element at."
msgstr ""

# used by: g_array_insert_val:
#: garray.c:433:1
msgid "@v: the value to insert into the array."
msgstr ""

# #used by: g_array_insert_val:
#: garray.c:436:1
msgid "Inserts an element into an array at the given index."
msgstr ""

# #used by: g_array_insert_val:
#: garray.c:438:3
msgid ""
"<note><para>g_array_insert_val() is a macro which uses a reference to the "
"value parameter @v. This means that you cannot use it with literal values "
"such as |$_1_$|27|$_1_$|. You must use variables.</para></note>"
msgstr ""

# used by: SECTION: arrays
#: garray.c:46:1
msgid "@title: Arrays"
msgstr ""

# used by: SECTION: arrays
#: garray.c:47:2
msgid ""
"@short_description: arrays of arbitrary elements which grow automatically as "
"elements are added"
msgstr ""

# used by: g_array_set_size:
#: garray.c:470:1
msgid "@length: the new size of the #GArray."
msgstr ""

# #used by: g_array_set_size:
#: garray.c:473:2
msgid ""
"Sets the size of the array, expanding it if necessary. If the array was "
"created with @clear_ set to %TRUE, the new elements are set to 0."
msgstr ""

# #used by: SECTION: arrays
#: garray.c:50:2
msgid ""
"Arrays are similar to standard C arrays, except that they grow automatically "
"as elements are added."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_remove_index:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_remove_index_fast:
#: garray.c:504:1 garray.c:538:1
msgid "@index_: the index of the element to remove."
msgstr ""

# #used by: g_array_remove_index:
#: garray.c:507:2
msgid ""
"Removes the element at the given index from a #GArray. The following "
"elements are moved down one place."
msgstr ""

# #used by: SECTION: arrays
#: garray.c:53:3
msgid ""
"Array elements can be of any size (though all elements of one array are the "
"same size), and the array can be automatically cleared to '0's and zero-"
"terminated."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_remove_index_fast:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_array_remove_range:
#: garray.c:537:1 garray.c:573:1
msgid "@array: a @GArray."
msgstr ""

# #used by: g_array_remove_index_fast:
#: garray.c:541:4
msgid ""
"Removes the element at the given index from a #GArray. The last element in "
"the array is used to fill in the space, so this function does not preserve "
"the order of the #GArray. But it is faster than g_array_remove_index()."
msgstr ""

# #used by: SECTION: arrays
#: garray.c:57:1
msgid "To create a new array use g_array_new()."
msgstr ""

# used by: g_array_remove_range:
#: garray.c:574:1
msgid "@index_: the index of the first element to remove."
msgstr ""

# used by: g_array_remove_range:
#: garray.c:575:1
msgid "@length: the number of elements to remove."
msgstr ""

# #used by: g_array_remove_range:
#: garray.c:578:2
msgid ""
"Removes the given number of elements starting at the given index from a "
"#GArray.  The following elements are moved to close the gap."
msgstr ""

# #used by: SECTION: arrays
#: garray.c:59:3
msgid ""
"To add elements to an array, use g_array_append_val(), g_array_append_vals"
"(), g_array_prepend_val(), and g_array_prepend_vals()."
msgstr ""

# #used by: g_array_sort:
#: garray.c:613:4
msgid ""
"Sorts a #GArray using @compare_func which should be a qsort()-style "
"comparison function (returns less than zero for first arg is less than "
"second arg, zero for equal, greater zero if first arg is greater than second "
"arg)."
msgstr ""

# #used by: SECTION: arrays
#: garray.c:63:1
msgid "To access an element of an array, use g_array_index()."
msgstr ""

# #used by: g_array_sort_with_data:
#: garray.c:641:2
msgid ""
"Like g_array_sort(), but the comparison function receives an extra user data "
"argument."
msgstr ""

# #used by: SECTION: arrays
#: garray.c:65:1
msgid "To set the size of an array, use g_array_set_size()."
msgstr ""

# #used by: SECTION: arrays
#: garray.c:67:1
msgid "To free an array, use g_array_free()."
msgstr ""

# #used by: SECTION: arrays
#: garray.c:69:2
msgid "<example> <title>Using a #GArray to store #gint values</title>"
msgstr ""

# used by: SECTION: arrays_pointer
#: garray.c:697:1
msgid "@title: Pointer Arrays"
msgstr ""

# used by: SECTION: arrays_pointer
#: garray.c:698:2
msgid ""
"@short_description: arrays of pointers to any type of data, which grow "
"automatically as new elements are added"
msgstr ""

# #used by: SECTION: arrays_pointer
#: garray.c:701:2
msgid ""
"Pointer Arrays are similar to Arrays but are used only for storing pointers."
msgstr ""

# #used by: SECTION: arrays_pointer
#: garray.c:704:5
msgid ""
"<note><para>If you remove elements from the array, elements at the end of "
"the array are moved into the space previously occupied by the removed "
"element. This means that you should not rely on the index of particular "
"elements remaining the same. You should also be careful when deleting "
"elements while iterating over the array.</para></note>"
msgstr ""

# #used by: SECTION: arrays_pointer
#: garray.c:710:1
msgid "To create a pointer array, use g_ptr_array_new()."
msgstr ""

# #used by: SECTION: arrays_pointer
#: garray.c:712:1
msgid "To add elements to a pointer array, use g_ptr_array_add()."
msgstr ""

# #used by: SECTION: arrays_pointer
#: garray.c:714:2
msgid ""
"To remove elements from a pointer array, use g_ptr_array_remove(), "
"g_ptr_array_remove_index() or g_ptr_array_remove_index_fast()."
msgstr ""

# #used by: SECTION: arrays_pointer
#: garray.c:717:1
msgid "To access an element of a pointer array, use g_ptr_array_index()."
msgstr ""

# #used by: SECTION: arrays_pointer
#: garray.c:719:1
msgid "To set the size of a pointer array, use g_ptr_array_set_size()."
msgstr ""

# #used by: SECTION: arrays_pointer
#: garray.c:721:1
msgid "To free a pointer array, use g_ptr_array_free()."
msgstr ""

# #used by: SECTION: arrays_pointer
#: garray.c:723:2
msgid "<example> <title>Using a #GPtrArray</title>"
msgstr ""

# used by: GPtrArray:
#: garray.c:747:2
msgid ""
"@pdata: points to the array of pointers, which may be moved when the array "
"grows."
msgstr ""

# used by: GPtrArray:
#: garray.c:749:1
msgid "@len: number of pointers in the array."
msgstr ""

# #used by: GPtrArray:
#: garray.c:751:1
msgid "Contains the public fields of a pointer array."
msgstr ""

# used by: g_ptr_array_index:
#: garray.c:765:1
msgid "@index_: the index of the pointer to return."
msgstr ""

# used by: g_ptr_array_index:
#: garray.c:766:1
msgid "@Returns: the pointer at the given index."
msgstr ""

# #used by: g_ptr_array_index:
#: garray.c:768:1
msgid "Returns the pointer at the given index of the pointer array."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_new:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_sized_new:
#: garray.c:776:1 garray.c:789:1
msgid "@Returns: the new #GPtrArray."
msgstr ""

# #used by: g_ptr_array_new:
#: garray.c:778:1
msgid "Creates a new #GPtrArray with a reference count of 1."
msgstr ""

# used by: g_ptr_array_sized_new:
#: garray.c:788:1
msgid "@reserved_size: number of pointers preallocated."
msgstr ""

# #used by: g_ptr_array_sized_new:
#: garray.c:791:4
msgid ""
"Creates a new #GPtrArray with @reserved_size pointers preallocated and a "
"reference count of 1. This avoids frequent reallocation, if you are going to "
"add many pointers to the array. Note however that the size of the array is "
"still 0."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_new_with_free_func:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_set_free_func:
#: garray.c:815:1 garray.c:839:1
msgid ""
"@element_free_func: A function to free elements with destroy @array or %NULL."
msgstr ""

# #used by: g_ptr_array_new_with_free_func:
#: garray.c:817:4
msgid ""
"Creates a new #GPtrArray with a reference count of 1 and use "
"@element_free_func for freeing each element when the array is destroyed "
"either via g_ptr_array_unref(), when g_ptr_array_free() is called with "
"@free_segment set to %TRUE or when removing elements."
msgstr ""

# #used by: g_ptr_array_new_with_free_func:
#: garray.c:822:1
msgid "Returns: A new #GPtrArray."
msgstr ""

# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_set_free_func:
# #-#-#-#-#  garray.pot (PACKAGE VERSION)  #-#-#-#-#
# used by: g_ptr_array_unref:
#: garray.c:838:1 garray.c:882:1
msgid "@array: A #GPtrArray."
msgstr ""

# #used by: g_ptr_array_set_free_func:
#: garray.c:841:3
msgid ""
"Sets a function for freeing each element when @array is destroyed either via "
"g_ptr_array_unref(), when g_ptr_array_free() is called with @free_segment "
"set to %TRUE or when removing elements."
msgstr ""

# #used by: g_ptr_array_ref:
#: garray.c:865:1
msgid "Returns: The passed in #GPtrArray."
msgstr ""

# #used by: g_ptr_array_unref:
#: garray.c:884:4
msgid ""
"Atomically decrements the reference count of @array by one. If the reference "
"count drops to 0, the effect is the same as calling g_ptr_array_free() with "
"@free_segment set to %TRUE. This function is MT-safe and may be called from "
"any thread."
msgstr ""

# used by: g_ptr_array_free:
#: garray.c:905:1
msgid "@free_seg: if %TRUE the actual pointer array is freed as well."
msgstr ""

# used by: g_ptr_array_free:
#: garray.c:906:2
msgid ""
"@Returns: the pointer array if @free_seg is %FALSE, otherwise %NULL. The "
"pointer array should be freed using g_free()."
msgstr ""

# #used by: g_ptr_array_free:
#: garray.c:909:6
msgid ""
"Frees the memory allocated for the #GPtrArray. If @free_seg is %TRUE it "
"frees the memory block holding the elements as well. Pass %FALSE if you want "
"to free the #GPtrArray wrapper but preserve the underlying array for use "
"elsewhere. If the reference count of @array is greater than one, the "
"#GPtrArray wrapper is preserved but the size of @array will be set to zero."
msgstr ""

# #used by: g_ptr_array_free:
#: garray.c:916:3
msgid ""
"<note><para>If array contents point to dynamically-allocated memory, they "
"should be freed separately if @free_seg is %TRUE and no #GDestroyNotify "
"function has been set for @array.</para></note>"
msgstr ""

# used by: GArray:
#: garray.c:94:2
msgid ""
"@data: a pointer to the element data. The data may be moved as elements are "
"added to the #GArray."
msgstr ""

# used by: GArray:
#: garray.c:96:2
msgid ""
"@len: the number of elements in the #GArray not including the possible "
"terminating zero element."
msgstr ""

# used by: g_ptr_array_set_size:
#: garray.c:978:1
msgid "@length: the new length of the pointer array."
msgstr ""

# #used by: g_ptr_array_set_size:
#: garray.c:980:4
msgid ""
"Sets the size of the array. When making the array larger, newly-added "
"elements will be set to %NULL. When making it smaller, if @array has a non-"
"%NULL #GDestroyNotify function then it will be called for the removed "
"elements."
msgstr ""

# #used by: GArray:
#: garray.c:99:2
msgid ""
"Contains the public fields of an <link linkend=|$_1_$|glib-arrays|$_1_$|"
">Array</link>."
msgstr ""
